import random
import math

WEIGHT_LIST = [0.5651697638555899, 4.894308604094488, -2.3208287109162273, -3.554039193489158, -2.320376267325684, -5.291714763430389, 2.8686992904674877, 1.8329058059197352, 0.8045629307919001, -1.109675222612914, 2.588664874431166, -0.00717898442354722, -0.8991295574174307, -0.7606124449584732, 0.23798752482779428, 4.933460063953575, 4.683392844987951, -2.9732235336269217, 2.8386134999926833, 1.8269996482989854, -0.3803993239370084, 4.356249874651516, 4.933594757543574, 5.4112192113929, -2.1100655315089663, 1.6103738409444563, -2.185458818157257, -4.359000703815534, -4.908569978300728, 1.386014810930197, 1.3578896665421858, -1.1157473779715308, -3.40227787790227, 5.261773472939495, 0.9949344728116148, -2.49159821475525, 4.159262572716267, -3.284016447497768, -3.7492951937488987, -1.0282339288239764, 3.8308145646556375, -1.8619895134678235, 0.43776465505756795, 0.16179395347616485, -3.265170851366303, 5.7195922256737175, -7.881815719891134, -1.037782139702674, -4.6149393069858755, 0.8799361616972035, -3.8323912190891254, 0.6736591241865364, -3.577445152778137, 1.8924977947624138, -2.2429724864041507, -1.591972316107579, -0.41297743524862723, -1.982150954445204, 4.8894323060631315, 9.875563513051063, -2.1944468157400423, -4.497312489678665, -4.3169533199680306, -3.5208277583993994, 0.7336211509074367, 0.20069292205749215, 5.3617899397550355, -2.1900927143606115, 1.231408367603639, -0.6879610465151744, 0.45054060871888263, -10.346905475486164, 0.4906582375165652, -3.693836735278718, 0.04762034101714178, -0.9715058841813379, 3.3925212436070002, -9.800600661015727, -0.0705155785686709, -0.5689140200942769, -2.4142248946789624, -1.1158971068657064, -3.257964685561007, -1.2236175648090264, 1.0193117352531225, 4.805115404675653, -1.8378981360191453, 3.989962881166622, 1.3602361497408426, -0.6841060264240715, 0.9927182175037906, 3.7836140764176496, -1.2432949870379721, -1.054831950518112, -1.5740679371877875, 0.5332129499889652, -1.7482419227308539, -1.1310756506080686, -0.6297339225128428, -3.689687956626296, 4.120676735018288, -4.818018103442106, -2.328082361230486, -3.605776046299322, 4.93298922639068, 0.7475036338780346, 2.700115599267606, 2.6921500042578757, 4.958162823434271, 1.8875257541576438, 4.396651502404608, 0.5998717677044367, -0.530353022011328, -4.315119903404873, 4.4553414178931385, -1.707737207109247, 2.561210797226885, -2.772184331477753, 4.559626673583738, 0.5761424601690286, 0.6317776296368459, -0.15235501321673436, 3.5985133607776305, 2.611987964031445, 7.01214338264415, 2.446203805133134, -5.359627811798873, -5.636789726841183, 2.5590159375691712, 0.059996586232167075, 3.625881076621504, 3.8523089893508375, 6.498793133182874, -5.745183083431505, -5.1828749564820855, -5.153029863972207, 5.242871975347396, 3.5069117783978094, 3.573412603949103, 4.560243064128926, 2.073864992941841, 3.4723240787487724, -5.227875768342643, -1.0567698221335307, -3.693147087603125, 2.518085150771334, -3.9490267262507004, 2.486207721807236, 0.4682975157870114, -2.476378943254452, -0.434025917513627, -5.120186335203068, -2.4243739084719405, -0.0022629305702060723, -4.158745833010971, -8.67871629942823, -0.21925776830054458, -1.8181176351548296, 5.467037244791068, 3.8031261377230012, -0.9401468555852522, 3.8463964209195285, -4.5653661841494095, 4.470294197294739, -1.1263215111576936, 0.36667636002487236, 2.1163201045196747, -1.6877625679587818, 3.3707873876481136, -2.5984397843797646, -3.4539335154222996, -2.424014997272894, 2.0672037262320777, -3.2822120522568845, 1.8359504781257707, 0.19620131298695612, 7.311432251238511, 0.131473251633477, -1.2383225102545559, -5.383374022494866, -3.2235281482605695, -1.8813015148426921, 2.1545129412791724, 3.656120477746199, 5.1112286797692015, 1.1352780745325557, -2.6322874009823765, -6.1093332459049, -2.507229966034877, -2.1246784904727782, 0.0811240073028034, -4.284273705212353, 4.576765218898831, 3.2521421004937503, 1.9091588724297732, -0.4251339101186589, 0.7477243400946485, -0.5238373909255715, 1.6931613345162044, 1.7541869120688784, 0.12138622420892126, 0.7070407548926678, 3.032856918745424, 2.4302548628550356, 2.247677196906051, -1.3453817639352057, 1.0346284293836137, 10.589380094471862, 0.5768335111928513, -1.1280912343681007, 0.6084107647532012, 0.7491191501885619, -2.945908548904954, 1.2963228129408018, -0.6559174702469219, -1.75668711739555, -1.6087898872245294, 0.3312132944261236, 1.293346600329046, -0.7484628391001539, -3.930626283339482, 4.082114690217677, -1.5741950082643377, -0.9494517757740197, 4.246046188947037, -3.5321902544010517, -5.023929362993332, -3.3166995658758305, 0.16220867213390927, 1.743412776705833, -5.337486512778696, -1.700328632193632, -4.6825947091489715, -1.6417164846028351, 5.273619826001593, 2.4100806501369183, 4.260883946551307, -1.1657404563282567, -3.618558719078317, -5.943138510671718, -2.5681903102783075, -2.5931596090909115, -3.5997648839464387, 4.858066949592887, -2.6054889555007015, 1.208918780038615, 2.589731551530186, 0.21954529181749424, -0.07759811356182875, 7.126469033798277, -1.5427383659654552, -2.1177994473353166, -2.30124815043798, -4.272764922488974, -4.852392220701036, 1.0125288743284644, -0.4173684894295268, -0.35547195383030006, -5.8117521249218775, -2.5121924499665313, -2.729641431143782, -4.579931301806221, -1.8228200122372635, -5.902690106586848, -3.0645946990368826, 2.686855353933079, -2.373665169095456, 0.5895176183341779, -3.764937501719004, -0.5479192774578522, -1.6610095707421861, 0.1763024681987398, -2.896501349257162, -5.623145548997681, 1.5274233628276803, 2.035273526194103, 0.20360460435494376, 0.9962654866178906, -0.7809039427011839, 0.3715109835650395, 3.950119360182891, -1.0276980333621506, -3.8987224599943144, 3.752987165750678, 6.158153478008827, -0.07829572399673565, -3.37720583787821, -1.8287223589183557, 2.638432511365429, 1.7044839487696652, -2.9770341487546266, -2.694542159704671, 2.5433661564752477, -3.575023225070616, -2.271226872818835, 2.3578235758758423, 8.829705204562313, 5.948319147309491, 1.7955909662935277, 2.0435159228143154, 4.56451207618333, -1.87642781278575, -5.843842658026032, -1.7706845346251607, -2.3786172146210345, -6.866127627481831, -2.8851989992001523, 2.2963487351510508, 5.064721831718809, -1.4283027155268222, 0.6731319931513403, -3.915978172909106, -3.601655532609347, 3.2620831239143104, 1.849628520521922, -1.7813121810127133, -5.656454126283487, -2.4145900007613714, 1.2892659863815394, -5.592122121762971, -5.313910852072968, 1.2793199287038193, -6.793296070127192, 6.401569737682317, 3.42786859165996, 4.6015354647624145, 1.992578012777991, 0.27262619578911834, -1.2692387221959167, -5.5546094407826985, 3.9621077317512334, -0.33934127706282974, -7.432334855634735, -0.1006439320322449, -5.035114174325238, -0.5072903967888922, -1.6802602474151984, -3.450013534672229, 6.515580669019558, -6.782335171387137, -3.238191849348336, 2.6587937827085093, 1.4815502158946614, 4.180786724413375, -5.698885112297466, -4.638638968302953, 1.701699631499638, 4.802483849509294, -4.851119053372827, 4.651349192333339, 3.2589399134633035, -4.026305840246033, -3.3961055367017488, 2.3110431449805047, 2.3458597842565756, -3.3921447142547523, 0.0358511682186517, -0.013764348196384488, 2.819133452957579, 3.2453580165910965, -2.2507469408899023, -2.823334740181028, 4.917172995846724, 6.057046506228133, 5.286727641778111, 0.11307349575759186, -5.8392983814936175, 4.260085465224385, 2.604762847511408, 0.8543364993581055, -3.225137772545358, -4.698881218913969, -3.6689149853868854, -0.8857657504886358, 0.3451210434015072, 2.0692670696169353, 3.9145713239376967, 0.6745720200003855, -5.651878187211229, -5.262509190433836, 0.4235883336619957, 3.4248313224241467, -0.8727018075058677, 3.168353269722175, 0.12707708694608494, -2.87564415750703, -7.227115972792119, -7.881766299352078, -4.59613541026801, 2.46273567853646, 5.615923201180356, -1.705380043961948, 4.704434574546988, 0.507112289637265, 1.4421692356753117, -1.3018554230603865, 0.3409600769890285, 1.1785120611081406, 2.258574455115342, -1.4935542739680903, 4.293674371035896, 5.551105765822156, 2.7125938623530583, -3.4585151133105754, -1.722434781215863, 4.540233885079889, 0.7032222506162454, -2.1469770019625978, 3.8630516722537513, -5.557724118844295, -0.3016198163086675, 0.7839008745112662, 0.9099143709873081, -3.2790128595042622, 0.9615733696591166, -5.6910508504694794, 4.136801391660428, -1.5784165671776083, -0.7130666408370193, -0.9934737723918677, -7.3911599296074035, -1.841133852556944, 0.7572396681974642, 5.230090256424385, -4.341980697967599, -1.1528668677269607, 4.084656066285378, -2.7459616697760114, 0.909190741425888, -1.9310949613717823, 4.3894458638422424, 2.786098515187295, 2.9914083536523868, -5.9098568846750945, 4.94128339589046, 6.1899697580186634, -0.7371429334524934, 0.8101937847366866, 1.5760450178944185, -4.75798783786633, -1.607849943781222, 0.6569851615938029, 2.01059646038732, -1.8283525314717606, -0.3824191944122732, -4.327865326734928, 0.715493329571084, 7.9864476064403, 1.803205504997569, 2.9249485164789384, 2.4113826246358823, 4.516437068069446, 4.9447170529898425, -4.36245923263596, 4.6809986057346045, 0.00416017238150805, 3.6279406629819833, 2.5505764147575847, -0.3787468119159832, 2.5212669610717073, -0.41553300535247123, -5.916733778803867, 7.691375939402847, 3.6834808420037217, -2.0411351355769076, 2.070093813421275, 1.489521337984943, 3.197639534181048, 1.3696525975826124, 3.049178375976761, 5.182527498987271, 1.6574872202800244, -2.3232563439209866, -0.1109553995611008, 2.4903844861430118, 1.3434673218833757, 1.5732712786818106, 6.851269250603274, -4.2710035934516615, -2.462612334477267, -1.1941882393851582, -5.0833816276778, 0.5636394574542648, -4.348419475781626, 2.6955047501182676, 0.39499794837766466, -4.417568268078985, -0.8214050993661486, 0.48686392340485113, 6.2622508206134935, -3.287254872249227, -2.8831951951923194, -0.6915246752232694, -0.23476267164233805, -4.855993975018458, 1.3680673742427192, 2.6046786206405645, 1.8369766921969335, -0.36608000687961967, 2.728275327716591, -0.28876887533592044, 0.1157704651580739, 1.5481322311968262, -4.738444152424776, -1.6558479971871733, 3.607964721520163, 2.872970302815402, 0.494744644190036, 4.260112842201051, -3.061426334698498, 1.8228303591887218, 1.0479541833699433, -3.778343378835827, -1.7928949496698279, -4.908838747067329, -0.9702215737204477, -3.9846374777128246, -1.004248753250277, -5.9672438163596535, 0.29908544415152893, -0.045799864428415236, 7.013179884524568, -1.1911027474918976, 1.103321767662495, -4.019939236630996, 6.960604123755929, -4.082638577284026, -4.136141277444358, 2.045279936154062, 5.1084154444959795, -5.505059643269367, -6.401737901004242, 0.9150464157046908, 4.222037701902593, -0.9075724271208289, 8.068868742706384, 2.528854207870456, -2.2986280094128846, -3.3343560090274815, -1.995759012779755, 1.4614691428131121, 1.0612936332515988, 1.4325758249148015, 9.022178516907818, 3.8076179650103086, 0.5630325237812015, -1.2627131700217895, 1.8126738923748846, 1.4988921720863095, -0.559324480735178, -0.2920464513454644, 5.968270304138148, -0.12689102809100064, -2.792782000344164, 5.403543454528231, -7.766446135790436, 5.2480299204418515, -3.885386031880195, 3.3991305018398803, -1.0143709463009956, 7.812735239431255, 1.9007395738911521, -2.255771873104157, -2.179132214827832, 0.03600867912825993, -0.12000296444417884, -2.4685218689806834, -4.4121027380161255, 2.2069534997542037, 3.9548395667674825, 6.0486121495313006, 4.87203029453159, 2.253833102448246, -2.150992414746246, 0.024959014795613382, 1.8520183386532918, 3.7155434321668217, 8.937997449354969, 0.3950373826080088, 0.22594972105656763, 9.604148525904193, -0.6140068544228398, 0.5337693965627369, -3.1885828214052396, -2.550090282821033, 5.77551118957657, -2.3582863132431764, -5.448870109891436, -0.24326464519241672, -7.364223715302813, 2.417321900563978, 3.0772581224398565, 6.112095944623602, 4.95803703783487, -0.9466397785486408, 3.8080688738986197, 2.918816490120192, 4.115545633894085, 6.786088777342777, 1.3855125687485539, 2.302457778936143, -4.255168945926027, 2.016955957766683, -7.722644270348282, 2.159597087358796, 1.2658883559704592, 1.222174970092955, -5.140830568970323, -4.539299161595452, 2.356639004907205, 3.034124692338491, 4.272622160509158, -9.145283062278127, -2.421635751800358, 7.445823494198435, -1.352605052776707, 1.441293645432993, 5.82618696392178, -3.469488553559315, 3.1583941413819576, -2.0142045322694466, -9.986809473835514, -1.0448954299343158, 1.4796068013548054, 2.9048352416016456, -0.9051690760569665, -0.6983943377616949, -0.813886194227268, 2.282856723528349, 2.4802594225983294, 3.2237033170080713, 0.28391610833911923, -1.4115117264479409, -4.286720501578612, -3.224899876845869, -3.423035803448086, -0.7099263243071244, 0.8625160593797209, 4.218607506028486, 1.9545500177291764, 3.1808636775283388, 3.1139600353941446, -1.4376652269118964, 0.16143979555428103, 0.9578974034995745, -3.089070041866744, -1.6455931568886213, 3.484270433574267, -4.024383466629917, 3.362808626330464, 0.5763646518841403, -3.6844621979462815, 3.442583285924476, 5.92064450076886, -0.4388539911144628, 3.2302783428927904, 0.3837732484548121, 1.85365218853412, -0.9164935399591045, -0.2067187956629034, -5.257266537351069, -3.3618434550343967, -3.714930178432795, 2.3387698926478895, -3.904113581557064, -1.5355374270012137, -1.1377784724153572, -2.0697449355285653, -4.898565717437605, -3.866306660992743, 1.9815510874040825, 5.676474688245818, -0.20449855219939572, -1.8163367669055572, -1.3623314428351845, -4.282652060005263, 2.3476700856806376, -1.5546425758438502, 6.683376021427475, -2.6711874247648755, -4.750285196587783, 7.895747257049539, -2.0437951481843983, -3.2866655807574916, -5.163864785697575, 3.0041238460319337, 1.514601005794239, -3.55168794538878, -1.3669642212800384, -1.5939647464223976, -4.804210747437219, 3.333256322594079, -1.3070222361236745, 4.38415627802573, 4.624073170566657, 4.284871074378897, -4.917976087270941, 3.6511458020140464, 0.23425405175226854, -3.39517756667649, -0.3638434847476102, -4.746291841170402, -3.5394499727869753, -2.073089281650696, 2.5211216667514607, -3.4084653795319744, -4.682656598740679, 1.4223731846136338, -2.7587785989285143, 2.0110216963932652, 0.47206787501289305, 1.6658882019723713, 3.973396606505874, 2.9344525611035674, 2.7890736809380403, -5.864642958812841, 6.991459024118866, -1.3582527118707481, -3.482358639928522, -2.849964947402375, 0.14789148209325145, 1.4938264697660957, 3.0312279550066648, -3.595467438591899, -1.0513214973274279, -2.7616807709437055, 0.5930918796478715, 2.1824640708983423, 6.1255316845960825, -2.7619632963474197, 0.09347338658551613, 1.4750955471383567, -1.2488794468573616, 0.739970943207654, -5.732567595002242, -0.8460535107932412, -2.389908776405834, 2.352630312728057, 3.771655407208798, 6.9275000233009, -0.873314154798347, -2.235522675391042, -7.98024810675355, -4.324006143422795, 2.9936757083603585, 4.2243482517094035, -4.421055399306037, -1.7788530436624812, 0.9715419725341845, 7.596938024216095, 3.749356893654992, 4.876006651037885]
BIASES_LIST = [-1.3910843259099683, 3.7049113897900163, -3.6189001268749696, 4.7899720511664166, 6.337854640654097, 2.7704232984126302, 1.0977178065487687, -0.08161086167412258, -1.105423044774359, 2.661715640076552, 2.124542586747533, -1.3683817749950302, 0.0013236331774530577, -2.627429505557753, -5.499819195791866, 5.259986638721954, 4.814528928271528, 1.4793067315710218, -6.573072826800489, 0.020216447246419845, -5.068258271415966, -2.797076839892797, -4.065808179720604, -6.0945511032094855, 3.923183496518654, 2.656521975213762, -4.033007883782335, 2.917099867970474, -1.093836248343422, 2.3048470319750285, -0.3485128587709934, -2.288690811202452, 7.119751051690175, 1.8561004292083965, -1.6812182172690968, 0.44520618945172946]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i
    
    caps = []
    if board[3][1] == -1:
        caps.append(-1)
        if best_move == 2:
            capture(row + forward, col-1)
            return
    if board[3][3] == -1:
        caps.append(1)
        if best_move == 3:
            capture(row + forward, col+1)
            return
    if len(caps) > 0:
        r = random.choice(caps)
        capture(row + forward, col+r)
        return
    
    if best_move == 1 and board[3][2] == 0:
        move_forward()
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

