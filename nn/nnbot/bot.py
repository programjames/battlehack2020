import random
import math

WEIGHT_LIST = [0.5787289298449751, 4.89768459305329, -2.320484402930363, -3.548963188002827, -2.3226508442811014, -5.287629885778612, 2.8633733060732935, 1.8270444157897987, 0.8054478505403971, -1.1107122240270366, 2.604635107088136, -0.016278305105750485, -0.9025909473699378, -0.762907562467424, 0.22801463456981766, 4.930513338772276, 4.681409086030248, -2.9610706334877124, 2.8416963309535657, 1.8313478857394896, -0.3686935545214232, 4.345278844419504, 4.93083533482373, 5.405758417844418, -2.1133847132917323, 1.6046729612088109, -2.193791157191426, -4.365420272046212, -4.908604227286003, 1.3864561380241378, 1.3688586565824292, -1.1166868713263782, -3.404973381291083, 5.254533769194132, 0.9946941434776684, -2.4949382767118236, 4.1448134724274714, -3.2919199385246367, -3.7575667778512742, -1.0249712818005665, 3.825110360626341, -1.8652115019072881, 0.424151911195824, 0.17148124494051847, -3.270730763345711, 5.723479593003258, -7.867394842022764, -1.0364985996073737, -4.599500846487291, 0.877482444964623, -3.8465040121192984, 0.675076835723428, -3.594690641792122, 1.8865572839942042, -2.2407824919594566, -1.59600046808005, -0.4001991547378554, -1.9798795465786336, 4.890565869706483, 9.87093912906436, -2.1972500337296363, -4.492601377173363, -4.310336696563665, -3.521026005710194, 0.736574055413207, 0.18736728406971181, 5.359257497947216, -2.20131437957415, 1.2279066927736644, -0.6835937313409657, 0.45050286044544324, -10.345154397060499, 0.4855904690849543, -3.699597161490197, 0.03528563477589078, -0.9767726360905286, 3.38936156068017, -9.791593978116117, -0.06677092949464042, -0.5676447334930675, -2.411443235693212, -1.102795596272053, -3.2577956391278002, -1.2172400085440667, 1.0244431072623927, 4.814158397759398, -1.8359604208082243, 3.996058027254771, 1.3651130615167941, -0.6784811499017047, 1.0010545969437648, 3.7893681832986, -1.2410423619048558, -1.067548177687421, -1.5740345790033934, 0.5381827205157491, -1.7482698080935095, -1.130446696697826, -0.629346348719935, -3.6936967448941114, 4.121575893628784, -4.812000368618863, -2.3370429487827193, -3.6133664356238624, 4.931077764100555, 0.7481375813130746, 2.6977714303124163, 2.68783835958658, 4.963982486873328, 1.872916326816839, 4.391688469113666, 0.6102916163593053, -0.5299493966445917, -4.320570633607817, 4.464135610226592, -1.7163426021908876, 2.556274273695755, -2.773255456208244, 4.555071075399752, 0.5666948080868746, 0.6176018779636057, -0.1554424760570803, 3.6004136414845664, 2.6043551829018017, 7.005355009993655, 2.4447809332123733, -5.373337513636427, -5.634767161897146, 2.562964992184865, 0.056655450005266686, 3.6189483603905908, 3.8524788949650706, 6.502433618803085, -5.741851243076107, -5.185695565537335, -5.15595336893992, 5.244242027049036, 3.503849377641878, 3.5645843070497736, 4.55493748306568, 2.0731010086082167, 3.4788428693259146, -5.225253044445909, -1.0528206575184529, -3.679855618955493, 2.505479367819447, -3.9463973439184437, 2.486826048285955, 0.47015737507021466, -2.484317729572004, -0.4297086856472552, -5.105230348254006, -2.4140538992962366, 0.005517502044626193, -4.1381900723425336, -8.690535513769449, -0.2182973749207909, -1.8286890691796716, 5.457110518599292, 3.8036701582199717, -0.9464815467107804, 3.8399149852803323, -4.55283799480226, 4.477381267807689, -1.1350733889980071, 0.3696438336453073, 2.114913305895935, -1.7056486058293774, 3.374717450551359, -2.604164828415163, -3.4598547695895046, -2.4202177935481823, 2.0617295907417788, -3.285493391112177, 1.8331254754623831, 0.18409756476926917, 7.300942171763319, 0.131295468522297, -1.232048045909136, -5.364051165155328, -3.230112802289701, -1.8837062085499978, 2.151239573102937, 3.6449778021393766, 5.11791158905578, 1.1371455127132075, -2.6347121207664643, -6.095634263118967, -2.5045429938879042, -2.133854391283288, 0.07896052598306684, -4.284552479313088, 4.575910222183949, 3.248887545190296, 1.9102719885115387, -0.42171144720289555, 0.7503100622692266, -0.5259356826855522, 1.690602097379828, 1.7664126661496098, 0.13414833011011898, 0.7055591522616054, 3.033692037246644, 2.434959491615274, 2.255919670741563, -1.340258182096216, 1.0405590023668145, 10.575662735417557, 0.5929563311900531, -1.1323709189415734, 0.6032506621008614, 0.7587653938918985, -2.9352483770984272, 1.2935509242265497, -0.6557726626078367, -1.7471870748750447, -1.6145629294098593, 0.32571872749673686, 1.3016783278554782, -0.7395033803580102, -3.9173178277182052, 4.083155943334077, -1.5697291869657084, -0.9468801078282643, 4.255878335858633, -3.521737482931616, -5.023109608388796, -3.320841772365344, 0.15728786038338816, 1.753251145326331, -5.334979434782917, -1.703588315129138, -4.674728699233113, -1.6412970081196945, 5.27278818272007, 2.4101870080657286, 4.266618139110813, -1.162476998055828, -3.6284934834841853, -5.9384479106591925, -2.5624431906294944, -2.5947625650509063, -3.5832038810633144, 4.848459521991568, -2.6002227102962676, 1.2171178485556702, 2.5867228765690795, 0.21295715808152046, -0.09842092357344416, 7.128327701848601, -1.537272353114286, -2.1130609014462785, -2.29878897873791, -4.2608595685392165, -4.863769676141656, 1.003959599351996, -0.42254359048259993, -0.3578077647760682, -5.812879308067893, -2.5119349162092055, -2.7218192863263675, -4.580151150387997, -1.83607808383675, -5.89510489175382, -3.0587825287991115, 2.6893508120500287, -2.3781102507960505, 0.5995066620943463, -3.7624099917541893, -0.5444990998449715, -1.6463187269715758, 0.1685674663315452, -2.8871661348122, -5.6227603113177755, 1.5127403711301028, 2.033580428025706, 0.20820294804043443, 1.0011255870880347, -0.7819797347651223, 0.3712765124580303, 3.95372186617521, -1.033777888300599, -3.903598687373844, 3.7477717294020003, 6.1607982700829895, -0.06989936936663654, -3.372372648702222, -1.8207342459937323, 2.6496192679921893, 1.7011952715639367, -2.98615742648784, -2.6871504930695265, 2.549811546286948, -3.5719674818866713, -2.257128749014928, 2.3712445709349117, 8.840140487166233, 5.94528177260489, 1.7975651937708417, 2.046083697195544, 4.565419038939729, -1.868342336879, -5.839485184430355, -1.7662777178181945, -2.3750333326326665, -6.865289922550837, -2.884159190101404, 2.305037130546761, 5.063902178289026, -1.4174562764377572, 0.6762709834020395, -3.912239790680466, -3.593504460751447, 3.2764616671424553, 1.849980927442156, -1.7723624130508546, -5.661477817889612, -2.4144323481377734, 1.2925447372712409, -5.595687187838727, -5.311296271880276, 1.2762026496772816, -6.803468398877475, 6.400162578050428, 3.4428597167903505, 4.591525106271232, 1.9894098360864605, 0.2828777452175973, -1.2683202422454765, -5.55662842457435, 3.94948730773075, -0.34867633944440135, -7.432491856594071, -0.10380941695073463, -5.025278949542566, -0.5032549682473941, -1.6852201493319408, -3.4626912096019598, 6.508181755835034, -6.773490380892569, -3.2357089955658758, 2.666980721315565, 1.481000856508113, 4.203646734537858, -5.696527798268751, -4.633189948568068, 1.7043583105796587, 4.805268188059488, -4.851088291928222, 4.6553062240665, 3.2535754246239774, -4.015384510412507, -3.393374818608474, 2.3106392695172526, 2.3417171724442762, -3.398635931162675, 0.04811509037152488, -0.020421444662870148, 2.8029207430005076, 3.2457160458106746, -2.2497870592561324, -2.8139882457236802, 4.921973714178588, 6.047603580128815, 5.288287796480297, 0.11705514579938749, -5.8453904614339995, 4.271102880067502, 2.6153609694468702, 0.8452687019478827, -3.2169465830464836, -4.714126527309388, -3.653587013402062, -0.8911027456202405, 0.33738442083754233, 2.065753592043143, 3.914300625205135, 0.6779924303629049, -5.651794139037127, -5.263232294057875, 0.4244475759815216, 3.4092297256657242, -0.8759356236561221, 3.157284314262965, 0.12545049003575612, -2.8748870048328965, -7.243360951393483, -7.883537372263309, -4.602139357086139, 2.4716287895802393, 5.601057660411755, -1.7072632001685708, 4.69890099307759, 0.5104339525017896, 1.444182991325681, -1.2984095969403815, 0.3401893177132249, 1.1764946724692786, 2.2610198951997282, -1.4924334716439485, 4.2861561607693, 5.548770144392789, 2.715939069156393, -3.449558621769465, -1.7211767306766979, 4.549549057523656, 0.7046838325780567, -2.1548766665259107, 3.8698107593301097, -5.558199598750687, -0.2910501620716357, 0.7944450453395316, 0.9006880988285497, -3.2878658006529022, 0.9874087807968257, -5.688646815712063, 4.130987631177789, -1.5767755524956175, -0.7089092412770142, -0.9931528363686243, -7.403635038131213, -1.8464096803182843, 0.7585322815703843, 5.219371595605843, -4.339757923307727, -1.1401918067171084, 4.087857597324893, -2.752878392302278, 0.913279185510893, -1.9259607243394061, 4.397536300972882, 2.781739805717227, 2.990832737077259, -5.896254240231213, 4.952070322592114, 6.197086182693879, -0.7403192086343142, 0.7940356130937022, 1.5782924087450754, -4.7697522371495795, -1.6099857248612275, 0.6579701893583512, 2.0149137079283586, -1.824432224119686, -0.37947506608411763, -4.316295400650864, 0.7143069473544333, 7.99351146426952, 1.80286077072574, 2.931829107579638, 2.412486225483436, 4.517589939561039, 4.92662294565749, -4.3677051990863704, 4.695187516664339, -0.00121304607115249, 3.6347506145239383, 2.560600132325737, -0.387010112261169, 2.5195055880535357, -0.42321843127693715, -5.921198634007865, 7.7005956643686995, 3.678615195743587, -2.0413856750287303, 2.0713101501914535, 1.4880910793018836, 3.185762675654444, 1.3699265643983114, 3.0443834881783594, 5.184497853648157, 1.6723034019190013, -2.3162745462643035, -0.1044744259964349, 2.49446425520152, 1.3436305127270758, 1.5744792042990319, 6.844754877011124, -4.269209360904525, -2.4655899978570073, -1.1999082771717697, -5.090809295731121, 0.5724112562703415, -4.357924963011295, 2.6959175170375467, 0.3888775164030519, -4.400020968736723, -0.8184842102950457, 0.49458536098858985, 6.251213528633621, -3.276987643741188, -2.8764364604799377, -0.6953227328617287, -0.2408742229446894, -4.852690286306751, 1.3641651676809248, 2.6097716973443212, 1.843927934755063, -0.37199824286266076, 2.7383196736453987, -0.28324173515035844, 0.1166966605511823, 1.5467102685336283, -4.748704766286414, -1.647252707921268, 3.621360104282859, 2.8632602562685703, 0.4936237291112745, 4.260917264966473, -3.055459165218543, 1.8301489620654485, 1.045131817240535, -3.775172985044869, -1.7828105009801114, -4.9235657813950535, -0.9661032764800586, -3.99149097582734, -1.0028689394813175, -5.967148756557464, 0.30451126133319006, -0.04820037499442468, 7.020082382576866, -1.189263446557711, 1.1115165622905347, -4.0177232814470125, 6.952064455457881, -4.075481739343125, -4.129964990846915, 2.047329798668441, 5.112520897318329, -5.507355738777656, -6.411415103049714, 0.8963495592842279, 4.226302650833027, -0.9060495552003043, 8.068459347031222, 2.519543004904975, -2.2987080776806272, -3.3437955539606294, -1.9803553917392867, 1.4576205062657637, 1.0598676833929495, 1.4421121789599982, 9.017933780226246, 3.8088894084760003, 0.5705387485782953, -1.2728257294950343, 1.7974779371981946, 1.5089669489579485, -0.5565667880019264, -0.2738443530353775, 5.967868325104796, -0.1190413311121381, -2.786078639788684, 5.411152261869768, -7.756553058077337, 5.258524789503862, -3.8863421477044624, 3.40136340539519, -1.004832433659217, 7.8045396579685224, 1.9003405080583737, -2.2479249995241184, -2.1747068204473927, 0.04763362050105291, -0.11413359484259379, -2.4604001476375905, -4.4171896406447, 2.208541887457652, 3.9603441673099806, 6.052694041220041, 4.87539753838246, 2.2588695544317665, -2.146595966026179, 0.028819736777120505, 1.844323277581978, 3.7068716464274374, 8.941905318263073, 0.4031992311992367, 0.2235340158433626, 9.606247650874122, -0.616000931690138, 0.5357880031219476, -3.1906156803205983, -2.548438904600603, 5.768051805740944, -2.3512198177176744, -5.467237137861061, -0.23994153310468225, -7.3629192276637205, 2.4150691079593307, 3.089284409917471, 6.115359448417726, 4.945523258861692, -0.9475523188560967, 3.8023080405898257, 2.9187032608269243, 4.1159882787534325, 6.791659823103379, 1.3943190727846309, 2.30224454273412, -4.2634968965114375, 2.0188538662363906, -7.72886791650468, 2.1564612810866004, 1.2632446901722734, 1.2294709420014447, -5.12578616412605, -4.54739175061255, 2.3564259985990983, 3.0246148332956904, 4.283695480867065, -9.14556271159292, -2.425572588272995, 7.449698556815672, -1.3554927878536571, 1.4441689310080967, 5.837514531465676, -3.466694294517595, 3.1660174020381375, -2.02308679289164, -9.99124491584946, -1.0579367659653656, 1.4748391354436445, 2.8996476272175324, -0.9145664612496581, -0.7018767635733295, -0.8183323200556162, 2.286028977731557, 2.4955029396326776, 3.2280411541682263, 0.28095298725408496, -1.4074993983941837, -4.278757295930192, -3.225699461398071, -3.4117369540404416, -0.7058376914428345, 0.8665168208362305, 4.2221146050911695, 1.9590811615913986, 3.1760802081893718, 3.12461680397018, -1.4404494491159816, 0.1571838271422657, 0.9580715484746067, -3.086477748435414, -1.6312322610942098, 3.4767789057328136, -4.013977682650713, 3.356992935391578, 0.5735794478399774, -3.694854874526549, 3.442794290842138, 5.925587807001149, -0.4355915751424435, 3.2165496538992455, 0.3771748447881435, 1.854789484139325, -0.9064447640216029, -0.2029016994732012, -5.271001421463226, -3.3591274886624567, -3.7131708498463674, 2.3461930557557658, -3.8969847113513256, -1.5330956958758146, -1.131747969397308, -2.0619631044060713, -4.9133640537756325, -3.8702617071450365, 1.9860085214363783, 5.681705986764947, -0.2071887808720165, -1.8210286050937103, -1.3591702957303675, -4.277846418235855, 2.3411334571555944, -1.5472308996108994, 6.6891624104369285, -2.678379722312339, -4.744118590672799, 7.889941075243373, -2.0361705470569174, -3.2908141988838224, -5.15624457930505, 3.008685407343705, 1.5161129696739617, -3.5563215743099263, -1.3650850187722725, -1.603563158999312, -4.799611940755785, 3.3368230558765615, -1.2951940896966825, 4.386764201764904, 4.631004222855952, 4.2745299992520485, -4.907429194666639, 3.6501283807135745, 0.248673253108571, -3.4079050738662264, -0.36368290146865534, -4.738913201521129, -3.5343095636005106, -2.0676725459728, 2.5195915769131143, -3.4067290321741197, -4.688872861172352, 1.4270872661345457, -2.7563463458592103, 2.007853017267593, 0.46957774679438724, 1.6716068643221147, 3.9672772906520932, 2.9394600374994546, 2.7815839277872305, -5.855744334593532, 6.984756147342788, -1.3689099878141566, -3.4751095633953573, -2.8496067407324985, 0.1401239966398724, 1.4958757250920056, 3.0343013482480514, -3.5979544561839902, -1.0694828409760446, -2.764988230289432, 0.5918215228658901, 2.188169722924268, 6.122059808793002, -2.760200957868152, 0.08009766056402841, 1.4693581274730043, -1.2618138631520808, 0.7426925608608823, -5.725990182513835, -0.8440535744599545, -2.391645600640515, 2.3606929083845554, 3.772709668774431, 6.930499876468887, -0.8775722404850923, -2.2341481313262905, -7.987144609176249, -4.323734505902189, 2.9990804632446064, 4.212497654187807, -4.404354831755118, -1.77061788886582, 0.9727572205582476, 7.591257920417282, 3.75212456547585, 4.870757391964712]
BIASES_LIST = [-1.3799282697445008, 3.7018486246209035, -3.6043284722992532, 4.782123028698312, 6.329806660139185, 2.762162310953219, 1.0992103376346345, -0.07933842308428653, -1.1140661166045938, 2.657286567077674, 2.1307342620796974, -1.3709852325540048, -0.006426353291896445, -2.6153859723105137, -5.506363117013042, 5.266195119993484, 4.818123358452729, 1.4729824297625573, -6.577014475606178, 0.016015918092419684, -5.0777257667382205, -2.801273408995354, -4.078917377105544, -6.077633107384188, 3.918233544787466, 2.6420906310341943, -4.02796636692737, 2.912270461508566, -1.083596947382884, 2.292678904540408, -0.3358033558709239, -2.2887683213088073, 7.135739854013733, 1.8555462849934101, -1.6866757243579091, 0.4498241250281964]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

