import random
import math

WEIGHT_LIST = [0.5599678926602903, 4.9054076483952205, -2.3134773198803913, -3.5459256773924044, -2.320259983927611, -5.294831881160603, 2.8758120677400174, 1.832502328980724, 0.7978484668020288, -1.0982677212483893, 2.599385820920756, -0.012005300299603519, -0.909519689315154, -0.7671916430697746, 0.23355619458805116, 4.936376921100725, 4.677850890473541, -2.9819295193453748, 2.837496128174744, 1.8313038725135276, -0.3664871033680045, 4.347250172210416, 4.935438601420228, 5.413823856537828, -2.110931387786003, 1.6089400138427798, -2.1882658520483314, -4.35638989069658, -4.911853888725015, 1.3809046587224685, 1.3683577638199536, -1.1168340375195749, -3.394282860143061, 5.261259847828717, 1.0043439698947008, -2.4944839225780107, 4.158800793707692, -3.2859198726179275, -3.752604054323624, -1.030487117302359, 3.82651733017061, -1.8547983162053103, 0.42691596711263885, 0.16312823530017348, -3.2740659356178976, 5.718746243240416, -7.8797691770932445, -1.0360371678567595, -4.6172785448391105, 0.884962896179225, -3.843879050225244, 0.6823965396511745, -3.5776130766128236, 1.8865838477217873, -2.2523499171896755, -1.582179260488425, -0.41274099013126625, -1.9727057912973864, 4.8839246329544705, 9.87509182530298, -2.1907661690055353, -4.493137968249681, -4.32216948103606, -3.528136106315924, 0.7266244018346562, 0.1992981531497112, 5.354405373058229, -2.2039905938684603, 1.2315638552682926, -0.6810043804750022, 0.4531613790541016, -10.346126374654192, 0.48715716176968427, -3.685161918876614, 0.04780344645923627, -0.9653059873706349, 3.395231344287128, -9.798178612183817, -0.07218876418360572, -0.5634768198904038, -2.418557766529433, -1.1097747696555165, -3.2551290511236104, -1.214823611939179, 1.030559548163009, 4.815472069466386, -1.8327321701924144, 3.990285881028759, 1.359315466139617, -0.6907560217934329, 1.0033337816161023, 3.773050485213175, -1.2488877633709288, -1.0519943459816894, -1.5710577086792237, 0.5336965214114111, -1.7501267797522402, -1.1342163633546787, -0.6319561407095939, -3.699113252936946, 4.1136579992730775, -4.826134898913808, -2.327767655805957, -3.6075319236995007, 4.932961125025746, 0.7416695166266932, 2.6994326387880223, 2.678700435034208, 4.961225496973172, 1.8890591246853468, 4.391796562435191, 0.6091057017512249, -0.5302573720680422, -4.31236027641784, 4.454627790501269, -1.710351567779856, 2.551557630574755, -2.768864818755522, 4.564695806701992, 0.5737921161425265, 0.6319516286641287, -0.157316275554396, 3.5990549005913492, 2.616731674839713, 7.009037347404195, 2.4431386227225924, -5.364014973588965, -5.629152635732033, 2.5524034958383903, 0.05682710894057312, 3.6209999495048684, 3.841819136766121, 6.50262164912449, -5.737486888403818, -5.185522334702379, -5.168989971369258, 5.2466326564584085, 3.5094692718639706, 3.571228713400844, 4.550339665768828, 2.0760126869251594, 3.485222407703466, -5.222967380387352, -1.0582695261729065, -3.6847198125204272, 2.5199620026706824, -3.9492693421555214, 2.4823530343840003, 0.4692754462319074, -2.4793024865188946, -0.4263856138915425, -5.110649295311546, -2.4153810465257664, 0.006087995299551251, -4.152236242687495, -8.680025057537623, -0.21554984751603576, -1.8112477360459964, 5.460859443110853, 3.803103458493357, -0.9441320217808329, 3.847367294935971, -4.557725834396814, 4.472006350278377, -1.1217063331647528, 0.3587800731315459, 2.1104810654791786, -1.68276047659933, 3.3736884532025546, -2.610650909263312, -3.4486574332703124, -2.4214619783206857, 2.06937572873743, -3.2915864068106275, 1.8374514958385653, 0.20219451141263955, 7.306405092931419, 0.13189228247949786, -1.2321320628350108, -5.376469809551442, -3.219101608143462, -1.8846715906514164, 2.1481838050358726, 3.656217850529652, 5.11439219054293, 1.1332533234800097, -2.638644745988472, -6.104438950916383, -2.5100619331206806, -2.132194582511367, 0.08025199416416119, -4.286464786088246, 4.5745254451799475, 3.258579724711824, 1.9174394863221922, -0.42344172546586656, 0.7529421591095427, -0.524342110782858, 1.6934289035279304, 1.7663853950344623, 0.12722657779103652, 0.7034014510972869, 3.0377203470873364, 2.420553748471243, 2.250796870553698, -1.346377998055702, 1.031220022732996, 10.572898337346942, 0.5711675966869044, -1.128434621754818, 0.6087559107270804, 0.7490637133770885, -2.9448982927748815, 1.3030292254869424, -0.6560408258439036, -1.760718949092285, -1.6121398495343424, 0.33458509818505394, 1.2982567889119407, -0.7534733082024836, -3.918629222640414, 4.086539671417262, -1.5752712922340972, -0.9532261789813656, 4.245660473107236, -3.5173968444913366, -5.026427728118842, -3.3284228849705384, 0.1641712945067013, 1.7349730276859594, -5.3355820173085196, -1.7002204023076353, -4.684752506469063, -1.6362288131647402, 5.27590305135737, 2.4022414753933132, 4.274067124483672, -1.1681557613304125, -3.622896692271435, -5.93596114513798, -2.5728206254272816, -2.591632291371754, -3.598215897853881, 4.8574878014377445, -2.5949500649996513, 1.208273119616003, 2.588936161701457, 0.2203198743096519, -0.08361832179345118, 7.128571531099556, -1.5460106830908307, -2.1190483368026842, -2.2925806299913054, -4.273717315262396, -4.851780595580075, 1.0285805303175584, -0.4116003024368074, -0.361709963641177, -5.81742233123784, -2.51111203181434, -2.7359442803938028, -4.5841109117365555, -1.8305083556669246, -5.899625591091411, -3.0665701560380834, 2.689923389443247, -2.374163837467044, 0.5973416827010032, -3.756551864436165, -0.5552988242107953, -1.6464711625276303, 0.16117332112204966, -2.901332186454953, -5.615407940261643, 1.528035551371931, 2.0336195182749206, 0.19908501732463582, 0.9994624812173089, -0.7761276574758298, 0.3702010353707972, 3.951634835617139, -1.0326678180567825, -3.8981173152915063, 3.7606409230863047, 6.159968676501861, -0.07481143675587366, -3.3887346397276796, -1.825234833863811, 2.6422529633658036, 1.7042959378130815, -2.9705502459311304, -2.6908158648362543, 2.5487318988852548, -3.5762513992824942, -2.2626526460960754, 2.3538170077691802, 8.833151956421451, 5.952294348242685, 1.801876639977936, 2.0480128036340712, 4.55702224895871, -1.8818430330988947, -5.854552445637721, -1.7750149937032507, -2.38254420646028, -6.861823633511186, -2.8828230111898687, 2.29195360987106, 5.062706029402229, -1.4247746924420204, 0.6831499807145742, -3.9141089158916746, -3.598565419001456, 3.2665493677629303, 1.8408852557792894, -1.778524980841722, -5.65168448286446, -2.406625159736791, 1.2913436782842467, -5.593707504325288, -5.319902027253777, 1.2782852424483775, -6.805132102290356, 6.408944787283847, 3.4286810198625237, 4.5956987590804825, 1.991710858250957, 0.27470772394139154, -1.2668703187888426, -5.5583683878033865, 3.955182957976804, -0.331637280784215, -7.431548445872523, -0.10811397072563708, -5.030994600214392, -0.5086438413887812, -1.675240593492314, -3.453421403170994, 6.511803490243801, -6.780910216320624, -3.236188588665405, 2.667104675729234, 1.4740537978931223, 4.186221383641668, -5.682838463903493, -4.63535527393984, 1.7016235947336256, 4.8008923475588094, -4.855118869276882, 4.654404736242877, 3.2479863497280705, -4.03130336317584, -3.394018701441163, 2.317117105627744, 2.3421100663589014, -3.3866098613787883, 0.03663561696842747, -0.015552826364573323, 2.8152560988615947, 3.2354760137758527, -2.250236884401869, -2.826754941734095, 4.917274249044633, 6.047411926876408, 5.286686054317063, 0.11278685446623525, -5.839591572952632, 4.2537196321383135, 2.6092805872215714, 0.8615175803934115, -3.2200966411837793, -4.713855579555837, -3.6694107360236625, -0.8849437008676545, 0.34360736499611216, 2.0762229114663975, 3.912224522784631, 0.6768307117382332, -5.651668757253225, -5.2595871312021485, 0.4179445874151212, 3.4227423909809436, -0.8662383516506146, 3.164758776550672, 0.1172978088757218, -2.8656459736032147, -7.229325495806033, -7.873291060797306, -4.596443464987472, 2.4675485738940846, 5.615861857074093, -1.697511796234737, 4.701944907879938, 0.5035445293747626, 1.4483249656361274, -1.2932148468797353, 0.3465482602197227, 1.1785000960741747, 2.264748277995299, -1.5056430868531676, 4.283232731279416, 5.554990565232752, 2.7223176195350725, -3.449696847568807, -1.7138022438231615, 4.539124406446473, 0.7026233811334441, -2.1405786103409654, 3.86038019191384, -5.558650834372894, -0.3000947096128434, 0.7923883745429842, 0.9093210424608694, -3.2767251388563956, 0.9656947272950276, -5.687137554820404, 4.133239938520593, -1.577494625995758, -0.7143224239951005, -0.9967777098217984, -7.3977477517224255, -1.8384431772811323, 0.7593755186394278, 5.226217940826019, -4.352196630470727, -1.150413857100302, 4.081684769379546, -2.744718246677409, 0.9068488545820149, -1.9371155369281758, 4.384558886596918, 2.7876209723377037, 2.9939749380346123, -5.908154183706523, 4.933727983705577, 6.184895763566676, -0.7268124476753864, 0.8067623568462362, 1.5867836029526, -4.763221148499161, -1.6153751618296066, 0.6536117249228296, 2.0261046148268553, -1.829907807627002, -0.37351921620465733, -4.3223661730556, 0.7152909412508855, 7.990368657197853, 1.8106818837492002, 2.9378771325463693, 2.409011147877584, 4.527643784439267, 4.941763958359983, -4.364239152662213, 4.686833984240016, -0.0010015072064407048, 3.6241122821229514, 2.560374951392545, -0.3759401428102441, 2.5186827477058626, -0.417245569657268, -5.911469676101565, 7.6962305596449525, 3.6838145832468543, -2.048593569090511, 2.0665731136268404, 1.4989293681208005, 3.1922240802561976, 1.3616433570596207, 3.052950302670772, 5.176291600687413, 1.6523416911477087, -2.320369217278815, -0.109656737428686, 2.4956439352281694, 1.3451650020549513, 1.5665124459213422, 6.851309031021844, -4.272534816405991, -2.4562662650951195, -1.1946528294046947, -5.083168356664704, 0.5577695484725328, -4.347234560724566, 2.7041819522092108, 0.3934390059682643, -4.411807957277981, -0.8168189324588591, 0.47979717739843436, 6.269933098342809, -3.2776322180734856, -2.885659696786691, -0.6832014321280071, -0.23989719566079068, -4.865657293011005, 1.3662898260748761, 2.607523814323981, 1.8374767592809684, -0.36493519833491844, 2.7339515994492825, -0.28979679060255287, 0.10976089147211603, 1.5316612624956985, -4.753875692656942, -1.661364769705224, 3.610882124388915, 2.8718361814094897, 0.4873978610909014, 4.251131677107098, -3.0534242214708844, 1.8244808051771642, 1.0481723563335532, -3.7720163373801614, -1.7993039383740077, -4.905989629003646, -0.9723663103873758, -3.98795082341154, -1.0012189262184212, -5.972893911005263, 0.30208891801512516, -0.04381547376470574, 7.010355926116921, -1.193015439634511, 1.1079804234230102, -4.026864094176842, 6.962373939096067, -4.076062525379298, -4.131380228449414, 2.0477540147906694, 5.105881288177998, -5.503166355199851, -6.409100672028718, 0.9152953127934572, 4.218079790536932, -0.9116385611769722, 8.069565653440558, 2.5203879537615985, -2.302129401123431, -3.336849220814168, -1.9884424815605877, 1.4609131321579658, 1.0632790935889063, 1.4402276567204888, 9.025339710505243, 3.802147217437521, 0.5689988478300965, -1.2611506488871134, 1.812817251282705, 1.5065078280598565, -0.5410148162737719, -0.28360111326960163, 5.976467463202112, -0.12089512422290184, -2.790062197147813, 5.408141517327053, -7.768653782351144, 5.252231507971629, -3.8835717685250883, 3.4078107870352485, -1.0018012071810558, 7.798756604850871, 1.9024211845895693, -2.254623674662187, -2.1758838170218544, 0.03644275605964564, -0.11868280287095696, -2.4598623128495, -4.414282580358701, 2.2042096844364787, 3.960807359533465, 6.044343403835119, 4.877241170643237, 2.258792386833023, -2.145515193552779, 0.029888984875694222, 1.8493829480066997, 3.7120036507579557, 8.943703757062305, 0.39692258114767465, 0.22476260467864534, 9.60469474485355, -0.6100874301136298, 0.532491653770451, -3.1904987591453375, -2.547473505839924, 5.7748477164806395, -2.3522694900747436, -5.441558113501026, -0.24035717315746108, -7.359603053667963, 2.41309738948488, 3.0841796982922944, 6.1087095029175495, 4.951418497140248, -0.9377055848366703, 3.8051444108568617, 2.915829569906111, 4.112165555163524, 6.793765765503716, 1.3886459179512043, 2.2992902160810855, -4.263078537535076, 2.01010715385508, -7.713857032621599, 2.172541487654093, 1.2719664880534953, 1.2236337719134796, -5.133598443850543, -4.548765852686654, 2.3623919256472656, 3.0343830208039324, 4.271720452362069, -9.142142925632653, -2.421055677622998, 7.4417173253829425, -1.3508145411028016, 1.4484798101447116, 5.818585287489, -3.4716463490949496, 3.1626499125531002, -2.0028771899180913, -9.98540471016196, -1.0464457142622525, 1.4831639555382101, 2.9094356316479137, -0.9108904826225135, -0.6981542828817394, -0.8017256095395604, 2.2814558008873567, 2.485229716302659, 3.233053831306992, 0.28625318801358735, -1.411562953045487, -4.293056803370206, -3.219095466269147, -3.425572875299722, -0.7088575735926173, 0.8729117657783856, 4.225915582351071, 1.9490526539715933, 3.1820111861157043, 3.1053667227671573, -1.4329037604494876, 0.16427144451236292, 0.9556412066266214, -3.077381950678959, -1.6415317835396297, 3.481309181312254, -4.022801600433394, 3.354430736345274, 0.568947454327971, -3.6906872149177405, 3.445692863279768, 5.926874302217765, -0.4320782927590433, 3.229634759871965, 0.3780593950543041, 1.8476388304927238, -0.9183325365428886, -0.20026614421556901, -5.254143966720755, -3.3561637891156164, -3.706785415895945, 2.337929754890191, -3.903194591098781, -1.5394621222477625, -1.1323552697096875, -2.0583677285290323, -4.912580990075083, -3.865568976615433, 1.9877386004331155, 5.683866495434096, -0.20477839326250608, -1.8226106791047543, -1.3557526522359193, -4.28600600592459, 2.3484559554026383, -1.5497092894485793, 6.673446348247443, -2.6699128315031615, -4.74551852295987, 7.887901153587961, -2.0403422368420268, -3.2875760370593095, -5.1569332994878625, 2.995128247719022, 1.520640018924114, -3.562243048119672, -1.357864435063162, -1.594242511024004, -4.800299546571526, 3.3323894069070583, -1.307304030921041, 4.387822714280669, 4.632371611687213, 4.2903663069335805, -4.907750563739179, 3.6536060400330355, 0.243215494522188, -3.4040398570960235, -0.3568246486890361, -4.754856164581867, -3.545668808259493, -2.0758385899328817, 2.5205805531159666, -3.4198780314399353, -4.677290571839745, 1.433147332957788, -2.7537134566810804, 2.017194447319822, 0.46912696435920814, 1.6665285252729778, 3.9650544279251463, 2.9425574660936618, 2.7825977579349384, -5.865310416954876, 6.997235328586943, -1.3551148704909974, -3.469895287684893, -2.8572404261448185, 0.1457784577382432, 1.5005079387896034, 3.0273473323377487, -3.598648810884208, -1.052801279553493, -2.7520092821894613, 0.579305920429574, 2.1820635338649605, 6.123651203931384, -2.754461559189094, 0.09794481995964127, 1.478266831763007, -1.2506919168388924, 0.7284905932389576, -5.739200748470723, -0.8403719142919654, -2.39115175459977, 2.354405970101776, 3.7639386019978756, 6.925798942432893, -0.8788371913302695, -2.232078893866271, -7.97614519425282, -4.330408987911226, 2.991457384008582, 4.227772167303573, -4.4192205798461766, -1.771045197597697, 0.9749416795189975, 7.593125200077238, 3.753985889794393, 4.8709542043749385]
BIASES_LIST = [-1.3837113253753681, 3.7030765594667105, -3.620412071733006, 4.796678151031539, 6.331020356976676, 2.7605932509767626, 1.0927086448897618, -0.07725328833560571, -1.1119452099137581, 2.653920743379812, 2.1218862150914295, -1.3581658057466803, -0.007088038783758559, -2.6157742569987867, -5.504421095673078, 5.260119294203002, 4.814523846946637, 1.4823121924494003, -6.577510476420406, 0.013866815103029163, -5.071861754631604, -2.803250665939941, -4.0661356723118764, -6.0958544055466195, 3.929879650607348, 2.6445989031761687, -4.024876063247055, 2.920032928048209, -1.082900688632877, 2.302352202240955, -0.3499722056873443, -2.2937414676762833, 7.123527579473989, 1.8541750381595745, -1.6776992898267336, 0.44446794974492515]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

