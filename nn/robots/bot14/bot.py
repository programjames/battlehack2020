import random
import math

WEIGHT_LIST = [-0.19076237247433225, 5.304303517175309, -0.3982012628005239, -4.335603452185365, -3.101722814010292, -5.963170344205613, 3.0568889890551887, 2.573217677230968, 3.2011592161422504, 1.7477071095478576, 3.0072538469200403, 0.9545972288705062, -0.3109067667447758, -0.29818597588958773, -0.20931268714522888, 2.534781841622027, 5.036960559863717, -1.5911707811902296, 4.859050428102885, 1.6862313806070102, -0.6874308968268441, 5.21388354761301, 6.052277118841278, 3.8447412047863025, -1.5814283612040294, 2.5532239124550147, -2.5577474001780214, -4.268886592038595, -3.7495982048885486, 0.6120351508909403, -0.007805534292516514, -1.4000560084748297, -5.337004000120974, 1.4410484971351019, -0.0010127675525526403, -1.7821569457836672, 3.9549102036671355, -3.476501095496274, -2.6024282893379294, -0.4708894267186319, 3.952905078871251, -3.1001010356036796, 0.4077699391447478, 1.3138842703277578, -5.528395037328654, 4.981388003049371, -5.796153953795361, 1.2166329915399858, -2.497064196283553, 1.4956286693270426, -3.3762426842265416, 0.18193909065395353, -3.208942223729244, 2.399228891690699, -3.0867148637285284, -0.4697939249857952, -1.1043500136585058, -2.9343462015835757, 6.591101135644766, 6.818770793063794, -2.036017829374111, -4.117175730964422, -3.6845062164128057, -3.1347607056489766, 1.209893237510287, 0.8602475807245513, 5.7302219321453975, -0.3549787711381138, 4.276662447014272, 0.25852204995932526, -2.4819350404668907, -6.123756609091669, 1.4806397398582796, -3.8722284841356105, -1.1200901179240716, -2.7807749755646394, 2.405924679531092, -8.524071114081092, 0.918125437798986, -0.578359561355213, -1.4328300254427195, -1.6260464614524077, -2.8091881280154447, -1.7128352155632944, 1.6306610441750613, 2.384174238555917, 0.43228277889252054, 3.316319360238232, 2.2529944283899184, 0.190569971372196, 4.611736250939574, 2.609897226130714, -2.7568404178846055, -1.61607121294389, -1.6738013355297077, -1.9850459494347203, -1.3374401900119048, 2.037283629229072, -0.335255154793627, -4.24845900287982, 5.873245290007943, -3.2602328481021665, -1.0388434896360106, -4.629835610554877, 4.091067588191014, -0.3054746015495329, 0.47182763060246913, 4.829296985991881, 4.188907998695498, 0.15625766940842345, 5.681587040392461, -1.7228057422522474, -1.20837545557661, -4.057318096829107, 2.1630619521983583, -3.8994961929941705, 3.886558465834563, 0.7741644351120556, 2.882735367511515, -0.7159584621446489, -0.2901155171832098, -3.416024805542935, 1.4295341516351407, 0.135112436923698, 6.962344432255231, 5.61411580658126, -5.3808765401574385, -8.226628620025632, 4.315986774644725, -1.6999558729366766, 2.884513229406497, 3.0327154249393997, 4.527219859859791, -4.494374766475382, -4.907820749530986, -3.957541028231355, 1.8325626990082773, 1.1548226325236692, 2.4083249225020964, 3.396939598461163, 0.4949212914587744, 3.3778642315844394, -5.057762238112028, -1.3425296576915433, -3.771736860026075, 3.9623035193905913, -1.9310386933207497, 4.311295979314222, -0.7679276511756838, -5.212688826604758, -0.1240568760857731, -4.441330500393225, -1.8346486594383018, -1.3433278732579637, -5.256088922571162, -6.008922454064312, 3.4737481541869073, -0.05859809508496805, 3.4416071040264224, 3.8815887616675147, -1.2376031856911418, 0.7962299272078763, -6.568276982984793, 4.28454900810739, -3.0145246956621663, 0.002457988231395536, -0.21925372536190524, -0.22388584149689583, 1.7310071291260707, -4.590064298595852, -2.8143529433132217, -0.9135742493817666, 0.4483366651849072, -2.1613005562408465, 1.7177545255204594, 2.619781396750676, 6.22523888863586, 2.8224531453275836, 0.47378612486634286, -6.897581804697546, -3.8074515525754244, -1.5824664765133665, 1.2282218455630272, 3.576261300806614, 3.1688219399432835, 1.0754619733878066, -2.4127467271633307, -5.52772503960827, -1.0164540461111469, -1.6223582260877403, 3.0006517995539124, -4.3496183908699715, 4.221628051937544, 3.890606088433323, 0.9176107430445886, -1.0723958501894124, 1.9423704355856621, 2.929138785747207, 3.971994566198159, -0.2803070093695701, -2.3564421584220447, -0.257927351673535, 2.6987025390335013, 0.3051311202983622, -1.825303387504852, 2.333518899410946, 1.9081508429812852, 6.332555896557128, 0.21709409026505466, -2.0921589516335573, -0.27435464328715764, -1.1076698481692522, -1.055527871832956, -0.7767171378446416, 0.39117267171830705, -0.293403120490326, -0.6611483357608483, -1.7648241659604524, 2.601891746349929, 0.6405672117261934, -3.602995666238752, 0.32369301341326073, 0.04707853012792773, 2.0665827231113734, 3.6970117919421845, -3.4937535821045387, -2.9354503619710686, -1.6364917996370414, -0.4304439723609037, 0.632321432243879, -7.493932919877503, 0.2625548297807061, -3.810176379655525, -1.2566253078529672, 2.5465237487486236, 0.06592589543913285, 6.733982688680282, 0.8175468852122065, -3.0324915964899826, -6.341578293050096, -2.8999003456332635, -5.295120635266392, -4.539407376191981, 3.5241556305736523, -0.749744610850138, 1.7782547016347627, 2.589895088260101, -1.5258968623158702, 3.622661452396378, 8.047025961943369, 0.07088952582469998, -2.308737054409446, -2.4188121852556197, -3.4015221193386274, -2.8302901121757085, 2.138644692843762, 1.03740911789837, 0.4364771737373294, -2.810088349662955, -3.727612140966724, -2.5438473422637986, -1.1397622897994368, -4.236841252034946, -4.305765333156162, -3.758159940428331, -0.25552163789919424, -0.15055387164917255, -0.13599532227405986, -3.971057827154235, -0.7952524224360514, -2.46181098996208, 1.7368217434296462, -2.670314710516586, -3.538733461129816, 1.7524249313166207, 1.3766953122913108, -2.4871578635424267, 2.4577425955518786, -2.702870931499595, -1.2987072900055046, 2.201171616494154, -1.041976739175526, -4.317209723212638, 3.2066300748879577, 5.0133077995589534, 1.2106948532023476, -2.4540562556649084, -1.651647145922674, 3.7252642978479598, 1.6548177381239775, -4.792823745937957, -1.5494181678564132, 3.5028837211877573, -1.3495864594497147, -1.1884392474812788, 0.5208637527232325, 8.535056559190382, 7.868167178705175, -1.8138242718487958, 3.2279159984870844, 1.1268127965482488, 1.7868480530267794, -4.48819187390345, -0.030003223969220505, -4.943234591192232, -4.649986502380449, -3.2291332961761476, 1.4192123244445494, 4.930831151535531, -2.1002870748441227, 0.6016804889336584, -2.183183898130311, -1.7604047274026493, 2.3391270074712773, -0.5092044229956552, -0.8759397015786189, -4.135626380568561, -3.613236857369005, 2.116037622759526, -3.9798804560283902, -3.884397321146002, 2.3068753483111566, -7.182571792390058, 7.186484653770169, 5.526507578383124, 3.656408971847294, -0.5081287784694013, 2.193110823588716, -0.12842210163092438, -2.1574290646844485, 3.9707304205580636, -0.4398662051955431, -6.598598768597979, 2.2820149882823495, -2.904016984899192, -0.7676201387630477, -3.0657554885583984, -2.2306271460318907, 6.195339857471411, -6.571742222837548, -1.8023604972311515, 2.145987675643373, 1.6673071388894032, 3.125491833814542, -4.630415912914695, -3.1784064775627097, 2.695009297505257, 2.903333319060106, -3.3062700108824097, 1.9322443404558465, 2.10094548542446, -5.150559733658193, -2.2081417603638553, 2.7485956735402564, 1.0936974187409128, -2.153915984872282, -0.06266054115246733, -0.00141500549221929, 3.131481598357553, 1.9654244211478025, -1.0707517833846123, -3.5711692732018054, 4.6115948664819655, 2.8994741522894323, 7.639482292217176, 0.7718894465548034, -5.285547690395189, 3.337357447652236, 2.828011396060199, 1.140301851938342, -4.575594035171186, -2.5547451174806284, -4.888066240430602, -0.42840629923185436, -2.084603618547441, 4.115828661621139, 0.9221363235302413, 0.5746198875101709, -1.3115299164400456, -3.384748071733224, 1.536089338776371, 3.9354290109777104, -1.4322339547210032, 4.482151604613135, 0.507448382344196, -0.09395440136721045, -5.692690448471267, -6.188767860402395, -6.34428960858852, 0.87264933788138, 1.5030415851367103, -1.785378270358443, 2.828069076248438, -0.940029846525049, 2.701535460556463, -4.872080066900832, 1.1435346748825488, 5.858595343135202, 2.689344546383447, -1.0981950027066174, 1.3447563804531022, 4.92719680297773, 4.204558093642053, -0.6482965494920108, -1.558134060370387, 4.783633091765192, 2.198549419035547, -1.8423300604119863, 2.923828141302248, -2.9000354286382772, 1.0648298150043543, -2.6690999834845566, 2.857993924101025, -4.73403859418244, 1.6982455455723189, -5.27397121607587, 0.8256035863461562, -3.396066106306803, -3.234967688532591, -1.267274295217887, -5.997138541073281, -1.548018192443029, -0.10447278674455285, 5.470810017246608, -2.4966458116253727, -2.432303858207148, 3.485835132032899, -2.809985660424352, 1.848546396610534, -2.089369637279622, 4.428974765150873, -0.31746577474153415, 5.695234186802627, -5.632346471360104, 6.266844278592032, 4.065107957292662, -0.6884422021438615, -0.27668040891487755, 0.7281404133926634, -4.437941248655099, -0.3040071050698405, 0.1433196403440169, 2.176645430490028, -0.847922637259451, 0.9386056529251987, -4.27632806981976, 1.4478793172505364, 5.675857914449445, 2.540477333390976, 2.8141527568238223, 0.8968408536160624, 4.532892652809341, 4.4465443274115195, -3.779642029476433, 3.3389295633924974, -0.09589568504380253, 4.477853130447876, 4.852037571157646, -3.4586392906313868, 1.789540495393326, -0.9601514970441343, -2.5999897945265245, 10.870069117586134, 2.8736445621557207, -0.1487515908451973, -2.1645272863476537, 2.54473206061643, 3.0281707653125256, 2.2024494692811483, 2.5972877563486154, 4.875954592854701, 0.5837713673448004, -3.0315879170957976, -1.3689559931780657, 0.643339954274005, -1.3278878925050879, 3.8924555836485446, 4.214295057215905, -5.929301612677828, -2.5706631143413556, -3.1712033865091236, -4.309487555807838, 0.43447854869102054, -4.031720361949629, 2.654359454192302, -1.8669686339733014, -5.513325037164668, 0.7411317860032818, 0.6335134469272581, 5.113205175838079, 0.6627364819965671, -4.457179409625635, -0.00043547185218550943, 0.505058676606718, -3.4575639317613946, 0.9600852341695956, 3.8729050981178093, 1.149468830708901, 0.74219238780345, 2.6268051154452836, 0.9656300359120333, -1.0928367905850238, 0.2846675093245392, -3.2489742257480856, -0.6989777789788341, 4.932239699357487, 2.171518804380958, 0.029657576813662434, 2.8269065784507923, -1.5094126892285151, 2.8836473515327326, -0.09068815742314018, -2.4971192964661313, -2.294305454931335, -5.184118747817724, -1.729814018526672, -4.793950521040655, -2.9311254727847516, -4.3265615680401455, 1.1362159321329246, -1.9707842707592724, 6.219018529911434, 0.95789184190107, 0.47359122453014946, -1.4347738324090553, 6.264177776252534, -3.7509875890060003, -1.5799558648165994, 1.592755496337019, 3.630901866584269, -3.952731625405816, -7.425746518103591, 2.317186792309814, 2.064859829652915, -1.6175449137861522, 7.7009389441357765, 0.059452167903454534, -3.3876909122286545, -1.9551928106887202, -3.9722331185203825, 1.8221770681785925, 1.0175477730244027, 0.1418837902440906, 7.20763362252964, 0.4834082950522596, -0.6355266955972371, -2.238670756212946, 1.4732047043178742, 4.001124036080466, -0.8059214172401306, 0.10644711574919974, 2.7640721392187038, 1.6565261026854277, -2.4151370649593966, 6.161787364751414, -5.901805588338709, 6.414257166769778, -3.2390036428342857, 2.6932245695575423, 0.2809985452593633, 5.175587414190554, 0.4242018610279219, -3.0605524542567437, -4.301794387446029, 1.1577508162146386, 0.06965752268683278, -2.0723627052034757, -3.9441184111325924, 2.9955194523664526, -0.8527586990387324, 3.380705281086083, 2.993159889652584, 1.4524032140193208, -1.1151475059508345, 1.5650732827257556, 1.8214021756148133, 4.259334286127562, 6.834332455294268, 0.5989440010134468, -1.463248681147347, 7.525527384914453, 0.9890456422884144, -0.344241603374154, -2.8818065599952734, -3.2085068441175073, 6.261045833367899, -3.5436712699984394, -5.175319096465412, -1.4595348727836457, -5.8164428029874635, 3.9739466653859212, 2.2146420216049796, 6.1375172413884895, 4.65871077180263, -2.393909919505486, -0.0067502594585675535, 1.3753486246680842, 2.3909677577928905, 7.731034265999021, 1.349100015323728, 0.7342072454582214, -6.401455643760056, 0.21378811511541596, -5.387170985169163, 4.18716766539028, 0.778145896004462, 2.0245195062907246, -3.7669243766889733, -4.469166967996642, 0.2111613692434413, 4.245220685154562, 2.613964870288328, -4.789981888758974, -2.14417849482626, 4.748871372694778, -0.49582148436906737, 0.3842870673872607, 4.228619079925674, -1.5863519530314896, 0.6656439678248345, 1.0565279840507458, -10.88074568005402, 0.9037260191214675, 2.4405362261595664, 2.384410238296656, -1.6841987564393688, -1.8550473023612974, 0.35453061515360207, 0.019758329939333574, 4.478337999704927, 2.5167364317736145, 0.6770960690751844, 2.256321318506852, -2.2508054943929885, -3.1585497261674123, -7.941361028293306, -0.060037585438877494, 0.31402816776361253, 3.858737114972973, 2.0391185991583205, 2.4043978439497473, 4.014336796186456, -0.39351496269838593, -1.0895622490473087, -1.3567988203612598, -2.4091641800884234, -0.6979839649132926, 4.383987583311426, -3.215025404300299, 3.7172996261669233, -1.5553144712696618, -5.208566827877173, 2.5777898595577704, 3.8215327981567295, -2.461555713088809, 3.037631377242934, 0.8235882552493103, 0.1515347804859306, -0.036906680777119005, -1.1457871314731598, -3.352117109763477, -3.3510933498462707, -5.204698507687264, 3.161050747421772, -3.771751503085343, -1.1671817760252834, 0.5807317366390019, -1.7181231724511816, -4.915692388664511, -2.459696225523138, 2.405794522570342, 5.7246248706375225, -0.5698775104820675, -1.6298988550767248, -1.6501425434715564, -5.599605580245488, 1.698129240122034, -3.3078460186018726, 4.418471869423408, -1.6721942700155683, -4.338641486726745, 5.6562677887689485, -0.5878638604661082, -3.553166579013868, -6.238822916707632, 3.0603511312941514, 2.6091949422900864, -1.945449870452826, -1.776766705818588, -3.8745366092701516, -3.061490120940662, 3.0108203018408126, -1.2210040028623708, 2.1157625946655836, 1.3053460905194259, 3.1106197342956836, -4.53780672371143, 3.7762468644824523, 1.4158748144695013, -2.27212423409944, -2.100172644807021, -5.864469122407087, -3.8047535662485137, -0.6414009063356936, 2.246050053307684, 1.9385840615322314, -3.889336590122771, 1.5520939179047382, -2.6729116319790966, 2.5998227022663443, -0.45027649175898854, 1.5362060204678185, 4.728511769755322, 4.792873692154334, 1.903673398595453, -3.8617776855336436, 8.765262082094363, -1.39864700501741, -3.056452652387735, 0.35809713942239174, 1.824270962720926, 1.0493757502758516, 3.361473959727652, -4.000703775272637, -1.961693258752284, -0.39886452438581677, -0.1337825348882573, -1.27584019821049, 4.889820371893404, -1.8420487356162623, -0.3981578994434323, 1.285447786966896, -1.91452289325945, 1.1878681213560265, -2.8887646253011385, 3.4374353531779356, -3.226241075090795, 2.043657271094048, 5.010546520854314, 6.903543458904101, 1.5372083918265291, -3.4330362835029025, -5.455445808703937, -5.480610441997518, 3.279882971008325, 2.4624308669197053, -7.262414678890024, -2.4355322765417453, -0.6198439757360965, 7.428934133964004, 5.041303955589797, 3.4678109696743515]
BIASES_LIST = [-3.154124064625823, 2.9261699668826857, -2.71432685194107, 2.856205246814569, 7.109350342294578, 0.6895709879979119, 4.156439049157929, 0.09019866102748342, -2.1451095057331795, 0.6849084169253561, 1.447595773097412, 0.07905398606393765, -0.26313393646193584, -2.5289774269237553, -5.893386127245033, 3.6649517812288552, 3.2920890104174916, 3.5054513207581968, -5.041171082375097, -0.19611331064460202, -4.039972459630708, -0.2203531447820155, -3.8208560010109336, -3.7305785899454484, 4.545292927073419, 2.7248697407305915, -4.094451163337077, 1.6438924207829269, 1.5690146768143896, 2.3165481801145935, -1.6310526768179876, -0.4508787364714548, 3.2648699769273177, -0.3903080884904184, -0.5658819209923959, 2.081037279107663]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

