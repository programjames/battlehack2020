import random
import math

WEIGHT_LIST = [-8.129058427386074, -2.3379569350728464, 6.890737293608859, -0.7643398892331599, 4.08193657701952, 2.26937690429694, 0.2457297375823118, -7.001296242639338, -9.164534184229717, -1.6704492087250218, 0.11303703505710377, -1.7508776641331454, 0.12528540503203706, 1.7772123552752852, 1.2397900557097554, 3.944339397010942, 5.409057137896966, -4.708750480337795, -0.5537056663635059, -0.36061106180788316, 3.9605991808780554, -1.3181026430015632, -3.2039028558770677, 5.532434617165657, 1.5188480514774678, 4.26618539712693, 0.6062390035622389, 1.0580704238094394, 0.838175357811556, 4.351669412061949, 4.290770110429004, 5.398271099713132, 0.7982636667097094, 6.045868546682135, -2.1588895200889384, -7.538946561577188, -4.157993589121027, -4.722006044821386, -3.767836799473307, -1.3345240028171523, 2.0226016244025007, 4.776009624599175, 4.244788968980758, -2.2242300110915814, -1.496059769404292, 8.797942512702253, -0.21879966190258748, 1.2330091593434753, 3.350094818112717, -0.17730240757326426, -0.9059764882908437, -6.326692608896726, 1.2862027863302048, -4.806790792410886, 0.7237047676398041, -5.723186780363424, 7.866027607329138, 0.5868715603431243, 4.0558722072992754, -0.6794807133841432, 4.688454231210813, 1.9418418076366804, -4.9420430813533125, -3.0729703358335283, 1.1665716803009736, 3.355782492294146, -1.1009684828867379, -1.7797198775458465, -1.217446925766167, 5.810800318082637, -2.9538577544914433, -2.756841924792431, -2.572724070685733, 4.4573967884612555, -1.4900088745915376, -2.2682733839393268, -0.8108059133268963, 0.07289633688328362, -5.071199973704893, 5.8388232775913025, -3.0264260116717248, 4.641435365532072, 6.267786739942745, 4.040293497719749, -7.022282380783958, -2.231764325565405, -5.299588153231632, -1.84042918190393, -0.795753795719351, 7.642595566180995, 7.987948439925765, 3.2561560865006944, 0.8567815567339601, -2.2388567141612365, 2.4454911365450505, -2.048203245034689, 2.7284982651953444, 1.125025175011948, 5.859882351552957, 2.3801489503237376, -1.943872129043382, -6.892052633511291, 6.250248612243082, 4.912468336164589, 4.9064797732082415, 1.9357266882658548, 2.8580463087110357, 5.5009316122509055, -5.280344125603766, 3.798238792981796, -6.644754138357644, -2.813596603169315, 3.4199498595227236, -2.9747419822444687, 5.940387577525281, -2.4370937872510297, -10.504165957674063, -1.6422516411428236, -4.802944424016066, -2.2510411322703057, 3.3279096421490095, 0.6343824373966249, 6.901493934574666, 0.7100767722763841, 2.2440635580918227, -0.41039455420222937, -2.631301648237703, -2.971066167580621, 1.0151688517609023, 1.8079338254910162, -4.9247302685210865, -9.20743138961885, 2.105046119293241, 6.557342458786254, -4.570218381550342, -2.0144036867456605, 3.9971153345594375, -1.411320172033167, -3.689601968635415, -0.2544641179657722, 2.0601603091745475, -2.587351894810184, -6.916395387046568, 7.202085025759244, 7.89209014665841, -1.4997973627546655, -2.6460517261301417, 8.004164062457017, -2.693420525325466, 2.328666951955363, 1.890541511619451, -4.057134884423778, -7.116327098464339, 1.3665134715022267, 1.5345095654299934, 0.842537031480058, -4.109399061710067, -7.348830446714565, -6.024999233234339, -1.310079854112116, -5.204393453001959, -4.273343469352677, -3.154224322369007, -6.291340968490575, -4.850411318365765, 6.8449675848436335, 3.0235092973641677, -0.8881990698527826, 0.4429734716570289, 0.9240686150753794, 3.3985505183199405, 0.015626448963204725, 1.9588554157252278, -3.473137473424997, -4.139488012646338, 2.0783104771030554, 0.9558570797720076, -6.431087133695572, -4.8704060356921755, 1.5738898603482476, -8.22866198394259, 9.099646722580362, 3.4620338746895496, -5.44505737229297, -3.917107979201049, -0.4838012084785959, 5.629140231493382, -5.5642673209755635, -5.061040067054927, 6.992006928923559, -5.5272380244406465, -4.8899554505314615, 4.985948155209887, 2.212295529017893, -5.776275190508475, -5.5774600554576965, 6.987077127915445, 4.213294225058311, -0.18716053587818704, 6.749993087846438, -5.788337652688122, -4.772403669009797, 6.550297285513587, 0.7371914495339131, -0.7896308473959364, 2.267386633725049, 2.8341349786252126, -1.161108284894783, -7.63847424960314, 7.084701392336427, -6.997899170974383, -1.7735714011704575, 1.7517867014868633, 6.949092522111569, 6.371570926819268, 5.8464284610574575, -0.30620197320980913, -1.2837377355495119, -2.698413717306557, 0.807336541368181, -2.1177444907368947, -2.387922675633446, 0.4147349713409065, -1.8507587419446128, -4.851243197074406, 6.524459095389918, -1.4023733906451443, -1.7455275103434695, -3.834697690645732, 2.9087624221561463, 1.8377451709329855, 0.612971654342715, 6.242628214532516, 3.244234346107043, 3.816029938011797, 0.574342234439664, 5.618596977357, -5.794373643307942, -2.823820498723173, -5.286132875498298, -6.533217816673643, 7.1765283443524455, -7.417276799657283, 1.365227931717011, 0.0793762012372275, -3.218433910693552, -0.39657585486118807, 4.384077269718941, -4.255497271510417, -7.3021774163475675, 2.018797734450912, 1.9618582595272671, -4.705960165212381, 6.295050668889474, -1.8137710341435849, 2.1327463928842, -0.6399207616302814, -4.159912432063695, 6.384594706919717, -3.8081237092420146, 5.8011117660756595, -4.300790303742758, 3.133349347618483, -1.306945036224453, -5.505805725308695, 4.478200412664439, -2.945733974361035, 0.3207744287389444, -7.91344851793134, 6.81166093015384, 3.729207603547654, -9.65044840759396, 1.9049005386683842, -6.8200821767050535, -0.6064520386199228, 0.37922867941081745, 5.770919103955223, -4.712218395515309, -1.108229797683122, 3.20826559596433, -1.075310383119039, 3.5373963632020313, -5.4506814297443125, 3.037046090467928, 3.184339004732569, 1.899380473370539, 2.323938242814388, -6.4062231883733265, 10.013324699252076, 8.599904131449144, 0.890023340027946, -3.6839102213809403, 6.441961392175824, -1.305489989731313, -0.7816076480033449, -5.892290020198745, -1.0050257535653928, 0.24049323670712547, 4.990916519919885, 2.415707499946013, -1.7908768892752782, 0.24863031083159287, 4.927844432435965, 0.41985969004281604, -1.952507702027358, -6.883824171624668, 2.414407222545123, -4.639467130151099, 1.4218756845115568, 3.640793257543234, -1.8880080395792902, -2.0841964708734495, -7.922436265222207, -3.111168532369437, 7.969493374258303, 5.336329498509491, -3.3759443979027046, 4.645752925176086, 1.0628943912142406, 3.36979295288008, -3.150642753914778, 3.056599919430322, -3.732385736616037, 6.135856685125349, 1.3885060205701598, -0.30153898461768525, 0.8619051083963469, 3.2765919429413275, -7.622134384407454, -0.7308955264837784, -3.4410289652659345, -6.441669495653179, -0.4461468860725104, -3.7638387601551258, 2.7993836178112903, 5.012976657324969, -1.773129745089371, -6.865315524276509, 5.4715706133498445, 3.1901178636669814, -2.1082870654345767, -5.779010835327953, -4.522817311234846, -3.7147345897336113, -1.363444277182308, 7.18232519594919, -4.080408776149136, -7.972282848854531, 2.111662604404436, 8.740499141591327, 9.074638170907237, -8.956199726068242, -6.565633016726651, 2.889147928883304, 8.537503489341345, -2.8754610755497576, 2.2828222136522953, 7.50879947997843, 6.2990360395417335, -1.7539506452615379, 7.524911807067125, -3.7652745430632164, -1.0240345816816208, 1.6660622716944302, -0.9704214317454645, 2.771557896405137, -5.512831695299266, -5.366055349518748, -2.116143263223631, 2.68992983284849, 7.59196838354332, 4.160477335989838, 0.5619312853751233, 3.6853631364860244, 0.09717435828161325, -1.8765878596624836, -4.9360033058322, -1.0848540035170986, -1.5046863973002498, 5.186387065731397, 1.4028667471378495, 3.0052630353109, 3.958407925405703, 3.8818917107762787, -3.446107356329756, 2.146156137967378, 6.711921603530562, 3.0962907327978595, 0.7403641351217147, 2.3194246547284685, 0.424048794036563, -3.317094154056202, -1.3927778911040904, -3.421677256989816, 1.3172218286416988, 1.3595628150697332, -0.08840283930320991, 1.3715585834971113, 2.804833425163202, -2.408566567519484, -6.215636563421478, 3.191922460082694, -5.939796284362387, 6.202986336939531, -0.5096594384315776, 1.3573844436032696, -2.8762680850932316, 0.4684224675963424, 2.1142413850979063, 2.3642280599846988, 3.1203262382559918, 2.8407190194533487, 3.134891248357452, -0.1467586592330571, -2.0610364029016504, -2.402628941546678, -2.5985175536788834, 0.09906522818625535, 1.2009038676065782, -1.2147119246454596, 0.7723994670034677, 3.1534045151040653, 4.017812956434467, 2.2576973305518764, 1.4923664106934438, -4.244849015880564, 8.969257785922421, -3.557062620518469, 5.138698172876026, 4.197207196588055, -0.8831347925933353, 4.576757461458033, 0.741729749849193, 3.3758995158465983, 0.4473137113613825, 3.474674164908003, -1.529011117219682, -1.630068100430316, -6.4049940997337895, -8.181661910831595, 0.8251362596393514, -3.3786740427354482, 1.4508314287350939, 1.6968491306314557, 0.8559369617112775, 6.831904171232445, 7.652931053456593, 2.849670629843634, -5.734317600840665, 1.21868304379198, 5.136624105825, -3.9431987725813458, 2.9005569113430254, 2.2502559266140896, 5.433109334304699, -0.600051221775152, -4.122557717255411, 6.053772075112441, 0.4059424858869019, 3.991999180257405, -3.137892949139632, -3.913865974286009, 0.8576806822072134, 0.6949101446329862, 2.9941311095148646, -3.9440251021119366, 5.524183416433214, 5.226914972442082, -3.7169134113768703, -7.691225561556568, 5.365056954209212, -1.518316277505331, 7.3816005801007885, 0.17681673306947976, 1.654301817907891, -9.527383136777308, -3.9275282767319046, -0.64389932900328, -1.5280690551808849, -1.3024485939147155, -7.098264369972488, -1.1913935993888325, 7.78955884065125, 7.959266331633088, 0.5455934230828092, -1.4033824812367912, -1.553222860366674, 5.96711851658596, -4.33100941317195, -2.026528422800149, 4.609928879001849, 0.45295794176305243, -3.599048168514179, 4.782201705636671, 1.1860496449936482, -0.8884726844912216, -0.9627847322498435, 2.1396297719797164, 2.84612310697235, 3.902540294712051, -3.0935319898024694, -0.736285591695987, -2.3244235560429938, 7.314037745553803, 3.011649947109121, -2.607268444655331, 4.972621464272207, -1.4526497553264968, 0.18515005167032278, -1.786527363415076, 2.4123679619969693, 0.36124725991793, 3.6407565905453545, -7.026109839323942, -1.6128549944650525, 0.04389153055286171, -3.433847715745648, -2.229005787522823, 0.4328214784828733, 2.3259872166270004, 3.6430570573271797, 6.444149651277804, 2.4259373499364134, -5.007152987785991, -2.7212705386897444, -7.695239885237732, -0.01883652027154975, -4.156551436508421, -1.379296384958074, -2.4824925247085114, 3.793485206931537, -3.8485990442466824, -6.707281657467306, -3.0738171461302883, -4.235189188704772, -0.5625256593721653, 2.0947884614150505, -1.7852227059131462, 2.1133388050411304, 1.0966497787042797, 6.439571856187276, -1.3749694681905356, 4.56388480304998, -3.540876783017556, -0.3748969286140602, 1.5943462345568795, -8.013869879612152, -8.617397858355018, -8.496752989742754, 6.197947196221431, 4.241206612094848, 1.7731672248157264, -0.13474774884073332, 0.7871247457252706, -0.24762787767349276, 0.9641877515439772, -2.60289256969488, 3.538558913984877, 4.161539627713413, 3.0621673860394174, -5.061850495051147, 0.07230050711084135, -6.361939517702153, -0.7117619437331358, -0.9716351425896712, -2.860557924330508, -8.47051116273493, -0.7223855255750202, -3.1463403629049975, 2.1091796911061906, -5.247291687555663, -0.9544063357588735, 0.7034854923155662, 1.2334953953225478, -7.336496195571237, 3.492638091027732, 3.745843200081536, 6.2711376704862625, -5.695882014208902, 2.145828800986487, -2.1678213867279, -5.008767329437762, 0.8528231029466375, 3.6514318893533626, -1.804952724473337, 0.028133688828281767, 3.929313145608696, -0.3259678550296334, -1.6437411925578265, 3.9599690769523535, -5.002458654639455, 1.5456212261218423, -0.9701488218481924, 1.03708401651245, -5.412149995778799, -2.6191974052419638, 2.143343117543263, -0.7695405658275993, 1.37342786288824, 9.19879253400747, -3.649754110175236, -10.018194158294426, 0.5665485857558488, -1.3772734355212894, -1.2584873233522367, 5.549231530839322, -4.368398486949504, -2.6491896941947624, -1.453155329919496, 1.6914236917709176, -4.027887273852043, -2.7239859225884033]
BIASES_LIST = [3.9901218594162935, 1.8820755725717082, 7.0704153330131145, 2.1189101184398003, 0.754345251585925, -3.9759502727437765, -6.634984895295515, 2.863643645189516, 5.352287074123863, -1.0741895649115092, 5.758305148688841, -6.784593615930696, -1.8313114091498204, -2.991859646639725, -0.8189420216864196, -1.5192582080025083, -3.0742812613235344, -1.5515105971455234, 0.20073820717451302, -3.9305694901503787, 5.980782046324838, 3.438405659973855, -3.7401329852250154, 0.4487290076638634, 5.569681752936412, -8.171020614824803, -1.3867481602814222, -5.984541646110782]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

