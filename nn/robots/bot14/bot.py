import random
import math

WEIGHT_LIST = [-0.8995256155634097, 4.256972069035789, -0.4734089579746349, -3.8011408869084535, -1.8222487505977185, -5.514629074996519, 2.6952578467199224, 4.169171133443378, 2.0349174030053643, 0.761520219898403, 3.3517404951470926, 0.7314966935607083, -0.3891790650088538, -1.101592060208929, 1.324585144409196, 3.362611915364919, 5.665830781113435, -3.659424459880543, 3.794659352136665, -0.006691513387442338, -0.3289481052960683, 4.659834360580453, 5.074613961001403, 2.748575375249389, -0.9323495657817964, 1.5047628814271246, -2.8982632880583417, -3.8095936755434927, -2.5289155021534384, -1.1857689801615687, -0.23562790392149502, -2.3127358634660498, -1.5087355340668591, 0.6650260630757368, 1.2000865224916586, -3.4925165645935454, 1.5292442936591013, -1.8454799050065516, -3.7230068051490814, -0.47621740653879696, 4.94288351716757, -3.040832984898452, -0.08226610208024243, 1.17600911997181, -5.932668086755166, 7.579491107957061, -6.092169612520546, -0.22242867737631533, -2.2947828601196703, 0.15264665679686695, -4.7239094525581224, -0.21834621010463606, -3.1422151497694313, 0.7501236289517264, -3.4310286416320857, -1.6834345318321724, -0.7151668380523096, -3.476360576081338, 6.588449539505044, 8.390593066782515, -3.3844506972494584, -3.590089492188582, -3.36501566703454, -3.914522953061095, -0.11218335603957219, -1.2529029113292198, 4.742614222335191, -2.558123494859673, 3.1568111155332286, -0.8508860476873187, -2.361029345738886, -5.32785628751185, 1.3586621640207182, -5.702805595713679, -1.387794517527986, -2.8559137905934904, 2.836162065642881, -7.462413364527324, 0.45200351192101995, 1.3519566588778966, -1.2835798719042475, -1.6546180142252718, -1.0165277442000151, -0.10560623306696693, 1.8964651677727193, 3.6354096562810376, -1.6246082449127155, 3.7997731005989586, 2.1671779623845326, -0.34894886924800006, 3.165664300479227, 2.2342884275600094, -3.6219539198982242, -0.5875270071942655, -1.2509583929495407, -1.5367462424787173, -0.41680075934160166, 2.3444462000545396, -1.7959233394700571, -5.909149644311309, 5.65269220446312, -3.542582016722694, -0.9724485550164983, -1.410486918809787, 5.0159825182779, 1.4048734747484461, 0.6988292202986972, 5.279417174364013, 4.04313072015086, 0.07256623469264767, 6.296435332657822, -1.0090190891258084, -2.5171621750026616, -5.882459741889849, 2.9656396376076946, -5.5885267856806315, 4.292342330029016, 1.5341182533061977, 2.0196726736375026, -0.4613225390115214, 1.2795766210808068, -1.7895011105180403, 1.9756634963392443, 3.046000646363691, 6.800755074262869, 6.158047211176565, -4.222786556105918, -6.7931490398997365, 4.08446832002482, -1.6187372341761588, 3.7175776434676653, 3.811449729714151, 5.116466456841108, -5.098122308418217, -5.204255483370662, -4.400550248593966, 3.3670839141920172, 1.5875994093191688, 1.6237385584974868, 3.980115028519477, 2.117643056215826, 4.48884376873203, -6.581893181269495, -0.059422621198546466, -3.2313162624354055, 3.3396294315836705, -2.252187976849118, 2.3273975268417573, -0.9644438036482061, -5.057511066789763, -1.3998203545994587, -4.224966684974294, -3.207871869677818, -2.006845365347907, -5.869190326358003, -7.468307028998789, 4.426986860865427, 1.6298498958491061, 2.869358078501691, 3.9440367032766783, -0.7827340068495408, 1.3402439172853513, -6.762462671811737, 3.920620464882652, -2.607455304027207, -0.7892146333550005, 1.2241606917360497, -3.5582515071923533, 0.828232222156899, -2.6142424132649085, -3.266329356314591, -0.17732952999565632, 1.1467816014824193, -1.0040841896068877, 1.712438736213587, 2.697873867479837, 8.140443363500571, 3.269917937432087, 0.7831559958022389, -9.487736406989711, -3.1263869057330873, -1.497478157979825, 0.4000959933128063, 2.961097650021876, 2.9639893322448074, 1.2137566195015141, -1.57062822569583, -4.6719607623505555, -3.488950606207963, -1.5336420812879592, 1.9131628247008337, -4.021847407835054, 2.8944221682961695, 5.124287355229214, 2.1785219020252744, -1.090820533179055, 3.081254737361765, 3.433692834806344, 3.4609019365372546, 1.4139976907195804, -1.5430946614597105, 1.4028580017541747, 4.272344354015576, 0.2750446324524878, 1.0312824945488335, 2.4181297087935234, 1.4692223256739725, 7.337400592407457, 0.6651966570882328, -4.101301670715081, -1.0101456846241903, -0.6641953910212244, -1.048451949675272, 0.017373690238284167, 0.8582722849179292, -1.0365313776939706, 0.9476632914745813, -2.5404226395054663, 0.6303837719895702, 0.3167334988607078, -2.5457649165598735, 2.7788230269080025, -1.676708187480969, 2.861738817298617, 3.7777286908215073, -3.9732205621808188, -1.917345818017739, -1.9687896969108338, -2.05883818980445, 0.398638177842652, -6.477482104766223, -1.599540917280771, -5.335714730182357, -3.5515245438740513, 4.205524196882057, -0.6469166560487758, 7.390440649564754, 1.038895714442063, -1.1120012767866714, -4.940498188587966, -1.6300855966372152, -4.495271578448156, -6.403940421485626, 5.956039426966054, -2.6627561901001977, 4.340433398951328, 1.0231494925893907, -0.9236975462129344, 0.8045569187340809, 8.48941942885975, 1.253751140803308, -2.035331343153368, -4.340964631458614, -4.650477249567107, -4.140805987580254, 2.1957249629796163, 1.0011322728675154, 0.35262073192321663, -2.7035394036878397, -1.7092472959597418, -4.206826576672871, -2.228074920744561, -3.9893243959081985, -4.487921848612731, -2.3854758299622087, 0.7835725363395052, -1.4597012965237217, -2.627748929426083, -5.814650908034805, -1.09888649778076, -1.2055478039585756, 2.3301407456132934, -3.3094956266873243, -3.236305373435809, 0.7432520038898205, -0.2355662447842628, -3.4030102451798214, 3.530022705431052, -0.6424153761447287, -0.5582551949974661, 2.2965272993393047, -1.3177205515488586, -3.6574786767153027, 3.4729378925119505, 6.414074914701914, 0.5964200418483645, -3.371827861414352, -0.5279908931432691, 2.778563187734549, 1.9016861453362477, -4.573963255580251, -2.986042373646359, 3.11339826433316, -3.805125711325571, -1.519787067620478, -2.859734870449061, 9.581111272166732, 6.219271765009652, -1.8112120862369425, 4.50728211644604, 3.8876271067281998, 0.5489025626857273, -4.340933490105636, -0.5733214112483445, -2.1701242826278397, -5.4838360951294485, -4.519342388252637, 3.416509876907446, 3.0510776440944234, -2.358349580120541, 1.121053310428918, -2.011988661647648, -3.6873654821363298, 2.2921522761166973, 1.2254425746534459, -3.108975097820929, -2.631908891080126, -3.819700067279779, 3.3343711489786996, -6.505543437760138, -4.621349906515855, 2.255852626761649, -5.713851377759244, 6.557005089056767, 3.8054166115374963, 5.448934809155929, -1.501550443085892, 1.1209897441899042, -1.7599472962626914, -4.474789012531522, 2.8703312396263856, 1.5638164302994095, -5.547614373197849, 0.6784204743400999, -4.553184796065967, 0.2996262194617323, -4.624934954881315, -0.4459434045497206, 6.045728116791526, -7.140118970746685, -1.1374499638725337, 2.9227830808063326, 0.9679029752299209, 3.7895128668509956, -6.418624770086756, -4.151246663421542, 2.4139297712786583, 2.3148088201272192, -3.2122084138437748, 1.001644271032697, 3.392401201726935, -3.907153665990512, -2.505632529468744, 0.2612756551278186, 1.6786544308835207, -1.624713422781368, -1.145291820259408, -1.283923210039024, 4.74373618205783, 3.2910846117319004, 0.20901433401151515, -2.408498847813246, 3.0442131134561654, 4.405506602360797, 5.729614584755987, 0.3798857669480271, -3.545967557699095, 4.356144019058783, 4.203804069505736, 0.8554996378471198, -6.548300564498257, -2.4335777821843525, -4.9790213897160225, -1.1286995712030266, -1.5708674916328629, 3.2060942121481233, 2.579154564161559, 1.9348619437369274, -4.858190949906816, -5.5724640168116295, 0.7898587919820228, 3.976979470747917, -0.8583209314018243, 2.7373208045644466, 0.6314148565180961, -0.3788845437054933, -5.736042325483746, -7.059679260317084, -7.938634807815749, 4.498446600654242, 1.8859749601798192, -1.1863029251226176, 3.6145663405367863, 1.2855165520008995, 0.35972460968630093, -3.06987875296225, 1.2339555657540844, 4.525105965152842, 1.0557530344363202, -0.531593253886337, 0.21420961152669826, 6.85906509601023, 3.1988792962787045, -1.1120671135550975, -1.4831311905685536, 3.366769246683706, 0.36254501043610743, -2.8666419240871988, 1.9934720189871356, -3.9803165043139015, -1.6926802151279634, -1.0843302667346524, 4.396000654567744, -4.8158427461799205, 2.662622187847952, -5.821929182759764, 3.158398387643813, -2.968764009532687, -1.7943702635381267, -1.1639414916451478, -5.596811574626283, -1.601440179462103, -0.932210013406003, 5.6862757465293985, -6.01659602086857, -1.9539985803216722, 3.7656246699013716, -3.94166981882939, 0.02345668375183929, -2.9440535663695995, 4.730651599520578, -0.04344832493646089, 5.562930282435779, -4.448912358832143, 5.435326024320935, 5.666350631958848, -0.9397516310643299, 2.7921778346740362, 1.0000955491243633, -6.876024352499913, -1.2418342551486041, 0.45064276287742544, 4.024407959313097, -1.6670965883591562, 1.4642248175667096, -4.807706464325517, 1.0081599921996198, 4.776382208067515, 0.6684404511072914, 2.388566430845458, 0.9421148118265281, 3.888202576678843, 4.634612909958552, -5.670229059109028, 3.355475693281739, 0.11570834528739482, 4.680417617081983, 4.060163339297289, -1.521112074706401, 0.14714221015091633, 0.1106537338774114, -4.860204212672288, 10.045022189222037, 3.8410386274106756, -0.573375263665608, -1.4755344023688517, 1.939494296842204, 3.67725370920376, 1.8909479157574198, 1.612884141909451, 5.455676166763397, 0.8101943697064087, -0.3207918231265541, -0.5322988831649046, 0.31585987956173134, -0.3041402889068636, 3.0298248095678115, 2.6548372878982955, -3.847673428521055, -2.1233097851087543, -3.8763660740852393, -3.546225953181204, 1.0274489182157507, -3.1892028825194187, 5.205766853294753, -1.4156989742586044, -5.3689220794375565, 0.9423831401171607, 0.3528466214100032, 6.252532016215616, 0.3723417976140293, -3.3010983100023656, -0.34129102890600205, 0.051415269889085735, -2.3856612690100962, 0.5642747706040163, 3.7234914610761436, 1.4756234941215167, 0.48272501273718893, 1.0755447099997246, -0.6498432299383377, -0.9735104736579812, -0.36001968184593447, -4.472483436996705, -1.5403248239179759, 5.393058445468588, 2.513485927184349, -0.7113370296194867, 4.051254026440695, -2.2797889319118045, 1.577787287381709, 0.058605062101143135, -3.6224068420812645, -2.5878477729828324, -5.257649680203235, -3.7094872603507687, -3.787464386196871, -2.2747165024203273, -4.542319465541826, 2.047991583880715, -2.7318951490283396, 3.4556266678719565, 0.9329884692880006, 0.9551816423578212, -2.106302564080073, 5.874663558830255, -2.7648097678466836, -2.7990958189816366, 0.6315225206300639, 4.069989898572465, -6.516429079400301, -8.943714641319287, 1.0436079055291678, 1.7363655685676327, -3.1050393843661475, 9.283035032784126, 0.8456166813877122, -4.4716315955364605, -2.8721605839880473, -3.173293415506875, 2.0208279761532477, 1.7968039138758627, 1.1476407637581856, 5.568235147081791, 0.6876654668529567, -2.224638020903395, -1.7757721756711327, 2.649490983696304, 3.770258582758494, -0.379917987237239, -0.44883930695366603, 2.9389403307544946, 2.092227526602782, -0.7243399515215243, 6.99189791161935, -5.503431751314659, 5.524693003699295, -4.563598792547737, 2.734826554089379, -1.6657561227932067, 8.243882661753132, 1.5012212597170458, -1.7749159482130235, -4.7174895694420504, 0.05418714981647432, 2.3918109310625777, -2.414967750214074, -3.4446441287256975, 3.752339058707137, 1.622189794199655, 3.9667894321005317, 2.9418818522868464, 2.476566058773443, -1.4276381824833055, 1.5987190093332178, 2.288747022478427, 3.851108702202625, 7.839359779835988, -0.21791625829298833, 2.0667496039106665, 8.884564492149053, -0.09879261959794972, 1.1465981716773204, -1.5749544758326366, -3.428223907533838, 5.966245964746115, -2.918159461552324, -5.915789821611894, -0.13218831377013873, -6.8040139921702805, 2.242013667235784, 1.6007512613499504, 6.675469077160611, 6.749163848720034, -2.8203834640127035, 2.0970027387796297, 1.8321268317346737, 2.415793758886158, 7.616086333433291, 1.485442523600192, 2.3535951661219654, -7.08054577420957, 1.270698007287268, -5.327381528740563, 4.50939756797032, 1.8853934337100577, 2.547938310403569, -5.956176788558636, -5.413435599603233, -0.49199915485408696, 3.6720912668183923, 3.243898101108698, -6.269933242913489, -2.6607655881182772, 6.245592283391893, -0.11739999263958545, -0.5685999420444532, 2.664950385630462, -4.067811304131002, 0.09732440285164068, 1.6480788105899862, -8.033526860576988, -0.912516510506638, 3.09544422224747, 1.8599287575066228, -0.11566419859973953, -2.5045408361072012, 0.19831530700955402, 2.299888463033683, 3.3672625990400853, 1.9674156045436488, 0.3459586824825096, 2.1852177418885033, -1.7005449126338799, -3.710832575295557, -6.837032229963255, 0.2629125650994051, -0.6541209613660564, 5.600510372341294, 4.163927833994591, 2.5463063605511325, 2.300644902428809, -0.5861651837439088, -1.8991306056315516, -1.1569623026452656, -2.2978356245135423, -0.3805343090767481, 5.019901620397125, -2.8820484649103393, 3.9101299451508726, -1.0008570986114103, -3.156547841916051, 1.8585404487232395, 4.580039083737186, 1.5983968549785263, 3.4716223684678047, 0.02337296641277553, 0.36550693106681775, 1.3612010675398993, -1.1468745965581768, -6.793769482085982, -2.370598782267943, -5.453692362471003, 4.6592624380142995, -3.810438840501079, -0.528598992217622, -0.25670851659241634, -0.8636093563998544, -4.174298371269009, -3.302011159709873, 1.9787229257102004, 4.533364750282498, -0.8675968692209317, -1.3230959749389122, -4.5854851520403646, -7.175042864205967, 3.510405997399877, -5.062856339241138, 3.855027424444615, -0.9774305669640537, -3.197482960862975, 5.814434188824429, -1.9500579178114084, -2.6787764171055635, -6.099186069453003, 3.986336346543885, 2.4524986481848465, -0.809235008548616, -1.2796420599091556, -1.2255299404891524, -3.1176626966130545, 0.4828869258682258, 0.6503585155934211, 2.522675653157136, 4.4273513968983975, 2.7873510409705604, -5.914156247916086, 6.428446564939898, 1.2896433490845776, -1.490171709100515, -3.127232219258774, -4.8363170787995005, -5.142957889978678, -0.047825599451627454, 1.0763900505875972, 1.061204805148813, -2.773661319303126, 2.3644433837997347, -2.5330796360029693, 3.9847117864444384, 1.425984245075925, -1.542839450818717, 3.967447042245098, 1.7686451120189117, 1.9657019822614368, -4.014262074280258, 6.808051851779117, -0.9338031261348774, -2.7677547000748497, 0.4667422280282947, 1.15594074777781, 1.101571297308396, 5.195950261548658, -4.048677219976654, -2.5066641316408003, -2.099012463511351, 0.7893064491025248, 0.7667848457564979, 5.144967325325502, -1.5260863664305508, -1.4910647043938914, 0.8997137279934591, -0.6673662679732819, 0.012943943368114219, -3.785886098645643, 2.4853844161056724, -2.2065524584814966, 2.9674671914209023, 5.345115992876201, 8.950579239933562, 1.547212663199474, -2.1200099972885136, -7.14782601884918, -5.413734165205408, 2.0081322686694785, 2.7985949425393195, -6.196009266969213, 0.39497026634105215, -1.0993333479188008, 5.9197879750557805, 5.432452710865825, 5.084813530869357]
BIASES_LIST = [-1.8431555916066968, 4.182140890446283, -3.664886731191944, 5.452241604779812, 5.869602727486399, 2.0266009876904096, 2.7648706518407415, -0.5111295473512372, -3.445774255902861, 0.4956446739217155, 4.073377946887219, -2.249760177610878, -0.7360019897052907, -2.972465127722353, -5.959811355612951, 6.380015851468244, 4.762018872662835, 2.085886221839781, -4.259862051316354, -0.2777338555501421, -3.4159015432943227, -1.0447188036884347, -1.5763117609732722, -4.8942566604591615, 3.725777863952386, 1.546394199564339, -4.373993244769618, 2.3645275757284634, 2.533240660419816, 4.140574768764021, -1.0286348276432773, -1.646119509711677, 4.711337091568447, -1.9877235413009156, -0.04236531446169689, 3.859192865218036]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

