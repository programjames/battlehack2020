import random
import math

WEIGHT_LIST = [0.5654941314497304, 4.90489380094825, -2.3167773590568195, -3.5538068477593274, -2.3311480993112155, -5.292446786890026, 2.8630357561329314, 1.8348434473069626, 0.8052043103467263, -1.0990666629735382, 2.5959289301809907, -0.015492732063701622, -0.9125296252633576, -0.7589737992012322, 0.23041180436166409, 4.929419440265841, 4.6820426483157815, -2.9718690862299733, 2.844604298091069, 1.8280072490086343, -0.3722994219806134, 4.358143205073543, 4.927850825090545, 5.4162009041176615, -2.1094554993877193, 1.6057529437675468, -2.1885758816781666, -4.355937146119947, -4.9100712645462385, 1.3947221141279273, 1.3590757837898, -1.1171961615596575, -3.394203730597826, 5.256275107083388, 0.9892922364035746, -2.48277386217598, 4.140030714469052, -3.2837025583932586, -3.7617464539109564, -1.028622153934742, 3.8191392713157293, -1.8633704519173295, 0.4170197172114154, 0.16937746351814126, -3.274181158298836, 5.728619290313408, -7.870355127286489, -1.0340976520556502, -4.602633424507631, 0.8781020049364381, -3.8428239786629046, 0.6690878194649629, -3.595306329647916, 1.892519780542067, -2.2461352490153557, -1.5972394670530625, -0.40623557046748193, -1.97705884071637, 4.899278798294748, 9.867293439123944, -2.1962003569427337, -4.497742892251571, -4.3116459395413855, -3.525839328391616, 0.7318482043495402, 0.18794152804990044, 5.357983146823148, -2.1972190331826353, 1.2254259100854281, -0.6783807734267637, 0.44580408555047535, -10.338767797861351, 0.4883121654777594, -3.6938855295882593, 0.038253157528448524, -0.9672035852908829, 3.3902637140972045, -9.80156640751356, -0.07226269908328477, -0.560360811883272, -2.411084625142624, -1.1087880334540479, -3.2545263433841503, -1.209915282566681, 1.026189453486132, 4.798053953200904, -1.8362970890689003, 3.988415046384171, 1.3653908544810334, -0.6851090422244737, 1.0080381918239436, 3.778801605844223, -1.2439088228679098, -1.0741566765861896, -1.5729641188823524, 0.5296394174349204, -1.754229223810205, -1.1293782841006499, -0.6320015239219512, -3.702074197332396, 4.124992283353969, -4.819640143955784, -2.3333367676607266, -3.613215669262557, 4.94459287633532, 0.7469988070514534, 2.7080136904354255, 2.687284993615179, 4.954992486790042, 1.8786454072987986, 4.389266320910209, 0.613310745884544, -0.5267243731039891, -4.328251598230754, 4.4547580230569706, -1.7184641919708414, 2.554516724284528, -2.7636798469894686, 4.563539359510133, 0.5711275508993625, 0.6180560203095088, -0.16607765025559923, 3.5951228784844287, 2.6146248604271385, 7.01891151511349, 2.4420734206255843, -5.381986266136516, -5.634437080344807, 2.563130440130277, 0.053576525541506055, 3.6250099165081218, 3.8430747104992653, 6.5139542978413605, -5.729808471962932, -5.188957900877272, -5.159028097388388, 5.243678475449541, 3.4941557155569742, 3.577032109788386, 4.550968665937038, 2.0809345013701557, 3.4855665276324648, -5.22256216089539, -1.042790027406959, -3.6851768290607247, 2.52286039792174, -3.9362528673977226, 2.4859467032714853, 0.4638903936602148, -2.487434242875825, -0.43139854650013754, -5.110113210586221, -2.4226155699934036, -0.004680868605895316, -4.140829214545116, -8.676925865144744, -0.21918423636895726, -1.8092804882649134, 5.451771536082362, 3.8055018358169117, -0.9460454218601779, 3.8381798633006774, -4.55870062935865, 4.480686720889065, -1.1250225268698992, 0.3747851657092895, 2.101280759902349, -1.6945593065109497, 3.3688482382155067, -2.6082073398823367, -3.453245607861109, -2.421289795721835, 2.0622870668099464, -3.283003644258222, 1.8467669266933449, 0.19057441480985296, 7.305627474470606, 0.13732470808784938, -1.2426680641318468, -5.37411249894387, -3.2241512758075954, -1.8782609037921354, 2.1565638809368446, 3.648607711564899, 5.1062870620947605, 1.1361652718088264, -2.627779337780852, -6.098873725531354, -2.5110669139280595, -2.123722178980253, 0.08043658901264493, -4.283105227053501, 4.5797756102346305, 3.2390499996565474, 1.9065421827685256, -0.4267263880307508, 0.7508304533988623, -0.5265269027821158, 1.6848325994899456, 1.7657229134358068, 0.12365524390204854, 0.7115906567141299, 3.0399172615280734, 2.4244970404695168, 2.243029295161571, -1.3306995467882305, 1.0384024982273519, 10.581459073164876, 0.5851247679036438, -1.1243190977451558, 0.6078009993607804, 0.7621922988183971, -2.949094205186337, 1.303958453222106, -0.6572628109621167, -1.7500558087562008, -1.6151723184628983, 0.3353846817692631, 1.2895455005476628, -0.7488726989754777, -3.921733314049401, 4.082256240267523, -1.5656427150928434, -0.9517049716214786, 4.245423808522254, -3.524499438869649, -5.026776521945386, -3.3247836079410376, 0.15297766469345195, 1.7495107768360538, -5.341001095397335, -1.7017382834570325, -4.690746161655032, -1.6410116044026286, 5.267257669763665, 2.4027659741402614, 4.259578448638679, -1.1714082376334445, -3.6304635893308, -5.943420564857077, -2.5696570732467996, -2.5956932561786683, -3.600754130124141, 4.85362088266696, -2.5966036660269136, 1.2120424259966978, 2.591162101079983, 0.21911002101665536, -0.081153075278182, 7.124093921908715, -1.5349771341895182, -2.1185820581961208, -2.295058970850836, -4.267566791851175, -4.865904440249069, 1.00988097969203, -0.43309290591514055, -0.3586311164538275, -5.808006980972768, -2.507739331494727, -2.7318009519279745, -4.5776699785951145, -1.8216546202296064, -5.89619353460146, -3.0716718567397083, 2.698201680706476, -2.3714302338417457, 0.6054486176630478, -3.7617247737530395, -0.5419615455861765, -1.6512378339096003, 0.1743615931716297, -2.897506480083219, -5.620753817733082, 1.5105774852874392, 2.02387311160413, 0.1928266617065969, 1.0006428077266964, -0.7755207140301199, 0.3727157844999592, 3.9563519133013823, -1.0285037945832058, -3.9020992112861217, 3.7390441409392237, 6.162148411094562, -0.08633892868610735, -3.3703375819377226, -1.8293384013690008, 2.6426748176344823, 1.7062111792752068, -2.9792106485481464, -2.686057004622277, 2.5540694889969555, -3.5767642182714874, -2.2647858559030754, 2.3711069034573344, 8.834260881748564, 5.945689278942241, 1.7984961375538917, 2.0448258532215258, 4.571664859716837, -1.8740987393323372, -5.8526636652656725, -1.770634752142414, -2.370250049220451, -6.8651772081943925, -2.8797044666506926, 2.296097659089248, 5.05774865995391, -1.4117944290042939, 0.6685018693520335, -3.921340423687506, -3.5953719558271966, 3.2718861013706593, 1.8536760925732294, -1.7770285946703153, -5.66399694367989, -2.4060917331008667, 1.2986082573921318, -5.58877695451212, -5.317196804226103, 1.2701150657506473, -6.795275098019067, 6.38981746067395, 3.4357173037037585, 4.598829894387279, 1.9845559773891712, 0.2822530111759103, -1.2711471587882666, -5.555257885647828, 3.9528419693511037, -0.3419297717264734, -7.425043532811728, -0.11086352913300883, -5.0347346395312504, -0.506082374780449, -1.6738329205116251, -3.461274489452234, 6.513322823569583, -6.777929945603863, -3.2312792123738774, 2.6665971335660887, 1.4781827582087068, 4.186396291144025, -5.698645957346376, -4.628463399509249, 1.7007431151973236, 4.7942941927363, -4.841220254809435, 4.654449162708583, 3.2546812086614287, -4.019228752832428, -3.399205206909142, 2.316007040942197, 2.339893499984507, -3.4057703646050257, 0.04383993651774319, -0.00809385907538793, 2.813439003287392, 3.2477793901983696, -2.255012532560561, -2.82178108742005, 4.914328240173383, 6.051575785530927, 5.282793648225407, 0.1195515852417588, -5.848692791307815, 4.271175157922606, 2.604113398005341, 0.8590581086151633, -3.2101802116344778, -4.701768397417864, -3.6592772756964194, -0.8866100494424108, 0.3426828739619248, 2.0767169242273615, 3.9217114848224477, 0.6752519285910956, -5.651292199744456, -5.260095054204298, 0.4264733301999521, 3.4106271241323025, -0.881213835768495, 3.1569292920021574, 0.13157702645488772, -2.872243973946181, -7.235888495931957, -7.873373637707069, -4.598072157912595, 2.471107699498114, 5.599026108114383, -1.705184922741022, 4.702399522555778, 0.5083312288894787, 1.4334829868784744, -1.297026460475155, 0.3402520988974561, 1.1866587369246129, 2.257642571902315, -1.500766136903047, 4.285249779205147, 5.535185515022201, 2.718847494209857, -3.451422503911136, -1.720964438765242, 4.56345650299435, 0.7054681891440199, -2.145010148707293, 3.8600216532696336, -5.561803597302476, -0.2969469516587778, 0.7841013823915102, 0.9000261837152274, -3.282822578731101, 0.9682573405726376, -5.683788988236292, 4.130436279168658, -1.5740532519067332, -0.7084197177093942, -1.0003342304079972, -7.400881504487311, -1.8371646830147472, 0.7554257333562029, 5.213012247436954, -4.346297794231916, -1.136164710856509, 4.077774104335347, -2.7502869844992075, 0.9097003949859657, -1.9319691138216928, 4.389849122271853, 2.7873198481814083, 2.9966491793107113, -5.910507017133999, 4.944020476679157, 6.185680373394986, -0.7318591254076556, 0.7896017274571254, 1.581185542752636, -4.769722230543003, -1.6136293978610625, 0.6642969070104636, 2.0269305582023827, -1.8283026574248935, -0.36946511918276054, -4.3201158658634204, 0.7151976749084399, 7.992882289348106, 1.816389701935624, 2.933298356287412, 2.4052576105908643, 4.519608369979677, 4.935430391042275, -4.359455022820923, 4.690912863876449, -0.005626104114951458, 3.634110661501218, 2.5534236893108715, -0.3895990080226508, 2.5144314545672275, -0.4230726195954075, -5.918940115973655, 7.7012682460564985, 3.679685317515222, -2.0427060688396015, 2.0763316647790786, 1.4930638759362025, 3.187805405677535, 1.3648002087316986, 3.047327873445159, 5.185274816426638, 1.6660070866352827, -2.317529776108866, -0.11208581270715547, 2.4918306624228053, 1.3493366762095345, 1.5863779821617348, 6.849989540445711, -4.268612389030521, -2.4624449863457367, -1.2009821766449804, -5.091477032102158, 0.5651356787636286, -4.352378012129514, 2.698771064270374, 0.39610904155592774, -4.396356337284406, -0.8148335992783109, 0.479009699916446, 6.260097698678963, -3.2781398873652656, -2.871776706237056, -0.6923784575296628, -0.23787314842703441, -4.8600002032498395, 1.3600117494965458, 2.604770887644119, 1.839898879208567, -0.3624466955944885, 2.7256254223596694, -0.2870572841552993, 0.11092424156271706, 1.5474650632178855, -4.742826243725714, -1.6491558134318036, 3.6237462352117724, 2.864168490004789, 0.49446647280822303, 4.256551969857688, -3.0541315639722906, 1.8156501644753285, 1.0459687411608378, -3.7754976797865543, -1.7802923007277673, -4.920420810976645, -0.9755860435205288, -3.9832788341822396, -1.002827414500264, -5.978100660905556, 0.2993786043147968, -0.042267045012801985, 7.019822415215813, -1.1963173077283473, 1.1055151965744483, -4.017428296095131, 6.946235293914961, -4.075748561060497, -4.123683965065012, 2.042054663796568, 5.111500395105706, -5.502761274621361, -6.397712313866493, 0.9150257059566532, 4.231753507762014, -0.9151371829609203, 8.077332892138406, 2.517047185298992, -2.2955564999889297, -3.335456936879062, -1.9827181915554746, 1.462780970405973, 1.0694901038553373, 1.4474714694499506, 9.032690801715932, 3.8074243499314524, 0.5685863325686956, -1.2680714350991662, 1.8075405995233496, 1.5135526557815635, -0.5402741571429915, -0.2905034718129977, 5.9649000293610435, -0.11854029382681934, -2.7815869366282246, 5.40606458671002, -7.7509634042695, 5.251810172047811, -3.8851203151495626, 3.4048613961357588, -1.0074735929844594, 7.804717088820681, 1.893705316317113, -2.2439680769680352, -2.1721846482977116, 0.043939094495903865, -0.11547697691127569, -2.4553126157131744, -4.421360715819202, 2.2141036734621418, 3.962729487434885, 6.050701124476307, 4.875056818899087, 2.2581394713161242, -2.156611725154201, 0.0214960286852571, 1.8365033810862208, 3.7044868288712696, 8.943775957890713, 0.4040315544965607, 0.23095380482764719, 9.608863922628485, -0.6071104781585696, 0.536753005879862, -3.1928762441613405, -2.5565180417372253, 5.762039993997449, -2.351560826560284, -5.449504028970278, -0.2418068384180976, -7.359252244567653, 2.4177788595472736, 3.0963895092440463, 6.105623493504427, 4.947606382689426, -0.9492247830000724, 3.8051234581925812, 2.9251436440457335, 4.118785305682533, 6.794944813871584, 1.3868310906491628, 2.3006342518687863, -4.255457227664796, 2.0242919535013453, -7.731005461878306, 2.143256100883427, 1.274219546181102, 1.2314471383400285, -5.137627477240803, -4.540047135171824, 2.3650344418156424, 3.0307188605931827, 4.2743054967656136, -9.151076793259428, -2.4186436684145387, 7.4412647984024005, -1.3605875659583078, 1.4409881434633607, 5.83403256932132, -3.4611407983455567, 3.1747637850130404, -2.008508027233097, -9.983963838226787, -1.0547314534766523, 1.4819505089324918, 2.8960686051146936, -0.9127478756993137, -0.7041074637239682, -0.8132770074175374, 2.2818455625978635, 2.4965460359072678, 3.2196463189305153, 0.2826188945014796, -1.4119792050594822, -4.2842277803187905, -3.2260029865250717, -3.4070835775178767, -0.7073421046030584, 0.8636951002146244, 4.223758917952593, 1.9439415723248332, 3.1747749999290447, 3.1100355223753677, -1.441287532478793, 0.15981598441044248, 0.9537990892374766, -3.0859907102649156, -1.6388972754942384, 3.476687987301667, -4.0135966838171955, 3.360865011083407, 0.5792448978231258, -3.6958198294996394, 3.4482162676688484, 5.9202918312438495, -0.4407420485014314, 3.2342068595889875, 0.38311451540426406, 1.859824108173593, -0.9068529377781774, -0.20894498682122883, -5.2713428559244155, -3.349032096676878, -3.712598688548587, 2.353951825478118, -3.8959967242160145, -1.5450953007104873, -1.143069279895256, -2.060968933913801, -4.918507386392025, -3.8704024578054135, 1.9858574379468656, 5.681549616785091, -0.1936915302981269, -1.820388404166682, -1.3645850773055936, -4.273179048489029, 2.345354401705354, -1.5564496239807575, 6.690491256419574, -2.673584818468063, -4.752983130461674, 7.879229582463865, -2.0285269018229877, -3.289301796336216, -5.159011404984297, 2.994573749343365, 1.5170381260625654, -3.561728177589756, -1.3680879768282561, -1.5989353605673575, -4.79925349118179, 3.3336236523982357, -1.2969930803229923, 4.379936627669083, 4.631392461185097, 4.287464196629199, -4.912902549831135, 3.645053117827354, 0.2419554000968327, -3.406404413777368, -0.3672474427924378, -4.740938303836927, -3.534062078068239, -2.063277605880822, 2.5160144561393074, -3.4098959168007745, -4.675684141643015, 1.4306956453885182, -2.75978103799223, 2.0161761961629456, 0.4667127260447243, 1.6674081425401897, 3.962851105241333, 2.9313179988724425, 2.778513809398147, -5.861133492817658, 6.9987831182668625, -1.370574332616858, -3.4752116447395975, -2.849475033164337, 0.14557545310349074, 1.490345095896967, 3.033671646537092, -3.5926926898550877, -1.0634629126749668, -2.7648598103415307, 0.593005658360983, 2.19245847440595, 6.11698050848281, -2.7613353377832563, 0.08480245275866109, 1.474106482885492, -1.247407051501161, 0.7360768860862908, -5.72729406538586, -0.8393368249396722, -2.3856616626833613, 2.3584598674635995, 3.7671679215490625, 6.919217447918142, -0.885396229708356, -2.2384259663510626, -7.987759776496765, -4.321630251590258, 2.999743204951024, 4.218748921486409, -4.409701131650439, -1.7720787963829159, 0.9599938076748038, 7.590298942672289, 3.753028529785108, 4.8774843551427605]
BIASES_LIST = [-1.3761666121340395, 3.7016413671175785, -3.6062148821829294, 4.792876628351385, 6.342140891914761, 2.7729041746638026, 1.1002624027915233, -0.08292992245013557, -1.116992003579055, 2.662987790734778, 2.1268807557437572, -1.38019157474789, -0.002807899039834132, -2.621366277754434, -5.503784966590126, 5.264434420562666, 4.819854001120963, 1.4747198498132978, -6.579936564074152, 0.02436071823956771, -5.075922873833364, -2.8007729166400024, -4.077869576632635, -6.0851913133629, 3.9274134175683857, 2.6454598978150012, -4.025557530698062, 2.9078543694260164, -1.08701421293743, 2.290023220893986, -0.3381297495746152, -2.293446404328785, 7.132125301725633, 1.858036579494705, -1.685136699970292, 0.44508190994379226]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

