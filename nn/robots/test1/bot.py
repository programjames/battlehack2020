import random
import math

WEIGHT_LIST = [-8.114080093472975, -2.1260830093546685, 7.183320198041646, -0.4953782214139758, 4.58754020656692, 1.991899513458286, 0.3743181646964375, -6.780361215488338, -9.325787159851597, -1.5135091500500346, 0.10458547639142424, -1.9090581941283404, 0.06511332400259229, 2.0528121083341206, 0.9978044313310792, 4.122321438099214, 4.867896430508125, -5.126010870855987, -0.4528665945003758, -0.16713662489345837, 4.1761036156192874, -1.0300817627828038, -3.437491885817618, 5.029535158677584, 1.7678044758808247, 4.956666728041132, 0.6001799225391888, 1.5310791421888803, 1.249469658918317, 4.02610171676305, 4.206055783207613, 5.389215753348882, 1.4126258027023881, 5.72694966498511, -2.356529188111491, -7.537710978899384, -4.369318442446897, -4.801037280008344, -3.7100403004685347, -1.755582681526292, 2.020728944592234, 4.560444941616147, 4.238162676012922, -2.0123164284960335, -0.9848726978677589, 8.712592586004007, 0.4020843800829609, 0.9409662493234874, 3.0850258851706513, -0.17962717241297443, -1.3351199491668917, -5.816264599164134, 1.343539636905473, -5.007759243131449, 0.9565390576294941, -5.8684877821155705, 7.654976679378111, 0.8400932992862653, 3.7464767816388447, -0.9178192927883063, 4.3665391290859885, 1.7946637016286842, -4.812761130895046, -3.1012996088427887, 1.3334132480472092, 3.2164347809007383, -0.9473436234396625, -1.9879554895466147, -1.3149396850419743, 5.430523022398854, -2.788417977310849, -2.453089242870731, -2.6108757862166962, 4.474779600805206, -1.394837220114496, -2.4014384165947975, -1.1083755905981718, -0.1587107914059005, -5.647714683703357, 5.897216786047856, -2.6663375887821825, 4.687513057923405, 6.410742152636462, 4.012722435725349, -7.63479048443489, -1.8767365329735088, -5.383378354778597, -1.8225829374929394, -0.40675594987634456, 7.976199969567067, 7.660561831230825, 3.482993670375527, 0.5829666242221149, -2.366417704543519, 2.674498019949004, -2.039049053382141, 2.454308298137909, 1.2037891836179804, 6.220958361554494, 2.168077968188622, -1.8509910435254828, -6.632881653285068, 6.09452456931034, 4.9804378170706025, 4.682140086553248, 2.447533819092695, 2.707972170822849, 5.704690818727444, -5.416122624014668, 4.133431119558176, -6.875449484504595, -2.616966151376811, 3.4804588617495424, -2.7816101365833594, 5.758931465298269, -2.3969090533875166, -10.35020193152796, -1.887615135641706, -4.7202484569460825, -2.746326588257573, 3.364102506552955, 0.3543978685712351, 7.483456763234966, 0.5902742038664732, 2.172828856923778, -0.6379632136932102, -2.6034266981440073, -2.8993498980220833, 0.5313651979818164, 1.764014801511584, -4.946220129107532, -9.640966193899532, 1.5813344367001736, 6.530796782661847, -4.714812437494416, -1.9168687498516368, 4.0112449554678395, -1.2909925258511576, -4.157095726458611, 0.09972759431568445, 2.3467792039818347, -3.178745108531145, -6.638036886652498, 7.3338214882188595, 7.639594254858905, -1.5641765262583953, -2.911314542354443, 8.297292302187783, -2.677409568293945, 2.5810657102283345, 1.8729625658492275, -4.041719977433622, -7.065042250831074, 1.2161675301687034, 1.26450161719264, 0.2720605220307144, -4.0773839660929605, -7.346964469719784, -5.381956046183032, -1.4605340810841607, -5.046058306608298, -3.96400978445981, -2.988705124706395, -6.416600510958262, -4.978751282475769, 6.919937977664581, 2.498777183782974, -0.11496562152882867, 0.40656836074652947, 1.2314570770866864, 3.001915836745683, -0.23708010854616973, 2.055060905932449, -3.3177209086594237, -3.77403222642688, 2.0107691837829442, 0.7079327788957872, -6.352974069726158, -5.175242266634611, 1.6389266390310873, -8.004335737671502, 8.508667880595736, 3.578104931470623, -5.913698763625332, -4.263102634428767, -0.8045030907023588, 5.534844372853558, -5.333446103578098, -5.089029810288227, 6.66716165805151, -5.48233361202725, -4.469145331097737, 4.514016300443267, 1.8999397317741884, -5.542129786515266, -5.475426551035099, 6.919914550257916, 4.448354786844067, -0.24767568061496098, 7.2353917745510286, -5.465078479281546, -4.72111352930331, 6.539966938694976, 0.6429583313858876, -0.3955666954419731, 2.2738494372903393, 3.042927411563123, -0.35319510548178723, -7.288787376979784, 7.682675067619317, -7.148764066605604, -1.6059815787967266, 1.4974430228054592, 7.293298606053472, 6.333861846257699, 5.821468533471927, -0.8152888878941528, -1.9810420721435904, -2.518663203472234, 0.6101460985358296, -2.1359058103489676, -2.36123498531901, 0.4388988694364817, -1.5085579118988284, -4.666913276738542, 6.164541521605008, -1.3202585351428338, -1.8144221561321, -4.119379911369223, 2.7320192642337044, 2.184536395085895, 0.9084845403084667, 5.980619337493565, 3.627674548546927, 4.0145188321139385, 0.49728951803897203, 5.437136344475242, -5.64178204102802, -3.0333978459602227, -5.3397125168018125, -6.42564046644096, 7.55994423701427, -6.648843813938, 1.3342460090726038, -0.2698313327537539, -3.225214263908576, -0.31195304983048777, 4.210330882744619, -4.6896899182054845, -7.3665839135023905, 2.443461874856294, 2.02462200874262, -5.186240380707087, 6.458864660937118, -1.618324804242002, 1.6554490195294025, -0.6108242086111174, -3.9689118651505604, 6.194990008115111, -3.899235344890325, 6.107127120635526, -4.090859762828215, 3.04767895390839, -1.114226785513568, -5.083487118772232, 4.6644207589776014, -2.3172193947917066, 0.3859842511662789, -8.208404781135542, 6.800326244250048, 3.0110424995208227, -9.425700048642787, 2.143376542577763, -6.196963229447262, -0.5314954109024906, -0.041160725771172496, 5.8108699514317195, -4.2236796387438735, -1.363545700776382, 3.319257021815443, -0.9443977627709598, 3.8727896913843987, -5.627681807509864, 3.130058895659774, 3.3430056298632573, 1.9729685388929303, 2.18944955596547, -6.4276012056096015, 10.26961479864337, 8.980467444560173, 0.5716369688524748, -3.8944559461605666, 6.308738178808423, -0.8320074670583012, -0.7036265697849697, -5.913681951592581, -1.4256624117845702, 0.5865532643598077, 4.88914099664276, 2.070257256282523, -1.6792801873778436, -0.014503724491072068, 5.20910796750358, 0.119964645668099, -2.1199101105479907, -7.656006431042739, 1.802039869750857, -4.208627960735387, 0.9708921211667956, 3.8278987328421232, -2.3265972568661324, -2.1612342406567344, -7.52918068885164, -2.8731475046292845, 7.659895122998825, 5.309038775436961, -3.3169208363801097, 4.453425427448528, 1.2714505426638234, 3.339726843161386, -2.928509718270666, 2.8972662181204694, -3.2361852006539165, 5.540312887797893, 1.4287093663216093, -0.1930520115592161, 0.7186692064829197, 3.568171972689284, -7.230227506958308, -0.32758005453296557, -3.5651236921686307, -6.789434194115972, -0.5319425756563885, -3.921729991730455, 2.9431960401505917, 4.846241594686316, -1.5834896751006156, -6.543144715450319, 5.02437287909259, 3.1275104034448713, -2.349135889946865, -5.5052535862365835, -4.209558453590467, -3.6513396375531, -1.8558605365511895, 6.88160213282947, -3.6680703757511237, -7.977893882859285, 1.7579502114652616, 9.079853780846415, 8.778374476597135, -8.861298802395403, -6.978236447711959, 2.562053360486787, 8.21491463741849, -3.0202311190474926, 2.3520541634416077, 7.619513285557914, 6.3405619089050385, -1.5220185290374417, 7.448417450188529, -4.0835311472634706, -1.3542718091178632, 1.4227918035899598, -0.5648518426615459, 2.397381356688646, -5.49508832567518, -5.850639245218162, -1.8961933747231912, 2.1903556348285163, 7.613899373132167, 4.252928029909797, 0.4156725237333363, 3.633181168243028, 0.3333420159408542, -2.36388434568659, -5.0075861972266384, -0.6424997115690545, -1.4889393241579774, 5.477214196184529, 2.113388693141861, 2.9877717033131965, 3.934491227314658, 3.6378187450608035, -3.4764513501961263, 2.1328587627705424, 6.711495575220989, 3.3949174599333842, 0.6330448527965529, 2.558226222511103, -0.042549201810324455, -3.352122048736108, -1.2917221311916844, -3.5949588285404825, 1.250719810743966, 1.6589057346319194, 0.04302827680441956, 1.6502750873178966, 2.9554146413782814, -3.034998762759268, -6.281897496884353, 3.1238310936077847, -5.529068244497383, 5.948408467815929, -0.05262592029064447, 1.3131596635401799, -3.28357110923441, 0.41480630051160405, 2.3011503547196677, 2.8609108138053836, 2.8315397492319585, 2.5611656124621938, 3.8273930770328013, -0.010250893242122694, -1.9208360667022657, -2.556182313543374, -2.54010211494786, 0.32896801432991873, 1.3410831766749773, -0.9808979069006112, 0.7346552823643842, 3.1469591578688645, 4.201405096338253, 2.1622472761939227, 1.501485153630559, -4.653098148183166, 9.205580774972944, -3.3460709699546003, 5.100514127259664, 3.8817888792485107, -0.38904877484299927, 4.927017589849102, 0.32675454603064646, 3.3926450138010846, 0.6216316421633621, 3.3584100754284156, -1.3187776254891377, -1.6973528218938936, -6.434301853257436, -7.744754501577837, 1.0222718522285612, -3.5425016422469495, 1.3028249395291274, 1.4677177087436326, 0.6990312725109128, 6.851362670487329, 7.719441293343352, 3.2173558814692464, -5.804131566210686, 1.6525889645834875, 5.236662526372852, -4.055715162243911, 3.1363248553112397, 2.4878805418432144, 5.688240070717816, -0.7664390996644997, -4.28676328891933, 6.645903169917176, 0.04523003307772, 3.856020043444869, -2.9890794193817607, -3.7717071333134937, 0.4167663689827509, 0.8704959352784027, 2.798611824306117, -4.554431039604602, 5.196467696423697, 4.889396869089612, -3.3663634260045994, -7.662022816413471, 5.208076626839868, -1.6911353423011901, 6.920697977024665, 0.18513540023897546, 1.5521767453361213, -9.195923085298839, -4.299561516245083, -0.8972539513859631, -1.3725451698206, -0.8491005036665945, -7.2407270278229126, -0.6211842158060003, 7.8504988952187995, 8.07270670807242, 0.39566386678141297, -1.2482372212582729, -1.7000724050677691, 5.564112799236476, -4.092862303983057, -2.0678151613017492, 4.636356704215013, 0.492646144842539, -3.1390911883379466, 5.151080789977468, 1.736446712465541, -1.0053889510129075, -0.9314592890364264, 2.1194102481259725, 2.8104423868553923, 3.889089257488096, -3.27863524484585, -0.951529000572477, -2.966088919300806, 7.1666912334942, 3.108320273472634, -2.396383067892943, 5.2443177470296565, -1.7931605304663891, -0.23023649859794315, -1.6893819732864792, 1.7270572348837063, 0.47651368774424774, 3.767512238562487, -6.932003623811199, -1.630465889970464, 0.26308221760403594, -3.4438706225345515, -2.3782816792251946, 0.5210305902407628, 2.2934096404980355, 3.8145732045035974, 6.319982931790192, 2.097192516519801, -4.464230076294856, -2.971630156087742, -7.511809251750504, -0.22503520655126877, -4.161811951843855, -1.5956942797211329, -3.0456629393655925, 4.670737086292028, -3.7191225569327386, -6.674087164667081, -3.188794713739682, -4.084426039791727, 0.03948023808013679, 1.9574286395822444, -1.880474761240097, 2.3567458575942473, 0.7541704869372079, 6.564928709712249, -0.9926287510308771, 4.180464120612068, -3.903546149654616, 0.08267899268554063, 1.5728864152841242, -7.918682004408677, -8.6172590304312, -8.18050601161546, 5.95727861084663, 4.3699981301989945, 2.0715629423500728, -0.3783987959089557, 0.6754416863687462, -0.08719752728356278, 1.3221725173732244, -3.0018954118298504, 3.580684519172605, 4.225956685216042, 3.1451572543419895, -5.301476751668665, 0.3441694608048874, -7.131114982577549, -0.6712941332138851, -0.348400974650368, -3.3679047344431607, -8.305323554591588, -1.033706559897139, -3.025510965438844, 2.2976565563683318, -5.238173230989413, -0.31209769979089064, 0.3868852159610414, 1.2688489074025489, -7.172790108840502, 3.1952271023913736, 3.8996295184282914, 6.056319785735243, -6.503582804169436, 2.6298978113671962, -2.3118199594723627, -4.952329962848233, 1.037433121659498, 3.8645968028049484, -1.8540177710890757, 0.19800994814870226, 3.2749368639832026, -0.37465864700325796, -1.4338972204187186, 3.8257573957288677, -4.651643257236234, 1.3455820431596888, -1.0549786778606043, 1.0499746863892216, -5.063756482993775, -2.9732012309896394, 2.3042089913832404, -0.6867835920602591, 0.9649731015646117, 9.587413934796027, -3.43959912867002, -9.937292468968373, 0.6170109487661941, -1.1606514197728042, -0.8950074427347922, 5.376955837045636, -4.419470338003526, -2.8257118008671434, -1.2523605474663588, 1.9279019216087108, -4.306454778904691, -2.8027188122919418]
BIASES_LIST = [4.069941927615057, 2.1740971316208597, 7.242586459800789, 1.8466539255660257, 0.8545759626804426, -4.087933743810056, -6.645850557874457, 2.6113844149851717, 5.387525705630678, -1.643933128855932, 5.612639556103586, -7.219150080722613, -1.5588558645100454, -3.0193907319819084, -1.034594508970927, -1.4647493834564884, -3.308246792320255, -1.248273006995589, 0.6138175060053896, -3.6484296375783805, 6.026644011396577, 3.2288793984200668, -3.6445401146568566, 0.38222312154942295, 5.587671917659654, -7.864119427012695, -1.6075951583041415, -6.273091278455398]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

