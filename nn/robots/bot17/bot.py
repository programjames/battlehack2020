import random
import math

WEIGHT_LIST = [0.5608138978728767, 4.905045819258806, -2.3148217566684823, -3.5475842828341944, -2.3231801429361485, -5.285353855433797, 2.880382549234823, 1.8293462319409999, 0.808408327168512, -1.1013057750566746, 2.6028393874378075, -0.014030249772394756, -0.9060181359360017, -0.753083966598839, 0.2359057414810206, 4.936015346607639, 4.675197862327146, -2.978765810926224, 2.831184060242396, 1.832015771855466, -0.3792972826621462, 4.351219921882581, 4.927939353217264, 5.416940104237636, -2.1129176570256982, 1.6156248662855477, -2.1834228332308108, -4.359084142741748, -4.908166334673579, 1.376734414661632, 1.364748473917069, -1.124218603625696, -3.390967585957484, 5.256757840489794, 0.995724208217383, -2.5000076408004923, 4.156445401666678, -3.281593229985316, -3.74941557368179, -1.0281495726700052, 3.8232350068823533, -1.859174421451978, 0.4341579024423522, 0.16117357892313763, -3.265729579111442, 5.725233273029135, -7.881447741245502, -1.03701616482766, -4.616272060060024, 0.8842914560712737, -3.8440836557885114, 0.6736828517851239, -3.579590774217442, 1.8917813007732018, -2.25264115105029, -1.5855914940878049, -0.4120862338023918, -1.9814988960656372, 4.8934780510673255, 9.884193930437787, -2.1907137955065488, -4.4922862724537795, -4.3167029046098655, -3.5215970749098373, 0.7292989788183163, 0.20061715662023932, 5.364819111568067, -2.1940072364455006, 1.2295226760545277, -0.6849047799843403, 0.4451330453912722, -10.345175800734975, 0.488038931857429, -3.691283455693584, 0.04313685379030377, -0.9672782160039901, 3.3888024910608374, -9.800720848973281, -0.07139161891379359, -0.5658126843803662, -2.417387636907808, -1.1070827597651496, -3.2588433181253613, -1.209197330270321, 1.0163823683945201, 4.808232807417277, -1.8392978564833873, 3.9905880255154114, 1.3625003250995538, -0.6863885804132761, 1.0019460787251877, 3.78338771359551, -1.2515857336871643, -1.0621953156659103, -1.5812647757392102, 0.5306172807808303, -1.7525863013293623, -1.1345378465540374, -0.6269421473603299, -3.6934924781426455, 4.127139463377212, -4.8250320344903255, -2.3277032627133654, -3.61475406490949, 4.935501994901387, 0.7460727064614995, 2.7035449012585726, 2.6898059121354554, 4.963162472575434, 1.8825490991433904, 4.386450995293395, 0.6025293345910169, -0.5315996499357151, -4.313941449408944, 4.461202757797405, -1.705761726810704, 2.555899681758114, -2.7733308110764616, 4.568070673746335, 0.5750950879955435, 0.6317438536481167, -0.15540673927016577, 3.597548502363427, 2.6167412461416006, 7.00889117696287, 2.440309043698831, -5.358264431038222, -5.635975385943642, 2.556545926956348, 0.057372487959526264, 3.629081659988511, 3.8419844774165957, 6.501746488601236, -5.746106438432906, -5.196667929403899, -5.155865802228496, 5.242068892812753, 3.512232774472603, 3.567938152949759, 4.552051897836662, 2.0747812131276095, 3.4791969504399987, -5.222402127247716, -1.0570462654746102, -3.6845912302467703, 2.5140091711844796, -3.946041346866637, 2.4882070016645614, 0.4643404242411244, -2.4842831795959683, -0.4210846772440573, -5.1191699591493105, -2.4229323545801176, -0.007843723217759318, -4.156469459103706, -8.681191651362742, -0.22353015880143554, -1.817902073500756, 5.464516652924352, 3.8063554546975458, -0.9505377197756599, 3.83888059981061, -4.560158435190417, 4.483010022284819, -1.1284995356138123, 0.3647026610377928, 2.11139900080488, -1.6890346513148506, 3.3691434514770298, -2.599268167488145, -3.454621134514299, -2.4239539591872283, 2.0652279710951085, -3.2870585179284895, 1.8363850205313095, 0.19557972364666842, 7.304124615223981, 0.1341180730088059, -1.2338961628536846, -5.376686771544248, -3.219235402019576, -1.8775197483773964, 2.1495199955451745, 3.652852881508502, 5.118604135740577, 1.1295453488255092, -2.6346639400822918, -6.110368050931078, -2.506721055957836, -2.134961036731835, 0.08846980475009639, -4.282973792393453, 4.5758108367817885, 3.24875878060994, 1.9179909558225996, -0.42938444164362444, 0.7554900056674305, -0.5176846987380436, 1.6917504370639742, 1.7646971881112232, 0.12677174069083214, 0.703564803832841, 3.0350932769089876, 2.420427683815332, 2.248661302409451, -1.3493501622189552, 1.0366972126942633, 10.581554290809736, 0.5774483716367289, -1.1197636614889552, 0.6049125387804104, 0.7515732900140341, -2.9414634839034495, 1.3034695893536163, -0.6589837810562512, -1.76142040050142, -1.6125708120192956, 0.33155600684652836, 1.293696462799163, -0.7548393157057117, -3.924227756766847, 4.084567319302584, -1.5773597568998663, -0.950606762700539, 4.2560943692290145, -3.5289327105753734, -5.027607380670268, -3.319523833981289, 0.15527781990692122, 1.7405997693758932, -5.3379125375114205, -1.7026628618569644, -4.688259018921122, -1.6492792878446074, 5.271848810999073, 2.4087929265642662, 4.2778170812088545, -1.1727552349622417, -3.621803352113317, -5.937342169978892, -2.5710656586972247, -2.5899390150860158, -3.5970406748024013, 4.868240049170868, -2.6040292116087786, 1.2152302307791039, 2.592694151003688, 0.21845283782650307, -0.07544140822568327, 7.127972879457949, -1.5428189193265631, -2.111804410468779, -2.3029063297466923, -4.265775301758279, -4.852071794118088, 1.0132371720749704, -0.42061367787303333, -0.35401416350445625, -5.8129545016952076, -2.5115237522199, -2.7313260835124082, -4.573439110540329, -1.8313322141019317, -5.905817797174344, -3.06581683792439, 2.687707584065626, -2.3662438753999027, 0.5968867313860531, -3.758231235929448, -0.5484927671672171, -1.6590698495953446, 0.17081689802431352, -2.899415954227114, -5.623350798789068, 1.524805806785849, 2.0259606629951463, 0.2049117520756068, 0.998875408483994, -0.7795971642432035, 0.3683030746933216, 3.9470394755013034, -1.0334276941360983, -3.9020327052255044, 3.7527295152073297, 6.1633466385188775, -0.08445429213172172, -3.3799811640237376, -1.8237413766767936, 2.640854258337114, 1.6972650629134167, -2.974576511252945, -2.694554275563584, 2.5467816989448058, -3.5709152671919386, -2.259575172616928, 2.3607789427623884, 8.833935298262299, 5.940533739474349, 1.7973625201457537, 2.0474044637740243, 4.55985274076421, -1.8745838121292353, -5.844227653723243, -1.7730033058964958, -2.379430648662485, -6.861068756355707, -2.877517477545028, 2.297413577787821, 5.063902880626948, -1.4300825874833571, 0.6815694238976455, -3.916353022272135, -3.5999543291620815, 3.2599758586618153, 1.8432126489221718, -1.7827286918818919, -5.648965174945599, -2.407095934258236, 1.2886410106793584, -5.595313054324496, -5.315120067835224, 1.272334591564847, -6.8037316389871325, 6.406490630232866, 3.4359242880680716, 4.602126088404385, 1.9993094813318808, 0.2799491935235021, -1.2657102620497018, -5.562080070478245, 3.9668383087414694, -0.335784104349334, -7.425092396974993, -0.10011414586756251, -5.0306575388433865, -0.5119021972690768, -1.67473615836254, -3.4546875670722414, 6.51814832097382, -6.783673931136552, -3.2363612389963015, 2.6632550089201144, 1.4747210931216894, 4.184210456081882, -5.693820443989994, -4.62871513593803, 1.7026183906817545, 4.802743746118774, -4.851004549083646, 4.650972758307572, 3.2511932029793607, -4.02523202650399, -3.4008266070433657, 2.3161993871259945, 2.3337146612774937, -3.387121598461257, 0.037678864898712736, -0.0077013593110194425, 2.8229176995502026, 3.2385900894308666, -2.2475939629612367, -2.8239840447584914, 4.9228314008548635, 6.048378496954436, 5.288675408106557, 0.11480583085281539, -5.842979100698129, 4.2662492645986045, 2.6072367446348954, 0.8505922820672932, -3.226405087895173, -4.717851491330514, -3.6654037056505073, -0.8926371434083925, 0.33703657798975584, 2.0731376862927164, 3.9232682435569304, 0.6804619694378934, -5.654074291400789, -5.259827056056472, 0.4249915566670649, 3.4264750733091884, -0.8712983985293523, 3.1699912604070697, 0.1198348441038518, -2.8735537644462563, -7.229320540713712, -7.880951084997726, -4.598718029640926, 2.469052696839771, 5.608291355907082, -1.702931388830496, 4.708227979557234, 0.5158128257740173, 1.4462429418061464, -1.2989858742145008, 0.33901310015313074, 1.1835868719290141, 2.2635006892635126, -1.5002619867678781, 4.294355358736474, 5.556931157240077, 2.71803739244792, -3.4512386360335965, -1.7140126120557626, 4.537416521656909, 0.6975469198294213, -2.144581836571549, 3.8679089200555348, -5.549067883807193, -0.30090774814484506, 0.7885890293540253, 0.9076432012185228, -3.2831239879144456, 0.962158899586434, -5.6882043343943165, 4.134353933916882, -1.5805160841897, -0.7124982693853799, -0.9959212680162305, -7.398254477776762, -1.8349545685991306, 0.7548803408180839, 5.221899560270271, -4.349156374147788, -1.1501461174462728, 4.087219785659653, -2.7429843198123764, 0.9169090725993873, -1.9429951026321333, 4.395874212193952, 2.7841247947436214, 2.996051670116486, -5.9112968746591905, 4.932032582994681, 6.182827154248099, -0.7377566865010123, 0.8139269116011738, 1.5826934251032219, -4.762049136910665, -1.6147805403865902, 0.6510998305827532, 2.0172890250192865, -1.834418539813757, -0.3763513401911645, -4.327152750488558, 0.7128818551651522, 7.98587749787952, 1.8076498883362309, 2.928846495185765, 2.4158461029393674, 4.514821747044568, 4.939196969914683, -4.360942702020676, 4.688775167319257, 0.0005521198476150574, 3.6258679783927423, 2.5547364082200223, -0.37784099871623966, 2.512965077314731, -0.42231213575987026, -5.913420666714094, 7.692318087303018, 3.683685044796833, -2.0428118593920717, 2.0645993596894034, 1.4961244878658129, 3.1950367422839934, 1.3685829676168215, 3.0455422261439318, 5.183888812594466, 1.6514118616776847, -2.3237081937577813, -0.10469178105316244, 2.493011833459941, 1.3503776015662965, 1.568263218362562, 6.847908471923134, -4.277925268548625, -2.4610922644304933, -1.1899041202558605, -5.079961753547081, 0.5655174807184028, -4.349634002701076, 2.698283695553547, 0.4026951817813391, -4.408379810680135, -0.8203160169304298, 0.4784965171097898, 6.263013322257725, -3.278541385288929, -2.880078719055037, -0.6999752297567441, -0.24189022668031665, -4.8614048967495735, 1.3607529014292772, 2.6023016285620226, 1.8376260968593698, -0.37218696546831204, 2.7256291482580983, -0.2851176423745855, 0.1134406909754814, 1.542671332361931, -4.742686615933147, -1.6563034754530555, 3.6045622794216685, 2.8716789980207458, 0.4980836545767529, 4.255340158121524, -3.053716180553334, 1.8227160939403926, 1.053405763780492, -3.774415248484346, -1.7928348612213947, -4.909283648366164, -0.9745777679826918, -3.988206218795077, -1.0101784955873256, -5.973039924137426, 0.29563100209677956, -0.048403662715136006, 7.002652575552096, -1.1889721764051753, 1.1107549688861926, -4.020201499355047, 6.955653252422004, -4.080966510295093, -4.134286641901519, 2.043896731624214, 5.101987807101325, -5.501876996620581, -6.402059930244795, 0.9131931334524312, 4.224577525700961, -0.9055082474743211, 8.069703486332, 2.5301149788688724, -2.301728216007029, -3.332609107946566, -1.989839086432727, 1.4641820257084186, 1.064467081337986, 1.4350932520920927, 9.02671001366708, 3.8063614373152053, 0.5649180764235812, -1.2636970770479252, 1.8088341692827743, 1.499700754063501, -0.5516350869800792, -0.28277216953897705, 5.977105330177484, -0.12254573833764729, -2.791747962945141, 5.4042138656175736, -7.762338475760385, 5.257637044961114, -3.8891877122914518, 3.405326083966555, -1.0098605613839924, 7.809960674510721, 1.8948755985048442, -2.257365974543219, -2.18328665469354, 0.03377145629211212, -0.12519429578598607, -2.45729666522544, -4.419126788883986, 2.216139065702678, 3.9624061894017872, 6.0414925131717645, 4.88110327558126, 2.2523776285854344, -2.1550133451606968, 0.028196147296090133, 1.8530839204473244, 3.702667639017391, 8.938203123873762, 0.3966370643233838, 0.22335614090023606, 9.61014314711163, -0.6167065430492155, 0.536297933596003, -3.1882695006799024, -2.5557610145953373, 5.775690751769706, -2.344216173818616, -5.443170128095156, -0.23891622277239405, -7.365250382323613, 2.4211026282679784, 3.077799374226008, 6.108445447934733, 4.948554546227722, -0.9554809135715838, 3.809462487493773, 2.9140008007773472, 4.11273572348006, 6.786955591256851, 1.3843515232080348, 2.305271283187568, -4.255104765546849, 2.0209423892734586, -7.72162522030232, 2.156903284039807, 1.2615383730986613, 1.2182891163885106, -5.141256632740707, -4.542420633163938, 2.355698535264324, 3.0304868744048523, 4.2720898410816535, -9.136439045767101, -2.4208903257974015, 7.442209048953655, -1.3555152805094244, 1.4399778085137145, 5.833716021056865, -3.469755151045865, 3.157969559252626, -2.012405175466628, -9.987911117612677, -1.047578064293385, 1.4716404137362205, 2.905499016279159, -0.9092794902731844, -0.7070942006589052, -0.8063796043468708, 2.272296797310059, 2.487398532973346, 3.229222209576647, 0.2851548392106699, -1.4198626844835702, -4.29603344175657, -3.230738004204484, -3.427990545602681, -0.7122433803557442, 0.8672672304881581, 4.222182424827164, 1.957843313789119, 3.181112173840617, 3.112693793326016, -1.4455910675488202, 0.16319183457703376, 0.9639690315778505, -3.081082992788106, -1.6422457127728993, 3.477050879082738, -4.02296414812802, 3.362121440366482, 0.5722371442658507, -3.686830235431102, 3.450524414505543, 5.924766524816047, -0.4463319381615674, 3.2246603466897605, 0.3835559912832246, 1.8451166010202145, -0.9151409586392143, -0.1984208029572447, -5.2615270980617135, -3.3598125893679796, -3.7110276102976494, 2.3436079861074948, -3.897999893101388, -1.537911361804644, -1.143516498851069, -2.0581862656216137, -4.901648346637599, -3.867666832392075, 1.9864584012929876, 5.677678174112531, -0.20486538710726415, -1.826250619976771, -1.3568450450655465, -4.277687112155824, 2.3470243068058108, -1.5540072008915433, 6.688639950945714, -2.669863991480778, -4.7432705344768396, 7.891965090967828, -2.0429346535320048, -3.2808756983680913, -5.1565383788867365, 2.995948961795967, 1.5237901406878207, -3.5599786478670064, -1.3659695993676109, -1.5899358663455598, -4.802908665811704, 3.334784258433633, -1.3057622075257644, 4.384315012239687, 4.631439814766575, 4.289699947188035, -4.91129443154096, 3.6476582236060615, 0.2340980410868072, -3.401642165339311, -0.3580835731836987, -4.741444635160559, -3.5384157342326, -2.0692813746903305, 2.520999258006003, -3.4115840987436292, -4.682842208954169, 1.4307824001588751, -2.755077136971048, 2.00807341329378, 0.4743227018191754, 1.6730000407502956, 3.9649510697492047, 2.9320909160682387, 2.7960351990672465, -5.866806055122378, 6.987521307929138, -1.3549062728113574, -3.4677644211799157, -2.8452984138005117, 0.14959432416294724, 1.4935244460256167, 3.035137567217645, -3.593449016807756, -1.0573656764673383, -2.756321482904482, 0.5823498280519326, 2.181326572439668, 6.121890973266617, -2.753720725204602, 0.08633282448154252, 1.4753788658495806, -1.2521285320190598, 0.7357397258129424, -5.734356846533918, -0.8368735231549644, -2.381729408497159, 2.3593965790317117, 3.769482862696826, 6.923319373331922, -0.8678391047982851, -2.2250688079914034, -7.982583468950449, -4.3247432261999785, 2.991428002376839, 4.22515133433899, -4.416946589207492, -1.7762769464787862, 0.9700472950553005, 7.597833464681959, 3.7592011107352254, 4.881460807196955]
BIASES_LIST = [-1.381232145899697, 3.7095839758824716, -3.612961022468185, 4.793364224818018, 6.335589990491582, 2.770913957256208, 1.0987258006961407, -0.08375483576907798, -1.1041092268126842, 2.656877914180055, 2.12137717868633, -1.3665398403026119, -0.00831259011748011, -2.622985671778991, -5.499155162590212, 5.268856083372541, 4.823061811375006, 1.4770158832386915, -6.5651976542210715, 0.023624185000577773, -5.070592798164305, -2.8038601525953406, -4.067108643305993, -6.0992363723080745, 3.9287114481500054, 2.65191734244102, -4.027139908382304, 2.9204108854858855, -1.0834401547302521, 2.2998748261724935, -0.34385033638164336, -2.2941976125147714, 7.123315945355875, 1.8486381614659002, -1.686084614693223, 0.44525610232662916]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

