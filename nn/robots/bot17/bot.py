import random
import math

WEIGHT_LIST = [0.5682749914820158, 4.90186662111088, -2.319254827451996, -3.5554921277784466, -2.325643897970168, -5.295633140606736, 2.874684134647515, 1.8374372613782597, 0.8118233644556465, -1.0978368533612264, 2.60274731544847, -0.018649971683154146, -0.9040391107890482, -0.7594910446768279, 0.24316667905267683, 4.937469681359031, 4.68202306962495, -2.96681972272576, 2.8409379561316035, 1.8333570057456328, -0.37834272021380283, 4.357544680138091, 4.921651507855371, 5.4198763808876285, -2.113517047355551, 1.6011531330592355, -2.192688343298324, -4.360824752784351, -4.9089777248525515, 1.3962454585503055, 1.3569215198617737, -1.1118193971316346, -3.3957742652174114, 5.244594324304961, 0.988738489566896, -2.4935752603746906, 4.15532320668401, -3.291741694420857, -3.752314595429044, -1.0351834231227472, 3.8255042536268116, -1.8626585564339484, 0.4346720158707011, 0.16523636537769468, -3.2755122895019837, 5.724436812795609, -7.869093156450409, -1.0295967441882228, -4.610768968024531, 0.8765643309544795, -3.8447224969235188, 0.6707223457384736, -3.58765929053058, 1.8908280328567482, -2.2393899179509527, -1.6042949422795774, -0.4009213553357542, -1.9856247816427663, 4.897832339829724, 9.858440570267527, -2.1868534025459567, -4.494682723397212, -4.305625893753806, -3.5185734259531505, 0.7339504509768711, 0.1910970997628721, 5.3558336585480495, -2.202307720188665, 1.227587382545663, -0.6803211455289103, 0.4501698959825532, -10.346822157850278, 0.4848764783792443, -3.691017962644738, 0.04223901616193328, -0.9687607911138625, 3.394041499897179, -9.79293205383119, -0.07304893124633875, -0.5657348418862908, -2.404303870485427, -1.1113398279220805, -3.254726700073027, -1.2111628231673028, 1.018608121264749, 4.802163208386242, -1.8349178078294686, 3.9883936039311023, 1.372608000710383, -0.6829757476564924, 1.0012458429347528, 3.7814570927308395, -1.2465161756833538, -1.0696633402496376, -1.5805330212446842, 0.5340369706097234, -1.7601059661015983, -1.126194882815452, -0.6322904256029734, -3.695523136480418, 4.127536929196568, -4.821223375999048, -2.3366487636558415, -3.609874331745017, 4.941882808326685, 0.7509274767628454, 2.703535530805043, 2.691012004107134, 4.955709034345636, 1.8796711737671465, 4.38356535615874, 0.6113133427962031, -0.5295300018109308, -4.329044515528677, 4.460102536380349, -1.709097346012135, 2.5449751854053932, -2.762378152365219, 4.560449987127879, 0.5694852386154351, 0.6294241360551388, -0.1646990026878049, 3.5978083453278176, 2.6138709480430316, 7.013912921114138, 2.4365067116385477, -5.3777329480834455, -5.626719265517608, 2.5585406834540874, 0.05864938037208968, 3.6246893970540666, 3.8461791341138416, 6.50244356660116, -5.737510427186963, -5.198640208430789, -5.154264750436689, 5.247827506933906, 3.502119979701998, 3.571427047203479, 4.556387743974443, 2.0766768458627847, 3.4757221569820147, -5.232876926066029, -1.04396677501344, -3.6822027839024547, 2.519147453414387, -3.9360894069448626, 2.48780257402624, 0.4625294264351851, -2.4869171613255827, -0.4285765831938217, -5.1059423553586925, -2.4129252781772945, -0.006154054492772529, -4.150769179008743, -8.685771075727827, -0.22016754761924107, -1.8192058959107298, 5.4641230370264875, 3.799214014386138, -0.9460060805250381, 3.83861903607394, -4.54991242459675, 4.480544641351999, -1.1306798334113424, 0.37094603414925365, 2.108274238111908, -1.6986510680192168, 3.3717632869304066, -2.607588612310014, -3.451031659706015, -2.4148550040774728, 2.0686313711800466, -3.278651211900956, 1.8369762022810454, 0.18524936312417561, 7.303049062493555, 0.1386366939301357, -1.2319291715146827, -5.384441811247092, -3.2223302234554967, -1.8809601465607892, 2.148955648339277, 3.6494873630825513, 5.106173422198654, 1.139744790232995, -2.630934843991435, -6.095772810022905, -2.5130782837355077, -2.136931851610586, 0.07443241028397145, -4.285260895193412, 4.575410677231576, 3.2497479806311556, 1.9105490034429762, -0.4226618648279853, 0.7578006913674428, -0.5196296627068202, 1.67575637148906, 1.7612320697729031, 0.12356457622873998, 0.7126904830849554, 3.0324622995677872, 2.429769821333079, 2.246771460577491, -1.3396512463562629, 1.0389078659743283, 10.578532717722787, 0.5903547111242842, -1.125694341589712, 0.612367463683136, 0.7545112707387631, -2.948111354327802, 1.2904294593796872, -0.6675542023779567, -1.7552356300838325, -1.6055316037514713, 0.3388276783886393, 1.3012809627700685, -0.7498864594667284, -3.9292820113537386, 4.077800881857994, -1.5691561923122763, -0.950206745798282, 4.246160331653846, -3.528477713578857, -5.033307027835723, -3.3227005349807404, 0.15811952175076313, 1.7543870025831174, -5.3392444577198495, -1.698256663435297, -4.693409487232762, -1.6384451772168909, 5.2676038642402, 2.400230549547996, 4.26842078576544, -1.1673687061620053, -3.6309539050686426, -5.9394350032079695, -2.564194753305534, -2.5924012263085543, -3.586767458288348, 4.850043325155095, -2.6044541255427247, 1.2236923656935097, 2.5973646657519596, 0.2213057926024405, -0.08538483362106655, 7.130750117651911, -1.5408004245951579, -2.117915594321879, -2.29269421190153, -4.268694275079098, -4.858969195514102, 1.0164049344489507, -0.4126832480715219, -0.35840433144365597, -5.820206000363286, -2.509282786635975, -2.721771787223961, -4.565907485148832, -1.8342709032157318, -5.888933171470395, -3.065739378258589, 2.6879687462613036, -2.368946392978731, 0.6052220334669024, -3.760056502123091, -0.5492381684246289, -1.662412503808634, 0.1741927180457379, -2.890993777878184, -5.617492951057537, 1.5124198576356154, 2.0306835697880055, 0.19906640669940665, 0.9946039268741953, -0.7852445082882324, 0.363377744533111, 3.947213994743627, -1.0293660108641816, -3.898014341996306, 3.750668153231841, 6.163500678163615, -0.07351340343082977, -3.3751074280250606, -1.822754784455075, 2.6398486507008005, 1.7051268980596492, -2.9814886056464998, -2.6901632359367813, 2.5483414736077017, -3.5688563796541564, -2.2503938084433397, 2.3629463829651556, 8.828677657391342, 5.9368388498298295, 1.8039659886421038, 2.0557768703040282, 4.567145417994474, -1.8742839846119335, -5.8478040760045085, -1.7704072649795097, -2.3680788887261537, -6.868842628693676, -2.8758698687949416, 2.297981228813059, 5.0628087466773755, -1.4205732329059224, 0.6700563816604365, -3.915490094115624, -3.5959069144856377, 3.2707279874613358, 1.8545976628557033, -1.7816893627249692, -5.656754004975336, -2.405022763695221, 1.2935335723402093, -5.6002326080471025, -5.318151093476871, 1.2670750000418727, -6.796295408145289, 6.3895089235740885, 3.4477312156941564, 4.6085132498024315, 1.979349306064901, 0.2774682711346343, -1.269780124279309, -5.555027434662032, 3.946070039921082, -0.34858159387296755, -7.434190683439594, -0.11505714195799574, -5.040310401138569, -0.501393496228185, -1.675704519257211, -3.4616489240431756, 6.510561556276665, -6.780146399477697, -3.2303921799974766, 2.674743113145671, 1.4824731184664466, 4.1891722467752865, -5.7057350728264, -4.627240865788769, 1.7083935201614082, 4.793788162975051, -4.83722410844364, 4.6502844954447005, 3.263286583353121, -4.016796688800695, -3.3928076329250705, 2.3132845416562233, 2.35110085164934, -3.3978426656518974, 0.04513633527348008, -0.018174934897686693, 2.811159470307048, 3.2507337214221605, -2.2437712575884188, -2.8076132194594376, 4.9229376084218615, 6.046486236389386, 5.291791633672363, 0.12508687499207638, -5.830669723495264, 4.268715315486826, 2.610915916177194, 0.8577285938488928, -3.21005653881721, -4.713038499968069, -3.664039747327429, -0.885309816300276, 0.33837747691017306, 2.072223186124976, 3.924555917355294, 0.6825829297177003, -5.64875027307235, -5.245769359952722, 0.41868098240309803, 3.414316573524004, -0.8759160837914601, 3.1498611779482064, 0.11995248390056043, -2.872186917000015, -7.245331582887472, -7.882737308933151, -4.596523469792717, 2.4582721184625664, 5.59961193361143, -1.7127973383700448, 4.70646108010444, 0.5073046029411462, 1.436844411196004, -1.2925662538679557, 0.3510107759759203, 1.1922524454044328, 2.256063777015623, -1.499943997054635, 4.282033955643612, 5.544516699064643, 2.716178564300337, -3.4595662340940843, -1.7216770874129672, 4.558197387716909, 0.7075365822700466, -2.1399747278083296, 3.8686607311559458, -5.557453410665027, -0.29204719022436965, 0.7864646762847075, 0.9105230861336591, -3.2873959720134938, 0.9703304466159586, -5.682030532249986, 4.1384655884848085, -1.5765973448224675, -0.7099731432549646, -0.9948712076309504, -7.404394251758408, -1.8513648074531301, 0.7572941421568655, 5.22564103732893, -4.341986071825401, -1.140749664279988, 4.075838486276722, -2.7384359213738554, 0.9100799240627958, -1.924180283630065, 4.396871320724584, 2.77795979047493, 2.9922949457080157, -5.90625750279125, 4.940532875366576, 6.194355943632416, -0.735160786931739, 0.7969641043805349, 1.5768815312130136, -4.756857908041352, -1.6042430254520217, 0.6595527595272076, 2.022711886838934, -1.8287661135239335, -0.3766450555828128, -4.321391750820546, 0.7163405696321741, 7.983179501518335, 1.8029750189971456, 2.9284004757546445, 2.4107893687452813, 4.520124403072675, 4.9420877434763675, -4.351453920936827, 4.691099447849218, 0.004863405158482055, 3.6322711571392796, 2.552967202103942, -0.3868841611211185, 2.517874243433384, -0.42303914460309433, -5.925069994083092, 7.700360588021441, 3.688791423017651, -2.043031139638524, 2.0809036119207183, 1.492151559684228, 3.202116563577871, 1.3663232068824656, 3.048731126519764, 5.176432304204689, 1.662108278503803, -2.32486960336002, -0.10355869305388464, 2.491113110057354, 1.3463154227564669, 1.5789659371660372, 6.855635693095398, -4.259508692027959, -2.4592996344725724, -1.1975192964964543, -5.08765674207603, 0.567847642938221, -4.348700150654133, 2.6960441192499265, 0.40077151021677937, -4.4114408751540655, -0.8158779683471159, 0.48558264889077735, 6.2648516546393465, -3.2725856088791843, -2.872295035554164, -0.6840850829922913, -0.23993727131316797, -4.86531426932121, 1.3719967129326402, 2.6129263555916205, 1.836071388308698, -0.3672552288343414, 2.728176801644429, -0.2944431095377936, 0.11196014603505686, 1.5372582185653112, -4.7539569453358075, -1.652015534751277, 3.6220891404851017, 2.8649001494059716, 0.49201191416310314, 4.261716366213879, -3.056644914232332, 1.8181797093246121, 1.0413313439648895, -3.7749743034289533, -1.7886969502228873, -4.919944352654021, -0.9816293519558504, -3.990483887519321, -1.0072771387441057, -5.97630717597304, 0.29102201363419716, -0.03964021022557018, 7.0085696001490545, -1.1936887242860406, 1.113027383702066, -4.026752732892071, 6.956238875461966, -4.0740816441795475, -4.125338778018425, 2.0503891380006105, 5.109605710025417, -5.507711092466975, -6.402293802029112, 0.9184491960366014, 4.219701994716099, -0.9065067382785655, 8.084248344032833, 2.5155111093170635, -2.303441893684249, -3.3370874630585616, -1.9874993059827089, 1.4634656705159013, 1.065501736943626, 1.4447146443962338, 9.028734919873612, 3.8026164815210497, 0.5570512944911781, -1.2621229183541598, 1.7993015785689048, 1.5066143855470637, -0.548204627380607, -0.2798169723042895, 5.976271275643397, -0.11985227271698516, -2.780158381020371, 5.403220832159714, -7.765631510971073, 5.260093463922336, -3.890106520723272, 3.409983624886597, -1.0109053524945302, 7.803466680748911, 1.8919470318609841, -2.2441367199839184, -2.1775506871829227, 0.04119808166336315, -0.12466675999484281, -2.4620546359709103, -4.415429813360802, 2.2167348017449937, 3.951618729313888, 6.0494674794161005, 4.877151313505872, 2.254962783646583, -2.1500514682175798, 0.021515688708511706, 1.8389244907192936, 3.696771524754035, 8.947487033067151, 0.40240674556207523, 0.2349418295354146, 9.611097190023246, -0.6045880168894829, 0.5234093608261342, -3.185325407993843, -2.548248255922841, 5.764473239509307, -2.343462659184803, -5.453642665757535, -0.2354452477847812, -7.3659925377744875, 2.41903301659887, 3.097448120091227, 6.120646700284005, 4.948594385695492, -0.9456688159961483, 3.7965404099113864, 2.9164573627711574, 4.113050626014229, 6.790878659399695, 1.3918890031804168, 2.2972850040876316, -4.252860973928963, 2.017747956296016, -7.736685207094456, 2.14912525672189, 1.2674549518377938, 1.2262670212794409, -5.13349182677691, -4.546018827670981, 2.3706407793186277, 3.0280636014304285, 4.279293821359552, -9.148136110095514, -2.4254789892712187, 7.444653699493609, -1.3610089084350308, 1.4416922075242884, 5.833426769476983, -3.460295222925857, 3.1713381176197566, -2.013265734138823, -9.994832396581009, -1.0642470409132632, 1.4846342386893405, 2.901253656348172, -0.9176897572769322, -0.706307211285402, -0.8175478000439774, 2.2768771421683116, 2.4964778131304954, 3.2254760590447837, 0.2759963295785481, -1.4079946608563507, -4.2896477624429235, -3.227532803869036, -3.4069565815120697, -0.714707006933141, 0.8583064613464658, 4.216622157316752, 1.950534321554877, 3.178630311338687, 3.109244780670503, -1.4388790980520756, 0.15871487956083302, 0.9592496483443868, -3.086520008278556, -1.644532889267227, 3.4752730888984735, -4.014952536912495, 3.361412767528308, 0.5731527226831981, -3.6887649687974107, 3.4454634922848584, 5.918446978141841, -0.4324745423663638, 3.2326619081408614, 0.3807657553161429, 1.851128801509847, -0.9191231047745063, -0.20685991173741317, -5.275159202723261, -3.3484233877758744, -3.7069759045525905, 2.339153380334755, -3.904304811371199, -1.53734082235092, -1.1419282207962405, -2.068260890204914, -4.912002891210894, -3.8764017546732807, 1.9824195994718783, 5.682588017596018, -0.20179543704160335, -1.8172449924854464, -1.3560639186799104, -4.279972773144102, 2.348248780837783, -1.5565217920609313, 6.694093191946215, -2.681339745543012, -4.7451481034297815, 7.883613624011607, -2.0399910047160477, -3.2857413871577172, -5.167774241414253, 2.9934983468161582, 1.5212183638046604, -3.5649837642647855, -1.3705184155143222, -1.598250692216674, -4.810531297969513, 3.348629009339175, -1.2928500664977574, 4.377297025739918, 4.623154216031003, 4.277191026039578, -4.9131847176032775, 3.646376591938262, 0.23865912138206608, -3.414338201743111, -0.35548693580444346, -4.74663426639771, -3.536020728537989, -2.0694388255214378, 2.518685494317801, -3.4125337959769433, -4.67469195932374, 1.4290659134650365, -2.763009976177853, 2.0090630905373548, 0.46365344720149604, 1.6630097933627062, 3.967396923639776, 2.930543918495652, 2.784711772411274, -5.866300043230417, 6.992828065315956, -1.3564299705464298, -3.4690607777077864, -2.851618816299488, 0.14372656995052527, 1.4854318463005667, 3.0331005734635004, -3.5973162547210182, -1.0588361764198548, -2.7642038506323923, 0.5820954771209715, 2.188862865123615, 6.125763113134405, -2.759583018571057, 0.0876089594288826, 1.4644111391431143, -1.2414883415650932, 0.7402781659376919, -5.722648730953157, -0.8425945048614621, -2.3829407180108206, 2.365786272362137, 3.7696717591229905, 6.919897691108893, -0.8689795287130162, -2.225477366065779, -7.992085831760484, -4.317338734667199, 2.994772557525903, 4.2151971390606615, -4.411861438098667, -1.7657894471464677, 0.9673954406186565, 7.585580004211677, 3.7474158266841266, 4.877549610966163]
BIASES_LIST = [-1.386678742494177, 3.69700670334388, -3.605124685812111, 4.786954650334857, 6.338460308974538, 2.7693474158806324, 1.1036275651542267, -0.07904015943954103, -1.1220270526241802, 2.6656446806141525, 2.1198482001560643, -1.3664718241811797, 0.0023247076391014494, -2.6273806466133354, -5.507683366889285, 5.272967887681989, 4.821143821368192, 1.474284740060666, -6.581067670209343, 0.010315843959226625, -5.075700949406757, -2.8017074100289925, -4.069250785447976, -6.081433416074316, 3.92934671399682, 2.6474543255429657, -4.032498432392902, 2.9142382520790036, -1.075550119335926, 2.2946352763121345, -0.3356399830083073, -2.2968011876222256, 7.131424630694941, 1.8541934130218827, -1.6845592065119643, 0.44765507741552335]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

