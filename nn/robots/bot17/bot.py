import random
import math

WEIGHT_LIST = [-3.4217332489529797, -2.567194867875712, 2.806785065243213, -6.402251331016335, -1.5007482288377287, -6.237916584567286, 0.0809004597504912, -0.47772457924216294, 2.9759564943358527, -3.014568099147515, 4.487459213355361, -1.6561829944686248, -2.6980540432894777, -2.578777160764018, -2.968073174961127, 5.323751683907723, 4.8683245530420525, -4.224767061845164, 3.939923064161561, -3.901041989808367, -5.622070041219951, 1.65540875192879, 1.9554352519590106, -1.031272251868234, -6.3930630932708175, 5.4565543333882065, 1.479967128907644, -4.997831892339286, -4.931634965408138, -3.7785937003721584, -0.8273462065548927, -2.23540603546566, 0.4464768945397961, -0.07625651651714005, -3.525062812890197, -2.128940038464161, 5.963113648764055, -1.0099928135715148, 2.72417153716658, 2.6748071220356957, -0.16441510449655672, -3.5835644055362605, 2.825793820383332, 1.4231328620307502, -4.605823779554173, -0.6746652559018678, -4.482953620491119, -0.9993829057216774, -3.3778447151245596, 4.771695764837471, -0.09655374960521379, -1.9924556098936455, -6.011823043893976, 1.2518739913468497, 1.0972261834430728, 4.524326638765284, -0.780486705935777, -5.169791061212097, -0.042740346762832004, 8.198593221194578, -2.9358999802592134, -2.2715330928990483, 1.4875908834477611, -3.4014905034622833, 2.089102975869003, 1.526318833428375, 5.1476068960519, -0.5859919711772765, 1.5143963126731883, -0.36833584735777114, 4.914498450675707, -3.4744281681996902, -1.6492170708948715, -0.11595867340772648, 3.1030681836469984, 1.7331596206941322, 2.727166640192581, -6.002449265308654, -4.212393452844735, -0.10045801895136619, 0.38909895846368947, -4.33695776979611, -3.60954192845661, -4.097317951396502, 0.9623171939756889, -2.3325931474437738, 4.830618341233237, 3.386505938690904, 0.03182522755117456, 1.7016060095918313, 4.036293944058476, 4.097385401193732, -4.990195377128957, 0.6217219109892869, 1.6979617105355307, 4.113605870331544, 1.8223931854922468, 3.3995556114214818, 0.13879976312309728, -7.072032424168379, 1.001864435854515, -4.503149824843121, -1.8072519593649665, -0.9076632531439082, 6.9120982883628574, 1.9661719612688353, -0.12019720741886264, 1.3468776745673807, 3.678018779383412, -2.4176496867222026, 4.427128664978356, 0.46659080334433733, -1.8223801752973388, -3.733301994501729, 2.9181056262539267, -0.5629932705394951, 0.04392330540564959, 0.7364574189188917, 4.3123595416143665, 3.303778372645846, 2.3244505569857763, 3.2722877193477045, -2.4437985561430207, 3.7511189435459684, 2.925062554005584, 0.25565281726393363, -2.2192934914053604, 0.6671645612452335, 3.0455165480405135, 0.4073179119235075, 2.4367092082843937, 0.7295329060521654, -2.0092936482795345, 1.1672340859265682, -1.3789240543711192, -3.651210087487025, 6.482546963581432, 2.0386454554467672, 1.8481994279852456, 0.9549388014086082, 1.3682942543134882, -4.241518904232639, -3.9815633642455293, -1.7755681366752456, -6.322780777418526, -2.264254846942082, -0.8243417448390553, 1.7093476951917106, 4.366753027163065, -2.464806274955935, 3.451289781850906, -1.2416940993283079, 3.5763261603437986, 3.1989552976542512, 0.3550489748656753, -0.5595572955320658, -2.5431959645076647, -2.476805179013522, -1.2993128522046535, 6.387338528458706, -0.09291100885457149, -0.7423359386614565, 0.46866514438203866, 0.025586246009416502, -0.8665323717126812, -0.8185080651125745, -0.5341867966773344, 0.35165066418394075, 3.5724381306649517, -2.4043367879779076, 0.2126120229701698, -4.34468544643729, -0.8982833702616055, -3.4896300493787624, 2.31413384778985, 5.483289327923409, 3.3444974239289067, 5.32884885503765, 2.5186881462638198, -1.8948143763174032, 2.191245482636852, -0.08585646519375323, 0.7628574089423636, 4.7849776417596175, 5.718827033127439, 0.3470598110450638, -2.8787731049711995, -1.231246899544861, -2.197834336792006, -2.1098860761346314, -0.6794147463726867, 2.131909069430459, 5.546727359476869, 0.7880023702711507, 1.2649085489557512, -3.214662880566353, 0.06953665207642379, -3.081138450092256, 2.569614918051352, 2.2985353518032032, -5.977793058673162, -4.752408672842084, -3.6993880468477043, -2.6871342050271005, -4.901877765296195, 0.8757047370567923, -0.09296611615679251, 7.508453035913142, -2.142001424485405, 2.19664044857169, -3.678733517336565, -3.9180813070988343, -1.986508939762211, 0.8327773734603554, 2.5702186565987075, 3.513833213372017, 2.975760394133917, 2.9727267361323197, -1.0386663477150249, -1.583966551250803, -2.8330344705839483, 3.5912243986438384, 0.8381346784000734, -1.1290273599239475, 0.9756582120286941, -2.3101119141920683, 0.6975595378348425, 0.1849013007772875, -2.2126524247359436, -2.1689947193576797, 2.169553707430953, -4.914235629757292, 1.607656933135722, 1.4953585514111398, 4.491557772536575, -3.8727241797609295, 2.4039952667753868, -4.4474888838372735, 0.058741494214375134, -4.685726324747227, -4.350218081813134, -7.981901898284369, -7.402917316893367, 5.819178754947529, 0.30569464486722975, 2.793596322713301, 2.7771168839662774, -4.646634287298026, -0.39935110388552, 7.0843405296054325, -2.806810851904427, -0.020486919030039852, 0.49666925338771506, -5.6331142776802725, -2.533676223180752, 0.8622655256635208, 3.236867422586032, -1.9729230814970145, -5.7942615572246945, 1.7007744404562075, 1.6265385325506019, 3.225981215860787, 0.43745026303508294, 1.2186969275023687, -5.5371360415255015, -0.7197219186422519, -4.1103247640068465, -4.467484399300353, -5.992343750699059, -3.368426153078579, 4.465169829387898, 3.1629458318833628, -1.6456408655298234, -6.015072012785686, 4.5703049085263245, -2.994338470117965, -6.0825573284074395, 4.599838713278496, 0.15370760261680028, 2.3249258622288194, 4.093928237273002, 1.3005458891327208, 3.1052770241815235, 3.984933467905922, 7.473099986103044, 2.342682513494483, 2.714358302483162, -3.059981303935156, 1.1588465949417275, 2.187721541365887, 0.355236459436588, -3.3233959515823592, -0.6594244726582268, -1.0284962558425041, -2.3972511367289426, -4.452682864176653, 3.1175049741095577, 8.491854784500173, -2.030651574133067, 5.216489338869313, -2.1964587256952255, -2.5910987120916893, -2.8888348983738266, 1.4187854892970515, -1.3452892463554782, -1.7832773812868168, 1.2401675342247218, 1.7939410523974146, 6.21126735908797, -1.0561252603622415, 1.7907677537620947, -3.017607884593982, 2.5404152861655485, -1.8620078238507567, -3.0158156335629442, 2.4186141715854372, -4.126642752400151, -4.722942420327105, 0.763152197947178, 0.013078357490377446, -3.688381119514439, 2.1754072148229606, 1.4074101567942092, 5.990621127449515, -1.2084246080617762, 1.0641108189951742, 3.617186122969092, 4.927032435666235, -0.5262218494146929, -5.609295596994132, -0.6365607505649922, 4.200473677854757, -2.3090715347207906, 3.4704288229292404, -6.096563397755655, 0.5722577929985606, 0.5632825431434751, -1.6669904696648454, -0.9509681097100375, 0.9987695927103473, -0.9622575708878255, -1.0375722317022202, 2.7875597764811517, -2.5070048065415937, 1.002547747385738, 5.173263039300096, 4.210144224799822, 0.6438988557237342, 2.0739529791631006, 0.6837846394547096, -1.913025971973725, -2.166958032320384, -0.49392362427001935, -1.7002343176730492, 1.5459333438952036, -5.40672686034085, 2.170856537343623, -0.5837690315242056, 3.888277286076667, 3.3337392591120256, 1.3059236079681433, 0.3124068644568607, 3.956051618676085, 2.3641114633981344, 8.311574449863535, 3.9575259281480317, 0.2088345810403731, 0.07089208134878144, -4.2367083915431305, 4.595643004713961, 1.1417683104225356, -4.46457419699225, -3.2459989637711257, -3.048335975034245, -1.5124488894883343, 0.1382970513618167, 0.6898122712301391, 1.2947902748839146, -2.83833610099426, -5.547558564868552, 1.8751090818893354, -0.24990049331489894, 2.757668571715615, 3.9110701608069185, 2.686205363445823, 0.08691931790390273, 0.07744988287755561, -4.756214245118281, -4.849378672188226, 0.8387738098750608, -1.9150059743241847, -2.2820370888902, 4.14831401702743, -1.976562039198316, -3.41526641963671, 1.3918965694210828, -2.3862686820377146, -1.6412795488654266, -3.3000440453745785, 1.0409358734128107, -2.497282448180531, -1.1296644632814705, 1.6316674273883809, -6.002037364376607, 3.3101512291478485, 2.1942627247459674, 4.060484565075229, -6.364357686330748, 5.450141082023384, 2.603929286740642, 2.7927912002204502, -5.978198713825954, -1.928652512160444, -4.099320804595494, -3.960141211497038, -4.77180735520705, 1.5169624391894918, -0.3930091153446351, -4.6696394788046165, 2.8635427356694816, -3.208461850651206, -5.071156427326287, -3.7764407820213, -0.7828631383958602, -3.1943148865353894, 0.6505703547551867, -2.913840046331728, -3.438713165307414, 3.520729181479413, 2.478479018701872, -0.6831318552813321, 2.5699328948025495, 2.414768349963454, -5.115907952951613, -1.3105213608883965, 2.7719693396004317, 1.9828075405247647, 2.2161995716716616, -1.8210519996848884, -3.7588401604009434, 2.1452383950725387, -1.6358373470780145, 2.4544125623119837, -0.42158796753096006, -0.680613122470225, -2.889215301224729, -2.157264643405792, -1.1765626654606647, 6.141374041283127, -2.8935381299700933, 0.01104837591230945, 1.9466834575481191, 5.030132025688845, -4.196301988281475, 4.6552698467654645, -0.05087112107745562, 5.396591649410125, -0.30123227031707933, -3.2596206703183173, 0.9810405465901311, -2.4564470823626308, -0.8902012829732759, 6.509178799047811, -1.953298487765656, -1.1669605179055043, 0.9148871295403824, 2.2472847132255733, 4.987106861574079, 5.326115137126969, -0.42091562124321424, 2.4702294190409626, -1.3711184295855086, 2.1287261202824457, 2.1907207261029713, -2.6074870073492074, -0.6273360598708824, 4.242279514651371, 4.111908933319444, -1.9553559050080151, -3.0789705757487384, -2.191013410203991, 0.3220856726950081, 0.5239244584862988, -3.9023197295735232, 0.4428396838895732, -1.058570581841722, -6.819855585056571, 0.15380244207321514, -1.001894437078743, 3.640363141591619, 2.9527204505283553, 0.8574597720560975, -2.49227921759449, -4.4689809264824, -1.822586978536206, 0.5409510081734876, -2.98320909047605, 2.7538973284649453, 5.070719126956109, -3.6193819077681457, 1.3760570738112605, -0.3663846206115806, 4.224525110866986, -4.499165395805198, 1.4398067329767956, 7.711059921596231, 3.435118492674346, -1.7975938035589032, 1.1954565184482733, -3.022210285899318, -2.8718968672546286, -3.8152143078609866, 0.08045299199308453, 1.5911060141126319, -4.321647857282568, -5.179009045892932, -0.2255084140193342, 1.312551034403819, 1.3047720465168098, -0.6564836576115785, 1.4916565351323774, -0.03564560623930557, 6.001172343342877, -3.047937479820523, 1.8568877331934042, -0.7714756172744381, -1.157567867633113, 0.5564245239758872, 3.924495741204405, -0.10135489253157925, -2.0224707830252644, -5.348145875486851, -3.3711949942395014, 1.2299725708141738, -0.11850359350683548, 4.077082419128033, -0.24355731490567578, -1.6474449802201332, -2.1792072405779805, 2.030414898438994, 1.7795286433871649, -4.381811505809732, 1.3285642967241222, -0.40676319014198303, 2.963386474751734, 3.0192560830031248, -5.564467392474411, 2.225920665343356, -4.2080217762392955, -1.8151042261620045, -3.5221790892206295, -0.17381664992525847, -2.367765314365294, -6.534798324837665, 0.06042018207655997, -2.4087248816543894, 7.2620239897949475, -5.94347257129974, -0.526758738856375, 2.3580929815351146, -0.8190689343879509, -2.745909651263042, -2.847075068831127, -4.1134314363915925, 4.532914126279506, 2.7124455066157758, 0.7201004822943158, -3.88053385072885, 1.0355392366701421, 4.0540536500039845, 0.1274262463032445, 0.5100847307717442, 4.480752230108277, 4.211688373770669, 4.180070256112636, -4.998041797878521, 4.356081548467047, 5.065665706172109, -4.224120038469858, -3.2422231960070755, 4.157543935443424, -0.6268800620557343, 0.5796608695873318, -3.1379954740369387, 2.866527596641741, 2.035544791756188, -5.404824153174417, -5.016889769487321, 0.1334576479209577, -5.054951795278624, 5.297267556392924, -3.161879115281872, 6.246923005590535, -1.0518287787936853, -0.2389783999553423, 0.017795907002151168, -2.262466674645581, -3.9221952202181223, 4.41394249974938, -4.423292382697711, 5.20591522220498, 1.6619636381340293, 3.4023390022511073, -2.938070191293523, 2.334432437254831, -1.7289007430220422, -1.371982288145113, -3.37884369841827, 0.2847439705232826, -1.4709280228440882, -3.158610663670729, -1.2361775395546335, -5.284894144822374, -3.1565251663394145, -0.7345445791592058, -3.6092082517639748, -0.9891561245199147, 2.806157536804266, 1.1217541954550407, -0.7263493770451117, -1.6840330321471577, -8.897810394256757, 4.677363491380801, -2.3816696376026147, -3.029671372268605, 3.9681509649842095, -3.774204025045214, -3.9952232052041357, 2.4897583854048557, 3.267005327803644, 3.0115568072368237, -2.5681501990436333, -2.061150192404356, 2.6701583194250973, -1.3204311840869818, -0.022789266715754097, 2.099694569818702, 5.368300960271363, 2.701464213626136, 4.917804876608425, 1.8615295610212392, -1.506757942885364, -3.9594126294096217, -3.464659645578618, -0.38953791672296356, -3.1557209614710766, -2.851864528520432, 1.1970657132215328, -0.4499682136671952, 3.4671483618584515, 3.42264792951552, 2.0221906579466635, 0.9676416670244454, 0.9579995082067654, -0.2686085605242394, -1.3629123872986357, -3.387796027788079, -3.9114803512465395, -2.0029211895281964, 0.07119425498921439, -0.684836071432962, -6.138119478742244, -6.529572900569124, 2.0500274741471323, -1.3925580025118656, 2.1305680188414353, -0.6475759775166938, 3.1961718166884516, -5.622414950733047, -0.40153352762395644, 4.084852689711687, -3.039981081752627, -2.8062358721095775, -0.42685531385617015, -0.3757318984448039, -6.84445557498058, -3.0339806712868085, 2.5951479762977696, 5.092859818932117, -0.1597623650817641, -1.2390393597214886, 2.054489992147527, 2.2246020186340436, 3.654506008730512, -8.638500651427677, 5.356502491143855, 6.432102786165843, 0.44499388978663856, 4.657116557183963, -2.6907443530241695, 0.9539385699814678, 1.3345756415249044, -1.6567952765890728, -1.749452701921857, -0.055589294014397383, 2.4882501229184317, -1.960505883438703, -1.1777964835714092, -0.44012269915156765, -1.9148028935691124, -2.34230514452687, 0.28252974875633874, -7.541931015969415, -3.392649299435301, -1.8190493477447514, -3.9882057148314445, -5.886635756480834, 6.327447228796009, 2.654279955742643, 1.3030365806898558, 5.4763333445778555, -0.555921739508078, 2.8810564420026354, 0.7009133997788515, 3.068924809797057, -3.716104518054306, 3.4879107772204545, -0.6351366852035925, 1.5103930921638202, 4.391147059242668, 1.0702289727204528, -0.7929950439875428, -2.1617237744484257, 2.739697637672628, 1.8545579067728868, 3.643825658637443, -2.3721618759779726, -2.868593781195366, 2.4734094562519946, -2.1964501503003526, 1.8611734501903854, -4.5549985008327525, -2.994019953309716, 0.4010179084262162, -1.832760028038446, 2.9687797227845514, 2.380411928593685, 5.7384726494006015, 4.296813535100718, 7.0912233226594505, 0.8563088458943711, -3.788100597132294, 1.0956779196149489, -6.984995611387131, 3.013929229803228, 1.4185443495572931, -1.4405632932764234, -4.081712169829283, -0.02540174757712621, 0.14618162356701503, 2.0061494198879744, -1.7990020823751507]
BIASES_LIST = [0.8278029602593062, 5.843207330097756, -0.43072389651777687, -0.23591764473603827, 7.4477333547486815, 0.5937167143751825, 3.105043259278869, -2.3089804729198704, -0.9480173942653918, -2.0871917139908978, 0.6614722416402388, 1.0725227488198623, 1.6212912168200742, 1.670084686951422, -1.871146152677136, 5.150093880556008, 4.86222691981459, -1.3296969151714735, -6.255816669384178, -5.285935150747399, -1.3323409808619986, -0.7866223946057517, 2.6322837397820846, -4.5811079731045234, 2.542791766517224, -1.3541867344829368, 3.4692600767776396, -3.663810940565993, 4.093817599223252, 1.2556005456146089, -5.143168889124624, -1.1359609022366723, 5.460514365546311, 0.27522994704968107, -1.5343389860510737, 4.029297958055375]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

