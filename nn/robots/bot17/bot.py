import random
import math

WEIGHT_LIST = [-0.4081111694644036, 2.0949146504159586, 0.22146513592812944, -4.530169342803505, -1.75025011446731, -3.78014551692696, 3.4548624727765294, 2.039414069241656, 3.10695589748427, 0.7013051704942872, 2.290077476885158, -0.8166310323198935, -0.5208366883810864, -1.02737076156904, 0.22924578059046952, 3.188557260332656, 3.4114268705607467, -2.834309959959274, 1.9439210303564458, 1.6455735398230056, -1.5580970228617996, 5.226545760860442, 4.723964179302699, 3.3837436136115446, -1.3471212659529557, 1.4418356320328334, -2.764516286402327, -3.9334621355813297, -2.912781800329656, -0.9829069972525246, -0.24680713141080257, -0.6738535438109987, -3.9642736848769475, 1.2257017277353737, 0.32438959597119643, -3.0827376128163655, 2.987809298132925, -3.020059618986249, -4.231262229391838, -1.165196293704237, 3.060247778923669, -3.3329114778721576, 0.10964335373945966, -0.47656251872843813, -5.842859909798077, 5.588837313000539, -5.3400565799109465, -0.3063772841401503, -1.9712349537540892, 1.9875722471885418, -4.310393891745673, -0.3902546500413835, -3.1254455842242232, -0.2793017289354853, -4.065312015492058, -0.26860716649368754, 1.6141807975034426, -3.666911876992306, 5.667322040156047, 7.647715867128003, -0.28934305475285416, -2.8094547379173322, -3.4850568116635974, -2.346476487053776, 0.12865632387395998, 0.07687049288182779, 5.936243449539664, -2.1679044288378133, 1.972539469273209, 0.917942292378207, -0.9321212444835034, -6.68913028828222, 1.9187729179850734, -4.762957389538978, -1.918051243659063, -1.4940904168570501, 4.005800192729083, -7.300638385243182, 0.26188911000066617, 1.250154144979795, -0.9773751434709135, -1.4307710300559642, -0.48322840346978, -2.2777716877069984, 0.005177343168758064, 4.36551999734314, -0.16797306883338248, 3.302433296933197, 1.7557326914354476, -0.890685901364145, 2.746583508851533, 2.847137562615085, -2.57574779663732, -2.4999342877466195, -0.8769367511906958, -1.128981268739104, -1.590303840949565, 1.9257947596050577, -0.4731392599593507, -4.345203574181829, 7.128811961479352, -4.145838267451807, -1.0389972700712897, -3.8713823093412527, 5.537798524885216, 0.213404564074418, 0.743618195696697, 4.966574335583486, 2.9477037022450805, 0.7755898471902771, 5.907594578719423, -3.6190132156601558, 0.56683586018291, -4.030330356550204, 4.310463238122335, -3.912983631841019, 4.988517151909919, 0.4866947364567151, 3.5767596887732562, 1.0379875288579505, 1.1924985805323587, -2.7264442843972443, 2.7011497278318775, 0.9407535202739199, 5.371158903261892, 4.377002672483584, -5.14614745776109, -6.103181551278691, 3.9791546190780736, -1.353494111269576, 3.3715811465094223, 3.2494596648824388, 3.455582646223262, -3.64846917089324, -4.5791790614164505, -5.721965618681607, 1.6976690824866605, 2.7607387300455146, 0.7724954913078641, 3.2905240142821963, 0.9342955109459492, 2.0010449753538246, -5.906305907093165, -1.1420404176473316, -4.107260277210058, 3.5137371221203146, -3.711811898504605, 2.5823628009005146, -0.7689110923866963, -4.526380862539222, -2.2654758035549145, -2.5396138793676455, -3.1412940257010327, -0.7379951380057528, -5.681189422012663, -5.092863277697809, 2.027296760780028, -0.7416664349541761, 4.462326845805353, 3.444317369205887, -2.234736568123968, 2.1007935674771123, -8.118828335958046, 4.190963549318771, -1.43211921808244, 1.332336626091287, 1.6659957277176707, -3.882415840176516, 1.2697446444263174, -3.0301010768604044, -1.3840453170158524, -1.0301168616602072, 0.09170459304033574, -1.9270638717391293, 2.7281807585751716, 3.472933009424806, 6.091902695659366, 2.1821413135119077, 1.2323748597982802, -7.12570648602434, -3.3844952299733615, -1.7690809854521878, 0.9519710487476973, 3.7119862215248487, 1.6406032361610903, -0.787247212688406, -2.0989736047638443, -5.1406384951359225, -3.276788965091003, -1.1192930522759497, 1.3733854677073176, -3.8259161111975937, 5.393593128270602, 3.338333178716148, 0.7171727528514147, -0.8172108570262835, 2.899845141117239, 2.821564169822234, 1.7472812619593197, -0.8780247071124603, -1.3314389360239929, -1.692700546633771, 3.3999594836725624, 1.4217114782916682, -0.8761511472934551, 0.9070198097857833, -0.2514011988792022, 6.605065338705017, 0.42653549059320683, -1.3796221109124425, 1.7866495567878742, -0.3802502281909229, -1.538034749875067, -0.14655073034502242, 0.5241125646650548, -1.7167398208850024, -2.067875435571567, -2.9006806981200013, 3.083349923054816, -0.2009269161781312, -4.293073987077786, 2.18835658544001, -0.6213802427844812, 1.4910777287456174, 5.699089030794062, -3.6628626122778334, -2.642820609966206, -2.8172160346314508, -0.4645304643743018, 0.44181404671464275, -6.193279246758765, -1.2891475796696577, -5.062899990793506, -1.2578735486162624, 2.297455153903674, 0.6288899805608974, 4.736701570682969, 0.5491440145296194, -2.584339217524752, -5.823261276837745, -4.2742115180753455, -5.522663589406103, -4.352997298903411, 5.180836920662757, -0.37896145697984873, 3.7610073099166677, 1.9853786822479806, -1.3066397179754814, 2.4376976776273613, 8.182876388585914, 1.342330648626294, -3.4618340137651815, -2.633583031035018, -4.518264002770823, -3.7436170847922203, 1.0012782599918477, 1.4215619157043622, -1.1954245615114094, -1.8270509137971445, -1.9176306574515942, -2.8846417910342423, -0.6017952220709732, -3.19008425005864, -4.601239785089861, -3.163739531138315, 2.656241577651618, -2.2967712982191433, -0.2763134878716694, -5.644521603536617, 0.8698236305890159, -1.0394034274606279, -0.20354101985857587, -3.5335572118487497, -3.3321848955432487, 2.892215516940844, 0.4533368366115431, -1.5359375483057718, 1.9414486242410742, -2.0540943804877236, -0.6043635563458967, 2.8435851917496997, -0.52527998696283, -1.8905098596894745, 4.6739912775738715, 4.458636431101712, 1.9871824360768824, -3.1498683832225938, -0.8113323282025369, 3.4742950490059625, -0.2226280742028769, -3.2447373830580264, -1.5292712659616345, 2.014905342945106, -1.9595388942638552, -0.9599767478604442, 0.07660658087805916, 9.584803188114636, 8.685715815998332, -2.0844851128452935, 3.0431675364059725, 1.7966526910297365, -0.009325997837856814, -3.400931161132406, -3.1182744954095054, -3.0423061950148584, -4.10387776050648, -4.534134148958964, 1.9072511744847236, 6.79403506206514, -0.4653349563685589, -0.4583300190553721, -2.533482680539389, -2.5768513009206644, 3.185800204537628, 0.08079869988878596, -2.00675464783469, -2.755103739748163, -2.11016650663852, 2.5148317467284134, -4.639053380059488, -4.057154620260803, 1.4801804578940287, -5.572949701245506, 5.904147649087258, 4.273318252635175, 3.9865504477894556, -1.597774904684908, 0.6540636175402665, -1.9281972766776705, -1.8255487044743712, 1.7458138369024327, -0.7449331883793243, -6.539849250536563, 0.2033451153683834, -2.7133996201394175, -1.634083384882854, -1.561223596729581, 0.9123105899761819, 7.749626374912534, -5.263430006897312, -2.2084258702328317, 5.003780590213065, 1.075792053483994, 4.6598811032187175, -4.766513527490115, -3.625520045710032, 1.4578041087316, 1.7689255611564665, -3.13234092960519, 1.6053181969857064, 2.3647204635421906, -2.1943679995919987, -1.2322139467113584, 2.3711298186605574, -1.0504150355715152, -3.8335322776741387, -0.5527126318379009, 1.2273546099199066, 3.414889343402624, 2.3260619495495125, -1.6407257677017593, -3.2266396778679525, 2.653042286998189, 3.8343525009002724, 8.146882717095156, 1.856809741343909, -3.604690391018374, 4.44871914922123, 3.0879023016851272, 0.3924997352267028, -5.871115185335489, -3.850323806372316, -4.164549781864108, -0.9547082189181402, -1.6712379943127094, 3.6603141419272225, 1.9977656841830713, -0.2548147457468952, -1.7327153742209782, -5.259345831830806, 1.7530230538343403, 3.9807049683533613, -2.21997826528874, 5.182032598669032, 0.5508730380716824, -1.4820467220484561, -5.21329391938581, -6.217893047391643, -5.837413183450191, 2.1094258792270457, 3.078007670912476, 0.6137912515355772, 2.433844413972172, -0.34184304550565425, 0.7950225597925804, -4.155511710289737, 1.6757537639681641, 5.731424634219674, 1.6555609462243934, -0.0994731929407685, 1.1757981503115271, 4.0835291043131, 3.477302987675019, -1.298228259179582, -0.9308454085593119, 3.546298968435848, 2.983275453347627, -2.5009862877239204, 3.554911496330223, -3.8723558335167314, -0.7776347397420315, -2.981826670039477, 4.898553077605175, -2.7247348796369835, -0.09995308295722805, -4.1637402135674115, 0.46482572494233176, -2.3792446065651163, -1.2308138767388204, -0.5251339671597519, -6.823397146215359, -4.216435199237053, -1.2363819833394079, 5.743414503570191, -2.8612585775801684, -1.111823021618912, 4.528626397912307, -3.5732572732257175, -0.2593165780466866, -2.1620555202686838, 3.622428970915621, -0.13846830983736735, 7.181743410158511, -5.230641570768015, 4.461025589026402, 5.363541556745665, -1.1742520764217959, 0.8662876224179679, 0.8965590980123488, -5.681962847615174, 0.14731460809083785, 1.6458990854906554, 2.57253777174641, 0.7787806454071906, -0.3414589626565705, -3.8667577391543904, 0.8672130617366247, 4.986852275060574, 0.6158693041417451, 3.918914813852668, 1.3272122256464653, 4.540065161673108, 5.104089039387251, -5.097623128525008, 4.474810557587282, -0.5925338243469541, 5.228184100308443, 3.2242824452227445, -3.4346883980573626, 1.400787077442354, -1.094622898356723, -2.464855948995252, 9.651191021066051, 3.361554064027632, -1.0939450788968847, -3.1898936221831384, 2.088491019603942, 3.019184438448498, 2.2329142784565894, 1.988365879670532, 4.504336230514461, 1.3195508139174672, -2.279775643259849, 0.08431379808680628, 0.9676686901111031, 1.3269207017839477, 3.8620556938498467, 3.251103141200746, -4.6652015866543755, -2.281894996047043, -2.015173633022641, -4.44186604180801, 0.9161368795602409, -4.840355441785814, 3.4977233120808497, 0.5929264245358024, -6.925011682789512, -1.2193675553045915, 1.1267247351176497, 5.031542927219247, -0.5936639426043558, -3.343259275476213, -0.2562410103814201, 1.0729403482455147, -3.054241051371294, 0.3312750788066552, 4.570573936150366, -0.02166580748613256, -0.21251121437704223, 0.8881359501479893, 0.18880010132821234, 0.40684887610453035, 1.2331877266299132, -1.8852271271207908, -3.6388308904640665, 4.943328982502039, 2.426793212878641, -0.11978036151850568, 3.864592543813613, -0.8965458125417951, 4.423588265360372, 2.387765033348834, -4.297632233935532, -2.575153815636564, -4.4707723478657595, -2.1317125101518135, -4.444339853697176, -1.5732252159703604, -5.364620094785783, 0.7311476225684883, -3.923342080408408, 4.623838316359146, 1.419212040770363, 1.2556055311922822, -2.503903728305567, 5.068015348532797, -4.436524511646874, -0.46340885616703176, -0.2459723499474623, 2.7185727709879135, -6.176389019439326, -7.406644351008698, 2.0859922702001565, 3.3319148438684323, -3.306057530012073, 6.369016099809347, 0.7005901618408781, -4.643306180949688, -3.3037803433267663, -3.042955641323584, 0.9883567566612521, 2.1980678688577258, 2.1527732224670206, 6.786222661985376, 2.2777496013856693, -1.873639933167621, -4.067460697680327, 1.4241342659578495, 0.7358433415234971, -1.412769490211745, -0.504642617469304, 3.3061463398785333, 0.5652731662741384, -2.9451834700689377, 6.82005543259706, -6.694105542767897, 4.513538461143691, -4.713124229852502, 3.106395761728269, -0.721011285390743, 5.945414959667231, 0.68616518106611, -1.5894708260603767, -4.635992848941317, 1.7903932230609585, 1.4930368646212995, -1.4953495742916707, -5.122733509831316, 2.575193970959961, 1.1686806591485999, 3.096694243200532, 3.05029864263179, 3.828206815749695, -2.5676411084876167, 0.7627901931424654, 1.9633567316710199, 3.831083626514854, 5.621009909097786, -0.40184300398978534, 0.3185676940877511, 8.470177888862265, -0.3916885851751325, 0.9997503779017087, -2.1978446739759097, -2.131410227494724, 6.033497457418919, -3.294761765656978, -4.535574276505878, -0.5358015044763194, -7.469395194061482, 4.281053639510751, 1.9398720020735989, 4.192339694116354, 5.740378808243137, -4.128214330339627, 1.4402215181793503, 1.8081302252243319, 0.6506805998827505, 6.134136366834003, 2.884936684760006, 0.9371670340817506, -6.904726467558127, 0.446702878365548, -6.087598343578744, 3.262954957834028, 0.9095980234579877, 2.496110602724541, -5.9505098330919175, -5.175531504196907, 0.42498854406319353, 2.768608342697237, 3.034981970548083, -7.322241011998845, -2.6261272816883086, 5.003411503565894, 0.5509610875602011, 1.565523457475499, 2.6955060262251562, -3.962653230805169, 0.5872285365933378, 0.06438210836359248, -10.474203768616606, -0.4114387189476332, 1.012984333008271, 3.1750046975380473, -1.8102956909562524, -0.5777281973278483, -0.5677523776144388, 2.0450845345670663, 1.6736737384911775, 2.738461494253099, -0.44234227223063916, 0.7523646043717633, -1.781187940950607, -3.3678708149013894, -3.9914151947842114, 1.2365195594045355, 0.47210241644090134, 5.55490410415902, 3.625861235718907, 3.3693326036745654, 3.333372799487945, -2.4651962363696382, 0.7885831194213335, -1.839208632619929, -2.662996371409117, -1.0458894112431871, 5.824294368060244, -3.9621846273097407, 3.7253883065636746, 0.2967331031561504, -5.661750612331885, 0.7812523044349293, 3.5078951824538507, -1.258319847245476, 2.2315856545711434, 1.625088994934515, 1.0304856904037, -0.7414795887270069, -0.6544925252172917, -3.409877911699053, -1.9193548342428248, -4.043145392479012, 3.8324750559520115, -4.9258861729693475, -3.3624862220428318, -1.0624317024244985, -1.1950870053619964, -3.6434593343220705, -3.98378130074705, 4.073947634038248, 4.720263713111209, -1.2923806376825502, -2.191658233554549, -1.467733442647639, -4.783546319669773, 3.0815753202307423, -4.989180858819135, 4.368914173613451, -1.9371332686542118, -3.9420629717267457, 5.479705317050987, -2.169809692193817, -2.035694490360128, -6.222841295263936, 3.821075862111682, 3.02151322105469, -3.084700290376433, -2.036197536891095, -2.980854397096822, -3.5305405333749027, 0.6654269159257742, -1.0506694039293656, 3.6067014585066888, 3.1950358019923346, 3.000223418692462, -3.1578642761055247, 5.13066594564202, 0.08378801586107598, -3.5441343193866395, -2.691836136843269, -5.5574568023853805, -2.629027261557484, -0.5147298730244869, 2.5246541751060776, 0.8856058279414796, -4.117403075677362, 2.531549548441423, -0.8760448254042266, 6.334655080782941, -0.25274512643819036, -0.3075099201956437, 3.6085331237134177, 2.663808994007721, 1.4949121856878858, -3.690787554645639, 8.507534842255017, -1.9420007261487386, -1.958255039856924, 0.39256180766461046, 1.7760576887058717, 3.175596576558439, 3.0747861962989838, -2.5840081910320833, -1.97631810528198, -1.4998071654090457, 0.18301602843298959, -0.37059050686175365, 4.127250059637019, -0.9820019766398977, -1.5571842874862643, 2.3476787480245536, -2.423812111200438, 1.2075011818434152, -3.6535710377620054, 2.340564275303077, -1.4497011276321443, 3.232372745104886, 5.751099840002005, 6.437840960852058, 1.2755302954298444, -1.2861554192432316, -5.3522311587927955, -6.205044284885895, 1.9680277183008092, 3.547501056150894, -6.73502266093451, 0.3316806374436192, 0.4375776444718329, 5.92628261262179, 5.7716386834047775, 3.616671043398413]
BIASES_LIST = [-2.5628481790234723, 2.786218078537922, -2.9671267704203683, 5.30000008077886, 7.633247912183382, -0.10354149004937718, 2.5828256827356357, 0.3866418431109113, -1.4657713275911144, 1.4302156281740706, 2.136095558780677, -0.42296407172625927, 0.029407271924441147, -4.184352848666026, -6.064625768066956, 4.055851649533974, 4.961805063021959, 2.289953366564622, -7.125728229607896, 0.18153750430626814, -2.6308884696721515, 0.1867881836394858, -3.87373277260902, -3.3960312820810916, 4.372375385491717, 1.1758437749719097, -1.6507274737604591, -0.5330971029635725, 1.6401198354565492, 2.0425180240979866, -0.9017089775225463, 1.1232022140377085, 2.9616009426595467, -2.046449408612409, -0.26597275526768005, 2.7298023077382148]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

