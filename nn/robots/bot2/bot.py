import random
import math

WEIGHT_LIST = [-8.251196167240979, -2.450768384029258, 7.2258209222733365, -0.614078764707902, 3.7458561163612667, 2.1352668389756784, 0.4430720327355073, -6.8310169915684, -8.992148654449466, -1.4336411278588637, -0.14136508091386657, -2.056196386527431, -0.2892632258408367, 2.0139462185267902, 1.0084420109820167, 4.239656450970184, 5.620331186848992, -5.156558252337968, -1.2691819607985826, -0.28130225400365744, 4.274608046465909, -1.0523499037014035, -3.113254073368693, 5.778175476807944, 1.6113938230757614, 4.412159901423114, 0.5706087745844659, 1.2051921926783855, 0.7966036716008285, 4.163994102098603, 4.022246322194057, 5.161161617636138, 1.147561831332916, 5.6776113864328215, -2.0694411815294464, -7.582334654246512, -4.6158368460774915, -5.065946613542019, -4.098703010032747, -1.4468465336417966, 1.880208144521807, 4.2567289298599835, 4.189270724023944, -2.018718121994299, -0.8569248233457232, 8.71234052443296, -0.02274521518813538, 1.3724473819557301, 3.331415552633066, -0.3198596176663328, -1.092896946784659, -5.987858045054973, 0.8224712447729456, -5.0928504438450455, 0.7729062891512268, -5.735924445920953, 8.127018034955489, 0.5580261925029979, 4.056418695484267, -0.47527811182810326, 4.798772025570126, 1.6486404280979141, -5.237026197487659, -3.369973294951463, 1.0330595672080318, 3.388507292612215, -1.0087079175939433, -1.5619027644352264, -0.8645065224980384, 6.262897409202189, -3.1215934155349805, -2.851510367919161, -2.625446479878344, 4.6859276077997265, -1.7543614796991849, -2.4399509257487804, -1.148896890985112, -0.23101070561364212, -5.397891983275263, 6.0924523620303175, -2.9785097396985822, 4.91947302942634, 6.432825621318188, 3.6766756497735438, -7.241452043262078, -1.9260582253000729, -5.656717755916151, -1.6478497692403073, -0.6978349443824376, 8.238415447248602, 7.534328242861833, 3.3687188800638808, 0.7628344166099579, -2.647439511126413, 2.5037480741526963, -1.9957454359332107, 2.462167282258806, 0.9612186158297671, 5.944694501315415, 2.121051113388773, -1.5153745325390737, -6.932660375696952, 6.297672057558536, 4.6485233072489, 4.6897647483930855, 1.9313074031018282, 2.3741566466780113, 5.394695666040967, -4.912205362934324, 3.7437427525845477, -6.965811805228994, -2.741637835029894, 3.2503315036124842, -2.9994986613897665, 5.528017183327366, -2.111740832667096, -10.277626548098713, -1.9720389320897802, -4.6027682338616795, -2.3000441873755655, 3.4949660022506857, 0.3655871692834104, 7.471864125365462, 0.7767543689794665, 2.2690018895345827, 0.004293898993543932, -2.9967728567579655, -2.7132229830120482, 1.0033440130168103, 1.6620038252881923, -4.7603145097636475, -9.239048350791391, 1.5637935240946703, 6.653593606008019, -4.58093369711557, -1.8547162617959585, 3.539560102363247, -1.2779700932357372, -3.3087445632901638, -0.2846246022024766, 2.1324962574389486, -2.3896558186799077, -7.0548037720391505, 7.137442661332689, 7.669995492224145, -1.6550829300776835, -2.553692134852364, 8.194590305754922, -2.7522551873448338, 2.2538896445199286, 1.4655275647395496, -3.8547457464999058, -6.992579537502682, 0.9879777035994346, 1.2204216963563355, 0.8461281603020168, -4.2469173406432414, -7.508151338394908, -5.727558466471158, -1.3198262832741094, -4.8332026264131285, -4.084536744590544, -3.446025029260453, -6.152998710085925, -5.212282534906907, 6.726261862530196, 2.7173406193055856, -0.46466758075349346, 0.2748548456905855, 1.1938808044638767, 2.9744717849608313, -0.06968062703699013, 1.843400963941023, -3.3828190143368753, -3.8610332906144134, 2.069862909416703, 1.2030484479498424, -6.51393037401029, -4.947755884140541, 1.7451804917695168, -8.132107161611579, 8.714077273295283, 3.3577724799716266, -5.401555276677107, -4.014967786081076, -0.42191461494003385, 5.343792131598467, -5.374028486179413, -5.00281909666958, 7.223903871868754, -5.194058540001868, -4.805872365035103, 4.567835973485533, 2.1516678285344057, -5.5109963834946925, -5.081139695150373, 7.210130245855647, 4.458486577673219, -0.5184802794525547, 7.147054643603521, -5.842120369672738, -4.881353447820853, 6.465166553742423, 0.97628040195249, -0.3499542682648496, 2.625243036286388, 2.884557487462679, -0.870432203979121, -7.421242681453451, 7.293729098394296, -7.098374488699284, -1.7688176262105237, 1.506741095794308, 6.865266840270129, 5.752619997588861, 5.674277132929826, -0.8233594117275842, -1.654735856303877, -2.5258231573552825, 0.5456313541646125, -2.392946304849203, -2.3889102143191883, 0.3484359134966375, -2.2397606806148307, -4.667538483821222, 6.339209507528259, -1.2252436041088353, -1.7548559059351871, -3.664967653893952, 2.5882184304957705, 2.1823882520473092, 0.5214326251456902, 6.220745062910313, 3.630678317344935, 4.205149931670268, 0.6070688103938332, 5.362882110876643, -6.180155445901391, -3.3178709196097596, -5.421326648433511, -6.2781479410972345, 7.383893815917811, -7.141330037146375, 1.356029336601215, 0.4225725099365516, -3.1247808125326624, -0.2863503185846884, 4.006344294784937, -4.388440188579924, -7.320733162100902, 1.8562478710897308, 1.6801753326412179, -4.907776145413638, 6.513043935104824, -1.4459625609091524, 1.8850039405149803, -1.0530621519378218, -4.139653098669491, 6.49615995310918, -3.880875762982685, 5.895622158770615, -4.036371329312858, 2.7415687667830073, -1.234604566856977, -5.334480879714034, 4.6795691648699655, -2.4040374839722625, 0.6438478449764005, -7.955374275741427, 6.617876618579206, 3.516152805430643, -9.84652596123377, 1.8038464057415826, -6.383626035103365, -0.5888656764806883, 0.3317702995059304, 5.607579837843735, -4.349347556701457, -0.925439557181562, 2.946374416759842, -0.7925829924907155, 3.8827817652161887, -5.522152531568349, 2.4128776311165874, 3.298430776960764, 1.6488690563759416, 2.5799428746731317, -6.4529307624719845, 10.31972963960428, 8.874598525147041, 0.6793202413934395, -3.305261569452055, 5.998027454271788, -1.1156423477199295, -0.7719072915315657, -6.024944925550289, -1.378668495283486, 0.2554600497489239, 4.613733965349739, 2.4790266880868375, -1.6711753775568325, 0.18686969075182586, 4.833516569673753, 0.2646129481700137, -1.8735398081905021, -7.309729090086008, 2.112063457182315, -4.000493914339236, 1.0803961348417148, 3.982651388490952, -2.195452444211162, -2.156013545080976, -8.19777578632915, -3.433473390826553, 7.762963660572169, 5.3524129525006074, -3.5809833248479657, 4.128227936801431, 0.896210532877457, 3.5863849228875986, -3.2655794346577505, 2.762780955530188, -3.182917408566464, 5.888372089767516, 1.6241392723511587, -0.4278743565604646, 0.7804068683476018, 3.2855605155010577, -8.06281565383792, -0.35614735767896794, -3.6474153140371017, -6.742692746628948, -0.4499991471927509, -3.673080340559513, 2.612792118452174, 5.27777498246956, -1.9846356170596784, -6.748444590806426, 5.306806134784645, 2.994927053205064, -2.3647495637989424, -5.4595075723699145, -4.662776363979019, -4.121959579235444, -1.6983913831140507, 7.270638848668119, -3.6704196894555454, -7.401020536297073, 2.0908148010673586, 9.006504985288958, 9.133750761256751, -8.787869575210326, -6.919599783394708, 2.9294245856286807, 8.009245126766334, -2.8603960367272, 2.2276080208715014, 7.697271657950935, 6.423546814378737, -2.1798442383388155, 7.3068002095146305, -3.70231226845873, -0.9936384155601049, 1.5995528633572194, -0.7544073520788899, 2.9423671517649344, -5.8192518199970955, -5.6239294477006885, -2.317504080900264, 2.3971727395077447, 7.585703243443188, 4.479220402923281, -0.09741417961340196, 3.946914088544869, -0.10956261947901402, -2.317808740766101, -5.2495923994193925, -0.8721303614437499, -1.4788622858118505, 5.459337232927609, 1.8271942150599982, 2.9172577527996073, 4.215867432232384, 3.433602659461734, -3.1883811251826835, 2.2747249641518223, 6.32572828696042, 3.3168256197593204, 0.5674021323931808, 2.411426991186356, 0.46383779006863723, -3.264971875797206, -1.2939829781012118, -3.322070003250829, 1.3746717456493331, 1.7350434785302267, -0.3316871304843845, 1.1328121314429196, 3.14889679014712, -2.7812291231658777, -6.12775360519957, 3.1616964362334787, -5.840570803689575, 6.315850330631021, 0.047382906287089466, 1.256395459716403, -3.408042443077772, 0.5554741435057237, 2.399939327462881, 2.8425127833238073, 3.0708925854689193, 3.4639079333892013, 3.636997250982343, -0.1373816359487098, -2.2514170165645426, -2.5045401892502186, -2.7333152647499857, -0.032653818388179046, 1.0110143991705547, -1.20354689301003, 0.8153799064328018, 3.2787476063455174, 3.8378212445321624, 2.4081169347320035, 1.5839600804184593, -4.199628295637047, 9.153466687723839, -3.609618642430846, 4.848290354737859, 3.9873584928824855, -0.3917819728168051, 4.970821991439765, 0.16780152178308727, 3.1995162778235002, 0.5857584134010753, 3.5549871724907525, -1.4571022135652383, -1.5288422449027408, -6.155195548613244, -7.791046655760898, 1.0893396214026945, -3.543461764083727, 1.4620228360649732, 1.7475254181331292, 0.514086119593947, 6.9540212581061285, 7.690099780529081, 2.8261712465963877, -6.046467257578846, 1.1229354273100216, 5.231781659311721, -3.837900869009961, 2.9038941077231044, 2.028352684763932, 5.608617173071194, -0.5517427434115243, -4.326247386164463, 6.6620417999802175, 0.3315768218939954, 3.87182575142492, -2.7512014364951267, -3.6074337626925903, 0.8673070344631957, 0.5845243168627674, 2.989124667436541, -4.077656194222827, 5.436188959071456, 5.330029885948244, -3.293640551802233, -7.807693794391079, 5.276932205276966, -1.5834372948052984, 6.847676495424041, -0.26551670745671063, 1.5863292453138305, -9.088124780033139, -4.125383531914904, -0.9559671658527055, -1.7412312332364837, -0.7552003838363192, -6.748182066739375, -1.2464527599730804, 7.667312933769457, 8.10330701625055, 0.7510342376483636, -1.2891731375829245, -1.521659644225026, 5.438239594277911, -4.048467321775889, -2.4751537407891733, 4.700197111061707, 0.8096919631150616, -3.2102422695442216, 5.018179024358996, 1.2896792770383618, -1.1707626248574243, -1.0363508103355836, 1.8228185117305946, 2.9866042660276797, 3.780158908641014, -2.9872539626404886, -0.47640459443481686, -2.4043738878391165, 7.142187680594344, 3.0553899371426176, -3.043505937834445, 5.1778225516011815, -1.5339780430435865, -0.1417775839613083, -1.7575981840300292, 2.0529572642683545, 0.26675379959129, 3.636571215865076, -6.959889700855068, -1.5064718102406844, 0.27772233325997686, -3.4858876054039785, -2.316513130549474, 0.33713246863646695, 2.5496042059587025, 3.61033692749352, 6.205311313624078, 2.684029048145036, -4.45626312187547, -3.1294276510135823, -7.89570248884174, -0.008876297587323861, -4.4995234430169475, -1.2988842772459206, -2.9514841987472833, 4.171267398448289, -3.601410264914347, -6.675872019684898, -2.923505545104714, -3.6862600282763065, -0.1475267810193206, 1.5367286827820388, -1.5945364619881561, 2.2492279272968765, 1.0424897246004037, 6.419071071546969, -1.1137801809248844, 4.625032502324272, -3.6173414005669198, 0.11301706138535877, 1.6429117139154914, -8.285185840125067, -8.498039722946245, -8.42929009641848, 5.977833103962615, 4.234271863214194, 1.937632181270585, -0.021014817256384488, 1.2204487612315225, -0.0687001558784463, 1.1381069279704297, -2.6660173649580314, 3.688887258607453, 4.090836250123045, 2.97232518253509, -4.9453856370393225, 0.5327252029237699, -6.917214381521534, -0.6250892471362697, -0.6742479000485924, -2.7290659868143394, -8.482561137209082, -0.8033446307218979, -3.43807513042121, 1.8902107381948885, -5.022218468971244, -0.6403416216895971, 0.4745513993286383, 1.4519760838368136, -7.2990317455944735, 3.106316635992398, 3.568777801260566, 6.408334050000299, -6.228500778257489, 2.6068297952039634, -2.1616872961767477, -4.867026143651538, 0.8576447723258753, 3.236584548768862, -1.6400396009372056, -0.2313736987246645, 3.7487800933979942, -0.16703847177964434, -1.1189106715618855, 3.658035213121604, -4.667708850661906, 1.6270667945349866, -0.9403873980461168, 1.0246918516221113, -5.125313828058816, -2.539954594255175, 1.8378156359360158, -0.42498516583581714, 1.392555078812625, 8.923142843370352, -3.4133557048925875, -10.03378247778864, 0.627842967793571, -1.2687595617179215, -1.0687913482008873, 5.481215064185172, -4.37856135174973, -2.5388398362200335, -1.6756294921911143, 1.7968330065999871, -4.012111963495821, -3.1422691377915855]
BIASES_LIST = [3.858043952555101, 2.0595045259715343, 6.898161336109988, 2.0593520146202766, 1.5272707027508883, -3.757479818740184, -6.858287758850286, 2.3546032782062243, 5.300905108816412, -1.079181764666314, 6.032190368079214, -6.546294524148803, -2.021674741260164, -2.779297795317317, -0.8534722699199735, -1.0165284249495445, -3.737743909932462, -1.4150208441647543, 0.0989853856519653, -3.569993859428799, 6.124861576791909, 3.4338276266825147, -3.9481384093322034, 0.8870355793740381, 5.517954700433655, -7.7546234917994115, -1.6665467087399048, -5.999995284479773]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

