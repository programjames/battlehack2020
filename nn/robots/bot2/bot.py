import random
import math

WEIGHT_LIST = [0.5691231843270562, 4.905367777152266, -2.3187718059614215, -3.5491892726723298, -2.313772303629153, -5.294753926198458, 2.8654157213184437, 1.836577783172089, 0.8084912814535532, -1.1061395137188628, 2.5923636510247356, -0.0157937989838801, -0.8983800298106387, -0.7681350248782256, 0.23050431065020788, 4.92595722868207, 4.678735314598442, -2.9698994975616273, 2.8298554560819023, 1.826858306620302, -0.368204813525231, 4.3530055487415655, 4.9223573875489794, 5.407398135084657, -2.1180925981392518, 1.6069636508874605, -2.1995767416546688, -4.357920641076516, -4.9118772699789695, 1.3840921368944576, 1.3607137088139765, -1.1257206172718615, -3.4048537457700077, 5.253886040026246, 0.9974775674431334, -2.5030458466602314, 4.1501364257951465, -3.286619578923703, -3.7532623527304882, -1.034644262446089, 3.8282196114778766, -1.8653093112819865, 0.427783988543972, 0.17309328844411845, -3.2607548679668206, 5.722121952902027, -7.868068331358706, -1.037501656409172, -4.609689774906995, 0.8727201985276145, -3.847388768345411, 0.6711631269825211, -3.586144845050786, 1.8819440803349263, -2.2378506348429097, -1.5991680423585195, -0.401081166938557, -1.9777873486080317, 4.888110515621007, 9.867381812628294, -2.188078941940781, -4.489618549643597, -4.307396968506363, -3.5192970113303805, 0.734873672042467, 0.19246399284053692, 5.361756443672838, -2.1940740718565954, 1.2323684322753579, -0.6879692452003577, 0.4509984467482009, -10.3498744307411, 0.48584658425248495, -3.703081246628385, 0.04331841935984869, -0.9758322477551548, 3.3932564605433857, -9.787419431025057, -0.06383938942869186, -0.5662923084807204, -2.4137532335209637, -1.1076049803024617, -3.259207824744874, -1.208337895759267, 1.0114991300568072, 4.8083740859210495, -1.8286915237477852, 3.9897608870325043, 1.3693150933568996, -0.6822136583939479, 1.0006384855477388, 3.7837135309306795, -1.2444973468658844, -1.0658349075719955, -1.5726808794017897, 0.532460968957926, -1.7472001848149086, -1.1361485465360617, -0.6381825214474705, -3.6941884248580132, 4.1296819097760995, -4.823158020840628, -2.337932410720402, -3.6041354522431, 4.932224918067674, 0.7551883487585657, 2.699906130505997, 2.684527956807378, 4.960808867940943, 1.874828131359702, 4.3858909929571634, 0.603441451096247, -0.5353026802255271, -4.3189152882411195, 4.46177662834405, -1.7195561641313404, 2.5531132262282767, -2.776333605676578, 4.563555647342353, 0.565442422090213, 0.626312758486788, -0.15779388387265111, 3.5952909010241725, 2.613132208433427, 7.012257730706862, 2.4487067445745514, -5.370709465957572, -5.635495471707514, 2.561594017363813, 0.056918773777154985, 3.6142559447337277, 3.85040870182342, 6.499768130633837, -5.742731570805617, -5.198579420860821, -5.157803491460764, 5.242798668191769, 3.5027181022650105, 3.563512847125414, 4.554688812464219, 2.0710701898648205, 3.470614578008535, -5.218102197945741, -1.0580526226304543, -3.676243865199982, 2.510017249226643, -3.9485032970850287, 2.4890148727912487, 0.4619599725870142, -2.477094807988929, -0.43228087796233655, -5.111731555320958, -2.4134220826568207, 0.0059802219007044, -4.149053080844599, -8.685900754681192, -0.21382482628187588, -1.8262304465184205, 5.464002849310545, 3.796082666677958, -0.9505286498742664, 3.838401602100445, -4.5558883352480954, 4.47708692113983, -1.1311919436765023, 0.37019902634627616, 2.1122327637536484, -1.7056495934681295, 3.3650029710875846, -2.5981946845089428, -3.4616011442448644, -2.4276708626437973, 2.065484676192281, -3.2842289817815677, 1.8316129168182649, 0.1857071630794746, 7.3016254761736095, 0.14260778230032897, -1.237167380327175, -5.369888743821402, -3.224213977949469, -1.885249078368678, 2.154422847509967, 3.6424485014685626, 5.109537339881553, 1.1352691111546322, -2.633070200101343, -6.100329826969773, -2.5098454143784843, -2.13110467515274, 0.08015695484412488, -4.2899870284513755, 4.5662748964516995, 3.2547988631502967, 1.9075024922060588, -0.42302207897448385, 0.7561826509031476, -0.5216801288302145, 1.6845743776660036, 1.763425199334332, 0.13209188950401193, 0.7045545653369727, 3.029146929341747, 2.4269111133945613, 2.2480961085710933, -1.3406374669109793, 1.0340418493790386, 10.572896409138847, 0.5894491832511032, -1.1300907018562925, 0.6038197892112617, 0.7580235685574858, -2.9444028975810115, 1.299578336872919, -0.6541213375153202, -1.7550841927342091, -1.6090258357670892, 0.3195340746973624, 1.2982206974066959, -0.7358884231656371, -3.925825773119603, 4.082546422404808, -1.5684945822380993, -0.9411485521017166, 4.251766417326178, -3.5291034750133377, -5.020438985770824, -3.3140885478878985, 0.1594605406927906, 1.7537751153919372, -5.3394183938809725, -1.7100877350941575, -4.677101152648093, -1.6513045478510553, 5.270589060718893, 2.4103646449247895, 4.269120252632018, -1.1575849328792989, -3.630245150521952, -5.93970758087894, -2.565966346859296, -2.5975484438552394, -3.594021578558984, 4.858307083294674, -2.59500116161243, 1.2186563309258287, 2.5833720599455496, 0.21707195326192844, -0.09302794393447274, 7.128326695596616, -1.5415696415267004, -2.1178705658938566, -2.3049162102737024, -4.267821654621826, -4.858939749214085, 1.0100355661726301, -0.4166536395253389, -0.36484505225972563, -5.814961711276796, -2.5096472358244926, -2.7334535359656797, -4.570794050289238, -1.8288626205627678, -5.899968330512569, -3.067266727542891, 2.6837888651452735, -2.38060652386527, 0.6014689067947797, -3.761921135294533, -0.5504884021366044, -1.6535151599317608, 0.1758641416103038, -2.8937146101321054, -5.621348120074884, 1.525011501397713, 2.0335733416052806, 0.2037186103212588, 0.9929371936312712, -0.7841162635062249, 0.3707662531993923, 3.959121081101508, -1.0297566328405918, -3.8998640934063022, 3.750501219309727, 6.162266065335235, -0.07698406768523673, -3.3680416047550366, -1.8278346102716418, 2.643198232645388, 1.707385219441391, -2.9857265148891643, -2.6878349414697533, 2.5477346761953514, -3.567682701881949, -2.2559289927548503, 2.36496750238741, 8.841838203284464, 5.952025402949972, 1.8077718457216245, 2.051075578675956, 4.5682134638744305, -1.8800028348196935, -5.838479262713181, -1.7716361018364832, -2.379308393216988, -6.872057174939346, -2.877092054495194, 2.2949817721774557, 5.067029746841754, -1.4234649809552389, 0.6724956812577757, -3.9157046481871722, -3.6044055176031122, 3.271865734869182, 1.850517272241489, -1.7832746376509636, -5.655541528890878, -2.4160150566761915, 1.2945447229405633, -5.60113931137432, -5.316453251362302, 1.2686003536052506, -6.806812616287441, 6.39539465788246, 3.445488931446234, 4.596251922785387, 1.989340619352989, 0.2770232708246047, -1.2733400848717138, -5.561974290410892, 3.957535938137626, -0.3403297273528834, -7.428275888515704, -0.10851310048186022, -5.0302242909165615, -0.5088803254781089, -1.6755324849625224, -3.4614334928999506, 6.507955841205157, -6.781422675351176, -3.2360628818948363, 2.6598083449122476, 1.4782285264846273, 4.1908167823941485, -5.692859630360945, -4.638097801636993, 1.6976061567631464, 4.800103187918736, -4.856705113789535, 4.6520658900936915, 3.2509288644032663, -4.027281867331903, -3.3833571013832935, 2.3161740109904314, 2.348322150935684, -3.3954008089037715, 0.036419931515255674, -0.02476103769001613, 2.808915328184785, 3.2450060180012334, -2.250612411362571, -2.815225828558716, 4.922422176926393, 6.046954492335804, 5.290014278445897, 0.11350744213128072, -5.843341416144394, 4.27213464282361, 2.6147405061687485, 0.8511908057109441, -3.22108339931886, -4.70614008874542, -3.6573747868630937, -0.8909911157764451, 0.33760831308694, 2.070096931857318, 3.9199689906352124, 0.6779951841511561, -5.650762921478283, -5.267104761628141, 0.42203279518027076, 3.418680784109229, -0.8753720806194956, 3.156123875986023, 0.11851474294613919, -2.8750508505515144, -7.241254391723684, -7.876517536413514, -4.601572684174791, 2.4630779984448017, 5.596608121151222, -1.7006036043645083, 4.708351146306622, 0.5113913983649535, 1.4441994934625015, -1.2990663477248954, 0.3472425827180144, 1.1718721819669833, 2.261536645561738, -1.4960498003661784, 4.298231535955787, 5.554067921964594, 2.7201682423646494, -3.451911135629226, -1.7170146245173472, 4.553154078367963, 0.7032314005372836, -2.1577270776386617, 3.8666321641486463, -5.554496880872839, -0.2954580905093004, 0.791592742775464, 0.8994883907843746, -3.285313767414848, 0.9796381027781196, -5.6823643329879125, 4.140061212363994, -1.5781852762745765, -0.7147671224571106, -0.993993248951755, -7.399388730507945, -1.8381303223794465, 0.7644855600929658, 5.228230503617202, -4.3429456404539435, -1.1443783121084279, 4.084257283337501, -2.745329435596867, 0.9161095118579993, -1.9259647012994188, 4.391640221624633, 2.7781606557106273, 2.9908637724857314, -5.894901841567576, 4.939148645957115, 6.191870022863025, -0.7383952442273806, 0.8006909467292066, 1.5718637363769388, -4.763037932121994, -1.6056073620499218, 0.6572509481505405, 2.0207085516378736, -1.8194390226474277, -0.37539542638729306, -4.3160808855923625, 0.7170540954734768, 8.000083410356243, 1.8012676712261813, 2.9359023317450905, 2.414863319951347, 4.521705291846021, 4.93045538358795, -4.366198913308712, 4.685162906180789, -0.001702614814502919, 3.62711011795041, 2.56067912155762, -0.38564062914151925, 2.521049633215686, -0.4289147275054441, -5.918724438253107, 7.698702930973342, 3.6813990757393067, -2.038687547788624, 2.0693071751680145, 1.4932108155860324, 3.1965343788773204, 1.3747067190192341, 3.0497855757948993, 5.176609740050269, 1.6583979431971039, -2.3195296751051186, -0.10475917281057971, 2.4903053225790357, 1.3424080505650744, 1.5807133759296286, 6.852776035658987, -4.276476094140362, -2.463350336359274, -1.1987959364175012, -5.088830301490153, 0.575443618339431, -4.346155480751149, 2.6921924345448702, 0.3874650044035663, -4.4024784142502655, -0.8173313376016053, 0.49497789120896857, 6.261066540680935, -3.2719374818369955, -2.8793645171223834, -0.6918182145301716, -0.24453631312271168, -4.847698432457351, 1.3557493556544276, 2.6051579095931863, 1.8404846572386055, -0.3642996699541852, 2.7312156310908513, -0.2787350199259841, 0.11275735308403392, 1.541106638237645, -4.737650256680951, -1.6502596783972228, 3.612827418317509, 2.861807716303431, 0.48724736309082795, 4.26010566512484, -3.0527229600726553, 1.8312752579594431, 1.0509530377655378, -3.7757987132530504, -1.7866878036440996, -4.9171734597330605, -0.9597172030771616, -3.993036172782132, -1.0077415652237611, -5.9651374384112525, 0.3049800239238217, -0.052484710850694796, 7.014491492270386, -1.189191675964772, 1.1123420418232126, -4.015697741712359, 6.9565054251618434, -4.0725186544523435, -4.13608444991995, 2.0527548975742724, 5.10747836029299, -5.5055234037753635, -6.4056697932378635, 0.9036256975012132, 4.229735803313261, -0.9098721710898112, 8.066100157617196, 2.5161530829615684, -2.2987717947446376, -3.3309540055600357, -1.9854461515148696, 1.4674949588551391, 1.059017855389384, 1.4376054690188813, 9.026930255090504, 3.8128591178138938, 0.5588590108409842, -1.2624727908148559, 1.7997458670348494, 1.51039712891424, -0.5542681185501057, -0.2745203058222325, 5.969308898849565, -0.12269835650946073, -2.7865396901815047, 5.4073505372636195, -7.7598945509794675, 5.265170380423241, -3.8913317111983057, 3.403060317452688, -1.0047359266915277, 7.80292262148946, 1.8986991609832373, -2.2478592885372444, -2.17858831912083, 0.034745355632199, -0.11643522986922805, -2.4664375595393433, -4.416839916039532, 2.21569952543574, 3.955251012506542, 6.048816728505158, 4.872901581625399, 2.2591613620379585, -2.149056187497186, 0.028995182649181755, 1.8399668275008954, 3.7055668039293974, 8.943977706115813, 0.40370067265544246, 0.21854478008962389, 9.610521267380927, -0.614344400324512, 0.5421940879764574, -3.184709934271788, -2.5494867203024723, 5.772122625818819, -2.3423806260935818, -5.461706871839431, -0.2398011333469886, -7.3564067691108175, 2.4152457004078633, 3.09368155758294, 6.111925042065182, 4.947227570151553, -0.9424224197132968, 3.807943525686861, 2.9239446819648616, 4.115462614595866, 6.786417831406811, 1.3941382613003432, 2.2996210508895043, -4.25173038081513, 2.016460642763496, -7.727726801433991, 2.1653395701875575, 1.2585625604975856, 1.2261762258002202, -5.136745145384603, -4.543789285343653, 2.3523997586757344, 3.021861258488063, 4.286421000832392, -9.142571979035042, -2.42009840193188, 7.4457941565788115, -1.3509410322298971, 1.4403136600563193, 5.832659100159984, -3.4633553219710334, 3.1666774654180756, -2.016845329585036, -9.993700635330374, -1.0562374214531827, 1.4803185350006045, 2.8932581172422704, -0.9096204718618597, -0.7011450030702336, -0.8073006267954327, 2.2836594749827053, 2.4974915981589936, 3.2266203877402586, 0.28241663659251504, -1.4071157938466474, -4.282784063027151, -3.2285893019527805, -3.417733345049098, -0.7017245268069321, 0.8658929846116856, 4.225931731152941, 1.9633893550337587, 3.181618675038255, 3.118847581862042, -1.445341628479359, 0.15688012925459233, 0.9591078363761307, -3.0899900011059027, -1.6389071535509319, 3.472975977041674, -4.010551918275199, 3.356405041136998, 0.5798082942029342, -3.6861265715123492, 3.441417173302147, 5.927294056249027, -0.43135210912689154, 3.2245048296334193, 0.3773144883601868, 1.851801633340766, -0.9176240052460576, -0.1999882395165414, -5.268225612183247, -3.358163938733659, -3.7160211954344877, 2.3487670885708773, -3.897507479078124, -1.5416768876267133, -1.142795151032396, -2.0729965751071626, -4.911133479718509, -3.8708176383027246, 1.9849762428235496, 5.6737239336899705, -0.20259874032563224, -1.8227142287200362, -1.3661878530057214, -4.280184866891907, 2.3387637233885226, -1.548966452126218, 6.692307055689643, -2.6764394069153785, -4.7422252878154145, 7.882990687902781, -2.0362602286754123, -3.286632654762141, -5.160084626601767, 3.002201744859113, 1.5106013238377163, -3.556704737704304, -1.3688300180006854, -1.5979850715675936, -4.80496041221204, 3.336141023339508, -1.3008004815649103, 4.378811225572258, 4.6333002803964956, 4.281081271137798, -4.916622920707582, 3.646585337777157, 0.24512928581978474, -3.3961435610170922, -0.36025989582336726, -4.74525673592475, -3.5370194201865677, -2.069699257843239, 2.5270451798588565, -3.4074804177514486, -4.690185872875403, 1.4251278192355672, -2.761684882474484, 2.011112648004908, 0.4663957375352492, 1.6715322575911982, 3.965286962209251, 2.9401401270975707, 2.7891945506430877, -5.863889262575703, 6.985513220595261, -1.3677000174343474, -3.4860228895606564, -2.8446781484637143, 0.14465461833631438, 1.4955016960261645, 3.0376279489490545, -3.592772814785585, -1.0599084544541948, -2.7689465261320994, 0.5848155765449427, 2.183900277478314, 6.129260940676605, -2.763713212316749, 0.08733753226256075, 1.4752328152621876, -1.2587104969788199, 0.7388848498901616, -5.72853110020751, -0.8386068554111036, -2.392026218684201, 2.3587575378678562, 3.7688340352837626, 6.934343566188168, -0.873154356225498, -2.2300173507086707, -7.9826856880968435, -4.317054719267911, 3.004264583126427, 4.2152996570559536, -4.418065615410836, -1.7758611323720677, 0.9649936749379403, 7.592674617495402, 3.7543914530309124, 4.8744575225302045]
BIASES_LIST = [-1.3796926565885628, 3.7033803936427145, -3.607106342238732, 4.783864686672186, 6.333451814037996, 2.7719630985992763, 1.0977978986656558, -0.07671878626687839, -1.1151074425567453, 2.652586255052284, 2.1242172356202578, -1.3664137636642226, -0.009282458951972373, -2.6239539308393085, -5.50809907130869, 5.258596877198153, 4.826397791535206, 1.4762245377684489, -6.566659806103518, 0.014662809733207778, -5.074052778145481, -2.806084331053498, -4.074831004246316, -6.082387146837323, 3.9161819529737323, 2.645004687740214, -4.0311129750107035, 2.9135818984644, -1.085884333004256, 2.297565057744023, -0.33236480754527364, -2.2832111837436577, 7.126749559696183, 1.8502685308328302, -1.6874466700871322, 0.4588708966851182]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

