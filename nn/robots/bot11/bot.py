import random
import math

WEIGHT_LIST = [0.48408950481144064, 3.2875150041138905, -0.9903881079106251, -4.176877458615673, -1.9386285293206, -5.722294283574913, 3.280547325645381, 3.4104510030902286, 3.6672966079958744, 1.650486660502641, 2.216115546879686, 0.13858134955204626, -0.33738813685542945, -0.710615220643303, 1.3408595891899124, 3.3163247108687637, 3.349930236765779, -3.6371465896555613, 3.885662234824533, 0.9461609825434829, -1.6948190709469688, 6.592764040381269, 5.612909734235547, 3.9199725946883826, -1.7971633498483595, 1.4883422981139267, -2.916884454317593, -4.375563304524093, -3.316599196430205, -1.3606052212648372, -0.09206719639979277, -0.9594047155958374, -4.004717618007202, 1.87954217653354, 0.2621176653416737, -1.5910782777037733, 2.848153149187545, -3.3788570670007543, -3.7881470199906775, -1.064477515417775, 3.3565138644296884, -2.228410650723725, -1.5597942877944966, 0.36263940191862654, -5.106621153359518, 5.90034590971397, -6.019831438547817, 0.031791485405014086, -2.3933543764797056, 0.9280861874427386, -3.538922138380489, 1.5000528633118986, -3.952067378113198, 1.4497386931419896, -2.089934657004418, -1.047809845709085, -0.9638190197624242, -4.051945785302958, 7.755775856032816, 8.149029045482509, -2.4336007850974433, -3.9396683822744736, -4.129781828922294, -3.5371070645475307, 1.344158711115659, 1.3252989631134797, 6.659264606935334, -2.095962699247222, 3.0171092238157744, -0.19274647867934913, -1.6011282833060947, -7.048499160987983, 1.3738046841069371, -3.7981947360427455, -1.291964302621814, -1.0861886959695521, 2.9754043114977957, -7.677612287836128, 0.3006845714434938, -0.32908534339444107, -1.7144909762400566, -0.8587355999423407, -1.4316735736535768, -0.6129935988607873, 0.6482708889935549, 2.868277769472345, -0.931027003768925, 4.365028909567717, 1.6382933747348098, -1.197116492966665, 2.8883535317849134, 3.347905122660343, -3.714163033080336, -2.2399641300217654, -1.7630863140193012, -0.3241920794604777, -0.13449608274461733, 2.913263447852234, -0.3633223636043239, -3.888554981120593, 5.650296987745257, -3.8078492944458633, -2.1367219799148574, -3.1736515059997847, 5.916333071972535, 0.9128510004309636, 0.013334712387811143, 3.026412063807167, 3.9606005905486485, 0.47641282397896, 5.972406142278954, -1.3712262708917025, -0.49026757299158474, -3.8983668307823596, 3.2879233400069676, -4.837043130705284, 4.798765693114593, 0.12762244577868143, 4.7008144465180965, -0.5490615473582043, 0.5188499126608825, -1.8422762350834752, 2.485843030346767, 1.7847057737415652, 6.269647646028151, 5.03524570793036, -6.374947762727119, -7.278854196376303, 3.3718872829485314, -1.7058888560496261, 3.1766121823186078, 2.710252182441728, 3.303871379793593, -4.539541824633015, -4.702866902820317, -6.07234292725075, 1.7389713646677825, 1.9442569298880064, 3.015878231570781, 3.7788814013828027, 0.885855009821984, 4.541759990029234, -4.588880116212986, -0.6628164389786431, -3.0040973045362716, 5.108863484612648, -1.1109839812308844, 3.800893613082721, -1.0930024616630294, -5.193784187179414, 0.11172464214408695, -3.9426428460352185, -2.60858344662058, -1.3620520125356146, -5.827612632899183, -5.950577629438405, 3.1559224284748977, 0.45231954051566703, 3.615865287823576, 4.283728492281242, -2.216862053685438, 1.6370239553921455, -5.453842824978203, 3.322025407645193, -3.3195605873611673, -0.11895799774433824, 0.9121212749728558, -2.500882824792032, 2.447248402069592, -3.931042844489833, -2.0729961465704436, -0.7432404205244889, 0.08412145166571561, -1.9053848198448236, 2.418256463140631, 3.453116126155841, 7.513559533975693, 1.7421752826280494, 0.818689012766042, -7.550350824987884, -4.4508195477731105, -2.002044168115123, 2.2474829196374415, 2.21550359589662, 2.5970901904446766, -0.836977478908089, -3.534499251902911, -5.235181563159264, -0.8653941312221975, -0.9915401884464634, 1.5634878750849168, -4.680785516963024, 3.3989687981059555, 4.673890083528798, 1.082769055386251, 0.4308627075064648, 1.8918507328092105, 2.398403730723421, 3.5588469021525606, 0.29869457036740754, -1.661658476089275, 0.13213367672065823, 4.48421133017408, 0.6144556575202851, 0.5506775363345333, 0.29917073696912366, 0.7934481205015687, 6.868706174375116, -0.13296479144664497, -1.979362181086989, 0.2402691579856593, -0.9570608001366492, -1.945009120948249, -0.6105998723039405, 1.5387661770225898, -1.8910981767024084, -1.4470677705478319, -3.2387084670024215, 0.4247809719127167, -1.1036237391184347, -3.0254213370181966, 0.25467462361744264, -1.0972999786187738, 1.226142175630304, 4.2856851672505405, -3.3423941530243524, -2.9581842198775354, -2.503959897087625, 0.4022357775874217, 1.648426071871631, -5.983713392536469, -0.5295946842292305, -3.721563886022931, -1.5318568551617184, 4.36949905098107, 1.26397020429763, 5.180829492051175, 1.3577780229801544, -2.0041222765755378, -6.760454990626655, -3.992659745847705, -5.0700681263830525, -4.261504373492743, 5.239173858573284, -2.169766326401662, 2.6568007236841615, 1.7850728834919924, -1.7102389880947626, 1.9671106753107814, 7.734436989955713, 0.2937743933708383, -1.7915687299775156, -3.273596509465881, -3.678588120490808, -3.0255236237633873, 3.191033039099338, 1.153219810009805, -0.3374189087893409, -3.698677003308693, -4.1774785979630105, -4.197014949176924, -1.6984166834590793, -3.021220001596316, -5.400031177614058, -3.333540734890253, 0.7332171625452499, -1.8083571300286079, -0.8315981050514871, -4.8568550518776386, -0.453122349450626, -1.784241218481288, 1.7335723280686892, -2.9791188699650153, -4.074750342695747, 1.5462465208146847, 0.42691881569719237, -1.202753858094568, 2.7720694970559117, -1.2212649890694023, -0.8908287138089692, 1.1942065484029416, -2.0779662648904296, -2.56841412052806, 3.4126435070173935, 4.930135657472308, -0.17957430261425955, -2.8072852297863857, -1.3054607664135918, 2.859910175871029, 2.265431774926915, -3.4552579566019386, -2.2688602208573068, 4.325866730935906, -2.0110994701546354, -2.194350173188419, -1.1710125393054303, 8.62687222104227, 7.6739197304092315, -1.0327033575088544, 3.229231467807736, 1.7801279486716268, 0.63075067923156, -4.012054810157112, -0.4575419820680453, -4.090436214777141, -4.661938209960085, -4.7962467625265575, 0.35852276155681384, 4.911003750515449, -2.3419233567631523, 0.7258080720352726, -2.96387934538535, -1.9747945650271854, 2.0199199890044817, 0.40120691723383417, -0.897808712445975, -3.012758143296157, -3.192323100563172, 2.312111212961406, -4.747800618123831, -4.766374477999082, 1.5403535485058777, -6.0846552813328465, 7.074837273777677, 4.055505302668097, 3.644690669813788, -0.5978523528236296, 1.8716654080954602, -2.029061680601349, -3.9329416285779573, 3.3768005819360223, -0.3566436462781494, -6.119233367994642, 0.43692731453784517, -4.145671336722401, -0.6420569108429428, -2.9798782443830456, -0.32638065901371904, 6.183741062102384, -6.0196855385695365, -0.06492845801963332, 2.873582836377113, 0.6390283840556288, 3.2695797471643067, -6.2745136861869, -3.0832747920923618, 2.1877049783127616, 2.177040990072426, -1.8957991731918766, 2.5378358121976623, 1.3211552542329956, -4.467768038018352, -2.8530164276790577, 1.5686370330991668, 0.22044781467456098, -3.727487762178864, 0.1074243315103025, -0.2595772829048435, 2.8290713827712564, 2.52740743379543, -0.48985649435563094, -1.9928814833970947, 3.161287161571561, 4.065871457014362, 7.004308212834051, 0.3541171015743536, -5.023218423062603, 4.097148178763694, 3.396793193937085, 1.5004111743197934, -4.6002203411216644, -3.432663113503407, -3.9463396250982514, -0.7566889247896191, -1.951697746694218, 3.5347947506379196, 2.7993722457574233, 0.7678848649108581, -2.556895668824306, -5.578130091495966, 0.8935311631518508, 3.6224759133166584, -0.2747637198466335, 4.318744029315077, 0.6914961432866078, -0.6868380686594229, -5.193727948593703, -6.725165618694968, -6.574013550174919, 1.6963802902642362, 1.358916214020975, -1.4236937901959845, 2.349558422177494, 0.5181537956599549, 2.0105003782941187, -3.723689957326095, 2.1738502269060858, 4.372188909902439, 2.2945835312303817, -2.421635697587898, 2.4999358841825625, 4.075922173902363, 4.145699661718126, -2.0751593521347007, -1.4310542229607723, 3.579625439371526, 1.0369949957466922, -1.8857875492662741, 3.246131116603191, -5.481414905311747, 0.8576418021155341, -2.3795068239310906, 2.9814137382942762, -3.5059996577925205, 0.8243134350444463, -4.597095202555998, 2.525056236106897, -3.275120603875447, -1.7940977719782953, -1.5354202064218512, -6.950619891922765, -3.345610783839765, 0.009719328047842035, 3.9008573549472843, -2.8038597845735698, -2.9946736679993102, 3.8091231625677127, -3.499926007522628, 0.2857375327484466, -2.5363940097333906, 4.688851924016914, 1.5884345344535342, 5.405840534481446, -5.710300230613953, 4.602532742460987, 6.569962645222623, -1.0133645497434052, -0.9698433853329714, 1.1810616208680487, -6.055956764455882, -0.5526780619618714, 0.6783100451933719, 3.6019123636170036, -1.1463340118887002, 0.0790650804617421, -4.684757566790151, 1.4112576968333377, 6.553443839489259, 0.8360124978862593, 2.7715551496032345, 1.9022877474240025, 4.281229435885368, 4.632868401492908, -4.785750496198862, 4.12398717916581, -0.9757662241167858, 3.6337023600631007, 4.029777921762558, -0.8355585525515923, 0.9936736054111259, 0.7099991930187821, -2.652622228126395, 9.609356140663625, 2.54016442517781, 0.6335354001020013, -1.575504499795111, 1.6121816120037185, 4.088591337326181, 2.047335136601137, 1.6857368494344533, 4.061563735055642, 2.1896387688592966, -1.635587297020425, -0.4138894400858837, -0.8261084890082822, -0.5325325694224226, 2.5508617365533364, 3.629718770212812, -5.540153683044863, -1.5676556698206008, -1.5656052042963258, -3.3249082228055222, 0.1958739737429629, -4.669695022871656, 4.50263947717301, -0.6261404605859016, -5.658701044539141, 1.2823380928914707, 0.8280180501626904, 6.530438475346464, -1.2425559300809694, -3.9245832418643825, 0.5417551017649047, -0.020124012898586563, -4.147702972252061, 0.5765862867020484, 5.259867402828549, 0.7100621381434848, -0.046040522474136925, 1.511776341220557, 0.21583745090605055, -1.2852911391383963, 0.7213562344235807, -2.958369344425063, -1.1913653539829034, 5.130755143108109, 3.4684925760662377, 0.03218340242206574, 3.263046024443958, -2.5540388413710597, 2.5648522184706657, 0.5286324540754848, -3.616624125170078, -3.62555150064094, -4.252463160150305, -1.716096318294399, -3.4488339244127406, -0.30702428506894863, -4.128333620109009, 1.1182672766841657, -2.3491265487911264, 6.707573271936059, -0.2069444947257706, 0.814257909273921, -1.3658361122564504, 4.267440014238545, -3.920499913764539, -2.1813663830200065, 0.620607202967635, 4.888244853927746, -5.355880439823286, -6.339256671930105, 3.1369426147136483, 3.2645658467990684, -2.133838309232217, 8.023498851325543, 0.8415015835153421, -3.4010412096048936, -3.604803981819726, -3.496030974056713, 2.445974991194274, 1.6079715286407432, 1.4185339760253557, 6.658029942098345, 1.984624610574853, -1.5315173520518301, -4.08953494355392, 1.2141880540832588, 3.161018088755604, -1.2191848640508811, 1.1027507073815173, 3.7726468650488583, 0.12466792702314478, -1.7437043389429787, 5.09704501093138, -6.551176028775133, 5.800537973057364, -2.791515382650288, 2.1789966103882263, -1.2692784307914504, 6.44055495974614, 1.2338805111193634, -2.8231064639560817, -3.17644396890224, 0.8766091534011093, 1.83655551707532, -2.608870899509037, -4.946593330851002, 4.070689017271014, -0.915289615871594, 3.221914093471976, 4.020900406778918, 1.1628104300708362, -1.2877652501737187, 1.36464520393133, 2.667190723541265, 4.059601521029505, 6.726358817476506, -0.2501289720214439, 1.2998948803238664, 8.390650791744072, 0.09636370594401966, 0.6111724718924765, -2.1532142394558553, -3.1077297934593453, 4.861465445990984, -3.785469818891004, -5.476816780507753, -1.7465527034636668, -6.498489593249245, 2.7915148073674194, 2.6958865113827057, 5.432022046648946, 6.07610652668838, -1.8413031935591446, 1.657680231459214, 2.202891290205633, 0.9864264443983093, 6.278499790905465, 0.7785025097916418, 1.1121207643789912, -5.8620829076171175, 0.9095782254308962, -5.125635364992639, 2.7044891360387977, 0.7675062940020116, 0.7037641245484405, -5.211853278121611, -5.435039825587973, 0.014371965205986603, 2.2597519220822075, 2.1594735315077553, -5.196302029131953, -1.1692395237230306, 6.40140802972074, 0.018362954016884814, -0.5818814839065292, 2.418945262128627, -1.8542152398473652, 0.17065580826458948, 1.7805599608625977, -9.604236942989681, -0.09612331249406614, 2.745046956455808, 1.581130769069003, -1.1382309800380728, -0.9906116628027557, 0.6650880324391382, 1.9242500071249022, 3.162718257414241, 3.7245781411298875, -0.7361768549415588, 1.55823317085619, -1.4649802164658254, -2.5697819288691264, -6.102395477277605, 1.7033813384797378, -0.1608471412412925, 5.284968740480215, 1.3932943937672748, 3.9195045645533018, 4.105670764047897, -0.1019213675376025, 0.05706470422400134, -0.5410201248977022, -2.2934435527694066, -1.3068006214652703, 5.190874651773492, -4.3484255013875215, 3.6350635527591564, -1.3617084883358606, -3.288643408858486, 2.3724163738536372, 4.219591225065406, -0.2327042940566243, 4.420352038384041, 1.4130717541326723, 1.5826278385988188, -0.8960345308074347, -0.6204011353219183, -5.989657808852028, -3.1433177840927597, -5.4509405147998065, 3.8166028575445736, -4.9087999430294085, -0.5388067182028611, -0.7843257240237483, -1.239869175236466, -4.763029051926485, -3.831251685800974, 3.957330972536421, 5.3299762979000125, -1.3981863876205718, -0.8147089473849265, -3.2079941306231103, -5.820594660805723, 2.4966775167662045, -3.96769958763121, 4.051333984213303, -1.5643536263798163, -4.823433255733066, 5.781125914441951, -2.8246386188391197, -4.178843256950603, -6.635362044628135, 3.627903197329104, 3.0091668130931293, -2.2961320269788823, -2.229727102910467, -2.891536037174073, -3.2369931528871208, 3.5542650735743866, -0.9724509561199519, 2.259065495625663, 3.0400300267139544, 3.2262242930335097, -4.520856817761738, 5.437890398643196, 0.4696363481031698, -2.0746705801585064, -1.2871270243671307, -4.698759440351269, -3.686842025387176, -1.0369984391355211, 2.484530238488592, -0.7112322532087026, -4.5257095714928814, 1.6114631333352136, -2.5821287325518734, 4.471394212575393, 1.3573871536458961, 0.6276807330176724, 4.919130081652616, 4.320162007461982, 2.9273516391706718, -5.087000323207274, 6.820571082719742, -1.5611920672763913, -1.2040492073474074, -0.2275070857483481, 0.7731910919536726, 0.6754132538626749, 3.871765745915556, -2.0824392581444013, -1.504763290334005, -0.5464177216260537, 1.915246738714675, -0.8672614742622631, 4.613912350358915, -2.0136442703076334, -1.4478493866145004, 1.7886001910577192, -1.4165508560756206, 1.8477294386654521, -2.79518383564922, 2.2264743733891033, -1.4327722710159345, 2.5153273971640133, 4.708023599799569, 6.517077936668732, 1.4369429114616263, -2.740252711949884, -5.339093350385028, -5.067800557997643, 3.205060533166783, 4.310037452484913, -6.993257611048685, -1.6830129644116152, -1.214002375049136, 7.580349615833997, 4.471572089931341, 3.803855649181413]
BIASES_LIST = [-0.9300182335408751, 1.897679735887797, -2.1597570320265316, 4.207235291376105, 5.81751612073886, 1.4539641844599887, 4.518409299640219, -0.691742694331311, -2.8971059817380027, 2.175858985943915, 2.2442425800245616, -1.5328211231625937, 0.5114500756341256, -2.4912383253033323, -4.363616825703812, 5.1189682655216755, 4.111897411068424, 2.990557480506653, -5.1371948630827315, -1.1041902413839613, -3.03792344039129, -1.1033134217719445, -2.7702516739337923, -5.787983097613025, 4.866700049993271, 3.364941486089908, -3.758854013158609, 0.7953644928448935, 2.981852856134302, 2.3590350595448255, -1.439557061177261, -0.17280811053419132, 4.258020480987871, -1.3194828997221637, -0.39802782754669497, 2.285526580337379]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

