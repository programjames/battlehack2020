import random
import math

WEIGHT_LIST = [0.5650678747876843, 4.899940936356874, -2.321021374508213, -3.5514747822162676, -2.331702764465295, -5.28982263988622, 2.8703243372398934, 1.8326526998332513, 0.8092604059456723, -1.1033229848795807, 2.5944541591908177, -0.016053977708643027, -0.9083881769211501, -0.7625960997386223, 0.23462796082657564, 4.926068336861687, 4.675007441351096, -2.9741767324582615, 2.8342983732882674, 1.8380499408495414, -0.36730333755973144, 4.351653140104491, 4.931087681098827, 5.419261883354467, -2.1098534568478655, 1.609230836839963, -2.1875237637426097, -4.362320113999238, -4.904993504096681, 1.3952411653544101, 1.3669559614524893, -1.106309120482158, -3.398224656369025, 5.260091792656624, 0.9948622877438826, -2.493034060292574, 4.14819634489735, -3.2985096368603015, -3.7530252967679654, -1.029393108229265, 3.8329704310241537, -1.872708254989898, 0.43211220805995904, 0.17252047752844168, -3.2724571886999674, 5.7252946198488495, -7.871387469558214, -1.0387165739154722, -4.609744066069927, 0.8764866906997932, -3.8451331229153105, 0.6750787591560692, -3.58950195520276, 1.8796040947283768, -2.2473052327979244, -1.5903506271855352, -0.4031124037827746, -1.986644428601747, 4.902243359921288, 9.866528267818408, -2.1927926333766172, -4.496574206531231, -4.31338268205832, -3.519139253792525, 0.7310532632721013, 0.19104331352839246, 5.358939996363319, -2.1993398735661565, 1.2187423936882453, -0.6891593443712557, 0.44754903331384616, -10.351258633527856, 0.4875739347742469, -3.6973941607853797, 0.03383897117354081, -0.9735080027671872, 3.3851182028395397, -9.795372711431108, -0.07251504754890238, -0.5672141771047827, -2.4087596584959465, -1.1018737322477121, -3.2573728251865672, -1.2177753881975173, 1.0198044960830153, 4.798383580897447, -1.828073336104181, 3.9867576726258127, 1.364974609881016, -0.6794816931079553, 0.9993721312973565, 3.7838215025021027, -1.24111643003211, -1.067574871732645, -1.574638950285152, 0.5326095890037383, -1.7532360188307285, -1.123690679571445, -0.629984451409798, -3.688199868276859, 4.11776988327584, -4.812899165898255, -2.3324861785617053, -3.604488351957255, 4.936308843285276, 0.7448516192832291, 2.6977900914890887, 2.6930222525672147, 4.958851408583441, 1.8758617206515482, 4.385623756822597, 0.6092406090251864, -0.5305602642597607, -4.322505203584503, 4.454244261873936, -1.7122726601819993, 2.5538988931242654, -2.7740675282728082, 4.56083996306464, 0.5645729014880333, 0.6270220556463504, -0.16455296504841074, 3.600658086958806, 2.615403617192523, 7.00718894922955, 2.45560738456439, -5.370928577484203, -5.636472261018262, 2.5594469398888187, 0.058868456191682794, 3.6252436707789193, 3.8409033222329385, 6.514434984105988, -5.738671329653184, -5.1863482839069475, -5.16345582301856, 5.25470485964423, 3.495277380982899, 3.559015880404703, 4.553444744889842, 2.076705410233015, 3.48766371172867, -5.234850207367224, -1.0501920163044989, -3.6845567140769067, 2.5170980611478084, -3.941972673702698, 2.4812726966008314, 0.467995811151135, -2.4735084853237663, -0.42226202065214113, -5.103944248134918, -2.412290845494094, 0.0041868745510122655, -4.140267109726683, -8.682322606574875, -0.21636960445233835, -1.8142134735336883, 5.447878426185038, 3.8088323065013623, -0.9502126809241183, 3.832237309135179, -4.5462302717987795, 4.490024521380074, -1.1158840157451413, 0.3643385378987603, 2.1089038271820333, -1.7024870275387316, 3.365961330128774, -2.601474516459091, -3.443949391656026, -2.4227708885797323, 2.0728966230429626, -3.2901413058072486, 1.83429938343189, 0.19894955509878137, 7.308136421445589, 0.1353477773244135, -1.2431788314771968, -5.362578660131619, -3.224664226064551, -1.8809886630984862, 2.142116641804889, 3.6551682849411327, 5.117286772451851, 1.1342628575572187, -2.62617830487851, -6.105503090408822, -2.5061919536679236, -2.1262956089648863, 0.0794589117955066, -4.277621512690907, 4.581479980602274, 3.2438101118906206, 1.9077374099428563, -0.42110453488826344, 0.7559224453558593, -0.5306396765084641, 1.6850424988707788, 1.7642396931463975, 0.12504850002287923, 0.7050019890178784, 3.035522139394088, 2.4215146060350063, 2.2436690794434093, -1.332356027609524, 1.0366209615001998, 10.582833560184389, 0.5775916881235087, -1.1314136067506653, 0.606067149375341, 0.7525566869803703, -2.9393441376818203, 1.301108147922095, -0.6611664824085159, -1.7576747388214242, -1.6025414566383993, 0.3334157404100792, 1.306205193026229, -0.7516363611337411, -3.915177651151608, 4.07989434172438, -1.5676960461864382, -0.955431352429108, 4.24454587667323, -3.5329270744543924, -5.031387956092091, -3.3293301473326284, 0.1476338629157663, 1.747552604259335, -5.343505442802894, -1.7024583973099776, -4.685469429020674, -1.6404953076138502, 5.274532034209887, 2.405995725218477, 4.26135157511766, -1.1632129392502122, -3.629055062633208, -5.938591475148887, -2.566830728308756, -2.596527741844802, -3.5936643780798456, 4.845077703907821, -2.6075833165839213, 1.2106003692245555, 2.5936978585127366, 0.20742912303069685, -0.08398395633115607, 7.126487259685519, -1.5286814675716502, -2.10879775993708, -2.292609855673277, -4.271476611399491, -4.866056935556333, 1.007318922268003, -0.41900788754953516, -0.3623614049530495, -5.812941112664303, -2.494271537482655, -2.7347832898601725, -4.570893608828033, -1.833904629311563, -5.897125601777808, -3.0650370838806458, 2.700005782068344, -2.3800765212816355, 0.6017894537195175, -3.7597571124694142, -0.5531794056687078, -1.6559594681484284, 0.17068238115227144, -2.898404944966907, -5.618077229739262, 1.5216600808200933, 2.0300321297601203, 0.20114440133321154, 0.9958025325857471, -0.7799425518798747, 0.3689760125460448, 3.9535696453818523, -1.0260044380193374, -3.9013582179835873, 3.743730201017205, 6.155651860975336, -0.07468988471463721, -3.3813828355116504, -1.8193416669818074, 2.6421116352531744, 1.7052561633683123, -2.986589848739916, -2.691074674199024, 2.55047904396557, -3.573143313125267, -2.2551912682622013, 2.3727383883681004, 8.833862170474147, 5.937902487375003, 1.8016627310863245, 2.050691315910474, 4.554486756308548, -1.8805144240666012, -5.8451036170033746, -1.775528323565542, -2.366954027703643, -6.864766029378257, -2.874538131342363, 2.2857243903526783, 5.0601214908358045, -1.422543334400341, 0.6696436335869409, -3.9191704917763217, -3.6064795605284283, 3.2705914943085994, 1.8494141400075963, -1.7819304476506086, -5.653471489221932, -2.411811559644394, 1.2926616099296153, -5.594955773417647, -5.3218730872273134, 1.2756396468161888, -6.794784486952809, 6.401079622181065, 3.4431350043051068, 4.596988102897263, 1.9897850567484623, 0.2905876231128175, -1.2728126757840752, -5.55945454041422, 3.9529838818530343, -0.3430613172753281, -7.431620335027954, -0.10208908262426135, -5.02909497232903, -0.501319265880493, -1.6800961838665407, -3.463519677981232, 6.502865759485272, -6.772202038126904, -3.234672644535888, 2.6679244990328326, 1.483643285908408, 4.184711203549961, -5.697420279654956, -4.627656197946389, 1.6951092507304928, 4.7995121534328975, -4.853144238987747, 4.651445508922138, 3.260059159436545, -4.008276754839409, -3.396791574982034, 2.322165721412658, 2.349664592160762, -3.400987322179179, 0.04234245334056222, -0.00988826800940375, 2.8121011335563475, 3.2514538372365474, -2.2506869735779746, -2.8162821404903258, 4.920568104551438, 6.045597380801574, 5.2932430231324945, 0.11305251860397317, -5.84451317510359, 4.26015891545571, 2.6123424792426846, 0.8583742982498938, -3.2107591393445287, -4.70138722294726, -3.665767820320462, -0.883639415755034, 0.33397207637491294, 2.0743833714062245, 3.9153001941677217, 0.6804504398313689, -5.640100756151787, -5.256894775511656, 0.41879838664468766, 3.416705587536753, -0.867062495875293, 3.158499946821017, 0.1317803888537818, -2.87227290315487, -7.239208023242958, -7.883089331618146, -4.59745878803989, 2.468137378501121, 5.598787218755861, -1.7126835626366295, 4.701970928398801, 0.5087733286775289, 1.439732692167899, -1.294921462270763, 0.35034474823858736, 1.187173477813332, 2.252964620930838, -1.499497176398318, 4.286965073058816, 5.535872360665966, 2.722957604545138, -3.4527328294523802, -1.7230280317708564, 4.561586815137614, 0.7070578703820742, -2.154135187229683, 3.8709004073053976, -5.552266953802653, -0.29282430202102483, 0.7764445230634304, 0.905534479391431, -3.2853156596350384, 0.9734902612156608, -5.6799431783520005, 4.13353000079396, -1.571295711937862, -0.7198761464970218, -0.9918657252313748, -7.398713191019759, -1.845408085056761, 0.7561707433910995, 5.224671437894264, -4.339595809220849, -1.1362863826035758, 4.085043992642169, -2.7468609420503807, 0.9198471527749467, -1.9304965042154845, 4.399091953500665, 2.7886429627548357, 2.9951043120298344, -5.90461384407694, 4.932516709348542, 6.192091587703501, -0.7355108571350023, 0.7993830029239244, 1.5868877161529278, -4.758572614533082, -1.6147603340602048, 0.6665209640459749, 2.014126034437209, -1.8222725803894155, -0.3783620408631552, -4.326606947308977, 0.7121589973886108, 7.986841309509163, 1.813790412470973, 2.9336326386913014, 2.4100514479369655, 4.515701113108087, 4.934321874280348, -4.355027846465219, 4.683495719882776, 0.005113521622964291, 3.629955303599202, 2.5599828601758587, -0.378150999747003, 2.5121166451850305, -0.41801783182934876, -5.91136093336339, 7.703953105608801, 3.6853330341500374, -2.0409483693250112, 2.0689301662051998, 1.4908810824621392, 3.197702966403167, 1.3676025322329077, 3.0449671896841277, 5.192061158619504, 1.6578908330654007, -2.3176963754341813, -0.10015469511311643, 2.495734804332185, 1.3407324422723381, 1.575088430950409, 6.853644752258218, -4.264859527019112, -2.4563061994214888, -1.2008875777456962, -5.092661934647792, 0.5657133478483409, -4.360567217997832, 2.7048746251811857, 0.40991017332706675, -4.402650594231738, -0.8237355372238673, 0.4793902549537654, 6.272682750227064, -3.2844718229848535, -2.8657338205124963, -0.6853210586662637, -0.23910811481545505, -4.863140191151843, 1.3689671438791406, 2.611517701103097, 1.8373473046044777, -0.3691608392592187, 2.724518100615807, -0.2988491988895754, 0.12449627548007569, 1.543758042179067, -4.745459493497105, -1.6568885369575546, 3.6128787492690186, 2.8711775714897447, 0.5020091701825709, 4.266984939208338, -3.049437076264237, 1.8182995073075063, 1.0459251114840156, -3.773961399311981, -1.7829747778817953, -4.911732144388289, -0.9825575373820828, -3.988095590890915, -0.9991257074533779, -5.973591964848462, 0.3009304034848634, -0.041056270906651586, 7.022023158167211, -1.1980896210833125, 1.1133502975823886, -4.019459976372505, 6.951013664244824, -4.0713827595638135, -4.13012481170975, 2.042781499779199, 5.114066956997908, -5.495446928939335, -6.406544416069677, 0.9063987518023284, 4.232964022295086, -0.9071499441662798, 8.0760766060853, 2.5201162533545327, -2.30255459824901, -3.3388922934961647, -1.987535789012279, 1.4551341536013385, 1.0618581875248196, 1.446433898277025, 9.020163169558508, 3.808301071580734, 0.5704149591864394, -1.26336362319876, 1.800290631484962, 1.509582730975526, -0.5506848666049604, -0.2890172397865473, 5.96336420259372, -0.12147430136522418, -2.7923453004594756, 5.40886181635092, -7.761197441370425, 5.257407001153707, -3.8959847463862154, 3.400225187789455, -1.010484523028856, 7.80379083014153, 1.8938273074005267, -2.2560020279984876, -2.1701483652170306, 0.04591234900223598, -0.11641737031124443, -2.4619876578163202, -4.416553943273149, 2.216186987845497, 3.9617459259075827, 6.052270369587027, 4.877715284410279, 2.2570707467747413, -2.154334775040127, 0.03341371310540659, 1.8466737326051843, 3.70815906032133, 8.937192218325173, 0.4149583150251703, 0.22766654303778314, 9.609272736071146, -0.6134796458796915, 0.5319837646018342, -3.1909580918466767, -2.553906609609905, 5.767467041510289, -2.351863636849598, -5.456228974699945, -0.2265152111847843, -7.36757270029922, 2.428848308337777, 3.102842042610129, 6.11114823394226, 4.957543968332545, -0.955245359977326, 3.7986145044166006, 2.9262504815626333, 4.111704788846449, 6.801031460471705, 1.395629446349607, 2.3045019967848384, -4.254853761612625, 2.027033289537662, -7.726954512185429, 2.1459146151162662, 1.2576154306440923, 1.2274527229477115, -5.13421854869843, -4.549099983250362, 2.3605713921841, 3.0313172599685196, 4.273881702851547, -9.151547710733452, -2.4305295950267105, 7.448235401382618, -1.3560140239977123, 1.4533714117971235, 5.814435657817339, -3.451813204233826, 3.1686896994862344, -2.0155033254955677, -9.985458701916954, -1.0591898450378208, 1.4731215244914122, 2.8963920837353663, -0.9146912104002758, -0.7067108997021713, -0.8189139168326501, 2.2804082979533224, 2.4966690477820945, 3.2292993597374076, 0.2827496718804656, -1.4122563618176984, -4.2823708578877175, -3.2267693525474246, -3.4054399256967662, -0.7120858713035949, 0.8609590920355445, 4.220330750181564, 1.9546936282567615, 3.1756083119468577, 3.1108236162825245, -1.445419722880999, 0.15500455818426723, 0.9572694550969375, -3.088691942028562, -1.638638772120797, 3.4780191085712926, -4.017525320770608, 3.361418162558297, 0.5687651929508555, -3.6965097112664567, 3.443408312257805, 5.916895952270163, -0.43765242293383666, 3.2323654446233943, 0.3796948878104443, 1.8478252121385705, -0.9081448388371295, -0.2154134068537548, -5.263971780564081, -3.359468709747885, -3.7106983502614312, 2.3486037843935366, -3.9065857857309148, -1.5333854276648342, -1.1500344754014087, -2.056351970531134, -4.9112531222326075, -3.8690029551669873, 1.9853726445197117, 5.684022423172571, -0.19363525667888293, -1.8187373247210623, -1.356850450088846, -4.272291827145426, 2.3370950102461756, -1.5527793791245672, 6.689513481489088, -2.6815791074570106, -4.756309949757283, 7.88936918226896, -2.040068886873476, -3.287773744665964, -5.157327944397626, 2.99804585459303, 1.5232131411721783, -3.5638373571645614, -1.3621086632066453, -1.600142320135042, -4.794799530893054, 3.341508652041344, -1.302497369015775, 4.383001113057881, 4.626410999406098, 4.280987423064004, -4.9086224157416485, 3.643754707086427, 0.24743054808188486, -3.4124846518405514, -0.35930083942959534, -4.7391545592128805, -3.542290429599592, -2.0697156010843116, 2.515920142770225, -3.415121985386179, -4.675847308846904, 1.4201487454161237, -2.759707473548697, 2.0135922835092654, 0.46922425482501384, 1.6660291950508874, 3.962036006627688, 2.932734455971044, 2.7743608018212504, -5.863541203518781, 6.984322259381481, -1.3683078785321452, -3.4702619038812217, -2.8541651772200662, 0.1421976308078235, 1.487635455398724, 3.0368223336355733, -3.585851469186826, -1.0586960134930568, -2.757495776590676, 0.5968664968815959, 2.1942572325387015, 6.123452273431412, -2.751997172510584, 0.09146711120233036, 1.469298264704742, -1.2452414143216617, 0.7422441077962166, -5.726869095802659, -0.8385704418443864, -2.374484683457085, 2.3642666207085403, 3.7606643876012487, 6.916619263405951, -0.8738186549181602, -2.22691113395647, -7.98344213227508, -4.31006716140015, 2.9985095166029754, 4.219303788974418, -4.4161131290240245, -1.7658541949291575, 0.9605064496833119, 7.5894653017495655, 3.751397341049059, 4.869560123937862]
BIASES_LIST = [-1.3933775596625435, 3.7079577468132983, -3.6054764871043963, 4.803827831556646, 6.336658434731943, 2.774347420586505, 1.10027384242586, -0.07634370228591902, -1.1155331523651866, 2.6516288401340553, 2.1157312940576873, -1.3683570951258186, -0.004087041574102083, -2.6250188679083952, -5.502617457668002, 5.274706848964304, 4.8111486220390125, 1.4650893696645602, -6.57300698742498, 0.009113925693894825, -5.0751684920756155, -2.8024719251557464, -4.073301042613211, -6.095861505645713, 3.926040903976011, 2.655898984052115, -4.022700607173562, 2.9130209869460564, -1.0904649318075756, 2.2905535547889238, -0.34637008255578655, -2.291445369050365, 7.1287456218982115, 1.8552949442807767, -1.6783470691930762, 0.45165479865578206]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

