import random
import math

WEIGHT_LIST = [0.5596740215931195, 4.90633741755569, -2.321136495890768, -3.5479757462368413, -2.3273828087146744, -5.292601542889059, 2.8764619865081213, 1.8321848503897522, 0.8024442742987091, -1.098348503877211, 2.594906264895509, -0.013917782337308398, -0.9143554226207946, -0.7582875146080036, 0.23704733248786208, 4.932151602880343, 4.6820414810104865, -2.9766224888246517, 2.8378593836523813, 1.8244987712209264, -0.3697781833154856, 4.348203004765211, 4.932990251613164, 5.41474404020881, -2.1138439321282467, 1.6116509536756, -2.187791277589646, -4.360281701841945, -4.904146185828166, 1.3836195623531218, 1.3668887639815552, -1.1162938634135424, -3.3965763546984356, 5.256717674980151, 1.000421926341027, -2.4898672191049904, 4.156124913355621, -3.2841654228902306, -3.7523645081980885, -1.0312360936450926, 3.8288203915717425, -1.8589160988930076, 0.4309561383569398, 0.1620657495520293, -3.2653910163279005, 5.726193396955836, -7.875138873676956, -1.0334798049069673, -4.6182125893254575, 0.8798372443201058, -3.83727580186666, 0.6780340019739414, -3.580126654475261, 1.8884986039118017, -2.2521600241211854, -1.5910771441129272, -0.4153004536189262, -1.9775732914275432, 4.885732323897376, 9.873340258498262, -2.195576570710782, -4.496131440900832, -4.321512721530299, -3.5227192388168977, 0.726253936763927, 0.19893718728294257, 5.359641456521411, -2.198424370617005, 1.2343224175839804, -0.6858156094755246, 0.4515901313229071, -10.34657380202724, 0.4917515561545471, -3.68990146092939, 0.045917716882267215, -0.9664373088855354, 3.39292330485262, -9.80201204425525, -0.06662655530636728, -0.5704549516660854, -2.416374043070602, -1.1168690051570187, -3.254190766894628, -1.2204132156021508, 1.0169670370851855, 4.81227653998355, -1.8354683219044625, 3.9930726730531423, 1.3668402617322486, -0.6904286784331484, 1.0048114667424681, 3.7784052575384863, -1.2485318045658527, -1.053711950775876, -1.5730920962030772, 0.5338994438494956, -1.7495247281852957, -1.1329327633050412, -0.6306861320553498, -3.6937955789185066, 4.119587163769697, -4.826636350367273, -2.3309616769750416, -3.610636174504112, 4.937868896668591, 0.7493194066650533, 2.7011347589321786, 2.681426746728933, 4.958037498826, 1.890619483492228, 4.388282747535969, 0.6009533317350328, -0.5287888364074301, -4.31333889907821, 4.454775214930205, -1.7099631618974354, 2.554105256867707, -2.7717554773311486, 4.5656104981786685, 0.5719130337678247, 0.6301822417838571, -0.1616247209152566, 3.5987280809153344, 2.617884314347445, 7.010123268258435, 2.447046930900904, -5.357493041300893, -5.63077127610871, 2.5539474409034204, 0.06241711081090401, 3.6264551624133223, 3.8456807854284767, 6.5021787997559315, -5.740841579868965, -5.185943037828375, -5.164321599946314, 5.24467766394041, 3.505927204030293, 3.5713383122813878, 4.55331824026464, 2.0728049147289362, 3.4791857337976047, -5.225193552646327, -1.0534461116562086, -3.6852624277840365, 2.5197036653263805, -3.9465035837479485, 2.4842618468896136, 0.4649313121584749, -2.4817676119812715, -0.42144566341171563, -5.108121662076248, -2.4196652005930517, 0.002012499059784057, -4.152309412545564, -8.677694024893052, -0.2140352619523451, -1.8176202979652771, 5.465649368428184, 3.8007381024643747, -0.944216733715072, 3.8421760953854927, -4.559660306273774, 4.481244402833716, -1.128515698748947, 0.36227132451654165, 2.108706444672183, -1.690715890800916, 3.3726351163982287, -2.609301720116508, -3.4504191869911365, -2.4230307467604413, 2.0674777430812807, -3.282339781979581, 1.8325059905576007, 0.19737135509428963, 7.302826195342071, 0.13434156951768053, -1.236463071679548, -5.379250356781829, -3.218955716325839, -1.880036031882118, 2.1500466118592003, 3.653235064945854, 5.115171124944653, 1.1387337668815838, -2.633575453153657, -6.109440516173593, -2.5164070537824816, -2.1326533094793936, 0.08256818372685425, -4.279674990603971, 4.57895321308066, 3.254676437292459, 1.9155737624380145, -0.42291632953601827, 0.7527272045096047, -0.5223510805645787, 1.6942116796161166, 1.7574781786829747, 0.12954738078577033, 0.7048184160475207, 3.0289473494429813, 2.4226782786358334, 2.252777031055474, -1.3493922619194643, 1.0307109829000296, 10.575943065038802, 0.5773035695143861, -1.1308389437508488, 0.6050815855038992, 0.7497183193416578, -2.941017231266199, 1.3055350246573492, -0.6477635033421456, -1.7565780261173365, -1.613076544488863, 0.3315158376526518, 1.2994989681970623, -0.7564603841032602, -3.9199327545352394, 4.086380017087699, -1.570869419094679, -0.9515441668996932, 4.248662818796385, -3.5307118202314363, -5.02492125308139, -3.323090876904267, 0.15610394408934813, 1.7388690080035485, -5.3388136550573835, -1.7045212975011015, -4.683676690331897, -1.6320986245831997, 5.272988930538891, 2.4089579710671702, 4.27335565356461, -1.1712888096739964, -3.6241332362648864, -5.9371804297137185, -2.5705920866419256, -2.590635702170055, -3.600796740017286, 4.859738296674501, -2.598040838274742, 1.204846912293253, 2.593157188506324, 0.2132972821901679, -0.08579104951927452, 7.123762273341788, -1.540203240918762, -2.1187045636447626, -2.2982864385664503, -4.2738065282724085, -4.851788321222562, 1.0215650564624368, -0.4148795345867559, -0.3591578561664672, -5.809896234921462, -2.5084823030779697, -2.732068462079548, -4.579646265052315, -1.8306015891518626, -5.899264946077953, -3.0683974980272737, 2.693117787415899, -2.372282000519618, 0.5933444328197217, -3.7589825145536993, -0.5517550396506667, -1.6592444809789462, 0.17050818266885875, -2.895862102773536, -5.611938177040305, 1.5254238874946553, 2.03289392088859, 0.20594087512239195, 0.9967368863071037, -0.7784234228887886, 0.3650335439911389, 3.9471771989283067, -1.0316647233493053, -3.8944787131670955, 3.7619529484541525, 6.158367707727979, -0.07711821394736536, -3.3769201736095673, -1.8300316480927283, 2.6346825133073932, 1.7048451650288072, -2.9780944607115667, -2.691603491398775, 2.54907722296824, -3.5748408222644064, -2.2592341935637394, 2.3587824264161363, 8.833335876998216, 5.946760205478835, 1.7979591487341369, 2.0469515495958164, 4.563345197045166, -1.8825550657156176, -5.852971066733491, -1.7677575231722213, -2.378945510375058, -6.868342910680977, -2.879592764136529, 2.300832716294484, 5.060805401182769, -1.42889965408022, 0.6832147445540623, -3.9152632985944638, -3.6023368406107275, 3.269261151583175, 1.8446240137141392, -1.7782003311264056, -5.646124112249607, -2.407465381456552, 1.2888148827316017, -5.591291702628998, -5.323410563072622, 1.2780451087882663, -6.8014450950789485, 6.404047283541322, 3.4280942954762956, 4.598121812942968, 1.9952112628746383, 0.28266206322265797, -1.262858291681699, -5.561281009044379, 3.9667989497832656, -0.33253759546018175, -7.429846457625114, -0.10577176422738202, -5.031337149953847, -0.5077704948776289, -1.6727723115073614, -3.453902112036588, 6.517638369641971, -6.783963663483372, -3.236979321769579, 2.6589925200994893, 1.4748223019562048, 4.189254369456869, -5.695274324096139, -4.631443101022275, 1.6996116624168212, 4.8002098547534535, -4.857155148091716, 4.6499543575544875, 3.251991965584232, -4.026808370475299, -3.3943483889072583, 2.31625619325499, 2.3423670081968795, -3.3867236772363114, 0.0316204205612569, -0.011160079995547877, 2.8075708402527764, 3.238450153874426, -2.2496495512335444, -2.822197328826278, 4.919776542075417, 6.05224121565038, 5.285674043116517, 0.1097979484396851, -5.8401772770416995, 4.25885917006406, 2.610909895491753, 0.858999647392562, -3.2265600416163074, -4.711745251924121, -3.6700552661342773, -0.8857986672555719, 0.33810843053730294, 2.0704957984830763, 3.9188263738004023, 0.6767217790035691, -5.652979006466282, -5.258251690248226, 0.4239067783221777, 3.4159869367360085, -0.8722960371876457, 3.166762422656312, 0.1287543958267658, -2.8672939038890632, -7.237488360888944, -7.879219287188014, -4.602564817372275, 2.4659155228690945, 5.609236771674775, -1.6989130474509613, 4.702444412580471, 0.5038800387311909, 1.4482741299561392, -1.2976732562331927, 0.33872629523701114, 1.1829327183548646, 2.260823317034528, -1.5013397008016136, 4.286678568185008, 5.552435019470279, 2.72012166622812, -3.45220309555217, -1.7138452514353884, 4.540858527615907, 0.7019578543401332, -2.14535069235357, 3.870308475065413, -5.558147075028423, -0.2980491362450715, 0.791831535763284, 0.9076718674605256, -3.2777789123842944, 0.9648725642294959, -5.678432988837783, 4.128194358443524, -1.5825604647279778, -0.7143142294764117, -0.9966298612965185, -7.399063868511974, -1.8403581035882104, 0.752219654854495, 5.222364200382031, -4.347396917379161, -1.1516779718675445, 4.088007877369422, -2.744257740123789, 0.9119542800856972, -1.9380005680709635, 4.3900366232595935, 2.782912630740465, 2.9976845162937673, -5.905495560592508, 4.937272286600048, 6.186963395742404, -0.731721601505591, 0.8080163583381944, 1.5854327284528302, -4.763798089145692, -1.61623820519703, 0.6547533963542731, 2.021227335080434, -1.8328774372866283, -0.37718516824545617, -4.324840872212329, 0.7117747853994568, 7.987575216250341, 1.8045251000365887, 2.9357597213876936, 2.411471144855547, 4.527115647956422, 4.944087155652987, -4.362915799157504, 4.678611537957773, 0.0013166793276571552, 3.629137516878627, 2.561289082843418, -0.3799428881731165, 2.520947879743698, -0.41743585482868395, -5.9128449198321436, 7.6964455935727045, 3.686770243741054, -2.0434402284703648, 2.0676339988698818, 1.493242615436375, 3.193377106029734, 1.3697386030284975, 3.0516816471243056, 5.174576135011813, 1.651916817066946, -2.317837021710309, -0.10523261954596887, 2.4988849928667056, 1.3451399122928835, 1.5737085582284933, 6.8480976433030385, -4.277763391119188, -2.457401088944556, -1.192576923939897, -5.077977564827644, 0.562724495887103, -4.343947469011219, 2.701071932557097, 0.4000625000876348, -4.417362007499066, -0.8108692428703231, 0.4816912405732827, 6.2704916864137115, -3.2828551408539064, -2.881069485386062, -0.6892541733314467, -0.23847286955713892, -4.860933206896125, 1.3614708651940641, 2.608169065723822, 1.845282908964346, -0.3661726417076933, 2.7332298452688026, -0.28363180933417587, 0.10821393170522482, 1.5438081248295612, -4.746623888009761, -1.661029789630888, 3.6132477197280792, 2.8698653707150115, 0.49247753913540754, 4.258663151019353, -3.0552666696078066, 1.8230472780422828, 1.0474835108347706, -3.7730202022868147, -1.7980306594451438, -4.905802147234246, -0.9761932741950208, -3.9974778283227415, -1.0028927392515539, -5.972036401770072, 0.29936220990743906, -0.047690451432338354, 7.009679189641544, -1.1842918808119909, 1.110758805834246, -4.024968046663877, 6.960035841922999, -4.07642003127681, -4.133892046470227, 2.044500448215117, 5.099353501179575, -5.505900263843887, -6.411273485380687, 0.9127932105819445, 4.219268472726158, -0.9115847566187741, 8.068714755797698, 2.5221866595365428, -2.304710103023253, -3.3320052479775115, -1.9927833959108587, 1.462970951058614, 1.0597324756080866, 1.441428530065298, 9.02793163286479, 3.80496203115383, 0.5617321119926862, -1.263556866744711, 1.8086705483143022, 1.5115037391722859, -0.5464623893713283, -0.29235586490919496, 5.972578240412747, -0.12161504354983962, -2.791264187405582, 5.403582787164116, -7.762892797507087, 5.251893076723604, -3.8810813385537757, 3.4037570142041225, -1.0023266854478945, 7.808997650293745, 1.9007342560558778, -2.2581367247134523, -2.1769798436097227, 0.038275107802018635, -0.11421516926973639, -2.4617796821227484, -4.4201775300647945, 2.2111067944273652, 3.963765465405833, 6.049579310011052, 4.8746061669670375, 2.2535788931847343, -2.149728374153422, 0.032449121061429234, 1.8519011408156612, 3.7176011102290576, 8.94194222546148, 0.3984410990060168, 0.22310989911471962, 9.606732978387594, -0.6117130368099626, 0.5343479531739712, -3.1874283548071194, -2.547391511090484, 5.773755275037905, -2.3542816829303264, -5.449709256389747, -0.24383592959267672, -7.363428032173012, 2.4151006036155156, 3.0870006380610997, 6.110722048787151, 4.9525095455660715, -0.9457363896673361, 3.805123210823088, 2.912011538082129, 4.109029124585442, 6.793453263045434, 1.3875473464875383, 2.3030314020934175, -4.256511938680071, 2.0126483568059927, -7.717223531355171, 2.166906471863138, 1.2721944968509336, 1.227179242108007, -5.1309562982953905, -4.54225529093759, 2.363532903092158, 3.0327715531734394, 4.2762382297818755, -9.138420039930399, -2.4202664359613513, 7.442283219128861, -1.3612711262981105, 1.4449273099357292, 5.82224490950266, -3.4653991207381587, 3.1640654787394373, -2.007845204591768, -9.988713787924333, -1.046516795070875, 1.4751542791999337, 2.909647211670978, -0.91130922530012, -0.703981214395016, -0.8064822527565602, 2.277261677772465, 2.493401542366397, 3.228379506077052, 0.28579022391269204, -1.4151500498216185, -4.287535807466319, -3.224618900614128, -3.420150166436342, -0.7096788943731276, 0.8705974363476134, 4.226153582249358, 1.9556519441437683, 3.185934001798948, 3.1126208135370654, -1.4419809591268884, 0.1649975976867906, 0.9631250200435969, -3.0805528571200615, -1.6410084705605226, 3.4827688562438404, -4.024693870762898, 3.3590920863998237, 0.5671995077686429, -3.689964633702251, 3.4405263376465287, 5.924543592409842, -0.44071750663909903, 3.2340663054141188, 0.3779363745903812, 1.8509744289704255, -0.918234360609747, -0.20260252910623175, -5.259524893144718, -3.3569684538594036, -3.712048964649512, 2.338085347852267, -3.901268362374603, -1.5442001437917774, -1.1365989298741688, -2.0635549049787882, -4.908981880604953, -3.8629210100245155, 1.981385160697733, 5.681380422169039, -0.20680831460967586, -1.8193492442758645, -1.3537176447874504, -4.282646933823958, 2.345638056276597, -1.55170433202404, 6.682469541160235, -2.673723637523848, -4.748359472242343, 7.882478692116677, -2.047261206241444, -3.2791053641133043, -5.161569193116295, 2.998451994398732, 1.5209506228063545, -3.5571239653316855, -1.3633310981918687, -1.592518881960645, -4.80454467210195, 3.3315919041365327, -1.306284265335582, 4.381258248898612, 4.6286036242170505, 4.2941000144905725, -4.9069244229080775, 3.6518359892266457, 0.23763691532597334, -3.3981577666411105, -0.35122618675764383, -4.742939655684631, -3.5429021886235765, -2.071102937488388, 2.5169395292669563, -3.4171876745705863, -4.678967366288529, 1.428299459221171, -2.752274976373804, 2.0154884449741317, 0.47068956360372816, 1.6662245867049694, 3.965074453065909, 2.9372896896659695, 2.7916606669416177, -5.864667745581695, 6.990041123238995, -1.3611238487968287, -3.4744694287377236, -2.8571395803561206, 0.14795103492434297, 1.492081088177652, 3.031069513312067, -3.5910077476188875, -1.0486084856457238, -2.7578029125183203, 0.5860904089741455, 2.1865968097303705, 6.12774196868213, -2.758696109196837, 0.08916662621639004, 1.4767604156725347, -1.252282938962089, 0.7328794238447655, -5.735172113017983, -0.8386554365931018, -2.3869686309439357, 2.353652488946628, 3.764257152437807, 6.926954767488409, -0.8771974719333585, -2.2325906924391496, -7.976888110286653, -4.330414892576939, 2.9892953272755953, 4.226567985776138, -4.4167282960201435, -1.7739156031927696, 0.9792160263959787, 7.593727240666661, 3.756069797083913, 4.874794215053797]
BIASES_LIST = [-1.385544534570528, 3.708321153070785, -3.6127318961003514, 4.80089352965648, 6.334094822855002, 2.765807255759976, 1.0955962911097314, -0.08132136017088999, -1.1124191658513551, 2.6567860425800514, 2.122295583821376, -1.3608519212820582, -0.0068775235741976165, -2.6157573214782075, -5.506531271402567, 5.2657990262915275, 4.815129740793862, 1.4809302533020259, -6.574592949533466, 0.015701360462768144, -5.07154556965243, -2.803423222906649, -4.068360789877141, -6.094426179949046, 3.9287282982020515, 2.6486631286681175, -4.024370361285631, 2.922364739827222, -1.081318287906143, 2.305341388478041, -0.34503106964223934, -2.2909163696468062, 7.124016502783415, 1.8584614207825434, -1.6777580250801822, 0.44721684821754576]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

