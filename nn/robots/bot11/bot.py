import random
import math

WEIGHT_LIST = [-1.2077814510729106, 2.250151415548528, -0.8155709891067258, -3.9270634935778475, -2.1830115261602945, -3.793521022919988, 3.668552063923192, 3.2835695293066243, 3.9766923617394294, 0.3147181936380399, 4.6458043641492015, -0.9524624218370957, -0.9166372100821477, -1.3063325863066817, 1.4345253485331835, 3.7950629253813783, 4.422333278359837, -4.510566305558858, 3.504527904760268, 1.7433600033556331, -1.8240217717925788, 6.1035735320973075, 4.490282119699499, 3.881270074130345, -1.2005495104160426, 0.8991894186026286, -3.9122270136661053, -3.47040837056677, -1.981330162402619, -1.436399780217723, 0.15799625227651615, -2.6366574673589023, -3.529376536355648, 0.3708801466258511, 0.8833291287491625, -1.8756291869934307, 2.0930016474508797, -4.494557653927, -4.038552622027709, -1.6154215518950794, 4.125273205637429, -2.5162395352976787, 0.06284313587744084, -0.5687362657854828, -5.686704182509842, 6.8677665868618085, -5.276424612634218, 0.4046994046672967, -0.6831568742201573, 0.6014088527460486, -3.755856702824561, 1.8941194046422356, -2.9400971408661225, 1.2206592577133137, -2.9687604626702604, -0.8674028517808559, 0.7527357150041136, -3.1883434034906752, 5.797355356106456, 7.299074365710757, -2.150381433526582, -4.073562647783522, -3.686379820189348, -3.2477469205605933, 1.5972925938541502, -0.5873440049063641, 4.398211586048474, -2.7810325877380127, 2.9045974247312714, 0.44465884186531235, -1.0961683634140857, -7.764198795553271, 1.1057346959112397, -4.791845170231985, -1.0729452993652, -0.9804856341125823, 3.355463069314509, -7.77453789828961, 0.5107075929477729, 1.137244759431681, -1.8989191303790618, -0.11043674360116817, -1.492341592587604, -1.5599562393125062, 0.906043116354041, 3.8799236372997115, -1.6445520199401047, 2.4699591749836234, 1.7548143313667417, -2.408964456810806, 1.847460409467618, 1.0482607981869112, -4.111858875072931, -2.9414127767841687, -1.1218230692116273, -1.4272306488101365, -0.34510848937049343, 1.4707345922602983, -1.8853079752032063, -3.0433764191408867, 7.3806480620322965, -4.751250606785393, -1.390206987865599, -3.000296631910381, 5.0841162924487175, 0.28560210507006034, 0.06647744178293546, 4.770089734171403, 2.7764519422992433, 0.12839556117581918, 6.644355436657467, -2.4784801267860295, 0.4727015626991853, -4.613170606192795, 3.6742605211465698, -4.105213932013854, 5.520067369112335, 0.4862416893042172, 2.7497942907934974, 0.056140292517407264, 2.082464126397186, -1.3758325120257129, 3.2935152188936048, 1.33901531923419, 6.804355165331107, 5.702045595566162, -4.646979560645393, -6.672404888138731, 2.47023383870502, -0.7638464169255892, 3.6479484982547064, 2.8334316303583287, 2.700681162943525, -2.1434424613651437, -4.242625110292125, -5.919310187674593, 1.4775443971002997, 2.1284332851712895, 1.0531172537903748, 3.72067608973473, 2.622887335149364, 3.3333758027832303, -6.646320388428659, -1.561031463938638, -3.4093618632536984, 5.26737596158554, -3.570152371129269, 3.0533372833606816, -1.95967016863015, -5.705235213858934, -1.5215987779081515, -3.4802901127176655, -2.9893424749096376, -0.5106428688635933, -5.975453171267758, -6.746120956983866, 3.062260308793997, 0.34268287839650213, 4.707311703433666, 3.2626356139588975, -1.4150292680191212, 3.5152034103983967, -7.32719327905058, 3.9221989719688404, -2.103768460644775, -1.0919577450625895, 2.5296676377540956, -4.382458643671651, 1.3216076611306669, -4.322064096550699, -1.80279730621554, 0.30929642241127087, 1.2032107990994838, -2.527757603953512, 1.7683539524592238, 2.0368045013657596, 6.801526447819533, 2.224102779613779, 1.9829309074708523, -8.343296756157116, -4.2185447873083515, -1.2790752771195824, 1.2261831768779947, 2.5958875567107818, 2.077639791028077, -0.08781220056757255, -1.9931743892794236, -5.726844740025155, -3.5037268039106846, -2.317517149717754, 1.0417502742138591, -3.6777458793697004, 4.860774286513619, 3.8761985740079536, 0.7487874104249712, 0.36638903550695834, 2.6544073891181075, 2.776357971327179, 1.7111466744215669, -0.8617470488768134, -1.4224725515403553, -0.4926147581595792, 3.6108311884157533, 0.26740517808358155, -0.19255950595229154, 0.7970713581112918, 1.2201719571040854, 6.13422304081535, -0.586707412964714, -3.6856942038292893, 1.1151297156135174, -1.3810465565415664, -1.8512610892948547, 0.263613971592624, 1.4634705261856862, -1.931598742271451, -1.030235144238432, -2.7056992588534072, 1.457259031826574, -1.4611273862510765, -3.6607006853013857, 1.822748819850398, 0.1340636551936476, 1.5840312075848493, 4.161299412827827, -2.2386744810416017, -3.323499806080062, -3.779353213591474, -0.09874163936323788, 0.5814460728963282, -6.187111822991245, -1.4574796454129737, -4.219776319573587, -1.9910301254137737, 2.5016795938487606, 0.06255730992847286, 4.494719602682567, 1.5130716940510291, -1.9188072211354574, -4.929733651215934, -3.7777127477053765, -5.958660202979146, -5.979851461074798, 4.30834229687966, -1.6658033232519405, 1.936066768420364, -0.19785528014764298, 0.025064418957576606, 2.2808876738127637, 8.676141394670212, -0.22879221688264295, -1.2999217551489444, -2.819795783855671, -4.1014076380627085, -4.3266724369277565, 1.4922036423891343, 0.8357662995142798, -0.6105668922524036, -1.7559737286709234, -2.380058695091262, -3.5629915048381013, -1.0653535434770798, -2.276422193846038, -5.138116274252715, -4.061923409411643, 1.7852893411688822, -1.5802148552660944, -1.118986700680497, -6.006223834828645, -0.49416148906260204, -1.200951668499318, 1.4324210627264513, -2.6750674552237808, -3.623828295941812, 1.954879023170614, 0.7885084806208207, -1.4856499177486984, 0.9574838259080127, -2.3612629318708116, -0.26148255063391346, 1.8610734821352848, -1.6355930549546203, -2.5788678994083787, 4.82859187127265, 6.046060725113222, 1.523705925386201, -2.8035497908311635, 0.06572280565997879, 4.569121833489859, 0.8273067734294985, -2.319954798301012, -1.138743868293791, 1.88992638625884, -2.0219532485017924, -2.1956399543154195, -1.2183659394297441, 9.013636745836553, 8.082734189766112, -1.7113979938161625, 3.3368119660405853, 2.333402062928494, 1.1229422704648253, -3.519497041249502, -3.542473896165496, -3.637586172431705, -3.6574778495718396, -3.340832310098624, 0.6864182467915638, 6.126359341119551, -0.9467292130382923, 0.8792941236563094, -4.305019942888123, -3.0815990232339265, 2.7145359495337775, -0.17594201502933982, -2.7827232023928294, -4.1131093120717495, -2.0649677084148976, 1.5854457344542485, -6.651258088255585, -4.557418010869333, 1.3830142091876825, -6.036501091426921, 6.935026367432098, 4.045230750584587, 4.078076303332859, -1.9921316289439046, 1.7493257321609557, -0.8773049169881248, -2.693823635265214, 2.2109187920131688, 0.6573416482852124, -5.998227606480903, -0.36517721831042604, -2.0741431989835646, -1.0755101994868395, -2.5762710182312083, 1.056597140768929, 7.702526740184641, -5.2055759511081945, -1.0124767213628099, 4.747400255013807, 1.9720820281345866, 4.158783478667573, -5.560471092438723, -3.462283665313455, 2.9648711738302187, 2.2742705959035208, -2.967350174590403, 2.1475370076786398, 3.540872251190714, -3.027576394202489, -2.224767794526624, 1.3082413822286334, 0.10190524720806393, -3.4923581011600477, -0.2313659855439698, 0.926642379762197, 1.6616035542657261, 1.8749115121897333, -2.259843021550714, -2.1565675809558806, 3.6832143694672803, 4.849976340238248, 8.135240577777463, 1.1988154935074666, -3.1203536301377843, 3.2236244431914507, 3.311019906304738, 1.5392331160584751, -5.319952863768844, -3.042721400837576, -5.575124567179213, -1.093460430525632, -1.2996000479110208, 4.389474236363727, 3.2676533086754205, 0.8243625251863131, -2.845320532765771, -5.8457304575503235, 2.278848481622347, 5.497913754970629, -0.7995679556709229, 3.9466116595024854, -0.27201660032825825, -0.411918683882039, -6.870164467095392, -5.686808605253241, -6.252763833072765, 2.330076829023204, 2.031684206313339, 0.10482614458440898, 2.2130804419894954, -0.8265913604185239, 0.4260298175729278, -2.561427628905615, 1.8958847011519246, 3.9231255786614074, 0.3210517284371719, -0.32661215052113435, 0.7776530168631461, 5.127579500944803, 3.45774505876304, 0.017910223159471217, -1.1759276266170249, 3.361859138239387, 1.363378201765629, -2.860181516632707, 4.018140546486447, -4.4247322412860965, -0.608798929569631, -1.5753027856436113, 4.184849876206177, -3.5843905777101277, 0.9574300331684795, -4.369013797942872, 1.7044964373023355, -1.5769888101861707, -0.7378111996978918, -0.1986712389286498, -6.428879428540974, -4.1814549273021955, -1.9254937284167777, 5.778394059668098, -4.240781578263951, -1.860921220999274, 4.468887578996688, -2.527604324421806, -0.6358967598946628, -1.5507578808163396, 4.661050160100446, 1.252796065077527, 5.607624359582425, -7.153593853243439, 4.103999254105885, 6.7212124902244454, -0.4580538371086167, 1.8184457980781206, 2.1375855460027484, -6.582747318095634, 0.043479143025571654, 0.5581687545604999, 1.852468057790471, -1.1237793412121002, -1.2544364645050985, -4.631581362434146, 1.4411965670268518, 6.034790592335931, -0.3061808436353648, 1.988501070909043, 1.9502484824691337, 4.645589938183279, 5.210488702343536, -3.6307952799662786, 5.004538026094729, -0.7127643626784945, 5.353953542906967, 2.9826984515286137, -1.7120390394520502, 1.1298400784602758, -0.8977472694438784, -3.1183476307196614, 8.963259632300991, 2.1554786164386215, -0.7250836109933829, -2.5450036999918173, 3.506086365258903, 3.5665675786385043, 1.1803991174451829, 2.509222110100769, 4.451730796333061, 2.537558024098997, -2.5232590421868766, -0.09692503933120733, 0.7770341560954692, 0.7320986167769252, 2.9327575525557217, 4.450581801274388, -4.7243291664386735, -2.637455366696541, -1.820336624527807, -3.5687119267602476, -0.5962968642531383, -3.627570477113739, 4.592940135137215, -0.48429881407671194, -6.491294267457386, -0.01006995018673118, 0.5918108685945869, 5.248945344874812, -1.2620663315564464, -2.1036834380694263, 0.28980810931594636, -0.2834896451970961, -2.2402363721384777, 2.518227141630548, 4.472652293207689, 1.244926126450034, -0.32298454792222264, 2.4649032480886146, 0.24710815461914137, 0.1729038522140638, -0.6970410484144494, -3.921954640557283, -3.454386189823988, 5.309288261629531, 3.3340356293259052, 0.7540482915406215, 3.559740783682334, -1.6492517504933393, 4.383636423613318, 0.6808216810546008, -3.712817046116059, -3.0693431751811477, -6.2018957349097334, -3.0213538956918633, -4.244057935554825, -1.2142467019872285, -4.409576640389419, 0.25931704919865184, -1.8231542972401582, 5.646455615258776, 0.07339327177289867, 1.989571451322191, -1.6453164703803334, 4.371778380139961, -3.908031609939389, -0.6621217475250301, -0.10991503723359153, 3.228990322063779, -7.030831206939963, -6.946227844640504, 2.0767337803164825, 1.26413710777281, -1.1971368040509214, 6.324753091922587, 0.5407918968627687, -3.4036207110537324, -3.1096230945870804, -4.3371380573656175, 0.9027728481732225, 2.32189782339893, 0.6368670148136168, 7.423757972066101, 1.1323925530516488, -3.0072355351152584, -4.356278848651716, 1.9569335533929069, 2.4973356468327577, -2.7703611012228873, -0.799114423308581, 3.4813652137879387, -0.7031709906428543, -0.9446924439929711, 6.2185906436075715, -7.26758882772072, 5.340847271315753, -3.0471431397649686, 2.2990784148944257, -0.41605800082569, 5.649038479853628, 0.954798616569424, -2.733310333152099, -4.640672306289871, 0.4148895822402061, 0.4146300744342235, -1.468044356159356, -5.1082646950662784, 3.5703701968009423, 0.07595544851656655, 3.365191046944261, 2.692353449212172, 2.958193382070416, -2.8588652788799203, 0.4627886825259615, 1.925466098835872, 4.731621938523395, 6.14973389006183, -1.4957577789166008, 0.7288744663965891, 8.873349195462897, 0.15693399941011332, 0.673219196101982, -0.9612401918308637, -3.0543985445310886, 6.757751118583105, -3.927090955381212, -4.6820157319346105, -2.239466313132362, -6.392767907922601, 3.593176327447951, 2.361816333517007, 4.194745470662726, 7.258399252671577, -2.7469615038027557, 2.0782462420088095, 2.1664723552077616, 1.1180719083939006, 5.708168845467964, 3.0273820219747565, 0.7963557815187325, -6.951250441150579, 1.7879637997365814, -5.686750465681974, 3.3128023290343016, 1.3285710640251445, 2.8096522354702183, -5.412662829334424, -5.831750866182948, -0.2882227676051815, 3.2579511042363656, 3.9970686508164883, -6.6767399894769275, -1.7654715554584264, 5.92253083351497, 0.21859604027668045, 0.8623476254963802, 3.5080877961269437, -4.599295921221658, 0.966666322804081, 1.1598824724365429, -9.665053379271297, 0.17243215413487256, 2.2032493518407943, 2.1804990832753335, -1.9593280559388746, -0.5307935216880595, 0.017243279104125264, 1.9726379052158514, 1.7514342477142906, 2.90332833351001, -0.3229988527386445, 0.7979225602872271, -2.5825523544833926, -2.9484829375665695, -5.413102473966528, 1.1771149204114995, 0.05506707781966891, 6.772496685883762, 1.8127921032405778, 2.2794122514014763, 3.6222770442824572, -1.285241865862978, 0.7233652052667288, -1.5670002684503808, -1.4066290921711322, -0.9399379974277168, 5.564818964981891, -4.083913711254722, 2.3435558679125585, 0.007383010102837595, -4.586022692768956, 1.8334526007353897, 2.5216483642339105, -0.41300046144997027, 3.8537527173176196, 1.9966236381377662, 0.5103991528263725, 0.10496715040789972, 0.763037416241326, -4.548550490198406, -2.2935429527725235, -4.40712750193483, 4.1323238264083475, -6.120016755041496, -2.459018273040424, -1.9302950783175303, -0.6363941951875696, -3.747977089552921, -3.788256521061516, 3.4365298415722085, 5.190004964160727, -2.184300059371329, -1.9694167608370794, -3.35030938489005, -5.583582123346762, 3.311919782138311, -3.4162170224667547, 3.725156837519707, -1.4648357854864826, -3.9824471970987374, 6.032315009980689, -3.040148231166159, -3.173228684309315, -6.256245597583646, 3.4263705559929294, 3.6106337235674637, -1.9096694723203251, -1.8648650934519106, -2.9174621876389315, -3.2261274875679335, 0.7827190374751274, 0.736201235598146, 2.4679633670691445, 2.1141143536442364, 1.7561532439546337, -5.301789554816143, 4.207490913913096, -0.27573719553712506, -3.1738191070653476, -1.7521049086323979, -5.4867081298354305, -3.511587934622617, -0.6441121805250423, 3.159177135269389, 0.4744058678984151, -4.026370449015238, 2.810556510448465, -1.5606525706700738, 5.607166019864044, -0.4989342966495105, -0.7778827054535317, 2.5581914186699066, 4.677049345941572, 3.980370062266539, -4.184224228062341, 6.399657005986616, -0.871163350886682, -1.6658075064456122, 1.1106585493141594, 1.868445513781141, 2.524421844438419, 2.887888913323354, -1.9747646787030444, -2.597757859514834, -1.1179276893264887, 1.931775790703142, -0.38165287008930937, 4.598365200010873, -0.9655200574130938, -2.446252272367515, 1.8272286223986165, -2.795649291864116, 1.9454670301811392, -4.151515700752867, 0.19837039235545428, -0.9120860587242987, 3.481549230516027, 7.323745527827816, 7.641767227786234, 1.7662583447427984, -1.1429319338452704, -4.640513996641975, -7.137207408018164, 2.684033242583567, 2.8847433179556576, -6.2351670110451, -0.6147126545924444, -0.7991192447907709, 5.830983100679787, 5.725343409274059, 4.121784416144188]
BIASES_LIST = [-1.3183429233952895, 3.6344924929833207, -2.8252780836093776, 3.332241151507752, 6.149248886600226, -0.30727648195432655, 4.370768282699961, 0.6316601051369184, -2.6285990069483134, 1.4679639866400875, 2.6449966760171373, -2.9981458579963656, 0.8384564513847654, -3.158177113600228, -6.097753605313926, 4.232022846351402, 5.4081569420273325, 3.5710444846182092, -6.2233737650347365, 0.14028476522760958, -3.1754777601378192, -0.6389034551356464, -4.09912794261928, -5.7952324512079105, 4.030334221732149, 1.8568633827366607, -2.8538074688474016, 0.06882919838571877, 3.0146407244062923, 2.641101493941793, 0.03732364192296567, 0.25648232629712897, 3.8202640760945785, -1.7291586181038086, 0.5870710892147781, 1.8543714063313206]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

