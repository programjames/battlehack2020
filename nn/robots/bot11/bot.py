import random
import math

WEIGHT_LIST = [-8.335034336643684, -2.7131597709401944, 7.290627571950515, -0.5047370612309887, 3.7876970065669178, 2.1677706218050985, 0.56098222603743, -7.135045875618638, -8.834836128256592, -1.3792042069190833, 0.06783786779787448, -2.196600802912595, 0.11176043465673197, 1.8858232160961643, 1.2233336112473303, 4.400746358343406, 5.636310256923835, -5.2086842847561465, -1.0477005498714196, -0.28374736588688854, 4.533880941078701, -1.0609465763417723, -3.391434279786581, 5.521104714507437, 1.7635439315688064, 4.565261592882474, 0.47825010309270827, 1.3319590310562808, 0.929732425465029, 4.279704354401244, 4.1334732416958895, 5.034728803964068, 1.253166904422074, 5.795847906285783, -2.2871780746230743, -7.286111759397078, -4.411264395380471, -4.717306695574872, -3.832733460177113, -1.4962412364123332, 2.007317634082634, 4.473845418007834, 3.8956827815193846, -2.3345675335778107, -0.638047652138388, 8.801183583316089, 0.24675869396094285, 1.4620915660243288, 3.4572599366108063, -0.2072967051230974, -0.8877066078279086, -5.814176177122059, 0.7709537015522774, -5.015511318055608, 0.517048724494239, -6.0407899741376845, 7.946034134220626, 0.6541693552345584, 4.297840143527742, -0.6324644012219662, 4.545566177754412, 1.757018581745074, -5.045211648189972, -3.576581776445592, 1.1447744749753361, 3.235058070041833, -1.2330781512, -1.647401086411483, -1.086736889558045, 6.159821305886555, -3.0296289145264184, -2.4447047837263223, -2.592197720526892, 4.554226423112728, -1.4262143093608013, -2.3270672416774585, -1.377290822631068, 0.005612118741436356, -5.472655697131938, 6.3071019400652295, -2.847433656886061, 4.949674498465217, 6.457291425285571, 3.9395987517920505, -7.716795231895336, -1.8734378887718002, -5.615196963950382, -1.7223041909376744, -0.46766250812154414, 8.02357807979967, 7.291347900272549, 3.474816049353046, 0.8935443618357986, -2.4402992904093987, 2.454333585576239, -1.6679218913051381, 2.3704507133890647, 0.6923217428895128, 5.756197246608287, 2.296074318355318, -1.41300685801293, -6.667970944539567, 6.334384566074886, 4.545588097833445, 4.496559522642642, 1.788679677366758, 2.400869438758286, 5.3108639429756686, -4.873448222149014, 3.5953981924630978, -6.675660227742961, -2.929053250250476, 3.677208824487803, -2.8971729149330856, 5.717005231985333, -2.341755375609437, -10.013518643424849, -2.0204977023266983, -4.21937564283752, -2.4948183675088176, 3.3988476536078718, 0.2602982329838405, 7.354083363294848, 0.5880065787564492, 2.5162569620874717, -0.2549708124724892, -3.0500194581506848, -2.596581208595974, 1.168762485593147, 1.507154884776652, -5.01392852779205, -9.477065945627427, 1.6383565372888285, 6.575576915787007, -4.338316318011789, -1.8660678014020415, 3.7994703907076777, -1.1652399017533543, -3.192083460564513, -0.30077067412435077, 2.0218124041367473, -2.541236729918368, -6.667581643115211, 6.90399206692998, 7.6030401970743435, -1.5468308541406486, -2.1170458519686135, 8.321532564432951, -2.5122332805079637, 2.2488892498321102, 1.7457532525909518, -3.7163098460240414, -7.074958816821038, 0.7439825139756269, 1.0540532825568714, 0.8702901692607612, -4.088627800538336, -7.360068342371157, -5.554747663574882, -1.1807785326270936, -5.065208702097239, -4.140732400035921, -3.558203901829435, -6.1950618347236714, -5.493480558100261, 6.701755324867999, 2.2439500650723585, -0.5858221617101942, 0.5588176489724153, 0.8810928183653592, 2.7483903877983473, -0.0272658749681631, 1.8407799536011367, -3.2608547524888936, -3.517510650403748, 2.067072077877831, 1.246353453751626, -6.444045769383468, -5.141060272726954, 1.7913125351206016, -8.249076270217653, 8.695820361582733, 3.638771573807451, -5.453720180816183, -4.075980523575832, -0.6507448920929506, 5.207503300204906, -5.534441523682004, -5.092625588607059, 7.033183229449867, -5.295782789625815, -4.7481453445948585, 4.635038118262389, 2.200979298469031, -5.748832390825364, -4.876384496349797, 7.296740632844396, 4.358695779391503, -0.6827259725051494, 7.226974440282762, -5.8151450062203525, -4.687914927845953, 6.328897539329013, 0.8686792856281702, -0.3422941536085423, 2.3505425280961014, 2.927961016843762, -0.6940499233793767, -7.408440654267812, 7.183823527410995, -7.394880968262581, -2.086993333475439, 1.508755850338696, 6.853876081941277, 6.012954138787051, 5.433237194112075, -0.909737780591201, -1.8021846314450864, -2.506540421823911, 0.7091641797077102, -2.4002456392922986, -2.555126558896948, 0.4792810275560267, -2.177615202906573, -4.476880727309726, 6.278680703220593, -0.9313305950225743, -1.471000229716398, -3.880472539662932, 2.612278606039427, 2.648093108693265, 0.30620420064378245, 6.204527319348506, 3.4576456793141532, 4.156956972653984, 0.38574381643771044, 5.655852350940924, -6.231921245690773, -3.1474899715591915, -5.099784546447903, -6.0633369156127355, 7.34967588167315, -7.092790673929741, 1.4662770714442077, 0.21813927578293923, -3.3714091007296685, -0.3818977314777773, 4.270680014005685, -4.307566311475072, -7.237665504599604, 1.9362530831358682, 1.8978635859209243, -5.155968547003483, 6.626662208062317, -1.6861610490099914, 1.9131402878418053, -1.103327414555393, -4.328223018267132, 6.499795701066602, -4.116019370266252, 5.662087194323765, -4.240070755582183, 2.569587352878581, -1.2277052930899506, -5.405906304882444, 4.457939648711939, -2.333659545908897, 0.6373284239703572, -8.111818129097285, 6.65899117702951, 3.3874816834466523, -9.54296654212273, 1.9463455751380856, -6.2963288567955376, -0.36937246189736084, -0.02329301960802943, 5.362254653632639, -4.11211741645639, -0.9289104035546425, 2.656737679385406, -1.0584859119696923, 3.7591026740581177, -5.458993838106705, 2.2946295185244012, 3.4770626982745547, 1.8688762248729436, 2.299717424543619, -6.034936016193804, 10.185538428670075, 8.931574388936998, 0.792117781721067, -3.476996615979781, 5.904497291960741, -0.7252834125139362, -0.7323077758179639, -5.932837522515979, -1.5830963827166102, 0.7230810167157877, 4.659953027180731, 2.6512228305265824, -1.620001572417729, 0.21926556213366272, 4.647233384864099, 0.27902337514260883, -1.9466437549135744, -7.418259844483029, 2.2620721782276014, -3.9436448014207204, 1.302709959696866, 4.049210554259608, -2.0317802195106003, -2.0888320052507416, -8.161663752205508, -3.415994775496085, 7.865970703215953, 5.486649359629924, -3.5179591076407477, 4.2822345031501206, 1.1150384901406805, 3.3639704524352445, -3.0997168113408975, 2.592088742180174, -2.8316164990409796, 5.9305718518127595, 1.7721610179194225, -0.21163948834857776, 0.9769388576468325, 3.471260908415822, -8.011581535052638, -0.45162556307688295, -3.7203926647470396, -6.860735674094051, -0.46698175489042937, -3.8112768651036903, 2.3805640135265618, 4.870289126681287, -1.9261309987858861, -6.816655593622675, 5.406801953679585, 2.9664091597390967, -2.4969441018192735, -5.5014687026072915, -4.411371592000602, -4.154597883272776, -1.9745032017259807, 7.093532286005752, -3.570578066462593, -7.2407021270884835, 1.83917775503223, 9.114401235716546, 9.422061024383616, -8.839953382600626, -6.751386104369285, 2.769976071849101, 8.043638295465321, -3.0599620066155055, 2.047402578974623, 7.600955753683213, 6.251617196915963, -2.1021899085669884, 7.275759055945802, -3.7001482984381093, -1.191083237964641, 1.7779126243771155, -0.5533632671783693, 2.935227003577585, -5.438259810533474, -5.903362520086506, -2.258711980725402, 2.1534038164321476, 7.830056067379856, 4.43072538684326, -0.220023551625471, 3.9357459921500006, -0.2531458865921775, -2.594601484775521, -5.3092788208809845, -1.0566232567140335, -1.4964507428715441, 5.32271317049088, 2.12469054663495, 3.0002710624049342, 4.175022223692709, 3.428282358269781, -3.391890301691125, 2.058759641285198, 6.245005083280072, 3.6450063469677345, 0.45485417116848176, 2.2247710363130166, 0.3652082213521976, -3.274181623880023, -1.205525417799242, -3.600365053632195, 1.2255238692383406, 1.7017847665105905, -0.42592404072891876, 1.1609200570746465, 3.2947141945321485, -2.485802493211308, -5.895671350148207, 2.751331315518753, -5.749247941799215, 6.039574541763096, 0.3049787061313874, 1.2882009875448546, -3.445575847257714, 0.44729774233828473, 2.562180113111999, 2.703501939720704, 3.2346762403205003, 3.1361793386112535, 3.5932561596656285, 0.2579504820687495, -2.040550452254032, -2.3496728115344863, -2.875822615442126, -0.09504165999190162, 0.9827653937978489, -1.0632044484583167, 0.6525644391773282, 3.061463780651446, 3.8402358988295666, 2.4237553311394198, 1.3398816445877948, -4.227429633719446, 9.046384855137994, -3.6761294529891217, 4.806552787692699, 4.024058871476012, -0.48762073597477734, 4.839612968950725, 0.3340088834445442, 3.086360252616643, 0.7362278427751918, 3.310325443683073, -1.5217263295240613, -1.5226133422418247, -6.085055064390157, -7.987249575839908, 0.9292488400628789, -3.6689056488950462, 1.5574137823468752, 1.6472389600070765, 0.5066253099997746, 6.815889443179932, 7.5113399513567165, 2.9909189991297462, -5.811992857244248, 1.4955980081916698, 5.1597569197472035, -3.4385450089572083, 2.7069624960380585, 2.0157217518746773, 5.722142201885581, -0.43294148126576243, -4.530657202862441, 6.715203843599315, 0.328155225898016, 3.9078139648493626, -2.5156500686119254, -3.383757804066617, 0.8514227399987704, 0.883988746515493, 3.051275718958649, -4.430367690935475, 5.204245747500913, 5.493211958375179, -3.238747193908317, -7.897711182733478, 5.304007774098372, -1.3757555857546855, 7.035917697444072, 0.06626581381619812, 1.4824027014811643, -9.314874946525018, -4.18023480128549, -1.0552306344824163, -1.7857049718415943, -0.46527342276366707, -6.573727204939157, -1.1528580683932146, 7.555201623470189, 8.250603121404163, 0.8839004259581549, -0.9907480700796969, -1.7990098478227714, 5.146304300206986, -4.2177884015382965, -2.3846758510947694, 4.274405877985349, 0.773261209484047, -3.4663532343585963, 4.862651922431513, 1.6805065115263729, -1.2935225139066566, -0.9567996163584183, 2.022322787074792, 3.3277435945262313, 3.5855795005077282, -3.047983612764353, -0.6760055743804887, -2.206542280675844, 7.34094266430484, 2.9807861092215218, -2.950888282240362, 4.96801597132232, -1.587612066273223, -0.2662642509881837, -1.8643583348599764, 1.984673085359951, 0.476862464876933, 4.00023360160218, -7.0906609143839, -1.4391403353959757, 0.4974451537079774, -3.959674107394927, -2.236974446504995, 0.6189930261075187, 2.3879665121029423, 4.018756187818557, 6.264693985907848, 2.5044743821368622, -4.26421444509974, -2.7715555292460294, -7.828607488472867, 0.21488348871261126, -4.51109002303325, -1.4018057056222704, -2.8640913281118237, 4.133305985054972, -3.3015475017698988, -6.957645501233217, -2.9404757474759693, -3.4933353386277184, 0.04835853845897159, 1.7132341749735223, -1.4252304286879143, 2.151327346049181, 0.5915495914429123, 6.554375362717136, -1.0581622283887946, 4.445162892644843, -3.61829910397848, 0.374180367544581, 1.5880563735219881, -8.322488550543257, -8.278622661781036, -8.454214862186838, 6.028174106775749, 4.331654774365428, 1.9399940909736229, -0.11555999238394041, 1.366348456243191, -0.11923041419797664, 1.0240186761707701, -2.8324969048008524, 3.4513765597096127, 4.066291307196396, 2.717246727276136, -4.7764147079133545, 0.6193727603931374, -7.187728531460527, -0.29539906918283326, -0.6518321779730755, -2.8371825036885463, -8.147367973512306, -0.7639699249913956, -3.603629727713569, 2.0659611567435014, -5.175822640247159, -0.6072499203695261, 0.5552021287873248, 1.4160336798950357, -7.296783042991343, 2.978883760794208, 3.9706242502599767, 6.370410440018033, -6.1017142172557755, 2.6125788941672345, -2.316945087987378, -4.766619217965402, 0.7412717114420633, 3.5665135491052316, -1.7472422973419994, -0.17492987203097127, 3.5822373496770807, -0.3482107786755594, -1.204246816575866, 3.7303181276401967, -4.87161135627632, 1.467682717207473, -0.6424184407724914, 0.8679433843623765, -5.3796571119573455, -2.6127393738820985, 1.7292494114109205, -0.6654331572006447, 1.3326692198476247, 9.268007447079851, -3.357843508610319, -10.449310661396305, 0.5242648670276802, -1.204157869003912, -1.1836258352491176, 5.406366811369015, -4.36448581993277, -2.7324864704645875, -1.7291122666441567, 1.718301173364569, -3.960482776883929, -3.074279699954105]
BIASES_LIST = [3.9460244495869454, 2.169669870564885, 6.966779191231978, 2.1736477792992477, 1.519951458924552, -3.764391996121827, -7.019181242826405, 2.4849339863336093, 5.130084823607757, -0.9815212061182241, 5.886381402361161, -6.439762025053253, -1.7571708866627092, -2.5145568257368303, -0.9006663352963942, -1.1672479963560873, -3.6479410436140105, -1.1488435577410119, 0.3162944864669445, -3.777563136055253, 6.0996798746562275, 3.549720386627803, -3.797377438197397, 0.8022418156953639, 5.08061629444667, -7.529141479914501, -1.7702624834354326, -5.844658048155512]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

