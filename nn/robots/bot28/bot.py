import random
import math

WEIGHT_LIST = [6.884514875045717, 0.5348627332913853, -9.532214398363655, 4.12427526121448, 3.973595447105412, 8.684604456901532, 5.349018592170378, 3.7808505416428453, -2.424096233229842, 1.2028275998468807, 6.260368868962395, 2.618425265427799, -2.42499139427154, -7.610398813284656, 3.3705074703317983, 6.1022989426252465, 3.2304639238496833, 7.076830104376441, 9.376346432815595, -6.294447399333761, -0.2631387648605745, -7.937953339810746, 9.318450824602827, -8.297660572714378, 3.426730215935427, 0.9627365707846423, 3.9325358255033223, -6.623525507917972, 6.28817120118962, -6.622564516150755, -1.713341364209855, 6.144770439894838, -0.7132648963752359, -4.620922004971526, 7.811635170725516, 9.29886648077639, -1.4707927579977635, 6.473189457359357, -3.2558425063400236, -2.9743858203670275, -2.553561561745812, -2.6956219610929466, 8.308291640026795, -9.240624479082694, -6.982293302584641, 4.740941365010816, -2.174850735223499, 1.527382676658732, -5.089738795618635, -3.0459526869449594, -2.432649412353598, -6.215650005431678, -4.730184789490339, 0.1929846515960243, 5.10827346005523, 7.309985919349927, -3.192190742030208, -5.855899836322953, -0.8347539005993276, -4.831657997730902, -9.637233426041469, -7.852988060723067, -5.412784181846348, -6.5419052645622315, 5.708090346547738, -2.516929107792363, -5.809254835759812, -0.5361919067298864, 3.518515908850972, 8.229383637290166, -1.908998058162421, -2.8986350057191164, -7.00971658660297, 7.646469037640216, 4.943401612805097, 3.8603178488714, -6.220383638069049, -8.830548582166553, -6.331698184280317, -2.3000977132079647, 8.151661306680428, -3.1961078917984143, 6.367927557037248, -3.3914736488960084, 2.4814301106984473, -0.7705687843174918, -2.7555117157149356, -5.022011043264262, -4.883548541070919, -6.305021832711864, -8.696457046345799, 2.9156392177538173, 4.054214147929544, 4.243223375397589, -7.262256809202661, -0.5111283772353747, -4.949272709320203, -7.176626006579601, 9.469644479275907, 8.991723932440912, -5.376027214050987, 1.4942333731133033, 1.095926130717137, -8.23041767410926, 4.903222416945622, 1.269468719327417, 3.625803682843925, 1.6825883434593614, -2.047465853786661, -6.429554109151083, 7.179999748780965, -6.139358836142406, 1.4130771775493685, 4.795677749395519, -9.565423931996, 3.949732774729446, -1.1830461057333288, 4.48713726395648, 1.3368696360466608, 3.056852012845223, 5.622015464718249, 6.689579923333973, -6.997236523318864, 5.441647107712397, 0.5552267798704253, -0.9177486973046296, -9.353465302522324, 8.333983064108324, -0.23602809709192485, -7.146712648132683, 5.392264382048943, 3.2684967243631107, -7.921732054115118, -0.49062456982591485, -6.892515084648078, -3.736678262633455, -6.7530418580840195, 9.857530397581854, -8.118334964138255, 6.346612708899677, 3.1976702810258377, -0.3974743211613898, -2.2452242398897333, 7.297471828595384, 7.444120097311021, -1.4272511388900604, 2.743070642704204, -8.719950914830017, -5.218565126267418, -5.172677453413861, 7.010364892964667, -4.2539118596829155, -0.25010371828464883, 5.431011347751991, 3.9266664876291557, -9.452199857764775, -5.086255490296421, 8.898769580922458, -0.4536977986690971, -5.214793606960293, -4.912785709059824, -3.7453729274315695, -4.646073713892327, -1.6840825623851465, -0.09407817537029217, 0.6176878326233961, 7.83896246975457, -9.770185465561536, 3.027105659206775, -0.4822355390206283, -9.944115640212726, 4.8535471468298645, -5.66604239671782, 2.014037509656127, -3.5247443552594877, -5.27354027661282, -9.28363288667372, -3.7985275623724473, 0.9008120665122892, -7.138113178641925, 0.061116696695957984, 9.224136425495068, 8.948249826637252, 0.6260701006372287, 0.43519995558560964, -9.724970242472237, 8.032637542444576, -4.349751709612164, 1.379619831768224, -3.917424160299367, 5.547177587800341, 0.18592369807121045, -7.55495114151625, -9.759974462626248, -2.3734865491984536, -2.8383889167519065, -3.533035917069971, 1.2134008770330524, 7.2851060248321104, 3.5177285809373977, -2.571865681403769, -0.2739230569723876, 5.066404364022109, -4.20190547834264, 1.681691450147774, 7.072741827238048, -6.199782200316653, -1.1756457200553534, -3.3295954115225124, 0.06987314537049727, -2.0583214931501637, -4.560918388750683, -2.6320717672115324, 1.455691566244413, 0.452769999020294, 7.549581581407022, -7.230851791915165, -7.3760803139121345, -5.2710866157220355, 0.4063325608016761, 7.502264571801387, -0.13964508517449836, -9.124756977619711, -8.050838076931024, -2.4086048917265472, -3.37436547106935, 9.493259800105154, 1.892220127367386, -4.501859970637003, 4.071774638490616, -1.8008569617049552, 5.475604072828954, -6.102195865361693, -5.479290824275614, 2.411273681850375, -1.7640154637489296, -6.454024293334797, -2.6000238118190637, 7.0227276741731295, -7.214322595995961, -8.161371199662614, 1.3829568042385727, 0.37747935149726786, -6.748254495375445, -9.802722796885133, -5.872224901308812, 3.8714351989906977, -4.32652094965055, -0.9247891595938853, 7.3222349172156775, -8.023681651482788, 6.834763520297859, -6.391559489253346, 9.24013104954491, 0.4668691924038004, 8.1664041981529, -1.0076133934229965, -1.049197775752928, 1.474130572166196, -1.2370346282330615, -9.400228641962654, 6.074139486719833, -5.927667260431835, -0.4644729642644059, -6.23489694259561, -0.03822437750197949, 8.128773436822371, 9.291681420136364, 4.135212286014427, 5.4524809259466895, -8.214535239544789, -3.8026668801100456, -3.2585092437793506, -8.469274454339036, 9.316781168988292, 0.4032808049446057, 1.7334476474032439, -4.4034617831129435, -5.0452907299324306, 8.50985199946081, 0.1080462233212458, 5.82907420678602, -1.7506050404890168, -6.185383822973685, -4.2816028371354875, -4.331278342031015, -6.583307353538279, 9.81777657005459, -0.09350353231790187, 5.453232818834596, 4.972986019203329, -8.53770404806535, -3.1048755652013504, 3.652964225494614, 4.362629930860253, -0.6594332133905318, 8.745048240277814, 3.13529396715178, 7.232864152194459, -9.418642372824184, 6.356716705348354, 8.412915669244775, -9.954931953519575, -8.718451542182546, -0.4330005820158789, 3.3514890977657767, 4.872803579061271, 0.17309290453961879, 4.216580689125266, 4.343978861147104, 0.6284890853148575, -5.337359830266141, -1.2160175113480776, 7.235777217456501, 6.479016415243738, -9.831875369751565, -3.139601235178173, -9.398945420927644, -3.445444064443728, 3.9451506789304513, 3.0105402437640176, 7.089227786556535, 3.4808160944797883, -9.390578296110998, 9.272042970135999, 8.157110722975126, -0.20063517395070996, 9.589986549644696, -1.6222258172449777, 7.387871720514564, -6.378035757424154, -5.150594458417088, 2.9791747156245236, 1.9662064064578004, 5.5687613435716905, 6.0721323091727974, -5.282399963733198, 8.345936460917674, -7.838007531129676, 8.760667773992509, 4.532375243013947, 5.577302805252032, 4.14867881408342, 8.205598793459025, -3.1534419091746058, 9.421674145142216, 1.5738020646030666, 1.3358401414553143, -5.181033719670687, 8.99337528255009, 0.1555479834091127, 8.667478029651736, 7.175154556125911, 7.647263568065583, 8.088046867454633, -5.148153337755012, 7.380759812315208, -1.2497128034086202, -8.377071484075849, 4.301453068399091, -7.147190778643497, 9.04117482075377, 1.5024614389954607, -3.9014978840458214, 2.844891791006191, -1.5963371457669844, 4.4766635784727615, -0.15002760471275067, 8.148328751728535, -2.519945175052345, -6.834428826117427, -4.306852232817995, 6.501089133377828, 3.071184660483169, -8.651040076609686, 8.72085454288337, -6.130441404631695, 0.6089698199059974, 7.1875337138075, 2.375446169530184, 1.8371128994397257, -4.11058337111319, -4.034661862318432, 8.456178356593526, 6.041517569273772, 2.9886340989177445, 2.1397082741330884, -5.810082405427415, -0.9870225202139302, -4.690021440447967, 9.62402833497185, 0.0050808685780179275, -5.084947673369773, -1.6968302309127168, -5.101486090861664, -3.3411441350143463, 4.210607861149763, -3.6300186706225412, -5.02076603377287, -9.724989380137748, 7.970672698441518, -6.235598816707193, 6.226725456410897, 6.881294154073473, 0.08223806542826573, -8.534726760756692, 1.409243499653483, -3.506764249108998, -1.527065791140295, 3.080595182430903, 1.0702188800398247, -2.9888908562611753, -9.55184918790193, -1.1978632131851459, 0.30936363165900715, 9.08280190553555, 9.969129271030411, 2.027133617571387, -4.885558174700815, -2.534506880434293, -9.835423688293279, -5.176826709092852, -8.829480353326495, -0.8174458017085797, -0.4693253647771467, -4.006388257978051, 8.660941720908234, -6.84089306465882, -5.077032654151592, -9.57308923704873, 4.658902656920061, 7.231681804397962, -9.657101881784984, -1.7650480353407403, -2.6885448556691465, 9.442716841587632, 9.231868782931322, -1.9764077974418903, 3.936806342842827, -9.641875045228927, -2.877452019845375, 8.31990642894672, 7.1954087290741775, -3.8241966436338686, -2.0841129262174025, -3.6736405957469405, 6.561995243011431, 6.977473809303685, -9.488629774010125, 2.0382240812343166, -2.23722702587642, 5.7850078971234105, 6.404430381239532, 1.9782631492976694, 5.568898144570998, 6.626347633915351, -8.114682976761028, -3.706084412210986, 1.155590583834421, -7.89894934523903, 8.330907441422045, 3.4259027422356603, -6.896564467051558, -4.974592094987582, 9.345143799591508, -4.179194195883227, 8.625025990535047, -8.641131111225013, -7.4030795943389744, -0.006466425308705226, -9.458344930766682, -7.707204598094002, 4.113697072523095, -0.24594110080736087, 3.558016401120083, 4.375639638258914, 1.8571853898737896, 5.311734405627391, -5.892907916851195, 7.049002101829981, 9.165649747721769, 9.817648411850222, 2.5669165612246747, 3.7287508723737552, 3.0624961178296832, 2.1899776887788303, 8.584205579057816, 0.9106362895139934, -2.2388626614483575, -9.571121029445122, 8.73547171029529, -7.480970045778337, 7.336309495404802, 8.236276915916292, -5.899210915859294, 2.21188415939994, -5.7585784711710435, -2.305343655468688, 6.991519757088557, 3.365890200750762, 2.25473467117207, 9.785996046236598, 3.6115737622545794, 9.066673895515613, 6.8526664534098, 6.876699908060658, 7.4364495951330944, 4.505748508808612, -5.05099034789708, -2.190654251534257, -4.911182385546631, -9.231443742572127, -7.786378074464673, -1.026445048313736, 7.0581493835822755, 8.84165626343243, -5.136564628396593, -9.248023023490797, 4.673231329053245, 7.4109122345879435, -7.36730770548273, -7.18466613902865, 4.450993418730318, -6.894603304686012, 1.3487726308398287, -8.646308094654724, -3.7265110253523765, -7.270750100729262, -3.5445937863419825, 9.962795295081627, 5.530371133312421, -0.02989991405697978, 5.769783270030118, -7.836101519485556, -4.17670005235866, -8.086891966321136, 7.292745621991244, -6.4118753455736766, -8.069250434708362, 4.732333648918585, -6.723951881334173, -9.140344439432681, -5.88231019068396, -1.6139502911986412, -8.772700289109416, 1.6617505745847225, 8.522395438372744, 3.8631245978176754, 6.040490294319628, -8.847435813002209, -9.6922661907385, 3.5203502551948027, 3.054197549350583, 9.316791620426702, -5.288870578453356, 0.7253492112274422, 9.22559556825885, 3.6544947731487714, -0.3552288903615626, 9.330045159729604, 1.6787568420032084, -1.7889059646677712, 8.953898403029193, 8.040846720239298, 9.665623094300628, 0.24007878798940574, 8.7159367797619, -7.200191519645669, -1.8448530527385252, 2.936881846103688, -5.632935643352468, 7.484232231962764, 5.569459595654788, -7.340417815455494, -2.8904045790826993, -0.4963729599254485, -3.018409284363573, 1.382185562403306, -1.9121274117790712, -8.077507386738692, 4.723284559632962, -9.939202514436765, -3.4628320742343233, 8.09853531717405, -8.94278673651261, 4.831509375721463, 6.545388094252893, 4.279814101541849, -1.8695884937644518, -1.3827474093847272, -0.18257232728954875, 2.523664933422701, 8.862660465147552, 0.6033721867290858, 1.6525281941565773, -8.380964744807898, -0.6777431926954591, 3.6709909932794567, -8.713872450545537, 1.1836852461819358, 0.8369190319051434, 3.231282634924849, 5.187833988328979, -5.794548538255588, 7.943585244460763, 8.76253770533156, -7.0138072277452945, 3.1526211593013223, 6.047955365043787, 6.276325846364571, 7.393361604678951, -6.708500813303758, -2.1792323587995144, 4.703573905887508, -3.1691476172304256, -6.425768468016127, -8.290048465040648, -8.08618343021786, -6.809506216179284, 0.7831768159893286, 5.916026672894915, 8.039149783276777, 2.326369345491777, -2.7758235234303053, 1.54569309260917, 3.7488294395105832, -1.1557317373611653, 9.425414668009502, -0.5342615116758154, 8.779320493870852, -0.7049678698301314, 7.083825610663631, 6.505546248837465, 3.2277653355337037, -6.149649125725389, 0.5651201527386611, 0.2736306275515723, 1.8779687137017618, 5.441943032006549, 9.240757840109929, 3.491786912671678, -5.631622931914013, 0.29047003571076324, 5.037585463492778, 3.7266415070308376, -3.9303179037066194, 8.61597801113281, 0.7689999631575439, -1.4553149947318662, -0.044776572165552864, -6.581756338309761, -2.7572397245258573, 1.4601706888531236, -9.620385682252275, -7.693627828686045, 6.318665319789602, 0.19159404704912575, -4.389956114699913, -2.1616775596408155, -1.915543494914127, 0.5436426413748929, 3.4337695007435425, 4.430350193501125, 5.579427605084202, -9.855571170093345, -2.473162179647666, 3.7326642351267463, 6.977621453173697, -7.246167925762402, 3.014289540982025, 9.022096291298052, -2.549399033268891, -7.505908014077374, 4.489566664763645, 7.739075987106652, 2.0581229273572443, -5.691383351490775, 1.5899955417042513, 8.272274826937668, 8.27574348923265, 8.343606795032407, 6.851058999093574, -0.37805463236720627, 7.375035883620868, 0.8176628034351978, 9.478810620529497, 8.521501846225682, -6.404082369751649, -7.440728898297206, -8.463576744222799, 5.217256476586009, 5.247540630594809, 3.3190638914760466, 3.5890347617475378, -4.153512340317338, -3.387248051310796, 2.6591080302292944, 6.231902060313349, 5.97974207475993, 4.215422344101507, -6.6925512323492615, 6.781906598334263, -4.403099503005508, -5.6936444540064945, 5.544446699560012, 4.690840644497548, 2.04949033859787, -3.9940714696885893, -2.222645214862098, -8.72463948207584, -7.192293471617138, 2.0349398371127094, -6.436985067401171, -0.6676310394832932, 1.9114908494805043, -0.05148588392611941, 7.304610622250593, -9.532753749731317, 0.8871185635491123, 8.526030951948883, -4.7651014221488435, 6.1476933770718425, 7.000174426899687, 7.2407148095189555, 1.5109977038688776, -1.0306863033235167, -0.16048473017796283, -6.4317774452227106, 6.5002940495749115, 9.43447255189842, 0.8976245071074036, 1.9501474130603196, 1.3583186461732328, -7.739974998834562, 0.09147745180261424, 2.4479106574570473, -3.860740131853535, -6.290567803090045, -0.026813166876380023, 5.771862626228826, 5.992711104522483, 8.857894874621469, 2.5463834530727336, -5.948843658384167, -3.1042298416617005, 8.60646896158783, -8.671058533206535, -2.7979999692362885, -0.5065347140309644, 8.736697800476144, -9.241956047167623, -2.1795100417453845]
BIASES_LIST = [2.9592165604983087, -7.381695580351089, 3.7309402357777994, 3.4744991291807654, -6.534806329607809, -8.623210932349947, 6.575868845624736, -2.9468610672649724, 4.883141185908995, 8.674798245297247, -4.046261215922547, -1.156344802094054, 4.30032059232483, 4.642478292044327, 4.511641221866922, 8.128782054010419, 4.872000922835815, 3.1801596795583364, -1.4008430567744075, -7.809174426817085, 5.86219316548809, -3.080548564445669, 7.6812930449906744, 8.073560312170155, -6.00862578032565, -1.4650384362769557, 6.570938713368928, -1.3579397090957475, -7.9459640629468105, 5.374251678618547, -5.459995929143289, 8.006219895649963, -6.716037705313789, 8.169143462044467, -1.5873825922049143, 0.5699976945421188]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

