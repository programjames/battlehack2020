import random
import math

WEIGHT_LIST = [-4.579027001070479, 4.170166920522881, 0.7422121861226945, -4.950825470865377, -4.271000773053217, 1.3707971109541148, -3.130392527600618, 5.77406860785927, -7.529504292535705, 2.252531702324019, -7.880846939604778, 4.539587199277877, -3.479379210133069, 3.2774036276929728, -7.137895164018914, 4.135447635412998, -4.676991667748318, 6.904701002063554, -7.512427308850036, -2.2422756269153687, -8.65721916675976, -7.0614736844305614, -4.628695743086169, -0.5444903445706295, 8.783802650462768, 7.942106315291092, 1.831845308401352, -3.320363296678668, -3.1779669124221037, 1.2666083813478153, 4.077932778900806, 0.8989842571430362, 3.7476196067298204, 6.474112832295063, 9.73285995535931, -6.633538841706226, 2.525699715591159, -2.3178720524481715, 3.097605046348022, 5.524576340788263, -6.777941394905602, -9.323944086229393, 3.1849694306237026, -4.673175617274287, -5.130567364600493, -5.487583826252427, -5.2107137157352845, -5.900313535230692, 0.9405344256047865, 3.115007737812194, -1.1307430438299164, 6.96613590753493, -4.098516538364758, -0.23681326482188858, 8.827170952874571, -8.192783368686609, 7.9537487198063275, -7.450425628616273, 9.49627194375729, 1.7664668122413847, 8.675799611888348, 8.978977187131335, 6.864772988375748, -8.727687935165617, 2.85831923834958, 5.133779287355441, 6.426970901952117, 7.435816417131946, -9.580894233478997, 6.384379331637341, -1.4860066346503302, -2.7591683198381434, -5.788061988562352, 2.0303838524064144, 3.119695797793323, -9.448123737283979, 1.425492362411374, -3.7374279558331764, -6.701450210351334, 9.995720821977173, -5.082025275362028, 2.3809769737171713, 3.50201378773156, -7.105595851816096, -4.259063553545226, 8.96383810193823, 5.936710399588623, -2.054774475196675, -4.156369980758107, -6.892215551295702, -2.5587373754595655, 0.7673403878089928, 2.686710713310985, -5.251280306087889, -5.248457482308899, 2.4072780017430837, -8.755740881850913, 3.0996844224680142, -1.797965714249802, -5.973735206270381, -2.1401240885259725, 0.7600311776309496, 4.557890878676414, 6.667454452916608, -5.333567341491403, 9.052346485969707, 7.096017498270566, -1.7877403382330534, 5.653540780459647, 6.238691763449019, 1.1955577434141453, 5.634971866036873, 3.6563437717460587, 0.2531169698487652, -3.246156224798657, 6.958150610311339, 4.197800259907575, 3.2547819218758782, 2.3438562745379876, -0.581880410951598, -1.6331390290504277, -8.784547212652837, -6.931652046663115, 2.357441649448969, 7.944824963468523, 2.3489109306264844, 4.325654956111515, 3.447321906881502, -3.1630331222403107, -3.6804910677369707, -2.7936802524263875, 7.836989607188521, -6.124785878465026, -2.0186967973407643, -2.568480661117669, -5.774448251259092, 4.911580208581764, -1.9520079101832088, -0.5672713826518301, 9.212831468871375, 6.748729838835214, 8.626972365356398, -1.0994556798097772, -4.897740259976596, -4.238620724879891, 6.47010795963098, 9.208597731462842, -2.819132938347602, -8.94489524542214, 2.399365072576714, -9.953076295853114, 2.214860069468685, -2.385089285300883, -7.3705742172080875, -1.463947699493744, 3.2115871689293325, -2.501829133660081, 6.0994132400557035, 9.268048670209538, 1.822844024426864, 3.1392678665215517, -1.4509071349428542, -1.6887893235709193, 6.525604446043932, -7.986101662678955, -7.071717337471897, 7.77762913169575, 1.5628732423859582, -8.52775982427147, -2.9310874331985604, 2.0059804485852304, 1.0283512762781157, 1.6639712829468891, -9.541482114212254, -2.6007312202306903, 8.503575388853967, 9.298296056695008, 7.183444922928402, -5.447232446799191, -9.669766732384593, 6.9468227001061145, 6.8414562765149824, -6.095550342414315, 7.462708525932683, -7.751628883457395, -7.190897266843416, 9.596799375679709, 8.385319280348408, 7.096119590071947, -6.002089754991589, 1.4240952819885333, 5.573072634891581, 7.39362329534751, 0.13355015747936072, 9.064887103804011, 1.962037208751152, -8.39343117047762, 7.238000571007124, -2.6794658684421417, 7.40663272162335, 9.944519774928413, -1.3236535889528263, 2.9450631761395503, -8.6592204921746, -5.816432758206149, -6.248224367226356, -1.6776799619592566, 9.609584259932966, -0.08318377607421112, 9.5903382053373, 9.370488671034305, 0.8216874414859721, -9.96109152000483, 6.45152247023929, 7.711271764469348, -7.80438158350913, 6.19604881874071, -8.247333841454518, 6.046116940370016, 3.5163456233495403, 0.9724947556794223, -4.418135907854738, 5.749279771460136, 2.3167626404862105, -2.9098413568260684, 3.32485508779701, -0.3246549783558912, -8.64767293460583, -4.436536879841782, -3.637257361492896, -8.484807547164655, 2.5418397844147496, 1.7728918907001407, -9.801426865267333, -8.980423346948212, 7.777079656293203, -8.118802198747606, -4.103011108362191, 0.2591977210918479, -4.8114246403669325, -3.973127647108594, -3.0542288614942787, -0.9253536818751016, 9.87644906549388, 1.7790255081439614, 1.1584548894079365, -8.94050893808037, 4.81577695618016, -1.6241053230067486, 3.4927623912826498, 4.524125297444213, -9.896488768992356, -3.788702929609544, -7.732878721401255, 5.5562347505680965, 9.397752050167473, -1.5132357638912275, 4.3700400294186075, 8.307993253710539, -6.772858669644641, 7.25038066367884, 9.87376501511886, 5.571044041130612, -0.8808226100807808, 7.98322737545611, -6.065949860337745, -7.209080538492496, -9.74443490709995, 8.992216408260155, 4.533739679388971, 8.110361878960596, -6.97753744579442, -5.802540989422475, 2.1593297523551342, -0.09213031499607638, -4.517048456802851, -8.043737933636795, -5.552105826503897, -8.717787803675748, 8.570628029689292, 5.6648655777290085, -3.9025142866496143, 8.237626394779799, 7.490244213319517, 2.453070540854437, 8.225767383707488, 9.28928884384296, -6.550744724799975, -8.153523440586925, 6.374850202031286, 6.694355292148355, -4.610506579699827, 6.107304607312386, 3.685062484618218, 6.395507675412798, -5.342840925951968, 8.044129361623494, 4.906163810715805, 3.383562993025331, 1.7872607172574, 3.8226681926810624, 7.693938232775114, -5.0504048699331054, 5.81897293697023, 2.0863983031157325, -1.311013649767748, 0.691045813486916, 3.1494838755171273, -2.7284238180090696, -7.430036124808361, 3.6730940763815294, 8.883866751786286, -1.4435333652492055, -8.010022852582008, -1.4722229280213774, 0.7172083729549854, -8.395658800147638, 8.56707939197846, 6.179798486608135, -5.75588404609225, 5.515645572471472, -6.260339640542489, 6.668973359072275, 0.6945568147378971, 2.4211902885314824, -5.143413287485343, -9.62044713430597, -3.1590780078056575, -4.6398872684754, 0.18197043260976642, 1.1550133628281003, -8.66180329875814, 3.8377071364394926, 5.040364267924112, 0.2578903848678493, 8.717745179006005, -4.7632001259394485, 9.060330142311653, 7.8402050569182755, 6.795727254993093, 9.759345458197856, 2.583545326624126, -5.601813606584345, -4.555627173988905, -8.139710728809336, 6.19325464950531, -8.142406597232485, -1.0516102996775238, 1.6354875974090177, 3.5404374970823156, -1.5575595773351623, 2.8238830998491657, -4.833980938664373, 2.45119921943499, 9.173475651055035, -9.752359393918614, -9.34367981477012, 5.378536790656314, -4.222542234025289, 2.843567717055752, 2.040978015927754, 5.972905165965027, -9.902481141028304, -3.2743931913025204, 4.368352239134175, 6.435865343223259, -7.888634304681277, 6.02229607485387, -2.1821413877706313, 0.8428478572069373, 6.784105273630608, -4.317681824742401, -4.744299655583777, -0.7111849886444066, 1.0825741217578244, 3.463452203855299, -9.01214629302414, 6.55179360495832, -9.570921510622703, -7.393417679377288, -7.938549548479854, -1.2178141120080177, -7.094612996878517, 0.14703709850252977, -3.210150653171522, 5.038519228389571, -2.734430940257595, 5.692335911926712, 9.788497522954977, -5.959513271946384, 8.101802475768338, 3.4936780623198533, -0.698559817764604, 1.8440442888489166, -7.149318318821887, -3.857032077207365, 8.420582819174783, 2.581123088475172, -2.736048835263678, 0.8533144835064945, 4.9006393923739395, 3.1072440814015145, 7.916948846570065, 9.541517929531047, 9.901737092329054, -8.818914716665013, 9.574686981607584, 4.8196966149090485, -6.333385877367688, 6.465115475609149, 8.144971295995408, 8.431189464836805, -3.582736032281688, -9.30628576154259, 8.948314205420075, -6.072696811013678, 2.703082696775514, -5.957899031005541, 3.1118345037404325, -4.839539938593543, -6.733653777849355, -5.885982279383349, 4.064719170132102, 3.673166668353238, 7.374020518269219, -8.003486788647825, 6.855566329189951, 1.720383988083647, -3.8264795869453767, 4.837880331140461, 1.455453497002594, 6.785761127646225, 9.956008280263607, 0.7655022619200995, 2.0260624768199023, -6.030154039087243, -1.99574123142032, 3.040806132613465, -4.428481062954617, -2.7314205407519214, 9.474058067581922, 0.6720402983662073, -8.194525701016076, -9.824678478130044, -0.7311961540717054, 0.8572746187774563, 9.29311287436218, -4.0340849555710285, -4.938262483291693, 8.318565371629202, -8.198714795307037, -1.8554093639898017, -5.074594769756002, 9.041035699181915, 1.5866861755926784, 6.073801022241621, 7.1800735123270485, 0.4797357889688776, -6.97063337868848, -0.12830755335258104, 6.466859519079936, 3.741101316593804, 8.805659787474852, -1.6324467599982224, -0.08165728099220892, -8.37622335367422, -2.6783460136287136, -3.4051743180285143, 0.8399466482487394, -7.968589274480296, -8.220258303428176, -2.927058694079083, -0.07174894282926836, 8.947436024890923, 1.482836409054615, 7.352047649938104, -6.289535622422497, 8.060011658328492, 7.108923777533079, 4.641017769557902, 4.6451742884478655, 8.47119541083175, 6.96156484079685, -8.937083465410007, -6.756799855569362, 1.94908277378177, 5.327894575681444, -8.788625367248013, -4.208744539972875, -1.8732642872639929, 4.742779286016187, 6.126912162191779, 5.800614481825226, 4.5144634160887875, -0.9789294456834519, -4.975141332649264, 1.4792025522061856, 9.65807675161971, -2.3413664147187436, -8.031481888079643, 1.8304299350431883, -1.8544836670554776, -0.7199512945787134, 6.605371006519473, 3.752285791386729, 4.007375504672046, 1.0525243846315178, -9.414834287865691, 2.568504057342791, -4.666539441985497, -4.159955694844488, -3.899036949829484, -9.694451566574527, -0.668590715397885, -8.984717491373146, 6.97259393276547, -9.413406774328443, 6.2744613145407975, 6.198026074091501, -2.5901643480159464, 5.82675001317287, 9.267761106363196, 4.113409430016899, 3.025713716204031, 1.6808857547875338, -5.018369575622604, -0.30683411601558674, 0.9105123863947711, 5.459867314152774, -3.536309883747779, -7.317017880116714, -5.671438480406801, -8.45687718798642, -9.366655138667614, -3.859807406801801, 6.416774370167822, -9.322050822708244, 8.082800108728566, 5.221813191438812, 8.039355537606223, 7.287015068956457, -3.964915475934381, 1.0152967820186465, 7.126319678490379, -8.667641515347597, -0.7307827728939529, -9.91355413988012, -3.4277445269034823, -6.335641206431384, -0.5829011530316919, -4.0353809784573125, 9.740594033212034, -5.321458340281396, 7.562601874759075, 7.506262596951419, 7.142707134495453, -1.758251171331544, 9.467415199016557, -2.1511135536852226, 8.568382692025772, -8.56345677788182, -6.663152586358095, -1.0727748203754768, 5.565261175131706, 8.230249055746686, -9.519771885691284, 1.0724276029293272, -4.262584764701387, 5.689651717294515, 5.035791781515721, 5.38080823327549, 7.239812469151833, -8.719087808549784, -9.454334628771173, -3.999853885717865, -7.048180184113962, -8.840217777462136, 9.759600235542628, 5.227103227191671, 6.795090774715472, 0.006304968133367339, 9.025894732746782, -8.20986476863877, -2.51411686595278, -2.2767549281184625, -8.051144622430012, -5.769759492977089, -5.1879558418237774, -7.9768030349724794, -1.9400277704494542, -2.0744113639648525, 3.1687901483119276, 9.813747730787021, 5.597995579995601, 5.846731488260881, 6.131912866366999, 7.8858972491288455, -5.8857435339784665, 7.450827015903421, -6.150211156585231, -8.706168443168883, -9.919048618183442, -4.216444820744767, -1.3436325591407101, -1.6224350298381793, -2.472083798188132, -8.91199554790937, 4.907071995286987, -2.417302578993823, 8.781285039721162, -9.36752313384375, 0.48666338082697536, 0.15879476757025657, -8.88674562950971, -6.683147518499206, -0.4615536882373146, -7.634898777664869, -2.2898661834305933, -9.293054285157542, -7.602410396869585, 6.772629794717265, 3.347605645165281, -5.770258905505967, -7.16004428343751, 2.801586618373623, 2.027798584160344, -5.2119303885944746, 4.909750264641808, -0.3818471079041874, 8.293034119399895, -6.4236889820818615, -1.0695749556794283, -0.9081513167988042, 1.6164659371638983, -9.672740619349705, -9.388833450812509, 3.1957184474391465, 9.299654821840377, -7.748200048842588, 5.521295882258038, 9.71153424181922, -3.0683491448794715, -1.85192824238948, -0.113194231021442, -2.1829667632279692, 5.200856637247977, -5.695826007570471, -1.1212920302750558, -4.553385370160399, 5.550142525322295, 4.848406831668871, 4.757054797035229, 2.6526225391158054, -2.837731309373714, 1.1383663310386751, -1.5259554163410414, -6.668329010526916, -4.257308453304409, 3.161261598202449, 2.0186995803152783, 5.384775563281604, 8.485442031057783, 8.87501005601301, 4.4621690879332565, -0.2179773602838182, -4.674024565646384, 4.050792475614042, 2.0399597391033115, 3.625913574303386, 2.677599682998455, 4.567399013442614, 0.34228177836170204, -1.928268788318153, -3.5135157708019493, 8.67089410336374, 1.2535273415152854, 0.6844604035173791, 2.3145878662402968, 5.869738896735344, -2.085521291407833, 3.4753283590875057, -2.8189863631949486, -7.873973445823445, -3.149568452454192, -4.243766241136278, 8.04873289679907, 4.958185609011812, 7.393356604061459, -3.451872028019462, 9.009430209529707, 1.9410978340297707, 8.35543013132338, -0.7980766800074193, -9.312702674749982, 1.1305862263027109, -6.921522848994883, 1.0764103904841065, -0.259587248722843, 8.283996396285282, 6.8476215009933945, 9.429981845424816, -2.6871029797988317, -1.7728034883889325, -4.476092652266585, 9.500948471981058, 9.961356517583464, -2.745101877297418, 5.342144837106757, -4.686445360012364, -2.135815169120283, 4.699605995371055, -6.097377884019036, 9.311581399493306, 5.4467157638102215, 3.8044317775622396, 1.8693108620219014, -9.358211775705902, -4.640070449540361, 7.055262778703163, -3.179460904850904, -7.1385080722195955, -0.5404132548142826, 8.974723726230238, -6.676209555489983, 1.3329570844839225, -1.4933488437748377, -7.705524098572061, 7.790699862293639, -9.910937665906578, 4.5483937532289875, -8.401423700933744, 5.012232504867084, 6.139269031149439, 1.9207952514238187, 5.811352314984363, 4.951537348556062, -3.977916762710789, -0.8154226125228092, 9.82133073177128, -3.1580662637372043, 4.93058845376823, -4.775181370877073, -1.9726803090464422, 2.5937611605308426, 0.938658825061216, -7.446274963121309, 0.40233274029290733, -0.4171625728416153, 6.24882412889216, 0.8726110784581724, -1.8568121688655168, -5.80717407636196]
BIASES_LIST = [-0.25047685229749206, -4.703449390602239, -9.382355488607395, 8.836428283473122, -6.012126161173268, -7.566856854283688, -2.7790471021127576, 7.954541699522519, 8.222680897991005, 4.7095611141016125, 6.944763596550029, -2.546202176980348, -1.6835236431551444, -9.879382491362493, -3.050414900082849, 2.7979683249580063, -6.5056336657954805, -6.5008695708070245, 5.129115531056838, 1.429730939236011, -8.813133296942636, 9.778983697364893, 4.265176557119778, 6.40885577546473, 4.61816065329578, -9.398829925351224, 1.8461749200843443, -8.97334729810236, -5.846948272399195, -1.4479697337276711, 8.576622231239309, -4.905179769799412, -0.19736257763877063, 9.057332810283132, -9.76581757870489, 6.478021229529627]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

