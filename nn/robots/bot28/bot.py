import random
import math

WEIGHT_LIST = [7.189015915909486, 9.960830532871633, -1.1309659914139445, 3.062151157671181, 9.048715975478924, 3.9927439270606477, 9.121277589032374, -3.1956248460757353, 8.89831360472289, -7.591753457473751, -8.587234379344125, 2.8169794928369445, 2.6375601207477555, -3.4147489282614156, -3.143446986188863, 2.0497997245118036, -4.616546457715415, -3.3043143814728744, -0.33434032815922343, 0.7803694828601841, 3.1783589586221623, -0.7673954683143442, -7.137216421000073, 5.587723253314776, -6.9333591777311625, 7.838130117551035, -6.406647334234168, -7.788424610277214, -1.4477140869299951, -1.248236739310487, 6.659526783453082, 6.2900106050996065, 9.39909979946772, 7.639849499565315, 8.070443834199722, -2.602475760276519, 6.403708948738597, -3.5882060579103836, 6.8445231862019575, -4.06811135467011, 2.49628039936772, -4.17698232800245, 2.2953012155901504, -7.2472499065693485, 3.5008680747744254, -6.402713469944361, -8.062770471280508, -3.684069122761244, -1.268409407344965, -0.20294569658824635, 6.253950006284189, 1.9408022920545562, 3.86043817648698, 1.1798863390824827, 1.41325509786682, 6.9236809093636715, 0.0843673273101242, -0.6156067405818781, 5.218834754584275, 6.742334196428878, 8.484212882476086, -9.143943146772495, 5.66487663051516, -7.576308503474061, -3.8106549286481295, -0.8895613000785279, -4.4905590330264245, 0.2453905541122694, -0.42012652293326624, -0.8650923157618067, 1.6921160503596653, -3.101167028326948, 4.51593578531587, -9.795307178646812, -2.4981207710253557, 4.245346781270607, -2.7043836196367366, 1.514800246128484, -7.502495547263428, 9.328774251321619, -6.595828576026621, -6.347411535147705, -0.37097504274158766, -6.328995818327017, -9.76832870645179, 5.76729052880567, -9.713948485965876, -4.674336798238126, 6.924938531776071, -1.2073169985535763, 8.461818940492908, -4.109859168418268, 0.4314690009897788, 9.735164857823456, -0.22902036070965792, 5.231595645601246, -2.4397944987293325, -0.17700346523880128, -2.932968847501895, 8.124193013620754, -1.8409471900508816, 8.492259120671896, -9.640183360410592, 1.8094761152814005, -3.1898049876642753, 8.636513125626252, -1.135578763587974, 5.886967479464392, -3.3949932478793343, -7.467924632369978, -3.57207265695481, 3.3131808621024845, -2.874584929218984, -7.991329924461439, 2.846046274775407, 8.844058143321362, -4.885946996323032, 6.365013713465341, 5.712484549603898, -3.431340335864963, 8.609283114324274, 1.6497910952026977, -2.945888085385646, -3.3300545679850524, -1.8699319692368803, 7.774985659429781, -0.333885816379782, 4.51091133820746, 7.425602178223389, -9.30867955091114, -5.251574733396311, -5.518540181957086, 1.1623415094901688, -4.22388644868059, 9.192886144258743, 0.355381199060151, -7.922417461586154, 3.712016524069842, 3.324074066389759, 7.626333598061613, 7.328203206012656, 7.755277023920403, 3.1054716178604718, 8.818020894677048, 0.6387401340695149, 9.371554349683525, -3.5292927194596624, 7.279863665844811, 8.412946648543937, -7.390442879685361, -4.0924459244063645, 9.131948926775252, 2.9558778586002745, -2.0353466674437364, 8.327431379511701, -3.8498885158511387, -6.331238922644764, -0.36017252547644496, 4.5360525486578585, 5.674610449841564, -1.2825564670215055, -1.00191501527285, 2.5225256402855845, 9.02033815628553, 5.464003554127206, -9.615640279455429, 7.132313755373442, -7.415560121348603, -2.4490962745393112, -2.3265396335237494, 5.642532642241829, 8.136898499218056, 3.3939125289112138, -7.114287371669434, 9.793283727391973, -9.50965004325062, 2.4821985111324825, -2.3392675306488346, 0.03599134953130978, -0.7242263346358051, -5.216893150219615, -5.4125860312330065, -2.259054594134944, 9.509340811786945, 9.844254715247601, -6.332507388031141, 6.729644771783519, 8.031492103747382, -3.3758386609990954, 1.2257087114667602, -0.6528302102086805, -1.7671807910360187, 7.950742783038184, -9.782903837228275, -4.4821592284366645, -1.8958076112131934, 0.6203562360773596, 4.115800352746584, 9.872377733092886, -0.39212166159525275, -3.1480109361965303, 7.933682487263418, 0.49383546944521406, -9.729362411264585, 8.92885092664319, -0.9484329731729986, -3.005509116322256, 0.40551012321480684, -7.884509822762178, -8.752096944274143, 6.387091586840569, 9.08747039001359, 4.0687028767209, 5.349101989606847, -5.921895285911005, -1.261102186511307, 6.253241154999007, -3.2731007065007116, 3.39686330585762, 9.763555229855733, -4.958885635062549, -5.517321482261989, 4.0387718051014225, 0.1604825999659969, -6.093887522549393, -8.054650621035687, 5.728909268773519, -6.454277227298633, 4.658753959110271, 8.401233577186698, -5.969880878047178, 9.894585304985355, 1.5878122812330595, 3.655533548500159, -7.43386195932723, -1.7182603950301214, -3.0484482061859612, 0.4531892344187938, 2.4265040875657036, 6.012200316512075, -6.951977178517071, 6.9114909622187355, -9.619547985958139, -0.3683679016139436, 9.145230610699468, -6.098200873747217, -1.0555567516865558, -6.655350705178977, -7.757684316490434, -4.1047486737068635, -0.054873196301983285, 4.422267184919747, -7.170218679425746, 3.159546413875244, -7.1459476731783145, -4.423803138388276, -3.3653775681452602, 7.597017611602091, -9.041750294038378, -5.535242850405506, -0.07914933866006457, 8.967443883441103, 6.195770204795146, -7.615045113868413, 4.0167033440464195, -8.26501055496722, 2.9727464048155667, -1.2457861731829905, 7.305153079623018, 0.9371528047029969, 8.021346723482981, 8.464378191344572, -0.5715514351795434, 5.940281965366282, -7.521131207617748, 9.089956298726893, 4.249552694646182, 9.773354677789435, -0.48546415647864194, -9.694697450511718, 1.7146016837861602, 0.4938799198932955, -7.037074018219869, 4.3784139945337195, 1.7903237116644064, -1.3932496712364149, -2.966716957985895, -9.799737438418925, -5.815974846940534, -4.899559594098443, -2.628269336043716, -8.381699014374702, 5.040213088633124, -1.764868335576617, -1.9482686327562941, 8.24061211209554, 2.2452145361915683, 6.8179667141549025, -8.47919786776055, -2.5421937961083856, -4.0029391656408775, -7.706414595537647, 2.876568587643675, -9.853737686746955, 3.00025259902009, -8.436722112717394, 3.5462621709500155, 2.2275116791698313, 8.489786375393354, 0.8365051208053327, -6.231256605632556, 5.136301841995204, -6.608096863165798, -0.5221128055737196, -1.2063838798591284, 5.482213465959447, -4.266000487670234, 8.954326778106811, 1.1531196287190255, 1.9207519125857324, 8.553651229066741, 6.122904809788238, -5.2136662278086, 3.330993016104733, 7.023094216553734, -2.1048424027197594, 4.87631181984705, 9.2325027077203, 2.9002014122938036, 5.30308402326261, 9.163233425589741, 0.828601675431532, -7.11091828603942, 1.4144171011040445, -0.04482124215692451, -3.1936739398884644, 2.158492072215914, 0.45770995642365087, -5.042711237006012, -9.931104462076918, 0.4709009279195815, -2.4355681370163413, 3.472926188180862, 4.41039603019229, 6.4238680866181355, -2.6951882488150343, 3.1715990820992737, -4.7536013474463505, 8.72788819779376, 9.202712372117524, -4.331738771832347, -2.81567075841145, 3.41198418680505, 0.136310334473551, 4.364346661226028, -8.017047905916117, -6.606766836497952, 7.30366415358592, 8.568619424884936, -3.218336442646379, 1.5819743898321885, -3.6275499411969587, -1.2219520667810375, 8.889088348954026, 3.0948455386613176, -3.834128663790719, 1.708306767661874, 0.48754799550589567, -6.031816955853322, 1.5456575915470765, 0.8731687764923315, -8.716980240591214, -1.546764762002315, -4.41792961403684, -4.676261753219095, 4.069949497385, -1.0549237230166053, -8.613313818299982, -3.8938810920898392, 9.952265235122645, -0.13975060541883622, -7.551499012315364, -1.3748433657835868, -8.540743559955793, 0.9549768152202365, 9.6489504038828, -5.359161285073415, 9.727969459139185, -3.383553753764783, 7.244292485248987, 4.027150119729701, 0.23416484021223027, -1.9759696649175247, 3.835825020102938, 9.78458362842758, 1.2244785465143444, -9.134333565715076, -3.7135513195005494, 7.400082216155756, -5.795308148392005, -4.144726276059254, -7.450518674010265, -2.660846180984631, 7.827327198404376, -5.321283498705123, -7.635717960622081, 1.3243383610067276, 4.964350747110862, -5.64550944356752, -6.205598848223524, 1.8692494123291397, -3.206176902879503, -4.058210807563736, 6.175020462758475, 5.156367254558978, 6.410887880295014, -7.51532561499727, -6.584654145556355, 0.3322579435811477, 9.245592308236844, 3.5870429828476063, -0.17449946030588137, -9.89189254911955, -6.229548739814357, 3.5963169604875986, -1.3629510909389335, 0.4690819214678488, -3.1283461912557886, -2.892607698771494, -8.125589573401227, 3.183414912068063, -6.739895699964746, -3.1504817576185946, -1.0169638105989947, -0.7301388491224223, 2.4763284809460355, -5.400024861302597, 7.890420654086213, 1.5243912468610414, -4.419073388624335, -3.808079848733512, 3.031903873778896, 4.36138640538174, -7.837041075913708, -0.5201133881104258, -1.61304370441548, -4.163488348880369, -5.199732988066805, 4.203812266400826, 0.07123944715058883, 1.4333827576316427, -4.2085995424280265, -9.136500012219535, -0.9339319896874354, -0.7839670253286108, -7.643850423404173, -1.440794450655778, 3.70975928427743, -0.11894093278301199, 1.629534633988964, 9.077941061387918, -0.5469854469494919, -3.2304568676266747, -6.672957574558714, 7.575721292466682, -1.5363480666253437, 1.0491365875304766, 1.4834795618665773, 8.379645099696884, -0.6289508111900979, 6.72340947989554, 0.753582713620693, 0.8300742219820112, -1.4288420693914183, 1.763486336649212, -5.1772613540203105, 9.264348284877574, 2.353536681545238, 2.861474409767954, 6.443154985748155, -9.77058300542909, 0.19148985433995236, 4.60963690035873, -9.565280702150623, 0.04426211811228242, 4.565913514568546, -7.03508189189005, -7.459000832283946, 6.752973363909934, 7.709544559832768, -5.668112063797512, 3.818242929006935, 2.418705790459539, -1.4713929052041799, 0.12862044581130938, -5.435284643463141, -9.534702909027828, 4.5156889112929814, 3.4653716010841116, -7.165944307625516, -4.824217639672554, 1.2611448453089054, -7.496524760051266, -3.389819137224153, -5.870140685454941, 9.89389757328816, 4.889162963102379, 8.638122362580717, -7.112068012538703, 3.8598964560442823, -2.375493015943279, 0.8842949454194162, -4.388251827607135, 1.079254255674586, -7.440201986976298, 8.529666917680231, -4.08084142908669, -9.437135546838462, -0.4684211334020816, 4.929475042518202, -1.2070149170541722, 5.124329606456966, -5.233404516964, 4.146052131346067, -0.6315677711608991, -3.3714913914195037, -1.5540612412793102, -8.689972199297298, -3.466855066330967, -5.129689060322713, 6.430037487959993, 0.6766003320589995, 3.0984776007928616, 1.6485282037031297, 4.906499779849254, -0.6972442330102488, -1.893886777663802, -3.250827056624363, -3.037028831797066, -2.0605744937938386, 4.172096991521812, 2.006798702823895, 2.6506589574874635, -7.70876430995703, -0.07585395824968799, 5.324987961569041, 6.0887230514017325, 0.6738942584460297, 9.931901621681597, 0.7795751572743637, 1.725545221804616, 3.224929081435807, -9.622268886706246, -4.880295696492465, 5.131388358000798, 1.3899383311401348, 2.8936620109517275, -7.080700113051743, -2.1133374662057776, 3.6415954009529763, 1.1460262097721454, -4.534465253065994, 9.566900082793069, 0.9131341471860708, 5.523486695716944, 4.529295173219399, 3.445829838237998, 5.114968653885121, 8.216702790825241, 0.2358255576662227, -7.137381992471732, -1.0549753191768474, -3.004154901022293, 5.408379506588446, -6.99054742604206, 4.701340986193221, -0.5478987017572088, -0.3704225978733966, -4.692178763036157, -8.483289304761975, -5.8386784642237455, -8.284613542546976, 7.229612709980184, -7.1559073925130505, -5.309820168119501, -9.45053110731662, 7.9184406700088275, -6.625102036255653, -5.913816807183374, 4.947458502821419, -1.7827072744381205, 9.364169422790045, -6.044103946168578, 0.886330345372679, -2.4606960793096233, 5.937346378768666, 7.239504297185974, -7.772628047507699, 0.8026557920773936, 6.628201051223698, -2.030435303014686, -7.746188616304483, -1.8489702136868384, 6.932478932442024, 6.950722315148862, -7.8910858249324285, 5.641106205253305, 4.718416246270474, -8.417607035137777, -9.287350994303354, -5.25307753663796, -3.423760545267278, -1.7222998971461507, 9.662251192331254, -4.535326799003738, -7.11746042853135, -0.7141210775856806, 8.433108139984228, 3.1359116948293106, 2.1221779933744944, 0.9743567368164552, 1.3603727907884107, -0.7473629831912625, 4.6447160211629, 9.306857122426738, -5.047397263670708, -1.3510308136286504, 7.929415960384219, 5.4750946929890745, 6.995281348965555, -7.328788122936389, 1.3227032224991024, 4.737306301149998, 1.9929648972992613, -3.3290934518376814, 8.746193852401426, 2.5372302937471947, 1.1577040454458896, -5.563331434315293, 0.4267905778347174, 0.22204260257135644, 6.443828051267747, -7.361889812369158, -1.9216346340482886, 8.643275957417565, 9.071754606815382, 6.928418815991556, 5.679463661528549, 9.201953418359523, 2.812326731528165, -5.5862529317637115, 7.116692785710814, -5.9930380633163, -0.7569655275574796, 2.7319770022360146, 2.800293784762795, 1.4585749833000587, -4.322030442162584, 0.12803779988517405, -5.7121559452218325, 0.3372087381825466, -1.0611229821689498, -9.911295374005572, -0.6975527042212128, -3.613551289219483, 4.327356804760427, -5.038060474362032, 5.796501366422094, -5.716508112714571, 2.837908215443223, -9.524837944964272, 7.734188751411903, -6.316033018728047, 6.4390890617134175, -7.78625682286677, 5.1030673454144875, 8.028709827953595, -9.28584991075547, -1.872354425677404, 1.727486020624152, -9.884309568932906, -1.7760955674192243, 3.0654283180780197, -0.7481207311758453, -6.547207151352086, -7.891022509930985, 7.7025067379370284, 1.5883080391368836, 2.9454832616494926, 6.269939480002343, -1.3986748846986536, 9.909598991782392, 2.4048777203611316, 2.451977284864755, 2.958151420994904, -5.89501235101358, -3.645807160859585, 5.901199333098109, 7.1667524550396, -1.5569928771725507, -9.172798027380676, 9.091555887799466, 9.146996798337756, 3.780448988790468, 4.101687369738178, -5.201477913293382, 4.734098420673671, 0.6427615450120925, -5.987603439508524, -8.556013503797873, -7.402529898674137, 9.718063940581423, 3.203648336181944, -3.241092764304689, -1.9621641585441516, 5.201453374996541, 4.611110626351083, -1.479454936869388, 3.9060168527726784, -5.347142379340855, 3.4818303896116767, -5.412972674750822, -3.619181462090202, -9.947858232717898, 1.1091113127881016, -5.838321745101275, 3.3870115977583275, 9.469556182876374, -2.68428177209306, 8.128700666624958, 7.12250694860796, -1.1547379241055218, 5.992078141282482, 9.141337089543931, -5.676730737535809, 7.6908763613436015, -0.7194560968080381, 6.040465045085931, 8.92559313723963, -9.67173227678596, -4.403421347397241, 6.606426945623163, -2.6439270004292297, 5.148130243139821, 7.35597354294708, 4.682019047057558, 1.312094197114897, 8.206642143093891, -9.057124911504243, 0.6713841946174064, 9.96691037950329, -1.6739931548799643]
BIASES_LIST = [1.391661733968938, -7.220269384703579, 3.236222165095331, 9.019643009093585, -7.589032556352803, 3.5085724283775015, -6.471848124827599, -0.5205245916348424, 9.239679430743916, 4.742460774333473, 3.9363239872909066, -2.283899723142568, -4.019027937093121, 1.6820165020381097, 3.5346909562844075, -0.6429002310098078, -4.190075223231751, 9.094589244729391, 6.217234527592087, -2.728332178120394, 5.437647257188221, 9.274430468066534, -6.339880953877676, -8.54138875168875, 4.866463540641533, 1.1326900510879945, 3.8444812715320094, 9.85923630267687, -5.446064230017638, 2.04212335856964, -4.481711971313556, 3.174280683155759, 1.8488824637299643, 4.249529924866394, -7.151608188488319, -8.362665038710404]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

