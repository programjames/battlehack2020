import random
import math

WEIGHT_LIST = [5.065405879026805, 2.340053437704846, -0.3999735147918404, 5.636096004245575, -3.490142774698226, -8.478362445293532, -1.6095698568820396, -9.811903141674945, 7.623860980378957, 5.381640281369544, -6.829162101188224, -3.422355208740302, 1.4683276317186866, -8.001296693618729, -0.45214448526450113, -3.426834903819927, -5.825341378379094, 9.265628698647507, -5.15795280909116, 4.95204706142588, 1.9820891743879763, -5.201254155760353, 3.570676344261452, -8.92271943845856, 1.177273650983535, -3.274464095512424, -4.574401805621353, -2.752365094739244, 0.4723775910344141, -2.5736301420030516, -5.045705987333527, -0.5231503866152583, 6.324653784590176, 8.75595301106786, 1.6014590366007546, -5.108517978450058, 9.26299005646348, -4.0645892018244005, -6.174004098718515, -0.4579523874768334, 9.756978232326198, 0.1310400287992426, 7.149423553018018, -9.610613103388646, 5.560440759202853, 6.2419360925617475, -9.269778585700463, -1.4116688980191494, -2.262908326314994, -7.186367592455469, 7.918890525677028, -5.763931176415755, -4.762517701077796, -7.302421519678939, -2.9608440218260608, -2.6883412525147987, -4.18715297894477, 7.561701510016672, -0.6149693629246471, 8.264182161615583, -6.695740903336407, 9.820702855681294, 8.278422047275185, 5.251096554599444, -2.764699891380853, -0.7143561075999862, 5.763687584174749, 6.464577259080421, 1.3710174696211332, 2.7139444821174266, -8.537505619221621, -4.360081254776649, -5.609129613861155, 5.0943055384256315, 4.112241177756644, -0.8264910697587009, -4.532543444877984, 8.793109648444577, 8.17829079258945, 2.766753031438773, 9.705946927881016, 0.8138960170315315, -5.144913165597735, -1.4726214936628033, -4.790398252003687, -6.933307010242755, -3.7446610218980663, 0.40542287028681834, 5.76751900789839, 5.079934123813549, -4.180333334330544, 2.353613499316527, -3.166053337001726, 3.7743364410508935, -2.8894844182901203, -8.524449192697134, -3.0417116177434123, -9.034544067249788, 0.4754213134944223, -4.406917041438065, 7.770560446903293, -8.17995486380837, -1.3614565787224784, -4.927158147859423, 4.080371546643873, -0.32687205918944784, 0.4272552127366165, -2.785925106862866, 1.6710001155634142, -5.983240545105377, 5.7040990787583645, -5.422399522624975, -6.777911011089872, 6.564985560467626, 2.714225344789975, -0.9750464835052224, 0.9040286904287811, -0.3553443516907624, -6.609370403246251, -3.0505722013841456, -5.242129118050352, 6.582246155379771, -5.952823577284807, -1.8100609218371329, -8.39781709115811, 9.981578641204003, 2.2026642279451636, -0.7484255734324492, -5.016725196075271, -1.5740466995486369, -7.8440178370614415, -6.547407119006179, 4.189870837417809, -2.2542940033155308, -5.389218504927715, -2.027584705372629, 0.13679093462933345, -8.412011817326452, -0.9477551908885662, 3.1186013306705025, -4.437820541129367, 1.6637196123151128, -3.0914239932483873, -2.8086411499597137, 6.820733842429682, 7.4994213395644636, 5.852592543571294, -8.257424435563225, -7.439249277078872, 0.13095580110726246, 8.850799136794855, -2.3326787339443626, -8.462514065106259, -9.214207952788767, 2.9475214094833895, 6.090587296595945, 3.979153426128292, 1.2677282390974653, -2.7228073990638997, 0.9082488688371768, 3.8722838751171995, -7.908197937821262, 9.590065754224526, 3.0027646366620857, -7.462626571863813, 4.493894509057075, -4.239795806932733, 3.6081320295474466, 4.913323390356725, 8.301355612079718, 4.352605346615682, -3.183918798698806, 6.952153228296858, -7.0774205185171475, -8.160112244842303, 1.8409699110793873, -1.9346855213521597, -1.69064786628984, -4.955542310978913, -9.885022379866626, 1.9004478455570606, 0.938160840342622, 9.62116431152219, 4.728775657640771, 0.43489055746670324, 8.498341201124859, -2.1479381653837004, -8.53693976860933, 3.2866231182750916, -8.410084602484586, -5.897763792357507, -1.927520411742572, -4.089288344867739, 5.6416389681737495, -3.3636921713390215, 9.251076213641753, 7.8374843642871355, 1.1596932435565428, -1.1644078390938368, -9.657871993856075, -3.8660686228953693, -7.202315781696504, 3.915905462275841, -7.898701188928278, -6.731226120482107, 7.44727171619402, 6.850651868359321, -8.37038680058438, -5.618049681541621, -8.572797426968432, -2.7020126240827125, 3.8547465947968735, 1.9098933282652748, -2.6884714559630796, 2.7486980893175783, -4.629013249118376, -6.980130795807346, -1.422708565976862, 9.814037071771267, -1.9625616749989447, -3.371447670002312, -6.174622933669629, -5.742298355645074, 3.5001685129616043, -9.504337442037729, 3.4158943932769876, 6.766381147522175, 2.120186095958731, -2.0690871243307285, -4.428798256066104, -9.575397469434703, 5.87616919405453, 5.004759592446382, 6.772280346680148, 5.996044474591864, 5.90727724967817, 4.785735419006347, 7.0250972622309185, 2.267862785087134, 6.805168869490306, -3.8264634007270404, -0.15317541466284723, 2.7875969740699347, -2.561011180255843, 5.920752544691595, 5.598987570438629, 9.709774278191428, -9.178512448124149, -4.605189732165609, 9.89034250433643, 2.7100874298314555, -8.0850185448811, -0.06248437589124123, 4.433126552063364, -8.542878884003613, -6.234722118702843, 8.227891413940277, 6.1069252630767, 3.7237030389746746, -4.465693742524392, 0.10695102900701059, 3.7280497554489944, 3.642558815014125, 8.757973697082143, -9.946283151976761, 3.0259544490115147, 1.9049838235050487, 3.4421958705602744, 9.38957899520316, -1.3560011102168819, 4.340265842156699, -9.102194050559035, 9.466562960319596, 5.662099831607232, -1.626522507109387, 3.0468503636210684, 0.7748590455975126, -5.658200701131717, -0.6987171076297205, -4.933679817669237, -3.720034834898998, 3.2806898437295384, 2.115530550562072, 7.400971710858588, 3.1170628850288473, 0.2972451425357292, 4.891836278228078, -3.0177394726228624, -6.424696920150321, -8.739266914027297, 4.312647369133739, -6.31656155244102, -2.556461333886766, 6.31298243517039, -8.28132396310735, 5.054627950992163, 0.6878301359121597, -0.5093236431065478, -4.670912821245139, -4.2469641825256925, -1.1475511482714484, -3.3959188192923495, -7.345327497908663, 2.5841354656748514, 2.7355866064147154, -9.008021040235885, 4.254617061219253, 7.352445480746358, -5.864878259764046, 7.35655957763278, -4.264062873106376, 0.1622035979872649, -1.0795622710743515, 0.06031425871825924, -1.9625020573819185, 8.689541618609077, 7.538986559928901, 6.018910541072785, -6.846413437703114, 4.490767091486237, -3.255382267378457, 7.8450373428776, -0.5122479269875964, -8.244396453102581, 6.7920025632793966, -1.9518202693352382, 0.8654600535175678, -0.7075035467414725, 2.923055241185409, -8.253036727291006, 4.632322414103969, 0.2673816143575731, 7.173442355334323, -3.3465938332389955, -9.949020816944563, 6.7369954876559, -4.997501940103845, 1.7236938207552441, 0.7885607433561219, -5.714774231862883, -5.497997058367923, -6.395163723061332, -3.284029535152005, -2.2080546967299863, -5.488173558018499, -3.74706508398803, 7.2581588927730465, 0.5603676354586504, 6.845137512772844, -5.777822629402689, 3.121612351960703, 9.984207708112173, -7.36495651516782, -5.0809316941315235, -7.577439431868198, -3.8241581872594876, -3.6435420916158563, -3.514372182345433, -7.962757042977183, 3.189277488491717, 0.973513903206296, -1.592336353060734, 7.937682232023477, 7.025154159587785, -2.2928913530983337, 1.3788334451797546, -2.763784057233849, -6.391645113042383, -9.530536114084345, -3.852456054181812, 4.782678054777964, -1.3356837712084424, -8.511891189411271, -4.117804969594687, 6.022359924633786, 4.224808269422171, -4.752912714773441, -8.264745829657162, -3.3701218191508424, -5.442312703106018, -3.1818742796295236, -6.173239624114886, -0.9028855388827495, 4.387400925217197, 5.196446061820181, -9.796400228587032, -6.296644283601038, -3.7273199839630378, 0.981430429136001, -8.426794633878991, -6.0022082612202095, 3.881015748249739, -4.805512125757283, -0.6594024531451925, -4.666353282233313, 9.973520884348716, 7.2570753975976565, -0.27816410668864755, 8.391273777424797, -8.138438242885384, -9.664099751789488, -8.833678688394267, 0.7953492501458133, 6.578862937651678, -9.786955264239776, -7.651709016208919, 9.780904451871702, 4.188104570114028, -0.7498790814425611, -1.8339104832222723, 7.126901148649065, 4.234072734932422, 7.979011145498895, 7.9187933646657775, -8.191812885486872, 3.1592440760424516, 5.593780274386029, -4.1154376987628165, 8.168607723151819, 5.188897548744077, 5.9522681761094205, 3.5521504685670973, -8.259240464812347, 5.844646749684069, 0.6110660090723581, -1.495718952406179, -7.116137897441366, 4.18779199615207, -5.075816599309205, -3.632275769994429, 6.401655111517737, -2.7811390037572643, -1.54693133087315, -3.0232649115405614, -2.8381878576825237, 9.003568197326892, -8.787428459841461, -8.384091060619607, 1.1616508506506165, 4.558327353261779, -6.330536713907944, -4.1182086782076555, 9.064206462595667, -2.5187617378767735, -0.3163324654137263, 7.869737536941571, -4.41845026218645, 0.627897376497975, 1.8088079301634181, 9.1821536775835, 4.568054912131668, -5.470441902180658, -9.692570068678162, -1.972447364865836, 3.3616185620805723, -1.7641712093943376, -8.056005982639302, -6.375543468783247, -4.844678818416939, -9.385194264290257, 1.8869964713070537, 9.797289091779817, -1.2059707085501898, 4.7040483930274934, -1.0102435134062144, 8.506691799067887, -7.592524740399915, 8.561244035822824, -2.2157781973129893, 0.9887045628166984, -6.519781348188145, 2.4790113513229386, 5.049462075070252, -2.8783091468866555, 2.3267141378628704, 1.079766542209967, -4.607561975309464, 5.388518589540222, -3.556485787176296, 1.0463490744153354, 0.49092031271460357, 3.987885069419658, -9.9693302532955, -8.48603815203594, 1.7098385684776058, -2.5626663943748813, -7.012653799961123, 6.224833518464038, -5.518328878839847, 2.121065991800279, -0.07830062902400314, 7.629898493177965, 4.709247026207592, -6.510754187225771, 5.2280776948179195, -0.8317722046821849, 1.046064650586267, -6.425424737042231, 4.973440962213564, 6.407628922833219, -2.938762968761603, 5.9722619668668635, 4.71627641350846, 0.7819965916970233, 2.936869507080363, -8.82019408166338, -7.793308399574799, 0.9428790099789346, 7.804403425243368, 7.016006158102076, -2.467550343608065, 4.720528736418144, 6.266424082500869, -4.152991097944625, -1.673010603516424, 3.0084374985486324, 8.783359468942066, 9.865164387039783, -1.4681800216465195, 3.2885324223495545, 6.97259280422017, -9.848017197678372, -1.4909291518770384, 3.6605401044050456, -8.60873896900678, 9.333999099562106, 4.130932102080166, 5.751104051767371, -4.5643098534606, 5.228722423369909, -3.25729416978265, 3.4697825841460634, -5.492709772446862, 0.3703157758207247, -1.7311405862832334, 2.3307076443619046, 5.07813491146111, 0.34889054913649176, -0.8534270433912852, -5.4207624164086, 8.054145735986587, -5.712601787999365, 4.8687172831390235, -4.718432808637887, 6.8314936351038895, -8.194254167190927, 3.3679848013470064, 2.945951121694643, -6.300227834852265, 7.9807888245364325, -4.835152317913662, -2.0621006484562177, -9.642891721078438, 9.172774846337155, 3.878458608202868, 6.493651114750065, 5.573868641679658, 3.303277231311357, 8.162621469727661, -1.3789545199070226, 3.953524166810107, 9.285726470266091, 5.822192899287762, 4.645102301612322, -4.048488184661312, -5.697217670318693, 2.231812517569489, 1.4512060629553165, 1.2346572453998768, -4.268190526016456, 3.4982397645460335, -1.7616657279094277, 8.682801799646402, 4.955810704321493, 2.1761422059335906, -0.5962533390843525, 9.10355964683514, -3.2256629704063178, -0.6503401443864494, -9.061419247278856, -0.5147484122518868, 6.035167186862246, -4.81540894526203, -2.1724439443049404, -7.9779143392344665, 9.030247014312, 2.42923232381467, 2.3348997808816403, 8.701274019054576, -1.559340369256324, 5.548619301166113, 0.08644870946938177, 1.1979856733671852, -6.990308443423676, 9.390826369676013, 6.47884288104159, 9.219644140365702, 0.2440646636339654, -5.381647362723578, 1.7135515468609128, -9.545092881875348, 6.748696155207149, 3.0165102222234843, -2.87356078268044, -4.545197915410397, 1.3826663210022403, 5.966168473220527, -7.847591606094076, -7.039965707233346, -3.749259609346412, 9.501911367951653, 3.6202359012536167, 2.649345519744088, 6.511992042806284, -6.586544114754053, -1.5769250181519823, -5.14485543434742, -4.6296105905331615, 2.9883966300820664, -5.857077897482639, 7.343546834030196, -9.481602986181198, -6.039988775428283, -5.960611535038398, -9.115941043298045, 7.784073340779731, 2.6562032722830136, -7.261395886268771, -3.2659807127627305, 8.475041534099358, 9.960961737805697, -7.301207838858128, -9.375598829753496, 5.282549863668564, 2.72254502672242, 4.423797617241984, -2.491710859904572, -4.323469072428702, 8.734086822227344, 6.029046631043521, 0.9241931657699087, -0.8819245729104317, 2.2195552379726564, 3.1251690036677804, 6.275725890673499, 4.907976382078175, 8.55139219296974, -8.16093950800006, -5.166902836680521, 8.404720784276812, 0.30064118511707605, -7.5088467557251715, 2.381059834312664, 0.8915520658816654, -6.594464854486275, -4.604203682840673, 7.218476208802816, -5.920515787579921, -0.7984043511404586, -2.0748143696417287, 8.93202388518868, 6.61343719413831, 9.49825393367572, -4.89899787274344, 4.989918394134413, 5.894616935481382, -0.8483361852748867, 7.8452831919483685, 6.684639155160475, -9.347350146210387, -5.738216657225454, 3.1264374006218443, 0.8166364396996286, 7.738659250479344, 8.32765396710164, -9.814085965906685, -3.137149686116598, 6.5281653092141525, -7.351806784210151, 2.7974327469028992, 9.177657536852841, -7.902124854171122, 6.360550404393354, 7.795462227793692, -4.899948169491147, -8.201277725716384, 4.493963452669856, -5.426066879066822, 9.201772784291187, 2.7395271729611537, 1.827684735387754, 5.028432859888781, 0.16889737181349496, 9.170422330931544, 7.380984311313757, 7.946082899564317, 3.6734281886256035, -9.318995340539313, -0.4178822727638405, -2.2729248776072257, 9.627815369892776, -2.117321724438936, 5.765898174239334, -5.77165275649625, 9.424262351215106, -5.344229949902912, -9.192367704173211, 9.268581264162691, -0.7735924074957659, -5.030315023137706, 8.649919275596762, -0.3620355650851099, 6.919478883075804, -9.797484164068402, -3.784672196919452, -4.518489963305441, -5.176221642248651, -5.275097535586006, 5.769779315530732, -3.9530903071763284, -4.166794280496724, 1.8379161129921524, -6.355520629728348, 1.1292552218472185, 7.405158084282299, -6.100193823588627, 3.3647644987838987, -0.956444009003663, 1.0845998806026138, -2.6378231871445728, 3.7208211615388116, -3.9700280831131485, -9.483880833352922, 5.0613694524899415, 3.827844742629294, 8.776924397952584, 9.254627169513476, 3.951363954539609, 8.697846189098058, -4.245242817311132, 2.877336991068587, 7.113193231636721, 4.260927971655137, -6.805246634957413, 7.7201345495237845, 0.17550169618831113, -8.58806714660074, -6.921805831445582, 9.947975984939184, -0.4445897374517749, -7.23914441808499, 4.7887619246819995]
BIASES_LIST = [-4.43233747026736, 6.661234804867821, -8.042870273385741, -9.004700210562177, -4.806570897942361, 4.76752621015404, 9.93799945779941, -9.301093159087824, -2.0618446432093807, 3.195884924926453, -3.6044658145065123, -6.682359791632935, -8.035161363326823, 9.323349229693864, 9.693413722063081, 5.476157035865789, -6.398042531603016, -8.494776206892247, -9.041146982441497, -8.162070182238704, 2.828794125282144, 2.3944067700867393, -2.5822671781570072, 7.531755471746241, -7.2825737962466714, -4.309545034295931, -2.4815982574779945, -6.674269271764672, 9.163667796231827, 7.845472227438233, -6.412243869715408, 0.5995281245516146, -8.353953566856813, 4.354832383310637, -9.155534634327937, -7.855593503755777]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

