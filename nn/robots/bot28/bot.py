import random
import math

WEIGHT_LIST = [-8.233523491855433, 8.63004662510761, 3.8116956690695325, 7.149759437659554, 3.095918937410369, 1.042730396955978, 8.499583061790972, 3.6477426453680586, -5.3007758324904035, -1.368659930379966, -3.3619472879173085, 6.868595055356984, 8.778823919033407, 4.8158937517372085, -4.099590854890199, 6.904389837542723, 5.149646700229928, 2.2419663772408978, -4.104293438202376, 2.603161663813358, -9.499651928747264, -2.3209095939706774, 3.3153271377262747, -3.693635513932179, -9.439271638158077, 5.085497390731851, 6.3724138634089975, 2.2633447918718126, 6.548472808981295, -0.9935435795424397, 4.476965075705815, 3.518572087218949, -6.900606888235899, -1.3951020540908026, 1.8628350619537315, -8.688152506007299, -5.075459068683362, -4.079524211674834, 9.69552420502923, -5.580475425059426, -3.401019495364168, 2.7216338377587324, 4.308129458659355, 8.725607940445354, 5.949161854424974, -4.1840313676472585, -4.331322863331534, -7.3754123707219055, -7.4357355304473955, 2.995562463028447, -7.876796547515044, 8.43726025524472, 8.16520592710782, 7.713639546429775, 0.05344083501361396, -3.4836680952758066, -1.5330699154892162, -0.9682599740787783, 4.349074386755836, 0.036771013373730455, -2.0194310837484704, -0.3253518998616389, 7.734472497998727, -5.487360668565788, -0.7622770832671684, 7.788488950498554, 6.043197255287225, -1.022106241431871, 4.303225693073028, -2.2303098418552185, 3.049518962015714, -6.03949757694725, 5.009772371057785, -9.322531452198145, 0.7238873149771479, -2.4172116596957167, 1.8291505889684245, -5.0362255999798045, -3.260206800385566, -1.409724829674861, -7.312480734189892, -3.1390294255626205, 2.347370866164402, 3.9737148956160873, -9.515989280700058, -5.58357774708238, -5.767824323800621, -7.947583574403197, 0.09804203169368542, 0.24213531359337992, -3.935090170426829, 4.9879508945117195, 5.722744329225449, 6.309707655880146, -0.004504578057888509, 2.137248067684469, -6.02256996230169, -4.53155162483265, 7.0047978538948, 2.84281894092935, 2.3821237090769145, -1.175933281071444, -8.725565008242306, 2.200535157553835, -9.701435846505618, -9.783468577555457, 6.21706303507327, 9.709174890818673, 6.470579710400337, -3.75950077156374, -4.418510175740662, -3.8721257783333645, 8.127108650060862, -6.785792381337961, -4.699963764480297, 6.905598057205864, -2.018715509666851, -6.707660370696356, -7.721603417955527, -4.737761975843588, 2.352920531325033, -6.772815740863932, 3.7918943582176308, -1.1404116463266156, -9.263323365072566, 4.765187951336433, -3.424178302293721, -6.840372092345954, -2.8895543386847056, -0.11167907239306452, 7.505868545031586, 3.2974198186071177, -2.7281858140339548, 4.920914720647664, 7.001842349165642, 2.47547901581971, -5.582718181677642, 2.6827817020670217, -8.450325249922916, -0.4359191567634131, 3.2697923152595614, 1.4809961153862616, -1.6554469299629542, 8.939972693110285, -0.22379846604362186, -8.028932240531239, 2.3314228729296183, 5.164479961751097, -6.2598281804868705, -4.011007621263543, -7.583357777541757, -1.5936332791041536, 9.046554097338976, 4.810174450785375, 7.224432892137983, -3.0238654817958626, -3.107866510867554, -4.129814528538551, -5.063009841904962, -4.335668040602878, 3.3544824109120235, 2.887230698034095, 1.8001210014407558, 9.687450112893796, 9.635897498927172, 2.23940976029456, 2.8418895231686196, 1.8842624816866582, -4.563768119192013, -6.448615211888534, 9.890088726061514, -8.690905372480401, -8.844518138345766, -3.485007014575956, -9.626727678226409, 3.513108551986882, 9.956321040419219, 9.237813374055591, 1.3382688304704633, -1.409584394799257, 0.11198468882434476, -1.5301534460189998, 2.847218805946687, -2.723907888155188, -7.4571399924665265, -8.54206520588949, 2.9471740408208333, 1.388270559677597, -5.4970835799981055, -2.828201055326285, -9.661119644966343, -8.132474525338395, 0.9724731553653143, 7.503477620125686, -1.7834619257243727, -2.936746088078179, -9.221144503032106, 5.398533141014534, -3.5694399862684385, -6.841319684622357, 4.557247689887443, -4.564354774969583, -6.04889445699315, -6.445460521023478, -3.860651150324985, 2.038239640973412, 8.825987312128984, -0.4066003074853146, -6.753227383598867, 5.053165814490637, 2.7272898048415435, 2.481985532540577, 9.794413706109545, -9.94087109457464, -1.5594439193391256, -4.740254538120208, 1.2673092232193603, -5.331240406480573, 7.535486900617652, -8.664967017272854, -0.2459267368909117, -1.465779073199105, 5.112846481919327, -8.911912999314646, 1.23122329353005, 4.01477524666114, -8.658729232674895, 2.6503277667215404, -9.553426222489092, -6.148647448787692, 0.44405499287178785, 9.84836151365257, 0.4524833220540696, -9.47586639910216, 9.496940392957281, 1.341784374484714, -6.106282960468244, 5.2715934595281055, 7.973647624647501, -6.238031491563203, 9.045028021337643, -0.9515616379759511, 9.449131410753754, -1.3409956219787844, -3.4362877059925223, 7.000102416563841, 6.176828178511865, -1.6435772709016625, -0.36475961533400714, -5.761754865175983, -8.968367755327634, -6.208601160741772, -2.318166002804123, 0.9224149418655401, -6.4191111818246105, 1.515268563566126, 3.2617473018058245, -8.243869913964883, -0.7393146440189486, -8.865762606805113, 3.3479490977551567, 5.32643260857432, 1.7788569703396249, -9.897968311978595, 7.9158510270926605, -6.13762935267566, 1.861700624179342, -2.6671746992141703, 6.625623228933524, 8.616576396410792, 5.66170792709379, 6.568918310771345, 8.806422030436451, -3.4052118747164357, -4.188039717543708, -9.229981152096034, -8.415082189362854, -6.4313377601206545, 4.50085833403236, 4.743140488581732, 2.584802505344605, 0.09659687148019636, -6.227436499698378, -5.815698146287973, 5.999950325806596, -5.024796773975937, -8.094935402688597, -9.023981751693347, 9.593044001662147, -8.95464156114129, -3.3869429267084383, -1.7691214887218614, 2.3857215349355076, 0.0033578885402576475, 5.075584220341206, -8.145008023998228, 3.4666653677114994, 7.2690283782852525, -2.8301552680429882, 1.545050621229958, 8.353302678797142, -2.9125826010201505, -4.301670497502547, -5.442810793127222, 0.685550399796405, -2.5279960474621337, -2.163934885945582, 4.325906810202785, 9.970184585838403, -2.9426114886542027, 9.057480473869784, -8.586975865856703, -1.383967111333373, -8.169689818950932, 5.825663687439098, -5.994748919869279, -2.403603121711466, -9.468806240770945, -8.631253780841037, 9.612659408791725, 2.649738752899321, -5.506483623754351, 4.347364070071539, 5.225838801050651, 7.022956552066319, -8.730653621860263, -5.112807249088984, -7.803184250508577, 3.8217426395019576, -4.233014152454051, 6.970577272428823, 3.4739139596130073, 4.884135159259994, 4.109869612351556, -3.9412243353263072, 7.089230831241814, 7.577700340896957, -3.767981391692996, 9.89995965554288, 5.535571669403277, 2.432603968274732, -8.24942288604798, -0.08894256626794039, 0.17652623110043208, -3.6915748264310206, 9.039280927157321, -7.125301364305234, 2.0286154526059192, 5.346333472981941, -0.8329009513277654, -1.0549153415479502, 9.318207543115829, -0.48536440221461064, 3.7683082219004547, 7.309535813107281, 0.0295312215387451, -0.5860004400070746, -3.3119209958546802, -6.339469252872316, -2.8192994611175255, 6.112984161007745, 7.5067199047446955, -8.302798816404266, -3.838324679777683, 8.70387932013514, 0.22026646537793937, 5.530698256864834, 8.442505221487778, 8.34730486048689, 0.5903002274720848, -2.138612280713832, -2.4069093998186997, -2.535087574833357, -3.510074296898493, -4.751806108229111, -9.919717889385531, 0.8063108043139131, 8.035605095015907, 8.03789217392691, 6.1173666993589535, 0.2792789004638081, 8.627062443489809, 8.735492086750021, 1.01303334322429, 7.773234688671803, -8.82798555671324, -7.290124069974702, -6.873747801030565, -3.606172576522228, 2.570589365588031, -5.211127399136901, 6.217756927647727, -6.794555607974342, 9.806509997044628, -1.0852186561709125, -9.205089166021022, 1.7366479957182346, -6.31739233501984, 5.622336430156649, 1.803660514636988, -6.23278673491293, 8.426576550016307, -5.824700853534946, 5.05119479723621, -5.963476098381715, -8.39566013439531, 7.874133414516468, 8.130409171988514, 9.15591246243471, -1.1816312199084038, -9.413885618135717, -7.459497555834522, 7.81092785324693, -9.577352698706115, 5.686591923667967, 5.357443403406492, 6.29697565587378, 2.74063861925001, 1.1770872972794937, -8.54990122791807, 4.217211020438313, 0.8794736400023311, 7.260395749564449, 8.3896594181371, 4.420235422228554, -5.3359220695564735, 0.09314872644595518, 8.518389443966939, 9.469874991251615, -6.591851278251097, 0.4796092416577107, 1.882601006846878, 3.5582913969584915, 6.3851762440838264, 2.666208078254373, -1.0787175316633313, -2.155128414468706, 9.530512541877634, 5.580001765169369, 8.28594829133489, -4.1096329976633506, -5.6140187169958855, -8.108485770155337, 6.950227439105966, -5.296648482445385, 6.938269328175121, 8.268010327332426, 1.5070339311298735, -5.778561706391527, 7.467085187995433, 4.627157025604012, 9.844474461947303, -7.116840196641043, 0.8232995097491962, -2.2519893109260742, 0.22371174369119018, -6.6995837583265905, -5.9675467804837545, 9.745164639046259, 1.302867119957419, 9.787777954160383, 6.864081429964688, 9.761481242399807, 1.6327444779285205, -6.069372549760786, -5.976549706092289, 6.226814817041003, 4.377710046358143, 7.251165967658185, -5.830236537819651, 3.915223789613121, 0.373767029419545, 8.401423279141262, 1.4751557850536834, -2.628496768011395, 0.9149030827168065, 0.20496320856300976, 4.614559768953967, 4.395818662870958, -2.2729791194534226, -2.509484122285972, -7.3818046665418535, -8.884562077370497, 7.356038780095545, 9.695046595229812, 7.720664231525355, -0.7355528647376453, 7.72580115334954, -7.4977604169594825, 7.205597962654785, -8.1935322748819, -5.141361860695335, -9.331670122569207, -9.161487707850561, 5.64645330492449, 7.074035318491816, -7.221389496517379, 5.681278273012973, -7.759517605087969, -1.2568079638323653, 5.343839166677784, 8.514121670853708, -0.3903089487591096, -2.115938434031561, 4.7140472813534995, 9.260461180283851, 3.3404811615913843, -5.572065966565509, 5.726721708273967, 4.327736886599499, 0.27861846178289795, -1.6362906870315612, -4.200860285879971, 2.241286248924329, -7.39971357970253, 9.462776127659538, 4.600760207384152, 8.179150657564335, -8.101532829011823, -7.567451492322359, -1.7276280596625497, -5.155698980129904, -0.5115146628878158, 5.559076863042643, -9.754465447230272, 2.8775816453091814, -9.187747640099328, 0.43114892741273536, -5.715087649169739, -7.5150764001410275, -8.417532214895866, -9.659669028118952, -9.33090969574965, 2.5747677514431757, -8.253238072167521, 7.653002175858397, 2.4867145685957244, -2.8422913075994156, -5.410329813318797, 2.260452229932861, -7.897904365634214, 4.108418552002464, -3.893788401640119, 8.276308192190388, 4.94054521415717, 2.7999597333800956, 6.643695009184643, -2.736031699148027, 3.4568780765476674, -3.498842587256288, 4.531847657848365, 0.6337578425094073, 9.533392560191462, -9.120598777609878, 2.6555096451811018, 7.741840133381412, 4.854549261044674, 9.05286177601511, 9.233577427107583, -2.746062260895439, 6.158839772523962, 6.364715766928594, -0.9350093030514373, 4.918115110663329, -6.607070647536048, 4.890831849853587, 5.250998749758931, -2.3434552363208505, -4.2141636286657285, 5.164460504546117, 9.838313704689789, 2.7992602004158265, -9.871137678301718, -0.7183121750742298, 8.040883306659662, -3.9625536416747753, -7.47193171825611, -3.1111404617056504, -8.108806251771517, 9.333980308039685, 5.971740479382996, 3.7014379256916143, 7.481263460964563, 3.267602232331022, -7.0668440566489865, -4.60174030913535, 4.313965354955771, 8.285360199211947, 4.5350992645927946, -7.45599460371116, 2.879238903075219, 2.578134332093862, -7.151209405208374, 9.61353820228313, 6.5235549887788835, -3.3985938837061376, -1.741836232205662, -4.229565731752347, -5.1270157420485525, -1.1669823809970516, 4.493243585468784, 7.553485246250826, -3.7458541287136438, -7.88607949940536, 7.70539364695729, -8.101274472440211, -7.9884229393296895, 3.873105696365492, 9.88216452643627, -0.9352710095657528, 1.8571628822928332, -8.028166275979933]
BIASES_LIST = [-6.198065879768169, 8.346002473142626, 6.0045716571613, 0.9865512080283025, 6.485773397013681, -8.209951997652333, -2.9188583371071157, -6.3649758443377795, -5.552458418536473, 5.820002124046006, -5.516724334485774, 2.353650321649269, -6.1483489923170715, -0.6986508765759876, 9.078597189341028, 0.9362456553416934, 9.96835592048894, -1.7604700540733589, 3.8664019018948625, 0.1231652010163149, 4.100312991272618, -5.907755723987, -4.016381387017649, 6.828797565702402, 1.6281374979037473, -4.082390968924708, 1.8915013767113251, 9.740918198562916]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

