import random
import math

WEIGHT_LIST = [-8.508060742378163, -2.5787128636080405, 7.282545404950706, -0.6640949248325791, 3.9989505185656733, 2.129780495030661, 0.13034670336054882, -6.703988691052666, -9.390599728471882, -1.556407462591234, 0.056660067637493094, -1.7023313288399096, 0.16727278110290572, 1.7427126583187802, 0.8406176652739241, 4.103940551545844, 5.338911901048834, -4.82118125568665, -0.990075091760444, -0.2875223521096817, 4.114760545703748, -1.26345874866101, -3.495368841878837, 5.548454037439393, 2.0225812017807745, 4.825205255889894, 0.7688741233642082, 1.4748351165320255, 1.1841150718105158, 4.125238607351258, 4.112688536958026, 5.379257838291655, 1.2103412689345425, 5.5061653025126684, -1.986155375715483, -7.031362000875661, -4.279282532842626, -4.928562057631639, -3.8360939723260468, -1.8660038468343, 2.0672304557538994, 4.766764072499044, 3.9465534857605813, -2.2789362233490476, -1.1952340904689616, 9.149801004661848, -0.16839250185833482, 1.2291882329298192, 2.9192833786335326, -0.6327046561992011, -0.8544891379641659, -5.874607423383782, 1.523324940686548, -4.697555335429366, 0.3320482906313888, -5.882417064320191, 7.6889138307180165, 0.576180984694175, 4.053116099652839, -0.5014245375115123, 4.650817169754323, 2.0711171413092155, -5.08364704819015, -3.1265876983559293, 1.1192733998132647, 3.6064240265627103, -1.217447668682501, -1.9419944964252003, -1.3381452763572053, 5.931386398817717, -2.9060218054630633, -2.350282661524146, -2.5132154626436636, 4.989097836714815, -1.5093024289250458, -2.51530528850653, -1.5390253930127058, -0.1475259838462029, -5.16168463258205, 5.841723390384416, -2.9427487720037164, 5.185519965942772, 6.150293867281161, 3.8307533757256187, -7.464080200987883, -2.2937647274298327, -5.5839127493301355, -1.7554398348412215, -0.4791957239966358, 7.786864204232459, 7.421098925246101, 3.6118267725619844, 0.9753153235205629, -2.441991105223524, 2.5898536610743474, -1.9025550488979974, 2.7841969432896985, 0.9264267923257099, 5.9972929423065535, 2.235718527668956, -1.5584879690293896, -6.566120490599041, 5.973408198702335, 4.529562892118099, 4.429536497643264, 2.0234653502032276, 2.907789332476503, 5.729585692670863, -5.038230891133143, 3.880890477345486, -6.644823626359585, -2.894651629177019, 3.545969539762522, -2.574408327918482, 6.025712872221395, -2.5736658952183284, -9.98795754448464, -1.716590785360063, -4.690269841415057, -2.363756355074418, 3.614592069995816, 0.6428080483518277, 7.19920311084833, 0.2370521112095813, 2.306080797423305, -0.3596529345330165, -2.720422962747461, -2.882920406485885, 0.7238456708606469, 1.605280433548118, -4.867981593784718, -9.644857446315983, 1.5848321194211834, 5.946827403311847, -4.643340503024721, -2.010712202066784, 4.032035107035507, -1.342000929912883, -3.757752375598359, 0.238346022776381, 2.276210823167292, -2.840775358001312, -6.908122859663978, 6.908381094279505, 7.255683995972421, -1.5239678222595179, -2.4694783501632984, 8.253138240076845, -2.668757522402435, 2.413896393990136, 1.647887479461131, -4.078522289370391, -7.151713084251422, 1.1400768036686455, 1.1499087405859196, 0.522684129624277, -4.0351694175272055, -7.242120785284423, -5.714035047295283, -1.5852444287420122, -4.681239406545727, -4.193285336690611, -3.011997454181988, -6.458298591997885, -5.223164703660086, 7.042690533208152, 2.2820055345589503, -0.29380810503035326, 0.12608480560900553, 1.0080743736847642, 3.1349882269539573, -0.19869798432452423, 1.8396501114020003, -3.003288299745383, -3.9502219008717714, 2.0133154926508556, 0.84774439679893, -6.293128257644116, -4.66561609945696, 2.0381522721124803, -8.073171498344996, 8.67707763731981, 3.513774781198238, -5.212610898693942, -4.352875308100648, -0.8125846551512799, 5.380048928131729, -5.379631089714263, -5.216523351327467, 6.960631679868643, -5.000684866784191, -4.94489676410125, 4.671792232155843, 2.455062112183055, -5.474886731376141, -5.435075176216079, 7.078026059196811, 4.043400064149696, -0.10154437098561925, 7.017836509363351, -5.157970814776011, -4.507877311146827, 6.354541720421968, 0.7452923635125412, -0.5776576561186997, 2.4598852506551667, 3.1574467500671375, -0.5112891082804341, -7.427687739785449, 7.469464365208179, -7.297796243199831, -2.1172759623407438, 1.2661860728442673, 7.310803700386105, 6.086760323220656, 5.762686562227472, -0.4997134234749523, -1.7985316052113742, -2.8467121690187587, 0.524855469351327, -2.034648417800044, -2.432918923465497, 0.47086335074959146, -1.7158974336501318, -4.221879273707078, 6.365707074821692, -1.1370393427241239, -1.7933461187770119, -3.9849694245112666, 2.767055577760049, 2.470702305425355, 0.5385661731709779, 5.984923510579638, 3.622152091688428, 4.075379559152127, 0.7240677657650452, 5.472056805843223, -5.864593119328336, -2.686947496480189, -5.458699408879286, -6.18547620330353, 7.288603345344014, -6.92761999982103, 1.6246862585107213, 0.27906258027694547, -3.001836565900811, -0.18592457481456948, 4.227111056375099, -4.15351686780504, -7.414186130253643, 1.8935030246607272, 1.7405872072848219, -4.696980311408125, 6.03757311221537, -1.370377790938195, 2.0618645108593294, -0.5415653288136828, -4.343575812795648, 6.310616334387595, -3.970567096117809, 5.689855878662413, -4.206081254593366, 3.164706240254923, -1.4885705910812468, -5.378387406746747, 4.412784772557414, -2.926808822107825, 0.1853828542563768, -8.170829342438843, 6.770250988053341, 3.292731797787732, -9.466785419549545, 2.246146741553413, -6.7051512226131855, -0.5295420222469004, 0.38593512151793713, 5.699347191201669, -4.442226714741464, -0.9296897361074732, 2.7627157175072425, -1.3280350073724096, 4.057437515948659, -5.8467976280665175, 2.7926949412714666, 2.9025115856131594, 1.4868187076782118, 2.3869066261587277, -6.188873065980686, 10.458875497265625, 9.050486960232586, 0.646493921034524, -3.972172379639984, 5.885261966386443, -0.7928577559941972, -1.150705488047994, -6.038975970531169, -1.2141105059759787, 0.37897344075057376, 5.214051387313396, 2.6578577628210662, -1.642579919491273, -0.09056211095350442, 4.995579506577463, 0.3981395487169152, -1.6889580579192076, -7.29661381252829, 2.237223925975528, -4.180287135291313, 1.4352108491581779, 3.7373909885626975, -2.2928602621530154, -2.0653405031233056, -7.718596343268274, -3.4265569395063378, 7.9269635075758815, 5.849665122752223, -3.474328925699823, 4.6145531991759645, 1.0797299057143066, 3.5697537040674137, -2.895788203589266, 2.7546232022876, -3.1666840200674415, 5.729322776883833, 1.357236778852199, -0.37948402917041574, 0.6733305446667559, 3.6494530403724332, -7.7632721269054015, -0.4417293894208517, -3.767557206986424, -6.719696288267827, -0.4660634539128508, -3.605799215292187, 2.9980811524974262, 5.009478223287414, -1.4664443968744445, -6.77791203774799, 5.335042793135364, 3.401544025796009, -2.4363115019671313, -5.92965623861137, -4.573165383652547, -3.3466606851067096, -1.8687394412806457, 6.870732583333868, -3.7355770899686136, -7.387939692600565, 1.7597438809839507, 8.9899253005603, 9.118200758360887, -8.795811584832208, -6.6692315929065416, 2.427759876962816, 8.282056874705649, -2.762110638773661, 2.531114395566223, 7.453142622944009, 6.052007771877259, -1.7122304801867845, 7.302402957563873, -4.235380371333597, -1.18458876473287, 1.8228903012226452, -0.924877503462175, 2.749699144038557, -5.46600770971706, -5.4382311895161495, -1.7371982916261184, 2.4389389721055337, 7.52577536476245, 4.100857259779655, 0.007284459898480339, 3.652330952281617, 0.1063311711503504, -2.365923166179354, -5.033553721087573, -0.8506218196614004, -1.8305521831098832, 5.172888494040835, 1.6940558284837315, 2.6947693934654886, 4.0388333523028175, 3.582370134381585, -3.2567118765609715, 2.302897899118223, 6.34655399893925, 3.511562068540884, 0.7217873618711721, 2.3734332939522305, 0.1661893130009947, -3.473722598692272, -1.3656172324402052, -3.8112731234185584, 1.2553576746670592, 1.30405099404051, -0.10051528851710409, 1.5841571513551211, 3.351610702099992, -2.6299100672432703, -5.9998080093838055, 3.0196248250024196, -5.946820708015036, 6.188883825043319, 0.24071757710024816, 1.3085730108087088, -3.5242921081151364, 0.31705751760863127, 2.402377573461975, 2.4687046559978443, 2.8801369520270326, 2.579504117531529, 3.3859685300432254, 0.3232437958948566, -2.281102678713794, -2.390686137052249, -3.03508466098061, 0.06572448071922105, 1.6778357754133875, -0.8208150522364124, 0.507768442187096, 3.203036284875709, 3.725584331245418, 2.0863595010256417, 1.559689452411554, -4.476858717115432, 9.14449447069442, -3.2889450144023598, 4.924750840004085, 3.7099251376344657, -0.4169146832091295, 4.932212531159669, 0.5617944453880679, 3.0773697926070787, 0.20880362820644566, 3.086659747686502, -1.2335381642064696, -1.305334182450322, -6.380829940015969, -8.042987642509058, 0.8208331195548053, -3.5941518497987053, 1.4344949801484435, 1.349257227041182, 0.8172231941200052, 6.60416968419219, 7.638009476657661, 3.1790876953000136, -5.9902214151295885, 1.5074562993742981, 5.255316764418379, -3.5390005774745905, 3.0229455475252416, 1.8509034353057365, 5.882598899718648, -0.2524010033350523, -4.0978093001372144, 6.508214124131425, 0.1052963387588911, 3.6269013670966954, -2.7731742759524414, -3.800683365275072, 0.6456623149360341, 0.9930114386016564, 3.196068498308661, -4.126598969890708, 5.457505013163107, 5.538785622563576, -3.6017852458886987, -8.019523850090609, 5.297126376617269, -1.8892288754534257, 7.078842347552528, 0.02558657340029452, 1.6585901399814225, -9.298784617560324, -4.462584319923611, -1.2100833026900208, -1.3808808778119137, -0.9293225971754793, -7.240281129660512, -1.0772486194466473, 7.90444628927201, 7.753109664241689, 0.6186653876819996, -1.03232733061858, -1.8484428993496196, 5.694918368787218, -4.269800077249696, -2.283730543471744, 4.404623352247003, 0.7844548007805501, -3.378729485119289, 5.085667619053468, 1.5491205798122543, -1.0901402311162327, -1.5163307066849752, 2.3211716873445964, 2.957412600715073, 3.7084450458479545, -3.2257982760179655, -0.5693257883706493, -2.2207054762527196, 7.542092074480363, 2.779238743922367, -3.1916329408558313, 5.066256861308329, -1.69457561969075, -0.2165615504922187, -1.7866196532884822, 2.0778526552698526, 0.09509833304465837, 3.5835828030686616, -7.333993759699425, -1.369658686017353, 0.41104469867560617, -3.7461529363539636, -1.626652233714896, 0.5890005720262828, 2.441463186996247, 4.148792624222636, 6.496644699551351, 2.446661238321735, -4.673285105907797, -2.87077536994918, -7.774799643759798, -0.19654320575687315, -4.560953434801437, -1.2766451017819815, -2.7387453205963688, 3.970114015376207, -3.238234445599831, -6.9138262520029565, -3.17341490912165, -3.770404338956032, -0.2850182644782963, 1.835969407796426, -1.8689338861170752, 2.680360627026411, 0.7413729974987788, 6.5979170307779444, -1.0132971691566994, 4.03475858483429, -3.545554282894873, -0.023221496946642994, 1.4738115637641507, -7.955214505930992, -8.261122521789169, -8.219650851029822, 6.042089632617036, 4.0810826978196655, 2.0630391078170183, -0.42737944635091174, 1.4329368679707544, -0.06403640533452432, 0.8063291154112227, -2.659375009543625, 3.939417662485114, 3.680507278669786, 3.03115904238571, -5.036634435823356, 0.1049064987478639, -7.066231551750859, -0.3461781162118849, -0.407362861525033, -3.432663036375209, -8.250401231952461, -0.6986416267617285, -3.1441330948683954, 2.0678916526053253, -5.357938465747881, -0.7131802898158697, 0.8985439376412852, 1.7009223697906508, -7.0250411405275575, 3.23371335068461, 3.9928687851726017, 6.426505840725475, -5.794727426180844, 2.6055779444669818, -1.904289250296529, -4.777236206699408, 0.7822767244811559, 3.7363932141303233, -1.7503119553892874, -0.009349886741607444, 3.5321470264194783, -0.21692756094694587, -1.5395437433506258, 3.8473479187780515, -4.754500261581797, 1.61279541709753, -1.000943160472565, 1.3317863928090987, -5.305748624944659, -2.488580357701859, 2.2583013869188826, -0.6908631069747155, 1.3388909018802533, 9.435770907713913, -3.8101172879613854, -10.44144999231072, 0.43908411091464766, -1.1979105617407206, -1.4015430471621986, 5.254153323622804, -4.482685583631961, -3.0647921881636706, -1.6901029205126685, 1.8307451594719666, -4.20976915074882, -2.608938419939804]
BIASES_LIST = [4.061037338898192, 1.9787826719788622, 7.214208477116402, 2.135991383102823, 1.057891028831278, -3.985676613920759, -6.927879036450698, 2.6097460073811836, 5.199187964410482, -1.305613351781994, 5.738388715058675, -7.000547561010405, -1.3392019884110373, -2.759050713461346, -1.0868452601916572, -1.4084285304697512, -3.436503601636294, -1.3365630006473106, 0.10415751468423595, -3.54344586891608, 6.068071117364441, 3.05052695429537, -3.655895972569457, 0.2564678507098958, 5.213800227239185, -7.829409108088757, -1.3221286785747552, -5.733165970384077]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

