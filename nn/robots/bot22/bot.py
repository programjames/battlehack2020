import random
import math

WEIGHT_LIST = [0.5638622208987939, 4.9065493006372165, -2.3131764468711977, -3.5517952770483374, -2.32026081398974, -5.292751458193276, 2.8713492388638913, 1.8282881860197742, 0.8133791632737958, -1.1064751679274096, 2.6044384566321965, -0.014987606050764109, -0.9060785086149522, -0.7549555986282986, 0.23298134744925442, 4.938482738129882, 4.6765789264751225, -2.9806458034088363, 2.8364765876718314, 1.829162541567279, -0.3800470219593001, 4.354286378875213, 4.930956475832358, 5.412292639797649, -2.1166460604554103, 1.6143271300026747, -2.1872675924619225, -4.3579066208684365, -4.9036783342971715, 1.3797652990468512, 1.358463327836473, -1.1198297920047833, -3.39860193629042, 5.26320423836655, 0.998459238427072, -2.498884464863821, 4.151296501984885, -3.2833878406965504, -3.7454477207721064, -1.0352747509248523, 3.8302518243294728, -1.8598719908307098, 0.4308015487958611, 0.1605298622620378, -3.2622334408635805, 5.727675642440951, -7.8821006009765675, -1.0452914030472553, -4.622326584900806, 0.8820075903961456, -3.839662101293564, 0.6742639864937913, -3.5754724861231875, 1.8937815317528208, -2.249511003525101, -1.5864696858251375, -0.41400630460525495, -1.9760787577956207, 4.8949325059113304, 9.881217446078908, -2.1931072138886782, -4.491819737379337, -4.321770998854048, -3.5229159242569033, 0.7246908961513151, 0.20723022500449242, 5.3626778013762095, -2.1977576863865096, 1.2242385874828665, -0.6876674770560574, 0.44651599443447043, -10.342859168133149, 0.49374996630836354, -3.6916360957513117, 0.0415784252240788, -0.9717640114453039, 3.3900722422719274, -9.802475751679209, -0.06887577491283035, -0.5709291498041276, -2.4187073721988255, -1.10513157467655, -3.2547648245430487, -1.2154006432585807, 1.0229975645565192, 4.809000192230489, -1.8375349158067065, 3.996727883435721, 1.3693727631849977, -0.6934621379531593, 0.9941656556054247, 3.785674424825295, -1.2459171889543885, -1.067075971047688, -1.5775118385858897, 0.5333284056785249, -1.750650603453914, -1.130025426967903, -0.627311730914707, -3.685854704757195, 4.118933693901777, -4.818722693178936, -2.327125051031738, -3.6162569492453067, 4.938498048850196, 0.7423422115049814, 2.7003073635926222, 2.6825086854306974, 4.963500507747614, 1.88092112543879, 4.387967763202669, 0.5985768210874521, -0.5292883970362042, -4.3101953959017445, 4.454169382207247, -1.7052864742134772, 2.550374418245294, -2.770736380617633, 4.569594310851231, 0.570591471105265, 0.6313224654150286, -0.15918785655911297, 3.594079967259603, 2.617907153895388, 7.01029261382944, 2.443135862549218, -5.360980140197377, -5.633156376827675, 2.5515393143315936, 0.060906589070150355, 3.619393360851354, 3.844035298480189, 6.508440449893998, -5.743467907513703, -5.191720337498019, -5.155683768147898, 5.248450046494793, 3.5055477353567808, 3.5681826015326243, 4.554562301401206, 2.073676832237529, 3.4760338360816845, -5.2290198365755245, -1.0554064195865194, -3.687511943808307, 2.515984821190358, -3.9446009476429804, 2.488554525311586, 0.45901457555006475, -2.4849836307204636, -0.42658648041854774, -5.117124364229468, -2.4212550016170273, -0.0010447943565429327, -4.156583938816082, -8.686387060841007, -0.22317888252472443, -1.821945436618305, 5.460549143642706, 3.800455833032725, -0.9536782541547011, 3.8448568725534633, -4.5598354136595045, 4.484541715700185, -1.1257304168302154, 0.35975721293768254, 2.1044369367138644, -1.6869336537016766, 3.370051728190909, -2.6043576435775577, -3.461300124643238, -2.4267632772535954, 2.0630202337403714, -3.284240937703652, 1.8358581283562168, 0.19545677387593893, 7.302087190756271, 0.13488082420231826, -1.2321243861492595, -5.370086003394282, -3.2215067710873804, -1.874198488809208, 2.150282937335371, 3.6492574411663057, 5.118542877453559, 1.129964616861804, -2.6269017971588617, -6.116379880094915, -2.5109849828171105, -2.1330283402641537, 0.08960893322141578, -4.28043686300344, 4.579842591163353, 3.2504750677205627, 1.9111968141999656, -0.4303120759553082, 0.7584288764996208, -0.5135532047534465, 1.695186343849122, 1.7654105748583622, 0.12571592041185783, 0.7044906888905892, 3.029712203458984, 2.4203822712515466, 2.24426722780108, -1.3517780416403757, 1.0370829109940247, 10.581476138036923, 0.5760572439731176, -1.1248239673828975, 0.6074177377515071, 0.750490003595133, -2.9413220432160645, 1.3025955587247566, -0.6552414761355733, -1.7583756413056644, -1.6082347758255042, 0.33602164561787223, 1.3040720181672592, -0.750182644077318, -3.9196564583714952, 4.076526953498396, -1.580529242846756, -0.9489301186860714, 4.256511675166926, -3.527590889740931, -5.029807864345743, -3.319802257906721, 0.1547084689411096, 1.742824730851609, -5.336947721876581, -1.7020786295299228, -4.689850634952175, -1.6497638369922032, 5.270638801907367, 2.408024228505077, 4.276347762284662, -1.1689153631966966, -3.627467921180018, -5.940349806694, -2.5728722532543915, -2.5913773156600133, -3.5950565700591772, 4.862504661596557, -2.601436827704899, 1.2071982767684284, 2.596009633174628, 0.21675563475338014, -0.08133162497005045, 7.128322688395992, -1.5385241834665127, -2.11457331731006, -2.3023451955862435, -4.265519130270663, -4.852616045646829, 1.0184337567338402, -0.4180669277098278, -0.3484265301273306, -5.815237319701416, -2.5126727549545214, -2.7289989850629723, -4.57737606920587, -1.8286868436388155, -5.90278641759195, -3.066034221075458, 2.6864367565898615, -2.368151183698732, 0.5898719552538542, -3.754138413201627, -0.5441412920635007, -1.665779921689957, 0.1683678406433166, -2.8916213990439625, -5.616066590810158, 1.5242141063933197, 2.02987973343392, 0.2064516164020899, 0.9993955174099788, -0.7812911078460472, 0.36330451362323296, 3.9487168421153824, -1.0329554669627599, -3.8974256962495106, 3.751488442098868, 6.165406734462047, -0.0813715075714213, -3.3853335802703564, -1.8222348752336082, 2.6354302588355503, 1.6948114195355974, -2.977283127295432, -2.6955325499871514, 2.550265326662944, -3.568175824326614, -2.2631470264591513, 2.358018456388929, 8.829042267811042, 5.945741663167451, 1.8021005975202178, 2.048116840633266, 4.559708311710933, -1.8805340648121738, -5.848580738772119, -1.767216993913309, -2.374889971450212, -6.8697819051278195, -2.8818917057073254, 2.2909489744233382, 5.069981222066508, -1.4338557622436743, 0.6770092292332175, -3.9187943173322766, -3.5978777528184467, 3.2614167061307375, 1.8450750541804546, -1.7854712802677155, -5.646661424948138, -2.406925235899875, 1.2921972087511528, -5.597268703924683, -5.316672641615017, 1.2764901379276172, -6.802511335764503, 6.402125719204333, 3.4331369160110925, 4.599931949901667, 2.001430555464541, 0.2788304088572062, -1.2713096526910592, -5.564683256819264, 3.971927792302151, -0.33481385387955853, -7.426772400733834, -0.10356345889562737, -5.0268561314357205, -0.5126504057407774, -1.666226349973686, -3.451028224576869, 6.512793253282207, -6.778968608663831, -3.2356564708527165, 2.6654037530666437, 1.4789459933557023, 4.188906050911091, -5.689860001719796, -4.625487707036147, 1.7044334189327728, 4.799191271602848, -4.8503065019382055, 4.649669810504404, 3.253859195436503, -4.028599238090457, -3.397335766290289, 2.31545019188391, 2.337735011426657, -3.3904475336356255, 0.03591470256234189, -0.009878918771368355, 2.81997709510991, 3.2401876869288433, -2.2485943216243593, -2.828502163516842, 4.921907131412654, 6.048965462276932, 5.292472222656453, 0.11843608580681321, -5.8388450194133386, 4.267100316778671, 2.611107411242755, 0.8544532722448137, -3.2248082618251113, -4.717064734657756, -3.6664405320010274, -0.8952903976107885, 0.3405636611515663, 2.069148828573556, 3.925214596157635, 0.6826441086328662, -5.6555797231602325, -5.26017925569841, 0.42403136675854075, 3.42599552995248, -0.8718009094065083, 3.173764112623839, 0.1265842493716142, -2.871212151155834, -7.236397578778277, -7.886621926259963, -4.596673484906609, 2.4593530276193665, 5.608183480319573, -1.703298385693444, 4.708058292469829, 0.5143085533323105, 1.4432035505006606, -1.2977285099747087, 0.34369009387405697, 1.1815372535009152, 2.2604562527513465, -1.50212773194286, 4.289434122997369, 5.552460497203509, 2.7123788757856007, -3.447329186816521, -1.7117194726839355, 4.538671439577198, 0.6980288259916809, -2.148591940182589, 3.8664831516667713, -5.549438764321515, -0.30204010402798215, 0.7861304442167214, 0.9046839212601099, -3.279757589597851, 0.9682603304128108, -5.683447119005797, 4.125952882217245, -1.5812527595485324, -0.711051253482179, -0.9912640727417636, -7.392993687556867, -1.8401640945309248, 0.7571793692945271, 5.221005744082716, -4.34942538449444, -1.146482359117454, 4.087248715908019, -2.7464537544842917, 0.9176174498563414, -1.9455983067403193, 4.3895426011262515, 2.7823424403424006, 2.9993927186216074, -5.9077979910939895, 4.936631818837774, 6.182786772055288, -0.7292449204485228, 0.8045077332119656, 1.5826446152151428, -4.7696795352412655, -1.615035007024442, 0.6524330918450252, 2.0102945623456274, -1.831073608997734, -0.37589834498471036, -4.3240031956835265, 0.7108085988674687, 7.986879954166854, 1.807283817008908, 2.9289462323093844, 2.4073537182011724, 4.51223515769351, 4.9338458161322185, -4.363857737552037, 4.689279073661814, 0.005778837239155243, 3.6272596947813844, 2.5484437683627568, -0.3813673635363462, 2.520337452002508, -0.4200674159162502, -5.908883388848162, 7.698109269849747, 3.6853110036700016, -2.048683226391053, 2.0686552241104867, 1.4974762162737247, 3.196628672501249, 1.373361213419771, 3.051017809108394, 5.187657555875804, 1.6544971564478737, -2.3173613751790967, -0.10626861972668379, 2.501071358071239, 1.3516185636447926, 1.5752640516530745, 6.845197102561951, -4.277585309195273, -2.4616415945203363, -1.192390737494629, -5.081801872076248, 0.5672409785280192, -4.346474253860756, 2.690920364686785, 0.395255871419518, -4.408421726809296, -0.8165610807966127, 0.4753028655454846, 6.262830005001569, -3.2777779689069, -2.886762419586413, -0.692491336625039, -0.24274227764445655, -4.864680513346698, 1.3596618702323875, 2.6026442681546693, 1.8335954559290673, -0.3701768787046531, 2.7238097669453065, -0.29029963606847986, 0.115120949646466, 1.5401650954976187, -4.741960441091343, -1.6587038213209242, 3.602338722801339, 2.8670106697718207, 0.49552655113487026, 4.25685587215647, -3.0601437815935024, 1.8246833644894946, 1.0485416705497048, -3.7802069654876846, -1.7946955661069166, -4.910245060049255, -0.9746501901232744, -3.9888353503199854, -1.0056849071186995, -5.965497238292886, 0.29900639922341354, -0.04600369506949929, 7.006413215214239, -1.1891064847448864, 1.1033461436640315, -4.020672448646056, 6.9603593948396325, -4.0754010891326535, -4.135258482171027, 2.0436746666941046, 5.106681729174753, -5.500417689126525, -6.402272498065627, 0.9147775770136548, 4.221231707325394, -0.9000099799338263, 8.071344531615432, 2.5201310912134245, -2.3074473219755194, -3.3334045935449135, -1.992941079180092, 1.468393204156034, 1.062936308544379, 1.4298341531794976, 9.027013755373734, 3.7997961845460675, 0.5627192160538773, -1.2636784854301073, 1.8072499742686063, 1.5052918161359008, -0.5493555667267205, -0.2835111993334253, 5.980778208327986, -0.12379941784752807, -2.786091351784132, 5.408595813854228, -7.762686271582998, 5.256465296541162, -3.884602687561714, 3.402512972079121, -1.008420799539261, 7.809372389259605, 1.8953379450033743, -2.257578504152117, -2.1848772788643265, 0.030058127695863853, -0.1260381417362561, -2.4620522146187254, -4.417246185603982, 2.2095444239333286, 3.9583260295575027, 6.04521066899092, 4.87338147565001, 2.2465451367892704, -2.148089300080031, 0.03028503311770039, 1.8462993070685938, 3.712593437866336, 8.937469784737099, 0.40002596179727384, 0.22108686976922287, 9.601710778461456, -0.6124202517176568, 0.5368024412825168, -3.1884547978303455, -2.5543627750620828, 5.775017380498253, -2.3469482352153883, -5.45122219997332, -0.2340661760423383, -7.362412805541931, 2.421820177215621, 3.0831634250021223, 6.108129431698971, 4.952256971079387, -0.9533894569626244, 3.807080827864108, 2.9098094689950718, 4.113638291092902, 6.783429772552807, 1.380856438185092, 2.3035188435797704, -4.255222780503579, 2.021837082867915, -7.713224258742677, 2.1586210700228645, 1.264922781496292, 1.2199003865800704, -5.13637236532343, -4.53628302864474, 2.360650456695896, 3.031472695113897, 4.267694164752034, -9.133299293486832, -2.415703673997714, 7.444318037969713, -1.3601595395612467, 1.4383154625617627, 5.83119330202453, -3.462743957356914, 3.159781679222511, -2.0054885429043603, -9.986829078338014, -1.0506906954984225, 1.4776284966213495, 2.9044167949533266, -0.9086458743818965, -0.6966755753988423, -0.8088043374407772, 2.272671568143457, 2.494234520785709, 3.2276825404541705, 0.28385119344771464, -1.4210267227296964, -4.293412047408835, -3.2259786630800527, -3.42160524205227, -0.7082554609188179, 0.8659580986755225, 4.223857928285722, 1.9551133402993899, 3.1814133813349517, 3.115316607425697, -1.4429050800300935, 0.1519055821924415, 0.9594401746685515, -3.0810583690218816, -1.644097230586877, 3.478236305721163, -4.021513454377848, 3.359292965247319, 0.5731601937652994, -3.6914625269828734, 3.4464589897778835, 5.928289964988987, -0.44138450286421615, 3.229219803529687, 0.3804633739784321, 1.8542278839118165, -0.9152049158402544, -0.20034829847179061, -5.260774936298873, -3.362644951271414, -3.708816661699917, 2.3375079216316283, -3.9009315035533945, -1.5405344858223435, -1.1449131442535005, -2.066799891075114, -4.901255301884977, -3.858899099936278, 1.9808674150506402, 5.679396979062015, -0.19590220663800365, -1.8278026012400437, -1.3562189566818226, -4.280661028529399, 2.3486708455314065, -1.5521104679959374, 6.689723713905924, -2.6799383075975602, -4.750167960938154, 7.889395241322711, -2.0430214003297302, -3.2811317181830373, -5.166945878826192, 2.999366147316878, 1.5234752126595335, -3.558038120297052, -1.3630301271454766, -1.5950424183106535, -4.8120723956171805, 3.330038211009951, -1.3073333683420771, 4.379345693252534, 4.629695241126318, 4.294266618160269, -4.908070170893943, 3.6505879002724395, 0.23618573253400327, -3.40432230014075, -0.35281856098192216, -4.742408959615314, -3.5431489077089346, -2.0728307348557444, 2.528807598634985, -3.4088710318261763, -4.678231780159645, 1.4315795106924185, -2.751573625649316, 2.0091551364940234, 0.4680836309863306, 1.6701686351088556, 3.966938253391302, 2.9308188229744894, 2.791171277263307, -5.86618821855542, 6.984134114298581, -1.3605177440168341, -3.466779041577675, -2.8441912566086707, 0.15059616896340347, 1.491950839268388, 3.033475494315682, -3.594556033224765, -1.0528396644782523, -2.757243109186835, 0.5846484025981245, 2.1849526590130246, 6.126478836146297, -2.755861573328605, 0.08933393465169276, 1.4767506076242407, -1.2510615587146539, 0.7313682534109627, -5.736886271706919, -0.837344980206004, -2.387312779973202, 2.3574230966917935, 3.771277549244976, 6.921492076199696, -0.8716942457828278, -2.2338492717791802, -7.982707901142993, -4.323556707201158, 2.9938789136241826, 4.22366040910818, -4.422253256135324, -1.7766178447940362, 0.9752260886400769, 7.5949184666644145, 3.7560358714697015, 4.876910648989949]
BIASES_LIST = [-1.3840468575962004, 3.712346885358302, -3.614399625971667, 4.789550825866727, 6.335530680041857, 2.773041903837987, 1.0943595166186972, -0.07770987284071972, -1.1076068569144903, 2.651769278837624, 2.1261441954630618, -1.365460115796451, -0.0008522570781620887, -2.6189486337407186, -5.49943917285836, 5.266345748582924, 4.820617183154312, 1.4798523467024718, -6.564869523202377, 0.026204037883592313, -5.069302985640644, -2.798583519742833, -4.05981478603927, -6.100769433919237, 3.932577102378365, 2.6515827860473467, -4.0209660068347155, 2.9205255787136464, -1.0822870985990771, 2.303984588453389, -0.33998532283372035, -2.295679339239997, 7.1288951210067095, 1.849421194512668, -1.6799163192628568, 0.4413319886115184]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

