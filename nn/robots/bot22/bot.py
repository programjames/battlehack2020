import random
import math

WEIGHT_LIST = [-1.4019321598526058, -2.9013892508922376, -0.3047055266120918, -5.361127283974726, 3.5986958323594083, -7.238422411900585, 3.4405809135864684, -2.8885553278663245, -2.938010627603954, 1.3195231988542249, -2.8213154705270935, 2.444745116977681, -3.6281179508759687, 2.6965258752688204, 4.719851732282227, -0.6700343624886222, 3.107250325232764, 2.884395872768616, 0.5957452144502424, -0.8279274530559307, -1.0034469153596661, -2.7100365769827732, 0.8878737943517947, 0.9380175093125693, 0.42684883359580184, -3.714440880803498, 0.315568590890984, 1.8560476521055413, -7.255614173410337, 0.9797506186291736, -0.787937303700347, 2.642028005588613, -3.5453506927181087, 2.2030636429478716, -1.6091109897994802, 0.8333279299430467, -2.579039987794505, -2.2438896635465087, 2.6085557541143816, -0.0027954997923700375, 0.3764188453452342, -1.7565341190283423, 0.3774113440066207, -4.112770272000062, -3.206583563290393, 7.139763941978588, -0.5925009559631307, -0.9633199739606229, 1.3289161143260935, -1.2872861692349424, -0.3221051073133432, 1.1476913464096392, 1.9043599180350177, -4.205950367311505, 2.0610532931268146, 3.4143057236813608, -0.5458742550701412, -1.353901527596219, 3.992963559075603, 4.872012398415039, 1.5942010408099185, -5.08342923679923, 1.9672125599560548, 2.605397217536208, 3.34270735386613, 4.122420970724143, 4.613922730421221, 2.9333116630920673, -2.839408940973655, 3.8866942695385074, 3.0626174551309964, -5.3641651561462265, -1.5214943697743548, -4.537149864231749, -2.643322139438173, -3.6573005709583843, -0.5529255694569131, -7.465930897347491, 5.236733249883445, 2.0347510719735817, 0.5223872978551805, -2.9217164347802624, 0.8931693476885667, 0.8620479389715632, -4.047489725163122, 6.015648174378194, -0.5449327323430366, -1.0766816099357697, 2.7326434972665674, -2.5422755261901955, 3.445939498765992, 1.1614335511277951, -2.518051621481162, -4.0110714140248955, -2.9803681147970504, 1.5100152769510684, -2.3506647943669465, 4.640559861158476, -1.0409078289243485, 0.008914090655121498, -0.47785056383572955, -0.09203932660618386, 1.2465507176164596, 1.7520652503133483, 4.229341770832618, -0.6661004544096216, -4.126479934823433, -0.8354955089561569, -1.479558429424454, 4.1276580715690745, 7.942115126600395, -1.6337549412331813, 1.1694268557054288, -5.724397841133165, 4.0946516960553625, -1.0856659176482268, 5.038163129577961, -3.58576064274766, 5.561872682946087, -6.276235656687335, 0.3245451590297681, -4.720673849290244, 1.439015625903373, -1.8273482808514028, 0.4935783566329901, 1.0623166623637053, 1.3233942865154025, -4.585386209700342, 1.677948762687195, -2.01348393157002, -1.852165996098678, 6.417125775127411, 6.269131985115913, 0.11607989997573553, -0.8611709605626958, 0.8473682631664003, 4.966202792568775, -3.190950940845916, -2.367301867861349, -1.3016076300290307, 3.5301082558782575, 0.5887796380588857, -5.176049545804579, -0.7382961203747546, 0.019588994028507, -1.266619658303627, -3.1837740184190597, 5.260563951713285, -0.6753918330217108, -2.7488496286484665, 0.17811023465781073, 0.21033482385890223, -4.37193663956413, -1.4651387142347945, -0.7569038023289945, -0.12855297365568874, 2.590727725994232, 4.053242628183825, 3.0490972461806045, 4.625849750697259, -5.031933421056232, -0.10312523950922348, -2.205498866069776, 1.9793613424480636, -6.102344442167575, -3.258131620294065, 1.0797457817957827, -0.6752246706453442, 0.2711327029141022, -5.96874985785065, -5.072646935896783, -3.73203989577269, -1.3547829650052106, 3.5629435672062915, -3.606284718106466, 5.573043971619617, 5.605434163509491, -3.532443035079316, 1.6042936697959966, 1.0869669428543594, -5.820812032848105, -0.7681567942721621, 5.5140744087035936, -0.22132280813858984, 2.752891948476716, -2.7036408771124285, -4.773027184285841, -2.797879069464254, 3.2339649651360265, 2.6893439102740104, -1.1724732715494641, 1.5834105601938333, 0.11526044101840083, 0.35237574200088595, -0.17664015800907062, -1.4565414484102004, 4.800461996049177, 2.50902140471608, 0.5999779788002144, 1.2031039210784735, -4.973242892600983, 3.693953615570053, 3.2495748007530842, 4.19446851745383, -1.2292377255317681, 0.969830443207442, -0.24124114121996332, 1.7340776086767873, 2.148464696609932, -0.30133144617924235, -3.4474915983477095, 0.11519631164320021, 0.7251468664190488, -1.5743785703884734, 4.2640403867454255, -3.7213960142208307, -3.9735579079790586, -1.1888874474337325, 3.623648661094264, -2.593560543500354, -5.500543171921805, -3.3808649125229358, 3.3655321774022493, -2.967962474999011, 4.406017793725241, -2.166236794135384, -4.57329456888038, -0.1614970066049286, 1.2924337371253936, -4.591226624807284, -3.3368772841104857, -3.330451871224461, -3.351268182478421, -3.31550709416979, 5.246077671205988, -5.0892753812477425, 7.440627853661567, 0.28411104283544275, -3.9660895674335013, 2.470564452642604, -2.0387938852586256, 1.6152263940512652, -5.621550202668629, 1.3952943897577548, 1.4614124074837136, 3.057965478840747, 0.7870242381246337, -5.304972534708101, 2.3755111313722796, -1.059941532839248, -1.7834369919536741, 1.265109235657603, 2.0329619512199892, -3.6189010016626426, -3.6698247172335576, 4.12883618973121, -2.273352000713861, 1.8919216380641486, 1.3057291084595697, -0.3783815740795249, -0.9329617567088422, 1.6305608160965823, -3.500377303058364, -1.4237336924397357, -0.7449611354608889, 0.8344819972044133, 0.2307687270946357, 0.45046410487983746, -5.962814911771689, -3.166137243485351, -2.907247851349978, 1.41430334831822, 0.06401743325571108, -5.599260697845474, -0.8513063981975566, -2.7376933717817575, -3.030051793953084, 4.854520174533351, -4.2982922054668595, 1.5813386830755016, -3.4143063764805115, -0.08985113030668912, 1.4906144651567086, 4.06005705356579, -2.173109894790172, -1.9281260257494814, 0.985486315103205, -1.9924535842655642, -1.98942807585466, 2.374780026082417, 2.6530706687713135, -2.828275369642695, 3.6246880954971115, 1.589892684973624, -4.322442715756507, 0.8004209137247478, 1.3149473755568266, -0.293537008246308, -3.7891708623776057, -0.8132395474383092, -0.5629940821308355, -2.051400908809953, 1.1094919206721494, -2.890355219434177, -5.6653046662820365, -4.140272706192774, 2.8049760670400863, -4.597678571953706, 4.150206472857131, -4.2538926317049155, -0.858410497293929, -3.3229434889428564, 2.4757825055440605, -3.423429605789384, -2.5621767547018255, -3.9689747403061038, 1.4744903849871838, 0.004218803742333854, -0.5441553470583544, -1.5426913150117254, 2.150920671603288, -0.7967489720064465, -4.213607436125795, -0.31859591094321815, 3.2744504717112335, -0.4098833408910614, -5.646131266456075, -2.4462450298509557, -5.342137687808294, 2.66754399915333, 1.1974547024281672, 3.4346477754727314, -4.355960654920925, -4.001703842542748, 0.8480354356735036, 4.535367790577903, -3.3809926117018927, -3.8480126277932416, 3.9523459547574955, 0.051272282103623334, 5.110385735361634, 3.8295109880779714, 1.1690015298041012, 4.66138918696181, 0.4936019987568281, -2.4909817725551786, 1.0039491157810767, -1.4632835688555712, -0.7012246748709614, -0.36671584831669946, -2.721907682647757, -6.006352327378971, -2.410813382276143, 0.631910531258328, -2.567520576448562, 2.0749130203279185, -1.303782194297818, 1.5907856495631352, -2.3347715381058816, 2.7499388029381606, 1.812492807462561, 0.5540688580992303, 6.7036866135140505, 0.7454805843135559, 6.334572534346386, 5.853538424004441, -3.1523202150658935, -2.3466634230909524, 5.190405140535978, -0.5296507210120165, -5.723125409478621, 1.3322946571209657, 3.2366100998348353, -4.355374357927323, -7.14381043994204, -3.8480124258886788, 3.8358741298745835, 4.095958807544631, 1.3821886197580562, -6.173258491402586, 2.210128896074595, 5.113756681623073, -3.3439994218138582, 4.879741523035583, -3.600699740769813, -2.436956741355231, -1.3579836660877906, -0.9931290100539507, -3.1104278045491895, -0.15824994573438889, -2.1726276770127653, -2.4797327031404057, -2.1103134504534466, -3.0799869895311707, -2.4097337014144937, -2.7578020684850797, -2.474491736555742, 7.4597758796163625, 0.1621595349459377, 2.1652899661107425, 4.690819747602723, 3.5496001543785107, 5.986398423496119, 0.32084499630825447, -2.1925511242712066, -2.746963443921614, -1.3364177230437637, 0.028957162420865767, 0.3695274916633837, -7.003573899016804, -2.801994448241807, 0.5667044191571822, 3.829758101498605, 0.12179977547280108, 2.6468022014347152, 2.44146272700927, -2.204177947517011, -4.103904689918628, -3.541210741691538, -5.6929276599555685, 0.1258795876832155, -3.682038137774774, 0.5452712679051934, 1.5107925625314857, -4.204484613520616, 0.3755387356080373, 3.2255192032950513, -0.9669673630705284, 2.4150363030026663, -1.0649088487586313, 6.09643395459355, 2.3704933148411236, 2.3681292009655714, -1.6748589131383431, 2.313599318943224, 0.5495608834454575, -3.7214429920219496, 4.657669713257237, 2.937085956772379, -0.4985500267801788, 0.5771662597676357, 2.5548213064488867, 0.39268938913933993, -1.9310040393147743, 5.007878970341999, -2.192532504057432, 5.498551395593523, -1.228667357133011, 1.5084083136068163, -2.8795369146311183, -2.4361533559608044, -1.924502342841666, 0.35000359807306713, -0.6850367540425484, -1.5013841676986457, 2.9566020593503906, 5.910910548769179, 0.20177198309872235, -0.820881036913746, 4.8313462335219635, 0.23757018989000844, -6.450893787940025, 4.797371796466226, -2.7941066396308063, 4.803123034937141, -3.8559381035731537, -1.21352709646298, -0.14118468184390398, 2.7685365910257707, 2.7330595256937023, 5.5537615134435185, 1.6461076573582654, -2.3392379340825062, 0.014181666283846761, -1.0614030442664988, 3.022515381007617, 4.0175077663284355, 4.008405135591042, -7.1931804480988975, 2.1811157345058563, -4.728490046118859, -6.9929520469569475, 0.056962284901379334, -2.6775131921981097, 2.2696662511377923, 3.8716070046441287, -0.39456400154283333, 0.009106922493468561, 2.656701794612217, -1.2597552706237147, 3.8922761494555385, -5.046612149911573, 1.1348878506783757, -3.3034801117253334, -3.6910132912195657, -3.3147856683924255, 2.602889119329591, 2.7475144464157784, 5.831743803138749, 5.301047197129707, -1.7477251674275054, 3.284120849569148, 4.985422519085032, -4.679313985514227, 3.4811091812825046, 7.553772854582599, 4.832919183640695, -0.23895716287093116, 1.0147431577377182, -4.333727992482461, 1.8926132066505374, -1.712743831768499, 0.35530701229102246, -0.3758911703400163, -0.2996662876191283, -1.3043011803172242, -0.2114505237724491, -3.0353637844139154, -0.32026494348515433, 4.371972779925209, -5.187548158205136, 2.8649647597101078, 0.656812320925974, -1.3356111651603408, -2.0377442321337247, 6.015720437503048, -6.420525890667724, 1.3605077236030692, -3.0119727447009534, 3.4465182963544336, 1.7418719860298375, -3.9343217571048577, -0.20633375326749803, -1.442147042871655, 1.2799755609726424, 4.41265093986912, 1.7384369055880269, -4.714303757098086, 4.592070353244464, 3.237327553147008, 4.994337973369328, 3.181215425941078, -2.315841677346552, 6.083719485361092, 3.871447494292786, 3.5466324263024713, -4.795456387025208, 4.7145544982445555, 2.4702320126089923, -0.9981918655130979, -0.9044028578941756, 0.8337615774630889, -3.294531299133655, -0.706314781931709, 4.19665353459836, -4.3245213829885945, 0.14171267649916208, 2.251146658801918, -1.0675040530839042, -0.6197168056997469, 4.470095647241376, -0.4573354628436186, 3.3601659531820367, 2.1923073300323628, 5.802716995879994, -4.350484494060856, 3.588379366639365, 2.901475141524333, -0.7612763154678095, -0.1138231556770598, -0.041032362985475634, 3.27662321913935, -1.0169600928337414, 4.772879592944826, -3.3587818675276164, -1.806254865953258, 0.6347081018396885, -0.36640053553553176, -3.342113341004811, -1.1319147398027674, 1.1437846464514458, -4.447348450600632, -1.9670165721357968, -3.2001719424052317, -5.999237504657254, 5.558047653154057, -6.700849334311856, -2.316847882873131, 0.217963173578694, -4.305881597829909, 2.6792747243050217, 0.7957381070887017, 6.751484516740897, 2.5551115394667603, -1.8992946291400743, -0.16742171667228356, 2.2922750796883786, 0.6653292205258015, 7.484636083623636, 0.3879418919537505, 4.103916188983418, -6.792678478722198, -1.0753180116750694, -3.806867155197712, 2.9739789515406727, 1.8745389601027496, 1.382276130295851, -1.2481998869585706, -5.3857955394961365, 3.9476788987769735, -0.317016473932898, -1.7464756052733716, 0.5777961976257209, 1.8509942607761376, -0.9728753688466611, 2.62541644531079, -3.5730271367915085, -0.9291938924064294, -0.9346754510290504, 5.727303157384064, 1.3986627191577554, -3.0180258509657225, -4.147230726610181, 3.2552461197220293, -0.9068177128576596, 2.776646347715685, 0.983376676117987, 2.340935545961587, 5.174395466198791, 2.65378299823417, 4.543931423563178, -0.30020371105722576, 1.627421464273696, 1.030113339145732, -1.9195493102183943, -3.8316412861761115, -1.2856300066382775, -2.1316244587723636, -2.6255555185369923, -4.26916425324594, 1.6720488514489977, 2.8088649734519047, 2.8479002916111247, -3.3559904222329386, -4.70487866126869, -6.653164286285859, -2.9191090769574233, 6.282611129829714, -3.8187764477394017, -1.481092486071507, -1.4221495046747863, -1.9340548841549117, -1.8979645768857807, 1.8903258745636662, -3.357498210106404, 2.9139793343040337, -1.2442779464892075, -4.150928447459563, -5.422100123179462, -0.013529333878149363, -3.2382873026256878, -1.9857098548058472, 1.5396213924373665, 7.261535498498297, 1.1279527931321103, -1.9404523811641217, 2.040790510895024, -4.544408008704103, -1.0476788178565315, -0.6927712438134697, 4.132460713577524, -2.1063133292303675, -3.1224958333061767, -0.6490140184602589, 1.5346619329282323, -4.83792383786843, -2.8912212656192153, -5.96125571777095, 4.082816706120133, -2.6279395670360257, -3.0411317050926163, 0.41335764916621165, -5.839674730993358, 0.6340340802863287, -8.405304926270297, 0.6201415168407849, 0.7642243303500582, 0.26464645259176334, 1.9775211724440975, -1.3925017158430073, -2.721769021802019, 0.9282864976022089, 0.1303901216851826, -4.129564722343922, 2.6020975757035325, -2.703811587960334, -5.174214300832348, 3.658057733893436, -1.3463379101140949, -5.287209897525595, 1.720789435725548, -6.914893706694238, -2.639907757752706, 3.9391572524045637, 1.9541191537238354, 5.172947709891489, 1.9220307951120468, 2.0333742467882034, -1.5379060414625614, 6.787309256788481, -5.379149239830763, 3.5710458590351486, 1.983816240260163, 4.1940875208507284, 0.3279372724309133, -2.76411023443395, 7.948800600941894, -4.504164699318826, 0.5211913272398052, -1.3839388602644767, -1.4698088665431686, -2.886798909702062, 1.7683732023139842, -5.5614426783101045, 0.45156495670018826, 3.4521057758925666, 0.4607625812205218, -3.8616075735728863, -2.330493787179387, -5.117369432814122, 3.4606535078673293, -0.08610054811279211, -4.898090843490749, 2.469366209465661, -2.0073924304661466, -1.6119796115964418, -1.8712160254008288, -1.4841560401082559, 4.236334606201691, 2.721180062311414, 2.346824319962523, -1.7798108158462445, -7.523438348322385, -4.786389980657083, 4.104330992121113, 5.7701027798523175, -0.8790026045161861, -1.137043878025862, 3.740926528708095, 3.841904819429206, 3.603440110564356, 5.704355393724679]
BIASES_LIST = [1.896839835906424, -2.6658909869825766, -5.1808516475318855, 1.1546158298181934, 3.9860231889235136, 2.3231504472817015, 2.3200475647415946, 0.08334355116894021, 0.7591243413753992, 3.8835086999996484, 5.747282461986503, -2.287138093351232, 3.4917849671272725, 2.4546280490807373, 3.12126824124905, -1.3650418337620052, 4.293187070808957, 5.307089246157506, -3.7486765455372284, -5.397308303045017, -5.82253692928732, 0.9500091160276329, -3.332008840196051, -6.027485565325421, -1.570321371919891, 1.5771282770831885, -6.814357472520925, -2.8123876308391447, 2.5664890991115183, -0.5941464092867024, 0.5160308805375282, 1.130499729830519, 2.346824144271389, 2.0749159848234813, -4.43276692679934, -0.07755209848187938]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

