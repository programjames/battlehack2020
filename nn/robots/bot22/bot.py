import random
import math

WEIGHT_LIST = [0.5712224070882764, 4.90035387172053, -2.3355019335510425, -3.5435816942348937, -2.314880822096722, -5.290669994288987, 2.8679128836936085, 1.8309617591580138, 0.8086290554938023, -1.1148107873319009, 2.58736373417673, -0.018814636506525192, -0.9077665691327025, -0.7562948929924331, 0.23027393779585476, 4.928385578171531, 4.673195891001743, -2.9688522939424207, 2.835564320313528, 1.8324657323511393, -0.36996531887538947, 4.351652713975786, 4.923497340901095, 5.414003484590738, -2.1099226094905457, 1.6050220779720588, -2.188871380304663, -4.35727174199812, -4.906554013882047, 1.3851238984926, 1.3585485597377138, -1.1187161206943497, -3.3984412676464846, 5.255027097607642, 0.9956620373051455, -2.4883118174969523, 4.148963328092241, -3.288680086100957, -3.7568322479199674, -1.0196736183430881, 3.8215179799860386, -1.8651531428796682, 0.4262414249609007, 0.17081507465266824, -3.260745123367769, 5.730359955174874, -7.874163487290893, -1.0388811889299459, -4.610717882300759, 0.8704616263602653, -3.8390548444824026, 0.6741124255249132, -3.5907784478827067, 1.8863663684197556, -2.247817991067756, -1.6021135627408822, -0.4132187011170671, -1.9814978052399412, 4.889115431055046, 9.87435824691009, -2.192475334832777, -4.501819212532456, -4.319096696323416, -3.5262554095954255, 0.7297453809568356, 0.19140037843742885, 5.352139866226646, -2.198939997273981, 1.2297934186602641, -0.6827877309184278, 0.4481610639849108, -10.348851943948628, 0.49144154842837107, -3.693218556799774, 0.03610539189874061, -0.9665616139298734, 3.3938934708752715, -9.797336674006191, -0.07118112173539645, -0.5643939152476293, -2.418535015608401, -1.1124415616299277, -3.2547437308677547, -1.2051274281505298, 1.015188319176732, 4.794772050174748, -1.8302827717415902, 3.9796383089313734, 1.3694903213847107, -0.6834314613402682, 0.99449572525658, 3.776356883050863, -1.2482898290332394, -1.0634024636547517, -1.5850250505975454, 0.5418225813737891, -1.7490229673688404, -1.128419892376015, -0.6332778617498767, -3.695572938377111, 4.126255494744929, -4.823855545847669, -2.3360132284190085, -3.6080668541860166, 4.940311700899268, 0.7489726174021483, 2.7014695623956673, 2.681515359883079, 4.959504623534406, 1.8744515289767967, 4.390327630410143, 0.5984334741860995, -0.5231626326374913, -4.324895146974118, 4.45675689664673, -1.7089044648891314, 2.555364764515486, -2.767574629719534, 4.560630730357414, 0.5725019423114716, 0.628843549653656, -0.1684051016527122, 3.6040717990793936, 2.6199394037907378, 7.014868838961877, 2.4355616924989563, -5.3641883877542815, -5.63904028792102, 2.562786170926154, 0.06081892981024359, 3.6155597276074487, 3.847721210191929, 6.508939544812405, -5.740342855104243, -5.193790863291167, -5.1459475841041415, 5.243214296713268, 3.50119672251247, 3.572367536229477, 4.558499293495812, 2.066974757739221, 3.4815283309586285, -5.22565760544874, -1.0546212150268621, -3.6855416991550407, 2.513205823932661, -3.9369659889035393, 2.4888671496658974, 0.47142567299697824, -2.486208238322346, -0.4283596789494264, -5.115143665816517, -2.425892995976868, -0.004602194152495477, -4.146671306075713, -8.679947705483523, -0.22428297368489275, -1.8135475598039028, 5.45309228842196, 3.8002055140089848, -0.9416756138072987, 3.837729951100313, -4.558813076696558, 4.4881944429006, -1.1251540113674292, 0.3692142797110299, 2.1071032184741307, -1.6897388770540707, 3.373447435101366, -2.6036963641572957, -3.4546558151706583, -2.4220463315983016, 2.0570722798189682, -3.2836581641931772, 1.8392796034511694, 0.2006293700688288, 7.306787992973902, 0.13713512425357047, -1.2396167433023082, -5.372407540351148, -3.216099032219737, -1.8786498125542543, 2.153789567706481, 3.644472858371852, 5.116099965580322, 1.1365927072433664, -2.630527664955064, -6.102349984013286, -2.5040431642382006, -2.1380757622831386, 0.07912323001588975, -4.285845847821714, 4.576153619422846, 3.252286616377207, 1.9025735802736323, -0.42937488896355525, 0.7568103276492683, -0.5174031067717104, 1.6885568610684496, 1.7619800381258481, 0.12850650820255496, 0.7106359481846217, 3.0359823889350626, 2.420412119779325, 2.2463365304268583, -1.3439241582423378, 1.0401761635226727, 10.576023964455736, 0.5833077792789816, -1.1240816474724997, 0.6095510177958916, 0.757201379461883, -2.941480746119559, 1.3056482873570372, -0.6567703718047239, -1.7581722379481974, -1.6051146413750048, 0.3318938263610254, 1.2947559983186743, -0.7518647321493438, -3.9290052761083314, 4.080354211446247, -1.5744248197058737, -0.939859767652872, 4.251161819066584, -3.5216571177786262, -5.034544437334299, -3.320973796169091, 0.15397640892133815, 1.7532683803725446, -5.32996664948708, -1.6988776710102869, -4.681022571298111, -1.6458639818431584, 5.271495886543294, 2.4044197601669692, 4.26418480743668, -1.1715966060855898, -3.6353195049243396, -5.935262650170364, -2.562965169046668, -2.5970992606468797, -3.5924985182843248, 4.859972043144853, -2.604310983425922, 1.2141562049581065, 2.5965595105910335, 0.213451072288776, -0.08166847588449508, 7.122072326079857, -1.5452829587317325, -2.1184676307320527, -2.299658632991964, -4.262302197016754, -4.860020382725021, 1.0163359736023343, -0.42951753742002957, -0.3523287324699931, -5.8162474000633155, -2.5041612088263485, -2.7332919549014196, -4.572683108167761, -1.8239361680653836, -5.900857324984886, -3.0708081597240406, 2.6954377432003715, -2.366792850298921, 0.6045919180082076, -3.7600554914452102, -0.547487262009668, -1.6571197704284326, 0.16808287037874475, -2.8965561708875103, -5.617441429069627, 1.529091730312559, 2.035776202859644, 0.1957564147235748, 0.9891160590426676, -0.7881952625062887, 0.37915602217344896, 3.9592427597009934, -1.035096446448979, -3.8980823057968546, 3.739839222314824, 6.150796885417655, -0.08534581929988679, -3.3801572768101797, -1.828498433127742, 2.6266016620512964, 1.695374279548992, -2.9802308924979597, -2.693692917538666, 2.543562255457449, -3.5745463573723084, -2.260669415089844, 2.356822748157036, 8.833909071222068, 5.947859026694195, 1.8110742172250562, 2.0515213926292764, 4.561170463125489, -1.8790489043130565, -5.849868031431322, -1.7722090848460736, -2.3769353887009337, -6.869410428288579, -2.8822350948623936, 2.2998297723132404, 5.05606434387783, -1.4211680576216592, 0.6702230595737246, -3.919581210219348, -3.6089798141444924, 3.2747750291179374, 1.8468935217041988, -1.7798790806362237, -5.651790092225074, -2.4099915648780894, 1.2872910879942625, -5.6047981669382345, -5.309292565592381, 1.270305387488077, -6.790994967222605, 6.396939980062872, 3.439050640914119, 4.599451995435734, 1.9897585637140698, 0.2774059978462625, -1.2716503408678763, -5.557383616156627, 3.9524249686133768, -0.336363467059398, -7.438116154282412, -0.1111388515824616, -5.033111128121363, -0.5023091827952072, -1.674399617651798, -3.45567118217785, 6.50546939903265, -6.780392073153064, -3.2272836238880114, 2.6655117003067956, 1.4822225867258727, 4.193447425806464, -5.698810719943022, -4.628656735458443, 1.7045969156327787, 4.804365734950559, -4.843125545470862, 4.661924840085942, 3.252717389522399, -4.021433709399978, -3.389969296838406, 2.31793847663037, 2.3416222354789102, -3.388708175023838, 0.029620438644042527, -0.014489571058189328, 2.8177660485450002, 3.2477216066325534, -2.2500615156613453, -2.8118978257593046, 4.92789041110141, 6.058267570851643, 5.277498726118913, 0.11110370870323638, -5.843803689340226, 4.256779284553933, 2.6085060730007843, 0.8580760728518323, -3.2294615396093227, -4.708564822515176, -3.6649105834893585, -0.8846332956078611, 0.33853379036669257, 2.0650176421286557, 3.9163514405814777, 0.6859886381501865, -5.6455415806725595, -5.255516708655866, 0.417322425237161, 3.4249194583382234, -0.8742309068678085, 3.16468313505443, 0.128774774726482, -2.875889231060876, -7.242507813834278, -7.87000776442404, -4.596181985506697, 2.467649401365278, 5.604405677257832, -1.696219302692825, 4.705963763664574, 0.5005390825822539, 1.4443865728027114, -1.2934091175365745, 0.34369718724189663, 1.1782654515691051, 2.2630488563537248, -1.5048425498832392, 4.295383315077841, 5.550286314773967, 2.7193762568316315, -3.4462076865768667, -1.7104888668092741, 4.553154601966326, 0.7074952491806361, -2.1517563777498374, 3.8702038920898882, -5.550920680467193, -0.29391252957151215, 0.7871809960130792, 0.9020681091430538, -3.2768481461561216, 0.9654854453967298, -5.686280475156408, 4.137693679144103, -1.5773025255103874, -0.7159609010802558, -0.9968592941703069, -7.393899394717719, -1.8380039504723988, 0.7542097585292578, 5.224331941336149, -4.346843442962226, -1.140401323036743, 4.088554767307341, -2.750492114041454, 0.9170626482426447, -1.9404545517106575, 4.389145941165272, 2.7853717694154967, 2.9868952746583366, -5.910966423593239, 4.936446675913268, 6.177874572456342, -0.7240165745514215, 0.8070029463327482, 1.5835687516461998, -4.757152298491866, -1.6086966169749892, 0.6584980622339509, 2.0181940011431587, -1.8172076807789186, -0.3694638423478755, -4.32605222406577, 0.7143526746409915, 7.985803467226572, 1.8047317074763711, 2.9256126794292205, 2.4128072848442463, 4.51161737796121, 4.940401539939194, -4.357434719168932, 4.682347287469388, 0.0031526561743352357, 3.6340199665022963, 2.5624465982875755, -0.37774383951103174, 2.5109525384556926, -0.4209376196697124, -5.914109137963443, 7.694492292667562, 3.6838949516544974, -2.0379898599739223, 2.065316884218944, 1.5009745018563867, 3.193328303824696, 1.379404710290644, 3.0522485845722427, 5.178959574813553, 1.6509314765634795, -2.318486770435729, -0.11071165136642303, 2.491942294215009, 1.3445732327052242, 1.5825029685464767, 6.853068776269084, -4.271596625929151, -2.4644520768427682, -1.189744066262897, -5.086993447051875, 0.5580396549989562, -4.342618795133669, 2.694258157528964, 0.4000932769356957, -4.414571095560956, -0.8195432641084387, 0.4848156506573507, 6.26706285005154, -3.2817675023583996, -2.8738842028205585, -0.6922526942578069, -0.24139536488673, -4.859275013925447, 1.3606443402869457, 2.6093023363147902, 1.8357614241654068, -0.3703511871051423, 2.718185532097144, -0.2882491502058563, 0.11674404548420073, 1.5448522874063282, -4.740819335591363, -1.6619122134306312, 3.6159182704520267, 2.871348474963734, 0.4917665154548958, 4.248203967445631, -3.0536377117758513, 1.8135499557309713, 1.0481544948815216, -3.7705710780121033, -1.7867901117467495, -4.912672809924258, -0.9716937202372717, -3.9968577135272003, -1.004041224749249, -5.9712777661192415, 0.30292104750974497, -0.046471948612028725, 7.018705848789033, -1.1900749434322173, 1.105108652385061, -4.026809739197961, 6.950308091448132, -4.078081502828853, -4.138042454251162, 2.0398784011269107, 5.10290000065281, -5.514678409508204, -6.4122121313473865, 0.917111136306009, 4.224099343879037, -0.9002073997336908, 8.077248069033452, 2.52367032929737, -2.297389249093856, -3.339530225481769, -1.9889792498529988, 1.4628662554710665, 1.0714220217631714, 1.4345328029832263, 9.030055954237561, 3.8096189277171564, 0.5624406851907564, -1.2593020186837613, 1.8099169052341055, 1.5077284772197301, -0.5406713024849107, -0.2865873771127161, 5.974222431490816, -0.12530843940806463, -2.784111888804252, 5.4143766289088076, -7.761108489579569, 5.25203950061664, -3.8894978141390397, 3.4132734990399682, -1.0088920044813694, 7.812183571183841, 1.9007634560203652, -2.2489946352643404, -2.1755972251823703, 0.03047417071747259, -0.12092644072980568, -2.4631317392709406, -4.412119515517062, 2.2069511920122076, 3.9569148268339718, 6.045427575250521, 4.871446038795026, 2.2570463349530523, -2.15569344654834, 0.030627018175812745, 1.8479044864692975, 3.70935110170071, 8.948047988268943, 0.39965146045942557, 0.23396846956971803, 9.603549047547093, -0.6125202659449157, 0.5422330714388858, -3.1926246611940674, -2.5463154713227407, 5.769175516169873, -2.3503290586887924, -5.45146858314599, -0.24285913644042575, -7.369814938773048, 2.41762715278436, 3.089818111179166, 6.109980407220173, 4.948220058696481, -0.9477639360558707, 3.806170801369825, 2.9176074841370965, 4.112542755811763, 6.791055062504291, 1.3894293725239513, 2.3034926382002405, -4.250994921159952, 2.0124793784935955, -7.7250298399963215, 2.1552905869152617, 1.2720312330539107, 1.2282806732676632, -5.128541180702457, -4.541146027859128, 2.360621992289964, 3.028377999292892, 4.268248058146763, -9.132778009598349, -2.420548527979836, 7.450030088432375, -1.3596577001102386, 1.437490958063796, 5.819778011780309, -3.4657134292589578, 3.172170515695639, -2.015535541351155, -9.9833883241256, -1.0487267592584073, 1.480140723669453, 2.9050151162301368, -0.9183090502710758, -0.7124919302004135, -0.8102166102669802, 2.2793696587610195, 2.4906730794101413, 3.230337548863068, 0.2780040986649148, -1.4087824041015908, -4.29065809826443, -3.2247512831346072, -3.424060250054839, -0.7134059928982498, 0.8683859574406261, 4.21379608309761, 1.9531508895929748, 3.1780771346098193, 3.108212904623147, -1.4403107334580763, 0.1611233448360401, 0.9604784915959563, -3.0798884790848704, -1.6375781074952165, 3.4819088901608857, -4.012485134334502, 3.3625338831306903, 0.571291277708586, -3.6860991252963164, 3.444777769288695, 5.920733250993796, -0.43658980862007485, 3.2324592021788248, 0.3785076034401978, 1.8609659286235523, -0.9060946606090965, -0.19956795604512087, -5.269518901588621, -3.3624271837277426, -3.7092722737353077, 2.350827786439272, -3.895441805149103, -1.5453263229210192, -1.1443036588669426, -2.0681349561806086, -4.907470689334958, -3.8714713333188526, 1.9769566161720165, 5.670489731868666, -0.20651543061228744, -1.8254630111781303, -1.359569567095967, -4.2746293909773545, 2.342741899832457, -1.5542112080605848, 6.682103750440349, -2.675733877428269, -4.74374913837455, 7.883945798314051, -2.0396185450243576, -3.2800859019713475, -5.168460371197493, 3.003501118209205, 1.5227827143097776, -3.5523586074974225, -1.3625528644236393, -1.6052634427892032, -4.804211903853966, 3.330380403479988, -1.3016060542778887, 4.380632930682245, 4.6173493121394245, 4.290404177947834, -4.909167550306691, 3.6436378546101977, 0.23577285429125988, -3.3928968381449534, -0.3610219795991275, -4.741525278698287, -3.5398985869097257, -2.065279000170044, 2.510566109244726, -3.4170323142940835, -4.676455051547897, 1.4312090719895298, -2.750652744391187, 2.0118534927976315, 0.4634187806973349, 1.6624476435476012, 3.9592229898937923, 2.9257355847632156, 2.781337270542062, -5.864067523475721, 6.989389020068433, -1.3566754310861664, -3.478566569266376, -2.854764715030325, 0.14047922274782884, 1.489113923913523, 3.0258393945910655, -3.5884713398478825, -1.0524932810271734, -2.7571802717352716, 0.5873241690467594, 2.181839425346833, 6.117407090375009, -2.760918004405182, 0.10082355174785274, 1.4752588428302331, -1.2461825642605564, 0.7250646419566741, -5.730563033420817, -0.8434917479097683, -2.3868512899470957, 2.353652248242599, 3.7677952439230045, 6.920907862671869, -0.8718917340768572, -2.238746880550693, -7.982070314047063, -4.318124406869843, 3.002141914270259, 4.230383914923952, -4.420244836198661, -1.7685880160534133, 0.9651557236578016, 7.596308447501418, 3.7462208665709213, 4.87157616512781]
BIASES_LIST = [-1.3723156034345365, 3.7055632468114372, -3.615392953597808, 4.7948499601865855, 6.345361476087875, 2.771428536599777, 1.0955925146275818, -0.08149662937043355, -1.1102803928297504, 2.6593660695337764, 2.1291348410965045, -1.376281334713211, -0.011394386721690894, -2.6232568898219433, -5.503832337437478, 5.258257326847251, 4.829666141933946, 1.4786254713546299, -6.572243507151041, 0.015707915703289513, -5.077046575801882, -2.8120833957033566, -4.07238090603089, -6.089324122359382, 3.9231786677722598, 2.6423964798446744, -4.037480923327597, 2.922008621612455, -1.077927232933883, 2.297107248668494, -0.3448993184615346, -2.2950980743184077, 7.119859048756834, 1.852060444549397, -1.6843188995650973, 0.44729926773918366]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

