import random
import math

WEIGHT_LIST = [-0.808740608611294, 3.9629744649542085, -0.4464307474226108, -4.515415949839756, -1.7086939842421787, -5.263794462467928, 3.6077751835306193, 2.8026493198323563, 3.716109384048785, 0.9449323487697252, 1.7627096974292327, -0.020913945780663745, -2.2173780418049565, -1.0958253735571626, 0.3642786565587053, 2.471263398774846, 5.143172748393412, -4.180743955710841, 2.665785851292784, 0.3117774525682866, -0.0967380269785435, 6.62064316020445, 5.848428165401949, 3.8163218029320642, -1.3441559357352213, 1.358404262507542, -3.875144895124916, -4.088779826612366, -3.138849755376582, -0.9081957721275122, 0.3768401649998103, -1.0306543632629244, -4.066090339199835, 0.6260011024808723, 0.9327505147729256, -2.476855464849837, 3.6596623577289273, -1.494491879520524, -4.107706800991171, -2.0549280498629505, 4.616448325808822, -2.992646597376784, -1.0922158055614772, 1.2481661498679153, -4.891203862375816, 7.868186998109927, -6.392419775055733, 1.950836404171877, -1.5410160382558067, 1.1827687701537677, -4.894659584238815, 0.42170455138247886, -3.6670222068352345, 1.5416629080404598, -2.014613985552802, -1.0497651787915525, -0.9004703789919304, -2.9869177535078903, 6.1313200250279305, 8.422572239892784, -2.7649667990293905, -3.8789721735921345, -3.4649032637198083, -2.8992505081053532, 1.4062881126362945, -0.2527856038520464, 6.4769793199190735, -0.9681130581159487, 2.644578250736611, -0.18357188140029868, -1.8131379955383113, -7.074033612735564, 2.139226625891949, -5.696332923839221, -2.4156541295182654, -3.248283930578105, 2.4943095981576606, -7.7990427147651555, -0.9860622870662465, 0.4671766330493483, -0.36520255986635064, -0.5147939766520222, -0.6794393735736226, -0.39445586511766895, 0.10707069103124023, 3.777411621356686, -1.1018540047674104, 3.525838174982229, 3.3319247200013056, -1.3347625935719782, 3.390040388744209, 2.0683280318176402, -3.844983610555539, -1.8065564861726795, -1.008791699421417, -2.028856437314641, -1.510377899903553, 2.7759328559135383, -1.0769256010644555, -5.1526392399604966, 7.2679371745723405, -3.372440332288802, -1.2862121532363728, -3.4752842830433988, 3.5479080460607566, 0.7149959637413079, -0.637489892920246, 3.9772039866312, 3.9937331262859965, -0.07269928755145161, 7.260442159937641, -1.1828214556541412, -0.7607324504605841, -5.930325879521315, 2.9697890778026452, -6.392356013889584, 4.587206779747835, -0.46376129787274567, 3.689293679837908, -1.1948238716928683, 1.3396512425982778, -1.884269300992606, 1.0179371327704945, 1.7296228292482985, 6.60986609026215, 5.0714542772967235, -5.179686142159567, -5.929752108550195, 5.357468035064405, -1.3164047240369328, 4.031288866191031, 3.7807659516224525, 5.032962959986758, -3.7456609518757333, -5.291549495587793, -5.012655275855469, 3.0306791039733234, 1.5036339263278338, 1.2689782372385037, 3.7367934431235508, 3.3352268439807524, 4.973959160599728, -4.821933594965075, 0.008569221443356145, -3.75522487903374, 2.957476520860264, -2.704311576874983, 3.467608972109061, -0.23783682777865822, -5.138922932230765, -0.5045932288041989, -4.221584487296269, -2.534803363144486, -0.7595993877505935, -5.877356518931057, -6.024303262836749, 5.364116494341097, 1.5287371116364357, 3.081468416735966, 3.2369953603608232, -0.9599252402991796, 1.384492660968501, -7.152411191494041, 4.307584104573326, -2.8070747939573066, 0.15161738006865444, 1.4681943637790797, -2.771997129573818, 1.6037093531825977, -3.205381494707606, -3.2463113722187806, -0.9419332287761376, 0.6696831232497273, -1.3410767576702052, 1.482012452450375, 3.37266708821113, 7.844218106933781, 1.7419038849532682, 1.4699650318004704, -9.02473470499319, -2.484706955277499, -1.1903758912541684, 1.698257033420366, 1.8847335115333363, 2.996876081837307, 0.22923931321834923, -1.7833977359725555, -5.0315372551439985, -2.1518387120429336, 0.08793391560073793, 2.3325477197443134, -5.220494007433714, 3.398100664956818, 5.226092958546694, 2.217608622401242, -1.4067582387428577, 1.879400306634845, 2.9090946077008333, 3.4648194298105315, 0.7770968856921381, -1.067965080625775, -0.29341378796034223, 2.576237183310795, 0.6842329913538574, -0.8731091361599623, 2.72943164159009, 0.8070996920558131, 7.23043610318407, 0.3365444845542993, -3.220594984655647, 0.6573779868804952, -0.16863540293291757, -2.436114799124319, -0.6960007718111337, 0.6037631295181112, -0.8812498924158416, 0.3194776246363751, -2.8020186177592468, 0.762130942198769, 0.8962049291956047, -2.390616881789496, 1.3395237390390187, -0.03463589493826147, 2.7058558632621974, 3.92365468115554, -2.9332864876243683, -2.3000453749635863, -2.8453107624775265, -1.1868120047646054, -0.811058020088309, -7.107889832360836, -0.3764187598735611, -5.494288154801012, -3.3332173726512595, 3.202293521533864, -1.0485308398742912, 6.370432168928161, -0.13738452784764021, -1.0774370308361547, -6.250595922144311, -3.073627794942116, -5.029404310640286, -6.1633225753555685, 4.758579716155029, -2.1588545385164757, 3.095003886622221, 2.2079348961810257, -1.5896109032930483, 1.8436510825870904, 8.954731263041083, 0.3270715687975372, -1.5011860959363108, -3.9796976514328914, -3.551978741906408, -2.726341152224264, 2.867445861584175, 1.5516892867610368, 0.8812681993070568, -3.7085692600799725, -3.166212349707518, -3.989269386176143, -2.2694242792080273, -4.267730449416193, -4.613688284115758, -3.49990314681004, 0.22743469016345164, -0.6044176415328018, -1.5478101533665212, -4.529229647548713, -1.3857893182562067, -1.3613926246003658, 1.7388445467106246, -2.3301954220464225, -2.1794987996863684, 1.56766989919966, -0.3275342872472967, -2.0852032524500292, 4.305523223648978, -1.0478389907510905, -1.5048704619697542, 1.0147067532338117, -0.550609870920552, -3.7209904535803062, 3.7452092044696936, 5.700651051114245, 1.1127266760276964, -3.9426455622233796, -0.985299887109087, 2.7448841111997453, 2.5056315380530307, -4.05504778246384, -2.8192760991493167, 3.587093265957514, -3.7656459101033937, -0.8680773240652753, -1.1658671185780995, 10.545228939188537, 6.262399770640484, -0.7223332203953201, 2.772015366278402, 2.5388812485291035, 0.8291127193634555, -3.3537337928591446, -0.40194281329842996, -4.097650796495076, -4.0437680081414875, -4.584830487579943, 2.9685672783805916, 2.5209335023177575, -1.5862940281476128, -0.0028185060679511986, -1.5942722405446832, -3.049475042721471, 2.49951434177194, 1.815182936961898, -2.233986566033562, -2.238190536040573, -3.570900904818635, 1.7642133242193236, -4.72192899050294, -3.9947825553452883, 2.742508664236197, -6.084140817855842, 7.008296933675558, 4.938421649303386, 4.924386329433748, -0.006201167909429817, 0.6634766365585325, -1.5895622676237364, -2.701414396542296, 3.3753794137588784, 1.052373986077428, -6.671693624005501, 0.9811425412031802, -2.9401859392603322, -0.9192770810703113, -3.6557964616599303, -0.9249662900172282, 6.902458255713713, -5.4842064707544145, -0.9540829150283401, 2.373992337630161, 0.30873545982402195, 5.488655414761527, -5.959571106934174, -2.1987391370152416, 1.5179339287998799, 1.5031973684565498, -3.287943338808529, 1.6934908979204515, 3.2309601221637827, -3.3106729235267554, -2.23158983502384, 1.7991892782186438, 0.40940026606620394, -2.647641439315983, -1.8526475717886104, -0.6948120491388554, 3.329558104417983, 2.4656878455857454, -0.4110171941857348, -3.2596859244036547, 4.526661336185752, 5.365328585960894, 5.917003669406778, 0.17061500174191635, -4.289405526972107, 2.7396951176607987, 2.8659266140508692, 0.41909403954074853, -4.657102682025422, -2.040626237964716, -4.143630639814858, -0.36533202094205086, -1.5468252391661885, 3.26079385049876, 3.016972850346548, 1.6128800651305055, -3.754465213180721, -4.086813751326481, 1.5114299157479154, 2.8531899299343455, 0.11965529844267975, 2.315020412004392, 0.3526617298699448, 0.028642793783226317, -6.544201501236174, -6.986817695409289, -6.755888048526353, 2.886163958022657, 1.5179158672040503, -1.1851886770776867, 1.9507695136387193, 1.0960094958457294, 0.8148591912055161, -3.034906901200411, 0.4865468939355573, 5.0492969789324675, 2.61161470409394, -1.1314685111980285, 0.9982035453235221, 6.671056980029895, 2.713611805459051, -0.8070157511779068, -1.3599093226499577, 3.303205113015977, 1.5617401670880229, -3.02476674317142, 3.4166231986629043, -4.7479047280306474, 0.23258579272580127, -2.254690893149581, 3.240606026344061, -4.674348162335059, 2.221058833754337, -4.7778825859231375, 2.163560795850918, -2.4640343400959805, -2.7927964353356742, -1.5251162436594745, -6.400559988360237, -2.260132450150464, 0.012420715751797928, 4.275552656587912, -4.738613911329831, -1.0953016448113764, 4.019009192107008, -3.3925414249883454, -0.23947457386584603, -3.662020248406401, 5.085912884664777, 0.0029536530453733167, 4.08214879902084, -3.9437220084575326, 4.653759560401486, 4.441143507766396, -0.6231626846352898, 0.3299101023144957, 0.8079967225695941, -5.627530688494975, -0.6992387356154179, -0.5994709408123958, 3.338819532608076, -1.5433312548072233, 1.4065661490496506, -5.267993880003868, 0.3714636183230273, 6.413319135449013, 1.952291658145716, 3.2622397586147986, 1.2884581318496862, 3.904558388704859, 3.1998795492866856, -5.400871684836881, 3.061489806791105, -0.5970701743623497, 3.4243269386748985, 4.9821886504093245, -1.8114315918150223, 0.6718609000067848, 0.46024463582748143, -2.9847711302405617, 10.243199138875024, 2.902612838399121, -1.3378923126872642, -1.7794026285189928, 3.0474300875743143, 2.713798833805244, 1.9139079652849649, 2.1480424206953592, 4.48050855580119, 0.6630506658210278, -0.7346040944091856, -0.642324542923624, 0.23740848391965086, -0.4162410055117415, 4.254730248677669, 3.578677189591108, -4.886982302540053, -2.4200531838899133, -2.1209860032602115, -5.142028551536553, 0.06840896444904399, -5.14279234209345, 4.384378197510631, -0.33080490098288884, -5.3631314936162795, 0.7165799057977909, -0.7295627008861157, 5.2416383551490515, -0.032480425585905914, -3.8208425410464057, -1.1060521532232992, 0.7271875837425195, -2.334299212176879, 1.5514713211518383, 3.5550958194882014, -0.041059773788422405, 0.14074394539941748, 1.9868857728562297, -0.13929785293376162, -0.6960067156695618, 1.0594393301432659, -3.476480823123694, -2.2675807397374115, 5.491027750541454, 2.469553379559792, -1.5294551621821173, 3.1183521193148795, -0.7118700518591741, 2.1834723563437635, -0.6650196573579639, -2.603902993997961, -3.1376352483746732, -3.9717478631899867, -3.424646455487797, -4.060249566774104, -2.55090917153955, -5.208162027429535, 1.108985177845153, -3.24976046393026, 5.433626598324801, 0.4828318771128379, 1.376556444691606, -2.0620534196670035, 5.399123459179411, -2.357116352712393, -2.561078870660256, 0.41464616446749614, 5.446836001388897, -6.578053884017236, -8.2120808697992, 1.6322006415695647, 2.437276054422505, -2.8816566593134794, 8.999562969329059, -0.42023210143925793, -3.1561160241264874, -2.1427988679650465, -3.943387048815003, 1.8803681318273533, 1.1913848444885589, 0.7668244515653218, 7.257170983122684, 0.813827606572433, -1.718358207615632, -3.304237208880277, 3.13468486845262, 3.0836258218804797, -0.8230979127815667, -0.21224470979458143, 2.4864306407755428, 1.3880621100724593, -0.48078362275854736, 6.5815456791506435, -5.53843579396556, 5.7797348771616575, -3.4384502003993016, 2.2173594053376133, -1.241103674638834, 6.95635626859056, 0.4623035896172527, -3.192352823936805, -3.8760329473853568, -0.13251984643207682, 0.5110985737045277, -1.3496436007379369, -4.133933255765271, 2.4784588356129165, 2.519067695992096, 3.9811486942043723, 2.9181708536506026, 3.0744308259552895, -1.1134186221227491, 1.8680796364069594, 1.9598182441493606, 4.020296803133405, 8.07420674104083, 0.31593808750743757, 0.7643167018648767, 7.879285032956123, -0.3067422897373151, 0.21858912435867328, -1.9299689478169002, -3.5281198058546406, 5.606660711154052, -4.439917076989833, -6.415565593437211, -0.9092937453715677, -6.07060007545339, 3.0944641641921837, 0.6791039201085429, 6.711153708855893, 6.0509799847791035, -3.193374125968788, 2.27864279181526, 1.3165984992044577, 2.6967279646037223, 5.796725121027835, -0.00924154122974774, 2.8271758161405374, -6.462041253522096, -0.24285294332440843, -4.766989418655299, 4.197442102178114, 1.8655029866277366, 1.2888448187276822, -4.758773469558485, -4.222031673355838, 0.13860632531922956, 3.637629112745909, 1.7527940029199023, -4.92606405168538, -3.103462638895392, 5.607962422353465, 1.0966247801657998, -0.08615579560308406, 2.6842180434960525, -2.0499246284067176, -0.5105936679293139, 1.5153647620212136, -9.076338982310752, 0.5562620685477766, 2.879481466503017, 1.2051026972418786, -1.3770605022694222, -2.2250237077189468, 0.6109806064072645, 1.947160423585796, 4.2727781461858, 3.2765100670282017, -1.4244216872743292, 3.067630626477806, -1.547164462824852, -1.8831651890180887, -7.272392818626021, 0.22955106339127074, -1.346229473456421, 5.134359375397812, 3.6571472733372605, 4.231938728829848, 3.716135018287428, -0.2142651031168611, 0.25287445970777744, -1.0743267451753298, -1.2955844333549118, -1.0522074371994972, 5.700895648895923, -2.676422854713587, 3.9471084532856615, -1.366346727427382, -3.843583312754739, 2.042491857013258, 4.583661519203993, -0.9917241751552167, 2.424970732602052, 0.7313436122436168, 0.7510410252407269, -0.33644953322339166, 0.10032578451172514, -4.438117282286078, -2.954129648007401, -4.265506019177312, 3.909688168138141, -4.481243885295534, -1.589126363912958, -0.15266018737796483, -2.070408611038949, -4.158816963342764, -4.554774388738496, 2.008188934807267, 4.091429145113169, -1.9271861466410236, -1.211970626663664, -2.4640142182868265, -6.760667685400293, 3.3071029052804066, -4.4941436341130885, 4.141943704650021, -1.9566317514832556, -4.647361100981269, 6.359042458919308, -2.3467070136295907, -3.6994462819774743, -5.639852760718833, 2.1520095032826267, 2.692429657595203, -1.6471046746802316, -1.8242225628259578, -2.4227216472315147, -4.325825694616605, 0.954101291756269, -0.5225253371384635, 3.442349601736595, 3.6565297615856514, 1.648838451041338, -4.915465600433405, 6.037313734767988, 1.2770533319592978, -1.9920851256577607, -3.8976271807892755, -5.05238477631708, -3.3079646068727726, 0.2634618807740834, 1.5634615461648966, 0.9477319163694609, -4.070543322272024, 1.7272636800203767, -2.732511401576944, 3.9881193741934347, -0.036744561409168486, -1.050332798886465, 3.7561366638207083, 2.109139802682619, 2.0064721141403865, -5.267346608621557, 8.698273050128087, -1.2512635142468924, -2.5876205188905903, -0.4169380801282442, 1.781189286562249, 0.7593198465845707, 3.2074119792097235, -3.278216227065123, -1.4998023527766775, -0.6088388748610214, 1.886099684208025, -1.274811826816777, 3.5016576867350118, -0.6739620327632441, -1.0432858336678466, 0.10767127834954926, -0.9750445324053334, 0.1292034604798995, -3.4174917674920993, 2.4294564341776756, -1.630384612570552, 2.34606430308776, 5.006567907467487, 7.4421525261025, -0.5421790842992749, -3.9362980938332166, -6.244794009197861, -5.417066544793372, 1.0666891287190632, 2.9995314789194647, -6.9808999122772715, 0.2128323569606212, -0.08911788916743124, 4.929913018764797, 4.934155659064246, 5.073972443735267]
BIASES_LIST = [-2.176761531468907, 2.693784923270981, -3.6956582013272135, 5.2748603998375785, 5.951592233007388, 0.9798874987745962, 2.5097030600365873, 1.0953705077457858, -2.9489841877884375, 1.6286574241053744, 2.865378794242329, -2.6630719741472326, 0.6448266845066448, -3.004595467951133, -4.632497945092204, 4.508508715497705, 3.999006109289052, 2.555108336581525, -5.505077118972998, 0.028433501692362473, -3.2105540652771847, -0.4199345335313712, -3.8178260595460873, -4.115494743402635, 4.2408445190935735, 1.0773669793478566, -4.101955048868708, 1.456224003992233, 2.5973976043240983, 2.683301893364214, -1.2980429802185902, -1.3245510789083548, 4.344520943786344, -0.9773920653265921, 0.80685605662728, 3.576609494400542]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

