import random
import math

WEIGHT_LIST = [0.5730598058721664, 4.903095055165634, -2.3289168735168286, -3.557733935366702, -2.327015089117324, -5.294192278622719, 2.874859957674024, 1.83296124330239, 0.8183870291476909, -1.1109369856471742, 2.5961517565309546, -0.020423084297014633, -0.9013422067557508, -0.7524064087387503, 0.23173587411869007, 4.931180936787211, 4.677376852543915, -2.9735641875672205, 2.836197190039654, 1.8263726608095578, -0.3690046411917993, 4.34881035131809, 4.919194237434274, 5.410572389634857, -2.112484705877164, 1.6077611393879823, -2.1903827556013433, -4.3586095820909465, -4.910192017547301, 1.3978009897738026, 1.3518836647669739, -1.1154723487541236, -3.3898534271474468, 5.2543717751993215, 0.9965832075508302, -2.4858233657001594, 4.140960183260577, -3.283113179172598, -3.761597263727137, -1.0259648726447332, 3.8307472090468933, -1.868424502321478, 0.41760990848023116, 0.16347644267393263, -3.267599500960365, 5.726394093318723, -7.875221113168433, -1.0363714866157385, -4.60856215281852, 0.8903153872995915, -3.841027929018504, 0.6720557555457531, -3.5874016008629677, 1.883562462564772, -2.246815630200197, -1.60086797823218, -0.4113343884568827, -1.983216835575732, 4.897809079435426, 9.877889383852251, -2.1854421997644065, -4.494422176020048, -4.316924438918842, -3.5249793371693685, 0.7383844494752562, 0.20588199202305155, 5.346519450645366, -2.2016145224545633, 1.225935435610144, -0.6794309869354922, 0.44282078632022553, -10.345237505827642, 0.4864189604841541, -3.6945496069562225, 0.04432522005217674, -0.9615115781251178, 3.385143524067507, -9.80047499473629, -0.0747425122463096, -0.5654344425505587, -2.4094107573558707, -1.1107208761331937, -3.2521689317113736, -1.219857454365734, 1.0156800089453655, 4.798535155806361, -1.8259926179817587, 3.986475049523048, 1.3548954287442216, -0.6718347592314479, 0.9982210939418262, 3.787358563753934, -1.2456304459489955, -1.0684449991320046, -1.585923854974387, 0.5333772554631463, -1.7573746346405397, -1.1307478917844747, -0.628500499569225, -3.6877223398409487, 4.125146281209056, -4.8242241622180275, -2.333333424278138, -3.6086394019506898, 4.941029781893574, 0.7455990588968671, 2.6978239765970886, 2.6810499689165614, 4.962768674757106, 1.8743952386541305, 4.398930622719682, 0.6116351693656109, -0.5263958786522619, -4.320501316355767, 4.457974734327032, -1.7134158074611017, 2.5458226603059564, -2.7674668024293063, 4.561367688143688, 0.5687527580147217, 0.6230587928249032, -0.16550897225947384, 3.6011216165700612, 2.613961409275753, 7.015425099695134, 2.441046688051033, -5.380969816703232, -5.630261263390986, 2.560610347730374, 0.05875043840254347, 3.625966915633985, 3.8509179967626452, 6.505410145917867, -5.7382064448900785, -5.205372828199567, -5.151474927772372, 5.244943363059609, 3.5037109729102767, 3.5685173804105417, 4.554622713752804, 2.079569168744991, 3.4726709216696454, -5.231507695921363, -1.0500423533511711, -3.679555452803339, 2.5160097977729903, -3.9464670162801863, 2.486773731428648, 0.45824950549040205, -2.480467358294172, -0.42248340247683835, -5.101019589452115, -2.4185304042981945, -0.01620254319754686, -4.149908351803664, -8.683365808320843, -0.2178342341660091, -1.811260924855503, 5.460484596149118, 3.801331807315829, -0.9404290536124781, 3.8435651228776493, -4.55847943078928, 4.478254528427656, -1.1266378317598371, 0.3668845212146594, 2.1102449484525714, -1.6933075008644323, 3.3708114077902787, -2.614064905952142, -3.464981721619772, -2.4247993944765542, 2.0646453025657427, -3.279753146079683, 1.8369004556293491, 0.19495414421563229, 7.301110016688574, 0.13805264958296246, -1.2392162422081234, -5.379491571282964, -3.225079400594775, -1.8893842301959403, 2.15490562814127, 3.643879847072423, 5.116277722308241, 1.1285456742627482, -2.629355897153461, -6.098671929363179, -2.509107213508319, -2.13317377159293, 0.07935687961580565, -4.283214071656496, 4.56849100900739, 3.2570719058300677, 1.9134699319281006, -0.4278930250294161, 0.7577763647554884, -0.53311673574219, 1.677441991316998, 1.7566256192708907, 0.12030323301700772, 0.7155012806112064, 3.0356148682603012, 2.4223685727616497, 2.244139938562308, -1.3385861819842622, 1.0321814341308793, 10.569867343753726, 0.595934830886697, -1.132530045760574, 0.612347293066051, 0.761503915952323, -2.94791370766431, 1.30374562039617, -0.6520899600917536, -1.7622458217301833, -1.6113496001976175, 0.33274141052057393, 1.3049483329626679, -0.7548822801790952, -3.923092186323448, 4.080585500008529, -1.5743261653601386, -0.9407767534841598, 4.257584766304082, -3.5215644860885873, -5.029989313062726, -3.3173985682892098, 0.1489309796009506, 1.7541266791965857, -5.335028647157572, -1.6958914672307055, -4.6789995352601865, -1.633749768454369, 5.276582624352564, 2.3939972752446543, 4.268977914719611, -1.165203460445634, -3.627661436496482, -5.945777856428702, -2.5734145005205677, -2.6006403055587777, -3.5930167297895927, 4.843859503040823, -2.600224187612619, 1.2130456755611696, 2.603517396398156, 0.21700839987505194, -0.07349421859686177, 7.129664183346606, -1.551657466104052, -2.1177692876345073, -2.290468478136107, -4.27260579585339, -4.854653148067155, 1.0086264044951756, -0.42148475680999337, -0.3600794534799608, -5.800727718768032, -2.5074931318574363, -2.734701410348949, -4.577521416615584, -1.8292417008657793, -5.8903782247889085, -3.0720106524354382, 2.6873804466003217, -2.3672076511223272, 0.6035880597172028, -3.770472501099356, -0.5499583380145338, -1.6500418955013099, 0.1626581892341049, -2.8972899221440582, -5.61527616356495, 1.5171868364563545, 2.0350920654061926, 0.20260207030438743, 0.988729009146119, -0.7825009488704399, 0.37122655527156234, 3.95214236127784, -1.0275316873952216, -3.901179459593036, 3.7387443143094803, 6.164549060618969, -0.0868747197629727, -3.379299192190331, -1.8182454113451192, 2.6397953130990257, 1.697371249989113, -2.9726464943500504, -2.6949672352005862, 2.5452901471314013, -3.56617689952024, -2.2695682934007597, 2.3742313592950652, 8.838369119740063, 5.943643964428805, 1.8075238091890784, 2.0480645790696697, 4.5640370758665885, -1.8644328733204418, -5.850661038543252, -1.7806148853615307, -2.381386127353024, -6.859807730257738, -2.8821022993718493, 2.2948811251810293, 5.061617378726933, -1.4194812560443826, 0.6761442580892341, -3.909867219845884, -3.5891279451197646, 3.2733301190513244, 1.847361777093174, -1.78123370102711, -5.647431900373879, -2.4083750530808516, 1.2967700714551738, -5.601592369051542, -5.312169862619087, 1.2676124908234432, -6.788792617115571, 6.4007584739889, 3.4415492869678648, 4.606983170190052, 1.9920996296674447, 0.2734418234232505, -1.27306856873239, -5.548582244486732, 3.957176422945402, -0.33916579969664723, -7.434875511753908, -0.11225283971530067, -5.035827165446678, -0.4976623257389783, -1.6707708537414059, -3.463284249618527, 6.502793932252064, -6.791881316237481, -3.2302065675436613, 2.6662474035421235, 1.4782296953327314, 4.19190226470384, -5.687006156837616, -4.643323867890779, 1.7113326845415344, 4.794369606393862, -4.85458471964916, 4.662105815429485, 3.248615820261199, -4.014933390221842, -3.394085688456551, 2.3118769586518546, 2.3501552665483088, -3.391797127493764, 0.04285879468044462, -0.007151472723835321, 2.8123072025096967, 3.2417353556074513, -2.2484896168084783, -2.8088373675249927, 4.922679660596466, 6.045280017867508, 5.290958885004387, 0.1222079325342429, -5.834714618809865, 4.264267324996405, 2.612870066592932, 0.8534480204935255, -3.2158906306003923, -4.7041641762882715, -3.662965769627267, -0.8947854567327305, 0.33962504361572743, 2.0753109647666093, 3.9230126001834438, 0.6686223636136287, -5.64403416749936, -5.252533602458034, 0.42172043850324503, 3.422691875070713, -0.8825133300348406, 3.1628240993232315, 0.116147208897431, -2.8703549348629256, -7.249597499790446, -7.8704438528729135, -4.602124970131978, 2.4603318228487843, 5.610195665145113, -1.705825371870178, 4.703034180860429, 0.5065148879516712, 1.4330670103903635, -1.300887982436386, 0.3458943323604408, 1.1790558707795675, 2.2595455520343664, -1.49680771336707, 4.291302287177809, 5.54096202504335, 2.7195067999814886, -3.453248779517381, -1.723472121699822, 4.550184113914416, 0.7009457122317476, -2.1402734698408965, 3.8610677754235203, -5.55258811556403, -0.29056219796198834, 0.7864345437132858, 0.906905968551701, -3.2937879320923193, 0.976000266117201, -5.688026367537397, 4.14675945515117, -1.580287803937173, -0.716374471434171, -0.983721669539612, -7.3985093778557856, -1.8468600615002573, 0.7676805449340401, 5.216308685284908, -4.3386618825323175, -1.1470366930980889, 4.086582884667657, -2.7535073806956176, 0.9158086836412608, -1.9289389897149862, 4.3869242940019655, 2.7827722624823794, 2.993089311076022, -5.893650558087248, 4.944271374275083, 6.184473117031067, -0.7315360361417227, 0.8074130119329351, 1.5817832892607164, -4.760403943327439, -1.6074284238848742, 0.6549110740715589, 2.020207522580084, -1.8262944032336725, -0.37552835198944634, -4.322818762519328, 0.719138207227385, 7.993318364549028, 1.8227790025483837, 2.9276249641252363, 2.4210604101479247, 4.520601206854421, 4.935155078697321, -4.359158329579363, 4.6929070785197124, 0.004224423287215859, 3.631020557485537, 2.5639848172706072, -0.3734651213661233, 2.5209117852900644, -0.41059412532263245, -5.918595334957845, 7.698782390759474, 3.6811138112083386, -2.040106620350345, 2.0670114622008, 1.4949335709596254, 3.200592683651056, 1.371749242403637, 3.0397549589107222, 5.184375349702374, 1.666557608125661, -2.3296453644997426, -0.10414903883707978, 2.483820788717833, 1.3479253102931592, 1.5825692100832376, 6.852328058029814, -4.270120807664069, -2.462440068796745, -1.2030098043922282, -5.092940854081834, 0.5660082722448512, -4.3439039894680835, 2.69832839830167, 0.39521290597471137, -4.406582505250413, -0.8255804396900528, 0.4883527397927826, 6.2544226511861005, -3.269150269616481, -2.8747031833621617, -0.6923363166911184, -0.23082817645399106, -4.862038842368338, 1.3584617785427833, 2.616091795166713, 1.8296100148267616, -0.3731512700515322, 2.721431240873304, -0.29424419423755194, 0.11503024795763286, 1.531429597581755, -4.749031689973395, -1.649017621163284, 3.6146720189458033, 2.8659503500641152, 0.500339560377762, 4.25389500146093, -3.054800177738766, 1.8093114161173802, 1.0457527296352387, -3.78243384014767, -1.7874505325525782, -4.921889091543546, -0.9711334139448888, -3.9888390008037957, -1.007310469437744, -5.975804520953481, 0.2910612557494693, -0.04301249863655397, 7.026284909795218, -1.1857694626735364, 1.1136230661381845, -4.0154700318902465, 6.958976904160713, -4.07430425279796, -4.125946072231681, 2.0515948739045817, 5.104933778429076, -5.504869423951365, -6.402773758692772, 0.9078058407429068, 4.219926321632603, -0.9015988406508668, 8.07006743653275, 2.5186592653314306, -2.29558510178953, -3.3319152339158222, -1.981182298940567, 1.4532451774904713, 1.0720943481056242, 1.4438355509104284, 9.024395717550973, 3.804640575321704, 0.5537724602399419, -1.2677722674188416, 1.8055639498412845, 1.5133497883173663, -0.5368658394999717, -0.2767982587465441, 5.977865649238174, -0.11528792015409756, -2.784806386607781, 5.422382046470785, -7.759044629441865, 5.267004840067815, -3.8981378488335863, 3.412931298811415, -0.9917224059920169, 7.80886008581329, 1.8869441120623083, -2.2405659792449377, -2.1807532500454254, 0.04248538053739514, -0.11542620268154641, -2.4601192558875042, -4.416096329752925, 2.2158288296588924, 3.9488373590983574, 6.054900185678989, 4.883555787949824, 2.255770264664333, -2.157916581632199, 0.03048860857827188, 1.8416301157568908, 3.705544832942417, 8.943356140346367, 0.4021898169177962, 0.24014589395825817, 9.604245132061395, -0.6185776460108336, 0.538436777022879, -3.1889580981224124, -2.551672538779905, 5.760736236537089, -2.3440862011906254, -5.443937947418388, -0.23273840030487317, -7.367526904289249, 2.413685975685813, 3.0904783766170403, 6.110458681888521, 4.944812043138979, -0.9557803537789488, 3.8027393692026026, 2.9309144400982827, 4.114014141696796, 6.788403063231698, 1.3992673680815313, 2.2980405137478015, -4.254649669224434, 2.0259855431331886, -7.739072230143052, 2.1510624611678035, 1.2646140072981313, 1.2280401989351282, -5.138806578162305, -4.539849669896437, 2.376290532443661, 3.0296637033216953, 4.274608804437988, -9.144229270440622, -2.4214145606322566, 7.43478442029754, -1.35887165111301, 1.4465268510867326, 5.8317479029762245, -3.4543230723414373, 3.164469250407342, -2.019429690159664, -9.984984134177065, -1.062151926599591, 1.4792461411653681, 2.900796886493273, -0.9092297159908992, -0.7007435507303426, -0.8020207266095815, 2.276537767582117, 2.4937421688466928, 3.2270940325408093, 0.276710181476433, -1.4084617411275915, -4.2838125998013705, -3.224113683795731, -3.420636950629626, -0.704276222830677, 0.8769990051997966, 4.211638069106199, 1.9512732031903264, 3.19019594575498, 3.1162640793369794, -1.4402629621175689, 0.15721697179227398, 0.9603831033832406, -3.091016392267537, -1.6312151350264332, 3.488751827429981, -4.018057479561393, 3.362469040690106, 0.5678297739076982, -3.685033799831657, 3.4369650018160893, 5.9220056121654014, -0.43984439693399713, 3.225636954949655, 0.38120176351135127, 1.8522891045245096, -0.9109827095133843, -0.21579217807922188, -5.26646050047785, -3.347732323937906, -3.716405104013604, 2.3506708474692717, -3.906519559081737, -1.5397211710610959, -1.1364930974928968, -2.0589600298401955, -4.915084466516001, -3.87237409992987, 1.9871232025055399, 5.680782327196517, -0.19850666634593261, -1.8285222466958666, -1.3533358686959198, -4.276009069525882, 2.3565655457139045, -1.5473892857764058, 6.687123504785297, -2.6750890859359457, -4.75158308064931, 7.883073418469682, -2.034172219695921, -3.2937272779599587, -5.172163484745889, 3.005823395708486, 1.5291735125683958, -3.5588022806675816, -1.361838763391707, -1.5950193339496392, -4.807709879173999, 3.33306683537989, -1.3035438471346645, 4.387286220595653, 4.624943746481139, 4.288731406723572, -4.918069000443847, 3.650027594557119, 0.23993336866900253, -3.405160179351743, -0.35945635026773465, -4.739855475447058, -3.545434365530753, -2.07118238489652, 2.512001339434285, -3.4033924854840314, -4.686113472035597, 1.4324527107554417, -2.762560442920484, 2.010295929705541, 0.47589301156747693, 1.6654458287028113, 3.961835152388316, 2.9308007902962445, 2.7873052219788814, -5.8580788464069125, 6.995769105001875, -1.3590280017146763, -3.4800573574198133, -2.851967906637918, 0.14292830869433218, 1.484227895452367, 3.036782715150445, -3.5923912959558675, -1.0541206457024992, -2.7550979719083175, 0.5998730732576117, 2.179903707517818, 6.122722312613181, -2.7699627596241037, 0.09460050935309089, 1.4750233730961655, -1.241963730667497, 0.7370420755704644, -5.731684785987981, -0.8365590607101098, -2.3859743777308338, 2.360799323286144, 3.7689354922994225, 6.926550736173825, -0.8792028161762824, -2.226263181515115, -7.983102370522653, -4.318633334713484, 2.9986387835548207, 4.227323748560874, -4.422196914540874, -1.7710217672696456, 0.9543209739778611, 7.592643099871833, 3.76060203611173, 4.875073441107153]
BIASES_LIST = [-1.3796407473417616, 3.707449279863164, -3.5971415341021116, 4.795740338426525, 6.332435959297127, 2.772691349150091, 1.1123847842636037, -0.0816953730141347, -1.109424306322148, 2.653659843548763, 2.1348217391394226, -1.3806918738806515, -0.012134145529453721, -2.6299613827371178, -5.508126066395577, 5.262505617050518, 4.815305204155136, 1.4761733152518592, -6.577897520655785, 0.00946646269770966, -5.0757704444330125, -2.8064659249427883, -4.080610543009591, -6.085679415258118, 3.9193513555486263, 2.646255622703701, -4.029202343951592, 2.9215411955739583, -1.0818161530284363, 2.3046922284040523, -0.33433875202988106, -2.2928315066593243, 7.129929191288605, 1.841357307151331, -1.6846679573535908, 0.445070526837533]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

