import random
import math

WEIGHT_LIST = [-8.275481160521714, -2.55180020753704, 7.282734426965733, -0.6596979046234491, 4.331618351508478, 1.8697255472153493, 0.1559147227251405, -6.7394353681354735, -9.287311154731855, -1.451720282440754, -0.08730027194437084, -1.7149690851620218, 0.1922064078325993, 1.6173022608893688, 1.2782460543010874, 4.36182545578167, 5.06005552249135, -4.9588681607710035, -0.39454033514017456, -0.3894009280422333, 3.9756409134203547, -1.3640167973823163, -3.3181320336836397, 5.313746930090194, 2.0462698737675815, 4.351434449235665, 0.40273789454495645, 1.120402471916837, 0.9254715880124973, 4.316421626805184, 4.549403904244062, 5.496688399094966, 1.2243755426097898, 5.85723291730161, -2.3910768083512113, -7.175589952957245, -4.2019420393106675, -4.65480359992111, -3.773350663192396, -1.62887221668626, 1.9864664095131936, 5.050946112163765, 4.165109248384599, -2.140737131058173, -1.4065543623349617, 8.81717008595405, -0.18661292560022996, 0.8747177395184988, 2.9182749135060235, -0.35514981764698583, -1.0611322542717743, -6.054497032567859, 1.340961560788299, -4.536181419951415, 0.5033949855337465, -5.535620157241329, 7.807783825409942, 0.5204774738585314, 4.099688749050496, -0.593499158584599, 4.8208163043762875, 1.9566375234941615, -5.1722952847483405, -2.9362425551027282, 0.8547316370728966, 3.220548617981537, -0.977178356090103, -2.159356140284649, -1.4555857759951591, 5.806394580705797, -3.048333286393431, -2.845671540924756, -2.5094192306897543, 4.517968252964628, -1.5060689350938314, -2.2296093183738246, -1.2702523686312184, -0.12426160771713121, -5.1263013915828495, 5.67627450315881, -2.7489556256013277, 4.677189093735954, 6.278793138834507, 4.235645517862725, -7.207188924228619, -2.3485547321063303, -5.318548821474937, -1.8501942436355465, -0.3249392281124774, 7.655982173635537, 7.817163777901319, 3.3487057398834827, 0.8310921982779327, -2.3284456954109842, 2.6443714514712213, -2.0527894623918526, 2.6674376210565165, 1.2101241917905985, 5.8651288509889055, 2.447443899644754, -1.7872706835945753, -6.752810387564003, 6.220688303777539, 5.019236887140844, 4.607273234484274, 2.2620754405835237, 2.82255368668663, 5.632927884058529, -5.352736290644895, 3.605758959541125, -6.689878596174987, -2.6296708243994353, 3.4620145487920326, -2.703348759110088, 5.965514399779981, -2.0488213014669023, -10.171019944922639, -1.7799268205231056, -4.934641824338962, -2.326046489540856, 3.607450404600956, 0.4882879483207154, 7.222042041695527, 0.37092192430631, 2.1431754730721724, -0.49005530484201865, -2.5293775472216167, -3.068374535980016, 0.8747932279021287, 1.6358005103950732, -4.933272942865215, -9.536415507589528, 2.041688185006519, 6.0018903733935645, -4.6400461909842905, -1.7537501842754777, 4.05141394599916, -1.2868898742039094, -4.093198656083159, 0.2897654480609899, 2.1401212936600396, -2.8437139388201613, -6.694283436029531, 7.118697191034919, 7.655888537271206, -1.3215375038149781, -2.6248947071362356, 7.954490561689296, -2.6632707121775017, 2.2824568615391603, 1.9431011534898173, -4.400290259295714, -7.17757978153316, 1.5134615273482277, 1.5751740045049913, 0.9444952073756872, -4.032312982622334, -7.67735176914191, -5.652750997998907, -1.5400682920450628, -4.89807200935749, -4.0720661535359906, -2.9534761578773745, -6.383806895915562, -4.95321025928379, 7.157546047488156, 2.781578784038972, -0.6932073015984594, 0.44462372868001765, 0.8883620451271261, 3.119042413354743, 0.16529169089321055, 2.1580650696689574, -3.3783006840754126, -4.3796445783644335, 2.319359698449103, 0.9776313102718994, -6.516361236074147, -5.021249618551386, 1.9921396688302409, -7.940723095008202, 9.026992856880351, 3.6883236529249297, -5.145509311274297, -4.30913428832063, -0.534502290673802, 5.297788796631345, -5.455580109452233, -5.293387008897293, 6.575125590371035, -5.644959546084731, -5.106457418025633, 4.939753240057748, 2.156951585561529, -5.42060464408939, -5.3301747694430235, 7.268547187872115, 4.279541395498205, -0.06973621609118538, 6.862031973074822, -5.4055897109264075, -4.500067075198528, 6.3301444583022475, 0.5495866772147492, -0.7565930456970829, 2.0361941127803247, 3.1202921106690145, -0.7851581867660345, -7.506296463210849, 7.394660267732905, -7.007787881734752, -1.7855419617044612, 1.3345106768438149, 7.3798976617220875, 6.249421495705826, 5.996143129420687, -0.4353387564445076, -1.6335822469758443, -2.491134266236275, 0.656086847510801, -1.922495977905607, -2.0034742486711874, 0.1354594001207361, -1.789890743450281, -4.540326942899975, 6.252677063010388, -1.402111702278717, -1.7724737027826203, -3.9447109572911154, 2.7566329591455094, 2.0620325341558097, 0.7528652313899782, 6.4509746544363455, 3.4747244809621693, 4.275902603700338, 0.6592676964722406, 5.333090810305583, -5.9060693134689055, -2.8439587497955943, -5.4385076446764735, -6.4429864742738765, 7.31455148674552, -7.267499521859153, 1.139465386786132, -0.4013974466710112, -3.1366785458244637, -0.11647922980514203, 3.9123665460331747, -4.456658162004085, -7.1128013104439, 2.1829156282576814, 2.050661856092746, -4.771021290907445, 6.255806390307056, -1.73636572901869, 2.038072155695195, -0.5196019821279827, -4.112938804076222, 6.624069067884451, -3.683174601829362, 5.740151182190479, -4.51537376141737, 3.2856239199861217, -1.328091097355624, -5.430881598789036, 4.328995020223896, -2.956393719609502, 0.03861540658203105, -7.841883157737915, 6.598112294907819, 3.436090641440184, -9.676829836967041, 2.304425305685377, -6.853659778215632, -0.5434036517813918, 0.3560790283668951, 5.504206104400118, -4.591907519207305, -0.988300240695348, 3.3637090760749615, -1.0843673637113524, 3.869798505524326, -5.717013878219074, 3.157888785845423, 3.0521654696611336, 1.5781577232348014, 2.38144136281095, -6.19881476920278, 10.211569305240284, 9.015767555240174, 0.5762028406425291, -3.666929597976932, 6.3040924322570415, -1.4907116308473343, -0.8373178410515909, -6.098242547287123, -1.2039273100782448, 0.5258169443160563, 5.238001794572023, 2.608471981001556, -1.72326944921658, 0.3115055246412981, 4.815392693365216, 0.36203118805427537, -2.0350141626286247, -6.956457810924299, 2.3521227606042765, -4.294548160129121, 1.2303273121449547, 3.580025020047703, -1.910110717274014, -2.1044586247751607, -7.6837504595973165, -3.374833309332422, 7.689508227519226, 5.651749969070253, -3.3865222054808837, 4.561746826388362, 1.1451864556416218, 3.345104001541671, -2.9271982142626407, 2.9109814620641736, -3.642663575650922, 5.784742320082633, 1.3081022352232574, -0.1095596180771286, 0.7995643453612562, 3.462845329057381, -7.317436023407766, -0.4813783966945626, -3.341304346327559, -6.570757253727718, -0.5827260022815779, -3.581117763847974, 2.9528249837792404, 4.9534818380188685, -1.7161391057582507, -6.668002167306093, 5.538097418025571, 3.3101105441433902, -2.3770568400970173, -5.86795635681219, -4.683088357817445, -3.728106746760912, -1.635974510266291, 6.9066181045973645, -3.802703538680285, -8.132708952133136, 2.157398536638867, 8.612222977993135, 9.12021857129853, -9.282562228608985, -6.7127913380610575, 2.5831130081688007, 8.353538894917838, -2.8179231523487305, 2.3745812414534697, 7.414409951055914, 6.035319847439652, -1.3984031612940861, 7.450422042451246, -4.1308468214718035, -1.191730134521011, 1.4686108463884964, -0.7523818621459173, 2.8833096538686696, -5.311102434945486, -5.520503422171598, -1.6674544353606482, 2.396281983605492, 7.645238051498937, 4.0397561768628085, 0.5653560760592122, 3.7292278494271334, -0.08795199566674985, -1.9420438675452774, -4.888377372686329, -0.7015861981006708, -1.5649191642037068, 5.530365544807723, 1.6984083013161488, 2.7323564491737895, 4.02008499981882, 3.946307466008057, -3.2214186778777494, 2.065405600206045, 6.510602126016269, 3.4068884494230396, 0.9916168030564372, 2.330606084773561, 0.3085368264763373, -3.3709673011471657, -1.4051120814781672, -3.52247480806811, 1.0865850940504047, 1.5562149780257495, -0.14437330476125693, 1.8283133975872201, 3.0715967093212786, -2.6234167791936245, -5.966169906448253, 3.1272906789964097, -5.7899476055149846, 5.960571032152469, -0.0792139339994409, 1.4545520842045068, -3.319246229861384, 0.5145011990834532, 1.981188658682056, 2.323610858198592, 3.1051085755110313, 2.5562376689356636, 3.4910094354756653, 0.16686270799127872, -1.8596352517878798, -2.3641119213512, -2.6390222576912135, 0.23394220654864134, 1.6122281547107349, -1.198750529283462, 0.5616370724036246, 3.0453914992444946, 4.00148956711109, 1.9743693438908694, 1.5595811170200782, -4.571799025642596, 8.944864518771197, -3.737100132657521, 5.242095297902924, 3.9442861428385445, -0.6420946964912295, 4.679590199363454, 0.6336134528321125, 3.653506769499668, 0.3199613429427476, 3.1682204656349042, -1.373122508146315, -1.4294396001444372, -6.295499142739902, -8.053271356906102, 0.972189274980348, -3.368682490578922, 1.1056393959226651, 1.4325788045653978, 0.6374333847738771, 6.514182175328339, 7.721956851048169, 3.277975734722796, -5.6465413408138785, 1.3895575497717823, 5.419649739367101, -3.663518469329351, 2.8984071380519225, 2.3486416081457846, 5.517959095064405, -0.6349757557442306, -4.005358963718234, 6.176876194448893, 0.20864783567097706, 3.980693672655847, -3.0708745439297065, -3.91668783509045, 0.6496508663495789, 0.8622620178547751, 2.882174778121975, -4.1576373155249655, 5.3284516942730376, 5.139271831928491, -3.6935217758057353, -7.639868731149948, 5.516143828739562, -1.9716212072671462, 7.093350199984362, 0.2562089749995028, 1.426537899323497, -9.24161620800622, -4.141078088454734, -0.9929877934296614, -1.626163394062908, -1.0399933421296024, -7.276554343695123, -1.0342907486527941, 7.801870691897133, 7.8612861150449636, 0.7386085406897052, -1.158594986840177, -2.0240729367781465, 5.768871636959239, -4.273063875451328, -2.0282816123668943, 4.7998970641724945, 0.42523530803191223, -3.5373577057223815, 4.725017681365569, 1.3851791410908925, -0.8636047412675878, -1.0258835175806065, 2.2681566157331363, 2.8745976174564563, 3.9769106931363387, -3.022292884843235, -0.701176932892204, -2.3387061910077565, 7.729415719007735, 2.933354786178242, -2.873908506950101, 5.045504164471683, -1.2989361421201067, -0.06272404873668597, -1.8003094135188813, 2.3509042542277463, -0.031370954065739365, 3.2585394267904184, -7.336661366459948, -1.5710978299419458, 0.05369647686082679, -3.3355485690165256, -1.6786987893822312, 0.7991974082883653, 2.368559641724366, 3.7966234972472668, 6.5981044203289905, 2.2444637722622387, -5.072170017203632, -2.718036118446366, -7.4803292319734105, -0.14651756171498487, -4.533650416722352, -1.7521249766111238, -2.783564732718663, 3.762938329414795, -3.7644649947568607, -6.588228553534503, -3.2173045415120534, -4.179937603749924, -0.35369851668184354, 2.0474158538594414, -1.6970774021304595, 2.4744684313188405, 0.945570394869264, 6.600415877863526, -0.9742900914507998, 4.235186389329984, -3.783351521805726, -0.3779660292771118, 1.4293490531201074, -8.041833859744937, -8.67366792759216, -8.287542248024529, 5.885374178172879, 4.452345273617084, 1.674632612439207, -0.29071717016393045, 0.9076859171613767, 0.06913934506712371, 0.7911476920159244, -2.9120620906193464, 3.489602965301521, 4.214099620109765, 3.348642062672666, -5.501658578361008, 0.007354852768793996, -6.6699064802448405, -0.29865171666093643, -0.5619431428119827, -3.1393112814888426, -8.303808372113533, -0.8156114969231838, -3.068032619379307, 2.126004213032779, -5.108463453656698, -0.6693428175651785, 0.8190597474720813, 1.0993903148567243, -7.3306242016422845, 3.50521201705104, 4.009528229016287, 6.318725589030664, -5.85776291852014, 2.349251894106947, -2.335127766572651, -4.946312092923056, 1.1552712125275744, 3.731718946676593, -1.625616157952827, 0.10722164408319307, 3.495880970457153, -0.40565481045106927, -1.619544642519456, 4.008333466135792, -4.712237929418203, 1.5912790423584138, -0.8704382382184276, 1.3128727970154108, -5.275668786417249, -2.951971876094614, 2.4659567351263476, -0.7675554363723169, 1.2917971436065407, 9.220379567633822, -3.603123003881771, -10.150940925172, 0.40471140210002576, -1.4672077412235502, -1.0150773252863776, 5.3680877616593925, -4.337215698347393, -2.8884454160026816, -1.6066527068643555, 1.846117744050125, -3.9650583517950033, -2.730966627947672]
BIASES_LIST = [4.033064203506246, 1.9311464969689651, 7.3107687507745425, 1.892171882443352, 0.7725053157795465, -4.1848539481148155, -6.619117772396148, 2.78106227679051, 5.214830681150778, -1.3157852103086904, 5.716676709637459, -7.178941981139821, -1.345245863397847, -3.0819328178410643, -1.0782137524975592, -1.5312538349726612, -3.1262789434696723, -1.6436565891247432, 0.3251569005390764, -3.7068552114416997, 6.110712932842201, 3.2559819248527413, -3.7853022877178883, 0.4189433315312423, 5.455372645297572, -7.989506230968765, -1.3628567578119668, -6.082761842459339]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

