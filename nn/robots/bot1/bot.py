import random
import math

WEIGHT_LIST = [0.5605275815873659, 4.901709005191901, -2.322316813756626, -3.54808494701085, -2.3245565146393763, -5.28729819346472, 2.8722992540822805, 1.8295418743214888, 0.8046124060948882, -1.1014774121672137, 2.594945896425095, -0.015323986216363439, -0.909871023227573, -0.7561888891514368, 0.2340307360761025, 4.933466020476252, 4.6792549291497725, -2.977411825542805, 2.8364057244798673, 1.8265386402929593, -0.3741283431363183, 4.3522828230179105, 4.928043998409379, 5.41646262597072, -2.113489672195022, 1.6141167459847252, -2.191244840638162, -4.362277298754123, -4.903537977006943, 1.3879391288428695, 1.3654076039673553, -1.1203896880332145, -3.3941380389037583, 5.253744934119694, 0.9937374294256588, -2.4869976952661466, 4.153924528088284, -3.2840341488565437, -3.7523049810113425, -1.0304381504412417, 3.829196401347616, -1.860523754316822, 0.4315365646861641, 0.1598468974306525, -3.2670707482616343, 5.734120564418922, -7.8753001096583555, -1.0359400782820203, -4.620096257004497, 0.8811854212242872, -3.837509230041605, 0.6814210038291773, -3.5821919993361613, 1.890072984666822, -2.251082056601375, -1.5943047552219882, -0.4082999979756762, -1.9829960208159785, 4.883719463896853, 9.877593226447487, -2.1964211653202153, -4.494330885631869, -4.320410355476535, -3.522556683004423, 0.7249558253139252, 0.20018669330475777, 5.359992179168715, -2.200552390913661, 1.235011794801842, -0.687631752573229, 0.44634720746458995, -10.344476028967259, 0.49487835367798283, -3.6957465658944297, 0.04103714328390364, -0.9746623730071875, 3.3926572149189673, -9.799313351450278, -0.066332458126266, -0.5683508076116419, -2.4174495621718335, -1.1125829028369394, -3.2536050650409902, -1.215526242424829, 1.0145546559436736, 4.809134130910962, -1.8370762748301224, 3.9910605360543183, 1.3666979489806137, -0.6858919965305661, 1.002865567093877, 3.7823048787135933, -1.2499254670142712, -1.0593545026816222, -1.5800524648971412, 0.5368808385315557, -1.7502285220145142, -1.130915964020917, -0.6246659710172517, -3.690634301613749, 4.122559871361756, -4.8259927960869495, -2.329845268569686, -3.6139790708020985, 4.940246644566039, 0.7544650422571548, 2.7024260020350104, 2.6836907650008857, 4.962574692643982, 1.89123699848069, 4.385646842684326, 0.6020477513033075, -0.5292679821263462, -4.313092896002093, 4.456499323578345, -1.7116975486464492, 2.562149421194558, -2.7705641216469177, 4.565721634124706, 0.5754001848025245, 0.6284321022874085, -0.15863769705165714, 3.5990436792187377, 2.615089740965933, 7.008013372027112, 2.4449789651909986, -5.35648247958067, -5.62923208023821, 2.5527468463645264, 0.05928996101397162, 3.6276253239203307, 3.848384003193293, 6.501869572617859, -5.741490644550147, -5.189619463457078, -5.155394986429661, 5.245891180480908, 3.5063506382545975, 3.5671982960778004, 4.557892066518329, 2.0674997489308344, 3.479967182486773, -5.2298102586342035, -1.0556725150340152, -3.6854316360923614, 2.5189472236115655, -3.943904561924757, 2.481036599389289, 0.4588881261411353, -2.4856961239954787, -0.4234530318027104, -5.113227203895363, -2.4245063368081174, -0.0023528539326778198, -4.149266242961411, -8.683097687683413, -0.2186300082437705, -1.8143426003406382, 5.464198876322825, 3.800747746468407, -0.9486963576150829, 3.8398281184359337, -4.560997036456302, 4.486925202623204, -1.1246571864239372, 0.37059199555199857, 2.107580607836211, -1.6954527530591474, 3.37218676080138, -2.601512871961993, -3.4563906489243803, -2.4220430255039527, 2.0613265617845076, -3.282557697350524, 1.8349260098842632, 0.1943699371389524, 7.303519336414064, 0.1371079366882495, -1.2360873461089747, -5.3760755319570075, -3.2170819588967814, -1.880372058660306, 2.1505943413683726, 3.652693682854964, 5.112004302673054, 1.1348549731220725, -2.6339140957167815, -6.112558467973362, -2.515343212829974, -2.1343470838691125, 0.08529910315932614, -4.280498142996912, 4.574108516154631, 3.2525626218413737, 1.910499730600479, -0.42407123401325486, 0.7539566884464174, -0.5118370388639438, 1.6959562319082684, 1.7565119411540886, 0.12681305137883245, 0.7129870476015551, 3.0301837950809385, 2.4233796416683715, 2.24813362875731, -1.3537032908504139, 1.036031677165982, 10.578453229659079, 0.58000661600155, -1.1288485894371745, 0.6004810531458898, 0.7471807161393887, -2.9407500784594958, 1.3063809802036135, -0.646382883903758, -1.7539592208918346, -1.609723541071704, 0.32816649776475554, 1.3009803518525498, -0.7576306746174285, -3.9230946898558376, 4.0820056595505285, -1.5708307826589565, -0.9480350684922648, 4.252160978354433, -3.5361213200682253, -5.026353932310838, -3.3210193087894972, 0.1512124049583237, 1.7417789878951009, -5.336288141175914, -1.704105843876327, -4.685307808104918, -1.6377697563764766, 5.274104067786546, 2.4042052746845446, 4.26823982041153, -1.174974608403968, -3.6259264829374556, -5.933161831015238, -2.5659668864259135, -2.5901207478874797, -3.595405682825456, 4.861657258335365, -2.601711092644427, 1.209007992036402, 2.594992801476017, 0.21322488759565802, -0.08438948413511092, 7.120862685173242, -1.535820774982576, -2.117429945947332, -2.2984531886247646, -4.267493470539091, -4.855993296174531, 1.0185470121980085, -0.41369908105672953, -0.35784873127974476, -5.810989225313295, -2.5084449498518055, -2.727386547138842, -4.577607029001345, -1.8281024230470149, -5.904082371258875, -3.0650961291082397, 2.688595432778029, -2.3719887541699913, 0.5928808047952602, -3.763512781886524, -0.5466713452051827, -1.660783013315475, 0.17329755689151455, -2.894171169612242, -5.611745653087716, 1.5237350685082895, 2.029292307002928, 0.20768940370474614, 0.9959994611726452, -0.7790712409334456, 0.36471010252118546, 3.9472826602135695, -1.0316842769621228, -3.8932210175247794, 3.759275240834072, 6.1614236607089445, -0.07413557412992146, -3.3749458922172377, -1.8293386290806344, 2.6348412536262606, 1.701898518374222, -2.9817061269104714, -2.6937829263981445, 2.5554561820866506, -3.570550086750767, -2.2648890372608435, 2.356322746618417, 8.831400184826414, 5.947889948073162, 1.8004769432844674, 2.048300876789207, 4.5688968591166415, -1.8821248762392127, -5.848317234095945, -1.7667401209757432, -2.3698609711167316, -6.871592431307253, -2.8797571343334387, 2.299480515082459, 5.064264419107364, -1.4259026076715369, 0.6761434082459695, -3.9230303656534775, -3.598637961389828, 3.2647130005191713, 1.8492696296087379, -1.7828317754672978, -5.646192352323464, -2.4094092566330083, 1.2860514308593562, -5.593493321886632, -5.316591630776128, 1.2752323190676522, -6.803250745358872, 6.4046587969329485, 3.433410936832542, 4.598072398314691, 2.0011287754878917, 0.2832668536747478, -1.2671557077955444, -5.569270601831191, 3.970281373189288, -0.33588537574134414, -7.4267181534679665, -0.10582508517818351, -5.03099953841368, -0.5080041813226982, -1.6707723262895202, -3.451590017524583, 6.513078798541142, -6.779957249996829, -3.238026411374007, 2.6601631834245056, 1.478720437634209, 4.189677708997009, -5.69671853116555, -4.632953138708536, 1.7017738955482098, 4.802627006932118, -4.855681763521565, 4.654307073620689, 3.253916974040668, -4.025001325285656, -3.40044622658357, 2.311894843223934, 2.3397963333862704, -3.387198359391708, 0.03609320514855963, -0.014637136619195516, 2.810262898079792, 3.2452546922147527, -2.2531687174791974, -2.8260493046012565, 4.926759331123902, 6.055627408173195, 5.289877055186292, 0.11175708899712815, -5.8394415047320924, 4.261143526801145, 2.6049108575707716, 0.8583882914909055, -3.227124695163897, -4.71388204746788, -3.6663424681688923, -0.8859922860433626, 0.3409638768486573, 2.075120593018001, 3.9188691549751677, 0.6811396947061047, -5.647900855301341, -5.2558096525678515, 0.42469918372394266, 3.4178048420445006, -0.8697501654221687, 3.169623267475042, 0.13268847403540662, -2.86925719830452, -7.239017208864821, -7.878240005724366, -4.603893623932715, 2.4667911154302535, 5.605924462547185, -1.6999685554635475, 4.70180442019247, 0.5073490148262393, 1.4463487605655199, -1.297731071602673, 0.33900052598139746, 1.1845866373741714, 2.2630855815134603, -1.4969614421022914, 4.293173012509392, 5.550736557719797, 2.7144933768525683, -3.4505739060367824, -1.7086505700859085, 4.5410054573936, 0.7023125220692062, -2.1518383712094167, 3.870914815693749, -5.555400562301498, -0.29488300292305963, 0.7910870429473174, 0.9053482508218977, -3.2739447926382255, 0.9652838053194172, -5.677742602352072, 4.128945494115653, -1.5825705917041863, -0.7131521580054727, -0.9940026401463629, -7.394665684616299, -1.8389339165760985, 0.7511684343011422, 5.225053344125449, -4.351872067184903, -1.1490172768354676, 4.085869943719651, -2.740538477483163, 0.9159737220497958, -1.9424516571204524, 4.396806004572548, 2.7797991668675084, 2.992378012040853, -5.899325865344828, 4.9379889928653435, 6.182946038042892, -0.7359485277487017, 0.8011409145708509, 1.5832280298783703, -4.763299979260651, -1.6147403864215664, 0.6579655265223854, 2.0195001696528827, -1.8285021629509524, -0.37840352102693386, -4.31900648405851, 0.7170747734026773, 7.985341361701348, 1.802452405858763, 2.9299677659036303, 2.4165760122607467, 4.51857971159426, 4.937887133907984, -4.356861368482932, 4.678467687733101, 0.0026621620726279627, 3.632499236463552, 2.554819014047594, -0.37499076304379136, 2.5188764048014125, -0.4173038072690472, -5.912273568580721, 7.692605535796179, 3.6854236179585165, -2.0453059552060893, 2.0701488413967413, 1.4917209881963431, 3.20007733962525, 1.3743830429513135, 3.0492629039101327, 5.181036562775935, 1.6564289785981379, -2.3212836381459585, -0.1045359911375332, 2.4974486059578487, 1.3436542256571258, 1.577334954939616, 6.84896179750751, -4.274722451604209, -2.4580063415660263, -1.1963472106448643, -5.0811384119014145, 0.5657833952310701, -4.3436105208155515, 2.6956235691478696, 0.396191028642838, -4.4135639082601354, -0.8124299791464107, 0.4838445227657596, 6.267561174951545, -3.284553318467674, -2.8827688833746095, -0.6951661800223246, -0.2387385109056778, -4.861775658969874, 1.3642634270400753, 2.6102788055473183, 1.8446856331340784, -0.36404331295804926, 2.726907111852744, -0.28637403232237346, 0.10933725286404065, 1.544484265312138, -4.73921486901145, -1.6527600215283875, 3.6045769862225945, 2.870350253124821, 0.48769277911516484, 4.256483559974033, -3.052596428364039, 1.82160547878047, 1.0473765284481535, -3.7720642920309757, -1.7945935725510709, -4.905673014950785, -0.9737486457443899, -3.996742182942956, -1.0084443943654973, -5.971607055708057, 0.3013334480122893, -0.04206793059618632, 7.014413559887289, -1.183388854646817, 1.1070614125463214, -4.0183478685769884, 6.959149893035367, -4.083690996738376, -4.132334743573571, 2.0447636854898055, 5.103371623647127, -5.505694557018958, -6.411293696041618, 0.9159295362649045, 4.222696011194849, -0.9088520974581661, 8.073415164823869, 2.522961129594163, -2.309920089550664, -3.334805161889148, -1.9976214010785867, 1.4603995038319857, 1.0620550326177447, 1.438414950022337, 9.026842179355013, 3.807780431937319, 0.5634540896011295, -1.2622536155257678, 1.81033532257714, 1.5067345462163382, -0.5432773920818644, -0.2911146640198108, 5.973893179274953, -0.12519772077887847, -2.7885220953032075, 5.405677591826411, -7.762612420742997, 5.2531932158058, -3.8810816861122865, 3.4060073039338703, -1.0072951690055705, 7.808087402889805, 1.897865468441172, -2.2577872684115783, -2.1778218069383666, 0.03656397381326394, -0.11562141885747844, -2.4599565686086655, -4.421088898744635, 2.2140070363114464, 3.9626044718058937, 6.0469160306717065, 4.875583878032773, 2.2448295101894646, -2.152459944517077, 0.02877314838927966, 1.851291609267639, 3.7141128556660266, 8.945257738694234, 0.4026605896484319, 0.22282987736726817, 9.608654260296138, -0.612102638288285, 0.5398545784835049, -3.1899363272739447, -2.5474118421897662, 5.7770734571470435, -2.3486552708579644, -5.452455073894589, -0.2382937737665395, -7.360496284076721, 2.4133061562872675, 3.0853533965366746, 6.109991351209899, 4.9561650653091895, -0.947704492633921, 3.810109236188963, 2.914196510189494, 4.112441936580493, 6.786857872037779, 1.3885743482106028, 2.306709699347734, -4.255552117141005, 2.0149194194306093, -7.715664552320213, 2.160605521874572, 1.265126268797736, 1.2233559409191264, -5.133165042566805, -4.541718351501139, 2.3623137993375276, 3.032438760757061, 4.274351999468551, -9.133879190939501, -2.4244604730629957, 7.4486657387291615, -1.360504631586252, 1.442695359566954, 5.82809467281072, -3.4632368716171107, 3.164031609583945, -2.0085403859384887, -9.989121558100885, -1.0451343289810442, 1.4748673804165437, 2.9056680527126577, -0.9127910590497467, -0.701728567608518, -0.8084766603613726, 2.2703787449515023, 2.492170943210251, 3.2260264667596705, 0.2806292399329977, -1.417849193774447, -4.290959046780858, -3.2233773456703854, -3.4209196438045106, -0.7117588683311274, 0.8659529241336521, 4.224703246831228, 1.9539901301008773, 3.1830543177905177, 3.1113520896721436, -1.4411615805281117, 0.16133503544341396, 0.9639919521350583, -3.085878280263918, -1.644016971905245, 3.478859481484952, -4.023430579432636, 3.357540442274592, 0.5703123863759912, -3.694040929273719, 3.4416425904205825, 5.924728023636792, -0.442448553155166, 3.230037620518954, 0.37460991829624074, 1.8501428354959097, -0.9139070187690418, -0.19809890756057008, -5.2595214477604735, -3.3601818110907735, -3.7127687429149296, 2.338871796070564, -3.8987906546489093, -1.5400244029421029, -1.1384610089224696, -2.0595136374740166, -4.905688236591079, -3.864179001584656, 1.9810800877091208, 5.678105772472218, -0.20630437770919838, -1.8222389662744898, -1.3567483874790653, -4.276329916807411, 2.345990162066884, -1.5593491134658528, 6.687244775234318, -2.674467907084383, -4.752861883680385, 7.885314153832463, -2.0448159315277676, -3.278878514470664, -5.159222543650965, 2.9963348606954963, 1.522449489368911, -3.558666686075962, -1.3584485142382596, -1.5980696714809395, -4.812729137436002, 3.329444809887119, -1.307796157369172, 4.380554173683819, 4.629199292915345, 4.294875211662144, -4.910303831893991, 3.6510427367676503, 0.2391469885860121, -3.394337767076216, -0.3537057309478591, -4.740944148546805, -3.5386479059463243, -2.06983179254861, 2.5231615145965, -3.417257008282105, -4.6798468781399025, 1.4283497443139619, -2.75210516254433, 2.016229084059865, 0.4654548891446246, 1.6693787107105293, 3.9605953693513505, 2.930830146172631, 2.7908267088341643, -5.866070926081259, 6.991447583480737, -1.36088921099001, -3.4734060020602606, -2.8535017896945933, 0.15300960993410656, 1.4867682096321495, 3.0338500530479107, -3.5927242648604727, -1.0501334010547474, -2.7599314992748183, 0.581832579064611, 2.1826251694494467, 6.130873865099224, -2.762992863096968, 0.08934330374462111, 1.4734155863121527, -1.2557771046295354, 0.7379333179730679, -5.732715946174443, -0.842769331665786, -2.3885223244868308, 2.350593162641756, 3.770760728170307, 6.921346179355402, -0.8724460993458701, -2.2363753894946035, -7.983123241872107, -4.3270240969927265, 2.9977042066554795, 4.220419275720245, -4.409715363851313, -1.7747410917282391, 0.9727554616945564, 7.596847328300541, 3.7514967314588925, 4.873399630537363]
BIASES_LIST = [-1.3842579870106493, 3.7065973103355327, -3.6160346458277624, 4.796039500993293, 6.335307244106572, 2.7675327345406937, 1.0980719879205185, -0.07537737509156643, -1.1106794235326316, 2.653012949873149, 2.1212168032074277, -1.3677571359087137, -0.008650891790394858, -2.617899305344677, -5.508002461180145, 5.26514108458291, 4.815649952326219, 1.4774447736979979, -6.56857676967646, 0.0208276424160683, -5.072762644039692, -2.8024751134195482, -4.067948868070289, -6.093821019626528, 3.926921015444555, 2.645626286916057, -4.025282204957294, 2.9196167818936787, -1.0805170969855502, 2.302740915578476, -0.3430999149928628, -2.2983402110856432, 7.120444310360989, 1.8551302087515729, -1.680243027769117, 0.4505078991108025]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

