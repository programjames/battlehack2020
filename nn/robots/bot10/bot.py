import random
import math

WEIGHT_LIST = [-8.40593279102747, -2.8877679380506143, 7.252379015463863, -0.7074369117277258, 4.220657245547588, 2.092936697285282, 0.11973051088400583, -6.909088912403598, -9.327133679476654, -1.609367954441763, 0.16029911699352084, -1.9556406678281963, 0.14108420186234621, 1.7971502951490708, 1.04421981718487, 4.1710040478138515, 5.364330397263872, -5.066176677342886, -0.8162973009427859, -0.319993116164745, 4.372410224174509, -1.2076747200277609, -3.496717505926651, 5.296934355215151, 1.8987572319106367, 4.703030064136576, 0.4505314133601112, 1.0927290576706976, 1.1636285912532505, 4.320961731274629, 4.446665166435224, 5.422640737747203, 1.3113677320900519, 5.61880018039545, -2.285353257081256, -7.152934661170278, -4.1785250408138115, -4.714438000026762, -4.07059440715356, -1.2727557426497438, 1.9607282491322038, 4.727776328640947, 3.9351118729161274, -2.2687947893937555, -1.1850685071966833, 8.723364636655848, -0.33249859357457406, 0.8846357503214524, 3.071720895542634, -0.20419378007064798, -0.9858297679318964, -6.152468291964285, 0.7856869916175775, -4.887756555164156, 0.39964949297575897, -5.700596730740419, 7.806504906859199, 0.7380686197380055, 4.152828637561553, -0.6993920090143875, 4.952464905505046, 2.262910406317388, -5.451023607941173, -3.1166137968931102, 1.0768817641444797, 3.5573541182407995, -1.0809018891424427, -1.9756394425810562, -1.4724133672118638, 5.917505292573904, -3.1769229782939834, -2.665643786672223, -2.6306687590504843, 4.430238668897325, -1.7122772875797332, -2.400476643260847, -1.0470413011541178, -0.17706271761457298, -5.038170315499554, 6.045216106323186, -2.7992992886408867, 4.632410031014493, 6.08403607137749, 3.709354070310195, -7.486177768493512, -2.015660604461304, -5.555728565110106, -1.8420689070890097, -0.8549765699933167, 7.6280621281300975, 7.630906842440689, 3.343641991605278, 1.2585956112842225, -2.5374363622737723, 2.5952060211473946, -1.757397430263331, 2.622043409125996, 0.7892060671663887, 5.90142276248707, 2.7930988023317616, -1.3341009876077565, -6.4055942309181875, 6.213178648321442, 4.708006356883875, 4.656613734699102, 1.7380227220784146, 2.541773627291218, 5.292449731118891, -4.78418540164066, 3.5760081365599015, -6.6088115924656865, -2.663007995781748, 3.4861051897032347, -2.7774935669299663, 5.760849985684579, -2.24714194370887, -9.54637724225157, -1.9802209447236463, -4.542545789362134, -2.4084398395766025, 3.502881784123894, 0.4638536267518773, 7.326563287805917, 0.20576842475669577, 2.407664275316428, -0.18717825530213933, -2.875818598619008, -2.671545536098193, 1.354084054763059, 1.4842997226801942, -4.519335832551073, -9.585447671005427, 1.4972611409822594, 6.2407782514732455, -4.61894769443182, -2.119243727313691, 3.4608130572397404, -1.2267711324184412, -3.6639534639649898, -0.23753353549895062, 1.5263049759079619, -2.8709558333761915, -6.823556852305927, 7.016696777000073, 7.488292218552982, -1.2478755014888903, -2.2090769001238098, 8.203762247803377, -2.490950284441102, 2.0842717087438194, 1.6655398207864833, -3.9642921774549853, -7.345350334676591, 1.4043558268425311, 1.2393029437391163, 0.6813937924557529, -4.01662912785956, -7.282076516404051, -6.174983232554635, -1.4513504701946098, -5.091731275932214, -3.845892873684974, -3.214174957583145, -6.078653201081349, -5.180514294668323, 7.171994842386602, 2.424335797652509, -0.614031192679563, 0.41299758018635396, 0.8582428348272113, 2.919166494173312, 0.1375786377528323, 2.208807409242522, -3.075807036294692, -4.11250944349891, 2.2357408761757838, 1.118510714511697, -6.388328912300421, -4.836761614160629, 2.114892622293598, -8.31025993124056, 8.843526845287004, 3.5474116723977533, -5.335470744110977, -4.308799884656537, -0.371519459480821, 5.305402819782912, -5.439912899401229, -5.308176564091235, 6.750605802673633, -4.906455463701427, -5.27266416087309, 4.895111863311144, 2.2881242994868933, -5.412610671199733, -5.233365115754876, 6.979384123950662, 4.229746342839087, -0.5347078819410767, 6.897390260283427, -5.508482981942495, -4.354502984898709, 6.393479599466436, 0.5707744173242395, -0.777566438265243, 2.3777052452240195, 3.191435847349164, -0.9558331545865475, -7.31925948429436, 7.121523817698952, -7.200493245884897, -1.822219379392766, 1.4138432283601796, 7.094089787025831, 6.0986428677393745, 6.05574411729845, -0.5818741819735627, -1.5311553393188966, -2.59609229968973, 0.9522185122828148, -2.3612668405441286, -2.254138265081881, -0.2111978605113926, -2.141402734091958, -4.33307025451192, 6.339166298321422, -1.3038095854473972, -1.8210078675117398, -3.8242642769015562, 2.5804661468835355, 2.6129711906999837, 0.6707109523591026, 6.292548135940723, 3.5662910451304892, 4.4571920576851936, 0.5401025409864815, 5.358254312753066, -6.138596875939361, -2.9335530721070957, -5.130295086310984, -6.257728254955503, 6.688984758198626, -7.0330234541029775, 1.5912979214046319, -0.068115364157701, -3.1214147428341787, -0.1797865308105691, 3.99721683408884, -4.493139017665556, -7.028184332840223, 1.883145107943346, 2.0334982064443192, -4.7165340669900395, 6.677161297103032, -1.3630221722386389, 2.1574126218883456, -0.9656970893265746, -3.9829183463298112, 6.803395570469417, -4.008016033192904, 5.7125098711843565, -4.559327624702528, 3.1659916734325524, -1.3153808471179982, -5.255889565041874, 4.604474513067516, -2.700801241401607, 0.4549484925680924, -7.850143907598882, 6.7142183501213175, 3.256479808989313, -9.426158769402864, 1.9999484566930552, -6.684550764852677, -0.5337998713418322, 0.445689146802901, 5.531873682780604, -4.361529281882758, -1.018861876491065, 2.721777396181923, -1.2672747077421045, 4.061530862612239, -5.4987508141181785, 2.8991672311019827, 3.2652261938524267, 1.7462664617466193, 2.588232205808769, -5.696867343148979, 10.268343614324554, 8.977968067441685, 0.673480651792169, -3.4887724539261917, 5.812324801279417, -1.4353597197141978, -0.8317288812128178, -5.882754580974846, -0.9891392320963721, 0.2827941970220223, 5.046417688167383, 2.7991685893412668, -1.6196568085762244, 0.312085645142347, 4.917283607793261, 0.37940286514104854, -1.8861356489796473, -6.921985811091287, 2.51213826767856, -4.0596676306132204, 1.287696909887747, 3.546639921650432, -2.073782527909897, -2.266039308663736, -7.8380286579332745, -3.597784415280919, 7.567558947024315, 5.556765812402118, -3.332402075331113, 4.534200219095364, 1.4755823838726168, 3.3994311852026278, -3.222295153031032, 2.71954389620076, -3.2997999820090382, 6.034656549121981, 1.630621268284215, -0.16792768195122637, 1.0937524485923664, 3.1881355689645563, -7.789270996306721, -0.43985492659792536, -3.811530283171485, -6.71432284052472, -0.2599403636532126, -3.61782098388228, 2.514327209299631, 5.068427918993553, -1.6791977757244294, -6.796914503117998, 5.2252517200874244, 3.279849011880865, -2.3262579902322145, -5.621857646889441, -4.495707452591585, -3.779461361632731, -1.5358266138480652, 7.322159832787928, -3.3322821296383167, -7.624473858370603, 2.1241360566538687, 8.977181383342836, 9.374321281648184, -8.829954152643525, -6.551605590938337, 2.6871425192226046, 8.322449884471029, -2.907136310727755, 2.613937182125934, 7.556612928593992, 6.500817166000679, -2.066373358332824, 7.575673213858539, -4.410324104489849, -1.2527414401272992, 1.541479827073528, -0.7262072941885331, 3.037222856538012, -5.253340487636214, -5.666413666271145, -2.156990294469869, 2.0633605673885222, 7.467171751919404, 4.443888155754867, 0.3501517663326727, 3.7220419875976574, -0.21777915064244907, -2.140559723394583, -4.742153167766788, -0.7854849364174394, -1.7861948812656674, 5.317135766422769, 1.9235165389279594, 2.8628424460679214, 4.10231627500305, 3.5054594073562297, -3.293920983725307, 2.1518596044177345, 6.288039472066487, 3.175939967101755, 0.4890394784027043, 2.131356157856628, 0.384006725835118, -3.4414002267506736, -1.1026775338799708, -3.299166493535199, 1.2319437091355314, 1.3802825305575128, 0.09732919104813187, 1.3406614345337136, 3.1277672555542297, -2.445278051281972, -5.7968391600118, 3.21105991598326, -5.648579448489246, 6.1367086164757865, 0.15926770230890913, 1.1781177538190755, -3.5270051803360003, 0.3522870653251757, 2.6141418928871487, 2.197276356336377, 3.2510294155790107, 2.9988588335980277, 3.6892517290096856, 0.24171551487301862, -2.005259482428252, -2.5648769508157114, -2.5307593154323342, 0.04772932246564798, 1.4680545089716377, -1.005038648696615, 0.6667271602008069, 2.7789603157564864, 3.498684658127532, 1.816333904688039, 1.1979751246778796, -4.1913864717894045, 9.041701916386016, -3.515268346937424, 5.421630302176028, 3.964611919239102, -0.372923048874316, 5.089421272073798, 0.47469254310833847, 3.4022708548196703, 0.2801035526299794, 3.1649228206645734, -1.3451631700871731, -1.566621870896002, -6.077950900561983, -7.765346231325571, 0.8012296406564763, -3.694971381768915, 1.294922719523923, 1.5774795969347735, 0.48827308363349736, 6.719789364046432, 7.745641449901144, 2.9315490239283957, -5.978304956471085, 1.4284940684269638, 5.137968715600131, -3.3428476261840667, 3.063976779082915, 2.0178547632430384, 5.709140988464394, -0.39990432478884774, -4.1539170388571325, 6.253400850866686, 0.31338430954899116, 4.027595762369923, -2.765125108214723, -3.8832050253046693, 0.9350882677207499, 0.7345307880608432, 3.0511515052687446, -4.480073930362415, 5.493835393743207, 5.179001081244079, -3.624786109588825, -7.594436189896838, 5.632659926273653, -1.6437103552715948, 7.254894659321652, 0.25308464366604994, 1.6793204345166728, -8.976858429930086, -4.204947596039931, -1.0422853951544377, -1.4793211732529379, -0.7427480076944841, -7.069220118134171, -1.2160669664966113, 7.99448543884225, 8.001717884518195, 0.669425716735065, -0.9910148472711218, -1.6509735596623993, 5.607886197261851, -4.223221465454414, -2.1356790318958683, 4.536742554874104, 0.7595307459045026, -3.5526777743683, 4.81228858947812, 1.4701106577380025, -1.192991969098017, -1.3032519030060292, 2.0075165698206265, 2.8363615693918223, 3.674088371201925, -3.3187189787214773, -0.5954766890605896, -2.086609660261939, 7.573192208444266, 3.2538798843394208, -3.101802601728368, 4.902318720311513, -1.4102355159443722, -0.1633680331199657, -1.6478449306640126, 2.2418446606732343, 0.13429210160766814, 3.3184639956654265, -7.174753524873343, -1.5319060397366122, 0.34283084707649575, -3.7717712988127694, -1.7203498667523076, 0.788594785978787, 2.62692035529742, 4.026550850070749, 6.098845440715518, 2.1734040144466658, -4.757504906146728, -2.4593747114459075, -7.834696593533504, -0.018967951628602875, -4.477162917643486, -1.6727300220342847, -2.751913090447374, 3.7694178878988427, -3.8991207250682467, -6.602203392946289, -3.1339728878437296, -3.8758404618711784, -0.27842957029737697, 1.9750767668875615, -1.8590365839621055, 2.374569641746846, 0.8584105518670506, 6.514132214023432, -1.3810542231184602, 4.652711189916718, -3.635660438340614, -0.25047300291193997, 1.3396211824768278, -7.812035252804784, -8.574849406647703, -8.470076074182812, 6.010839291074984, 4.308343235470948, 2.0196248517696205, -0.2535521345245397, 1.0719701514728426, -0.30607278565186735, 0.7598985907481877, -2.5711611006348174, 3.6867366406382813, 3.444266703368897, 2.8358571180199283, -5.424987246556639, 0.29437083151944193, -6.89024107785404, -0.11815813124658409, -0.7092071879522466, -3.295775095576162, -7.993196667578912, -0.7641223541899576, -3.701449634256202, 2.1798929665495996, -5.002122782718671, -0.8112803377772215, 0.7321564448155373, 1.524632775290954, -6.938745579596818, 3.5049706492293926, 4.271957123193239, 6.56025587731654, -5.807893361234771, 2.302111057967664, -2.180015780832115, -4.969480451524659, 1.1110375065438514, 3.6380738592638777, -1.7447357549369436, -0.27611349517612566, 3.8904408972668896, -0.10681272411510467, -1.4503711112579065, 3.7555450393892156, -5.045468438435508, 1.4974459715507074, -1.008482593536343, 0.8805236232681799, -5.004748568251435, -2.496689839592141, 2.2449654776889223, -0.5424687981055829, 1.399987226970121, 9.373438611083165, -3.8248468790751313, -10.633237923374613, 0.33833514155743044, -1.2640251473172908, -1.0468751450469822, 5.523748405412064, -4.393337309956747, -2.961720396441443, -1.6762062309187482, 1.689674936811888, -4.0575146143359655, -3.0335091119175703]
BIASES_LIST = [3.8207826545760137, 1.8443346543315204, 7.395657709429305, 2.2708745218857147, 1.3387136853917851, -3.781234927284272, -6.659322467611915, 2.3475112861959597, 5.34412890872263, -1.3343805308664862, 6.264583200974459, -6.596099674874739, -1.573077822488582, -2.6614405109060177, -1.0259823193377446, -1.2910440830760752, -3.4090808251155846, -1.4356418992572642, 0.16989039747619183, -3.6002857275865665, 5.984636666038237, 3.35932208465047, -3.7129750393900287, 0.8090506761347935, 5.132352209869839, -7.715076776439611, -1.1135127983267186, -5.957382802403578]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

