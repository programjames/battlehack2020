import random
import math

WEIGHT_LIST = [0.5635605213910577, 4.906180048941066, -2.3310075022880326, -3.547107307418742, -2.318669003219761, -5.297655291497466, 2.8689205401970024, 1.836693253563005, 0.813104785043491, -1.104461795198894, 2.5996324150568215, -0.020064562632465914, -0.9057434430871972, -0.7584785885006932, 0.23543445021254428, 4.925869743069923, 4.682114974395107, -2.971656396906451, 2.843595656171344, 1.835353272471667, -0.38117226573435786, 4.355824532544078, 4.917261248150138, 5.4158760468930165, -2.1187666643912966, 1.611379036775331, -2.1924185347137137, -4.359056131326223, -4.9096618217832795, 1.3841347228615382, 1.3556719702354505, -1.1199598562389155, -3.392906243350289, 5.255925483041904, 0.997046250058732, -2.484839682654774, 4.154534304117573, -3.2866523792158158, -3.761362441710374, -1.0343946285866203, 3.8294064250086604, -1.8617797728871983, 0.43051502629127775, 0.170394846134628, -3.267096939671025, 5.728015394261375, -7.875225966255544, -1.036954502181964, -4.606976413784949, 0.8752794556780868, -3.8357358939635837, 0.6659872906640505, -3.5928103177538198, 1.8885615929359887, -2.2453046413102475, -1.6081175786733435, -0.4031573925254957, -1.9789742829192973, 4.892285252295992, 9.868901104721415, -2.194520251480899, -4.498333039369082, -4.308334812181415, -3.525599973035527, 0.739720526327055, 0.20037639835783877, 5.356012404344755, -2.2006781654419654, 1.2238395615089566, -0.680931535697699, 0.44455885866217254, -10.349885864888021, 0.48418229265509255, -3.6868180569086473, 0.04138388186260249, -0.9774035562674362, 3.3833424830377563, -9.803790163526035, -0.07136457598649619, -0.5666333493027974, -2.409959755054608, -1.120018487312355, -3.2558178319075566, -1.208062301651681, 1.0219041094298777, 4.792688706077753, -1.8327986643166176, 3.9868808236711155, 1.3696007425620753, -0.6784472162234289, 0.9926477684618991, 3.7796529630085973, -1.2444004303161311, -1.077134470176824, -1.5773896332975224, 0.5373799542159764, -1.7548967031663691, -1.1271190061838414, -0.6298448369447038, -3.6954531145110967, 4.120438338122873, -4.821743793605673, -2.34139490111335, -3.602273214601214, 4.944158862390393, 0.7418628740125797, 2.6989429290899674, 2.6871718574447487, 4.962249970784619, 1.8707456444016615, 4.395945721947026, 0.6099031792538548, -0.5297286889716808, -4.322864326464636, 4.458033970200264, -1.708756281456719, 2.5462991372015464, -2.7641219276756734, 4.563359126886957, 0.5671925503518334, 0.6166677263565277, -0.16424478645511528, 3.5977050465602325, 2.6143041488960135, 7.00978574370256, 2.4397750694204987, -5.36660202220979, -5.624965709739001, 2.5648115153133735, 0.056119151016971215, 3.6292218075003526, 3.8507384699078604, 6.505054675960902, -5.726568816573428, -5.200319503779888, -5.149183520820549, 5.249877669566737, 3.5083374559301124, 3.5621358586378364, 4.559594260143885, 2.0681660927272625, 3.471107049095844, -5.225693599825218, -1.0441979402155337, -3.67477745081751, 2.525400868215551, -3.9399747290808462, 2.490767970572605, 0.45316537327540557, -2.478748744850724, -0.4225389672138673, -5.102690040643979, -2.425069647101599, -0.010224024448026925, -4.1514240029875555, -8.685146578924918, -0.22710382445543828, -1.8075780582337289, 5.460731118092941, 3.805164506674291, -0.9476715917032109, 3.8331005925089245, -4.552541183753153, 4.4800641735619395, -1.1272979114128696, 0.36731200616946114, 2.105130478973111, -1.691427117589291, 3.3741975075211896, -2.6062583981796767, -3.454437971155931, -2.4109079788450747, 2.062413002394608, -3.2846825279531817, 1.8383450361966904, 0.18943522710699812, 7.308094089356344, 0.1369016766504843, -1.2357083890896445, -5.375231531718636, -3.2193108613892463, -1.8839008230951964, 2.157438982365997, 3.6443466519868757, 5.114964443990554, 1.134412198022383, -2.6188293061823775, -6.099096921986711, -2.5061924651411074, -2.139903121607882, 0.07510263304605089, -4.290180054892109, 4.56839142335977, 3.250803199498523, 1.9152651393118414, -0.42603162236948955, 0.7579465410744376, -0.5255054573320422, 1.6775931581612402, 1.7634002593019986, 0.11155473636981572, 0.7206558624046983, 3.04075813588648, 2.4273143384456324, 2.2443895739756403, -1.335214423019916, 1.0316946058056184, 10.58339702607438, 0.5910012194726734, -1.122421418658558, 0.6166345812795742, 0.7532472630840733, -2.9449154625483116, 1.3006037605360212, -0.6638506475508981, -1.7593901556394402, -1.6039797235989193, 0.33006441115376534, 1.297924750885789, -0.7551112413448751, -3.9287333569501626, 4.077765946636723, -1.574454068994299, -0.9460054529435371, 4.2587509568664395, -3.5254192571945397, -5.0285582063942975, -3.3251818511053695, 0.15086116524150728, 1.7578331900897874, -5.337994392599111, -1.7023773375330231, -4.6885217459037, -1.6433107886605247, 5.269807866000761, 2.399669656635047, 4.2652905978956825, -1.1752120266704098, -3.6264996054939047, -5.932210964853332, -2.5708368305344917, -2.5965888223855753, -3.596863995793064, 4.855528126448716, -2.5990597321140294, 1.2224943686713634, 2.600775300365876, 0.20798214101366827, -0.08277323985840984, 7.132831716241914, -1.5403781004833115, -2.10899362271046, -2.288707194352599, -4.277864214931394, -4.853659721407964, 1.0204895561875997, -0.42226218180435376, -0.3607697358137866, -5.816645424380114, -2.509320414779717, -2.7260241539591004, -4.565645365943782, -1.827477960607185, -5.891598781811226, -3.071564151829643, 2.7016674988240545, -2.3706266211340403, 0.5956614585008458, -3.759832987491075, -0.5496263591675189, -1.6569812230373284, 0.17624159973404832, -2.8921809003410615, -5.616475098682604, 1.5131239571740505, 2.028590021880411, 0.1959440663920361, 0.9943317280127906, -0.7760815248085889, 0.378641970162278, 3.9455434390229676, -1.0270444695963188, -3.8941856140507487, 3.73709982326521, 6.1640021733657475, -0.08144514995063232, -3.3744136655866175, -1.8209504716084708, 2.6271330631412053, 1.6964275527717743, -2.978107060806459, -2.690815357139661, 2.5497581763564026, -3.5715666527936083, -2.258198093767128, 2.3632640598593526, 8.830400540598792, 5.945247832363849, 1.8009932886277298, 2.055175667171005, 4.56905024165446, -1.8660737116921846, -5.847933062081819, -1.7725670314652793, -2.379605690194517, -6.872959895136909, -2.8803998188724007, 2.289586250042621, 5.062750774530416, -1.4194856718968254, 0.6770126355387162, -3.9325026652329584, -3.600537511863975, 3.2772532139597166, 1.8586390733798475, -1.7886318911496903, -5.656416017766988, -2.4137580372276735, 1.2985343554072737, -5.593319104137723, -5.319021666531332, 1.2711687261379803, -6.795318176131286, 6.395082687050446, 3.4394172558114633, 4.608157341493191, 1.9846433180007692, 0.2784921057301336, -1.2729547518119637, -5.56035169754858, 3.953409994566284, -0.33691115033637636, -7.435705511025348, -0.11573180744434955, -5.033560037111551, -0.505487133697899, -1.6820411825366353, -3.4580907131571745, 6.510350538374819, -6.781578303485834, -3.2269727892085993, 2.661665912339915, 1.4778337076396695, 4.181649329427817, -5.697828456464621, -4.630456792370096, 1.70872271638253, 4.801119665524345, -4.8487956651701465, 4.64997968313788, 3.256652412264021, -4.020222324393818, -3.3977539890755954, 2.3199399742814046, 2.340148506416701, -3.388251869007605, 0.038797509161219684, -0.013882642011392575, 2.8142150632414777, 3.251979489664245, -2.244409596410416, -2.8064641083265633, 4.930676505177985, 6.044924377049195, 5.28521452235503, 0.12067665668456956, -5.836098670122202, 4.2586777780044125, 2.604975832563697, 0.8557627643854904, -3.219267418672545, -4.709176502437577, -3.668808622157983, -0.8834785162878899, 0.3397524415057871, 2.0673912741946867, 3.929313701350232, 0.680223311382079, -5.646218118654513, -5.25172521902838, 0.4221070699983291, 3.417580765886961, -0.8800980339169313, 3.157836260950442, 0.12423789637617, -2.8619466970222205, -7.245856944093589, -7.872506139052127, -4.6003402437946965, 2.467620273893098, 5.6071770664141845, -1.70132265850953, 4.710809566731723, 0.49840146487763276, 1.4402685470965237, -1.2895701895075342, 0.35105074936485653, 1.1948883046372303, 2.257006643241089, -1.508000750654888, 4.290394719672438, 5.549211056581312, 2.719571235041049, -3.455165471539471, -1.7290856170704716, 4.559090902502191, 0.7084173190671647, -2.1506090995946003, 3.866363543250005, -5.553456599725765, -0.2933640836683214, 0.7951973684560824, 0.9019752776945842, -3.2784191787718107, 0.964866544419917, -5.674819930001297, 4.139657816596225, -1.5717469044591679, -0.7061331174689742, -0.991059852057668, -7.404343765054108, -1.8419499883547648, 0.7637813503081033, 5.220589796457971, -4.3403863603431905, -1.1417210996824068, 4.083902702236349, -2.7431754027247477, 0.9203124568566168, -1.92664317633474, 4.387613750543463, 2.780516699020053, 2.9934582785063895, -5.898449453483904, 4.929613343542789, 6.180320414376352, -0.7227485976259574, 0.7992503099401091, 1.5855473565868976, -4.764805973822988, -1.5973054721961635, 0.6657827284752691, 2.022793581275056, -1.8204393326687383, -0.3752984472363805, -4.31781431930497, 0.715972076806039, 7.98699417721788, 1.8128143130266412, 2.9326907009121186, 2.410781816341552, 4.517382285360676, 4.946093138035885, -4.36210943690445, 4.688927016673761, 0.00345654075974031, 3.630205330850358, 2.560308351481246, -0.3837609229891231, 2.5174842828244706, -0.4163808723799888, -5.923695984247106, 7.699525515956026, 3.692004190890006, -2.034635962867955, 2.0689363815346535, 1.5003745958930368, 3.199676316708935, 1.370100632047273, 3.0501021026197215, 5.179030727784318, 1.6540315920546564, -2.3234538032651715, -0.09933454758845123, 2.4825677140184665, 1.3383939294766252, 1.5863762918423714, 6.859902415336498, -4.268960007897059, -2.464688836232601, -1.1975123166120802, -5.082243147055998, 0.5577698187824915, -4.358308989658595, 2.692483389757826, 0.40513192838130174, -4.418201371154877, -0.8193919382451922, 0.47701603919770696, 6.269639106888874, -3.279238120597209, -2.876865367384457, -0.6861685023035689, -0.23853362411877974, -4.872777072979775, 1.3616133095644247, 2.608953618619413, 1.8326455150107122, -0.3634781659704782, 2.7306060741924068, -0.2909692304481408, 0.11318544859333589, 1.5441661909920108, -4.755831010972328, -1.6586399767994175, 3.612283799598361, 2.8686068903923836, 0.49113315227595905, 4.255495853783642, -3.0580578551182738, 1.8133723982623189, 1.0389365119594267, -3.767482409535159, -1.7848257546950108, -4.9176063576254085, -0.976165832472142, -3.989480295297076, -0.9970091462412745, -5.968088628187773, 0.2922038694523217, -0.04865606951521792, 7.012802256473574, -1.1873292168303669, 1.1080076625210125, -4.027494845885, 6.953848630390225, -4.071190449620481, -4.1362723473032865, 2.0493119209780013, 5.10275554471698, -5.502031674699453, -6.412961097231469, 0.9147974066360578, 4.221133465287325, -0.9078619005076916, 8.085441604530162, 2.5252889950329767, -2.2984053520249685, -3.3285071458747657, -1.98623394033816, 1.4658679962725507, 1.0770477383497672, 1.4339384692077186, 9.03152639142784, 3.8040897556148745, 0.5555798161648359, -1.2648524134127117, 1.8020678280030231, 1.5032760648259766, -0.5469263321245176, -0.29069265798671157, 5.970608362683147, -0.1225285869940924, -2.789657212467578, 5.404246898759876, -7.755824464772782, 5.2543844307040795, -3.8886882899263386, 3.41377617969728, -1.0047672417080316, 7.8127905947176775, 1.8968235540366871, -2.2533960874411085, -2.175392798405564, 0.03349411215387524, -0.128636913674117, -2.4619546293560908, -4.408395038657379, 2.21261517978459, 3.9546675875337134, 6.049920982555331, 4.885354221763589, 2.245757875392931, -2.159702808195182, 0.023240364426556005, 1.8359130847498164, 3.706212952574244, 8.944375248131955, 0.40536671102280764, 0.23824065847962997, 9.612468631257475, -0.6167328059182284, 0.5369526468364141, -3.1909567401694368, -2.557612798797635, 5.764487392651504, -2.347650141346174, -5.4472919617554485, -0.23657066691063947, -7.373500285608462, 2.4265888903979143, 3.095756710854151, 6.120655124987331, 4.950434221233386, -0.9421633794132148, 3.7963830478739378, 2.9163637745932807, 4.10694423375043, 6.783011498728696, 1.3822284247652512, 2.3052903979832773, -4.251343816856226, 2.015132355039864, -7.727345164870627, 2.143749614347446, 1.2684960192848729, 1.221907787720046, -5.138201845973307, -4.538936997980212, 2.3721420114313516, 3.037452556885395, 4.280681846306426, -9.146534545261948, -2.426899583289292, 7.442537111407576, -1.3513560100683528, 1.4422273582389393, 5.818429006938777, -3.456036385411909, 3.180119046405289, -2.011953360293168, -9.989213993175301, -1.0595415425169472, 1.4792642955677175, 2.908164403070016, -0.9160033543924481, -0.707196656658864, -0.8171201190655861, 2.2778622391299073, 2.48312984114121, 3.2185831979343376, 0.27999471013469174, -1.4091531383715097, -4.290309086412484, -3.2244884700392547, -3.4240372068040874, -0.7122937679317006, 0.858927724475078, 4.2085198249627105, 1.95634041107504, 3.174775603970775, 3.1170473903340548, -1.436611016918082, 0.1711799417573625, 0.9638843452544913, -3.083016447627309, -1.6316402809153017, 3.4885167560428845, -4.020130447549018, 3.3555875064826908, 0.56560405085933, -3.683797188730183, 3.4423101076394573, 5.919255417883192, -0.44180551462871925, 3.234277226237578, 0.3784255892859788, 1.8540695347847456, -0.9109289706377738, -0.20903163492121735, -5.267000227662529, -3.3491462667483134, -3.7027099950360456, 2.3592610937887804, -3.8961545463514877, -1.5415032017349222, -1.1448772642887393, -2.0636241633704193, -4.909788964727039, -3.876712826795915, 1.9842316985264474, 5.679610192578301, -0.19409517640272364, -1.8251034140513838, -1.363915720770753, -4.275052440585899, 2.3493732744007096, -1.560281925218246, 6.689162091315863, -2.6750863368764795, -4.744153075706668, 7.8890935684827, -2.041464670265595, -3.284368733719165, -5.163705731445065, 2.9964156074959445, 1.5227180039882044, -3.5658108756501026, -1.3595651889420777, -1.6025609308372664, -4.801132861102025, 3.3351365714809593, -1.3035705830329696, 4.388014180431923, 4.624102045805333, 4.292202438370317, -4.913175014961048, 3.642234851371739, 0.23867893443440766, -3.4020177257420405, -0.36302721261162363, -4.7350667055408415, -3.52940415299667, -2.0623549898830675, 2.5059478350390454, -3.414960243700084, -4.668171939825282, 1.4323485849874005, -2.750510318309596, 2.003865962525918, 0.4667609148342472, 1.6630351360117959, 3.9631537979345732, 2.925219840353356, 2.7870838590571125, -5.865183672489461, 6.983858776500399, -1.3627365021950333, -3.47512042642505, -2.8618939663329437, 0.14240158380970938, 1.4916212790316825, 3.034734445250519, -3.5904040088032607, -1.058362315695212, -2.763094166466308, 0.5842763163692479, 2.183849861060947, 6.127409765991194, -2.751437890983306, 0.0894490411739962, 1.469693421069081, -1.2339971756381944, 0.7335700192287644, -5.731120381281536, -0.8406307164645274, -2.3849152122953208, 2.3621103690248395, 3.768519119172201, 6.92562661870324, -0.8747686784338145, -2.232123664613682, -7.98527899656522, -4.315648288909534, 3.0056871010978714, 4.227694376252889, -4.426004685528208, -1.7695473038324574, 0.9642938175884453, 7.586065575380056, 3.7463515248138086, 4.872229519934143]
BIASES_LIST = [-1.3809900037242748, 3.71244804988739, -3.6055608011417406, 4.7931100953297685, 6.3454888150493485, 2.7729860455596707, 1.1063923243364935, -0.07748067296462109, -1.109510612940255, 2.6554803031782224, 2.130933114764913, -1.3601849278678788, -0.0025712531584930597, -2.6264632900073432, -5.507763914195687, 5.2594253189043565, 4.81907221048613, 1.4749116132982294, -6.57901783532218, 0.013586866445165316, -5.070191380657069, -2.8024994561038468, -4.072804665756181, -6.08578358831656, 3.9190238485798248, 2.65153373637388, -4.032461036393649, 2.909474695921722, -1.0761293705367128, 2.2962330275265406, -0.34155101610233135, -2.2941524368602426, 7.12194535779446, 1.8508625932212819, -1.6845327133582058, 0.44566429720444717]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

