import random
import math

WEIGHT_LIST = [0.5624230257101528, 4.908122704361384, -2.3130590709729093, -3.5509904327494666, -2.322560167877593, -5.293906259202559, 2.8791598411388835, 1.8275764484470225, 0.8053164780557205, -1.1061336363270822, 2.6008252819065283, -0.010012241271425075, -0.9031499419253591, -0.7622491153722577, 0.22915733825555407, 4.929668617827582, 4.675365228559948, -2.97353542022317, 2.8365076517654892, 1.8307212141903284, -0.3748545508794023, 4.352712879919098, 4.936347268640106, 5.419200911748196, -2.1152002110577097, 1.6159838467249805, -2.1829223977129883, -4.360325674901898, -4.906096850610117, 1.383900652118169, 1.3659924282478981, -1.1137446552040253, -3.3962587130165343, 5.258132010929808, 0.9937709795139247, -2.4993528790636423, 4.147108554603972, -3.2843673135465923, -3.7439153245176513, -1.0341023012988624, 3.830985498618858, -1.8599869981446766, 0.43969806097004677, 0.1586580136103473, -3.2619793804083304, 5.7329824541914025, -7.88287066009949, -1.0417376108186913, -4.616030832709586, 0.8828009895698103, -3.839026647131957, 0.6790789363347709, -3.580580249329596, 1.8927866285057064, -2.2529862029017518, -1.591801247291265, -0.4125699680924481, -1.9821115163938765, 4.892721864451422, 9.882538830799838, -2.195961578884353, -4.489512355913912, -4.311940956602121, -3.5267184775889002, 0.7266699832823719, 0.20495207987806463, 5.362619110076904, -2.1979204121868685, 1.2327595633251323, -0.6896533912318537, 0.4437825936761214, -10.341773509864575, 0.4931938299464019, -3.6915740052071015, 0.0392155268720345, -0.9629169170956106, 3.3899992721409844, -9.798842631274184, -0.0763672425307506, -0.5693552452896661, -2.4179569924952, -1.1139319796700227, -3.250963711020174, -1.2151452435698438, 1.0211421080408398, 4.809786064638451, -1.834685599127827, 3.9946688044293093, 1.3671303341732608, -0.6886575170296414, 0.9995054821636985, 3.782390244446079, -1.2429012586828345, -1.0585199467291693, -1.575187152472726, 0.5323088519507148, -1.7507426231452496, -1.130539543825219, -0.6303067710308512, -3.6925830973721285, 4.125009848714374, -4.822188050192719, -2.329217408232726, -3.6104950929299164, 4.939749753619121, 0.749972552930231, 2.702814696568902, 2.6854260467242947, 4.963772062031374, 1.8794824542445385, 4.386693694856704, 0.6012736891191137, -0.5319537816880775, -4.3141303318027076, 4.457586517252624, -1.7101306702884642, 2.560609466306858, -2.7703130819097437, 4.5645992806370295, 0.5751599326594999, 0.6286163035086899, -0.1562560303174147, 3.597405239125575, 2.6168170684573475, 7.011355383247898, 2.4448107729722217, -5.353769788438466, -5.636263347377155, 2.5546862118304863, 0.057537766880933996, 3.628743739699668, 3.841071985344203, 6.504967046664084, -5.745082097029668, -5.196548783408931, -5.161840729039736, 5.241218027189445, 3.508586083972586, 3.566242364633524, 4.549361442238778, 2.075569020464709, 3.4839542026209256, -5.225934842080017, -1.0506742365947233, -3.6839796024460076, 2.5209126747861488, -3.947940612514406, 2.4832066811874265, 0.4662184648858134, -2.48164200453256, -0.4243271583097365, -5.113537751255323, -2.4203559653001796, -0.005724848202786312, -4.157089712361593, -8.687455701036829, -0.22404107258511832, -1.8185808844003424, 5.469893421679198, 3.8024712744571807, -0.9467774269689153, 3.8414510718221857, -4.5588858731855275, 4.479305737900725, -1.1276673547610347, 0.36400279098389243, 2.1056506381961073, -1.6854727060033288, 3.367975832822111, -2.6077185597895527, -3.455260276272466, -2.4217185052572945, 2.064813300484231, -3.2813266737255993, 1.8340848306953568, 0.19389520489422363, 7.30323099417905, 0.1393822258141349, -1.2362492141233115, -5.3726222676861255, -3.2157907797760252, -1.8776978419784136, 2.147526422325746, 3.6550210282906206, 5.11744929845736, 1.1275759473579885, -2.6349822102360854, -6.1105857345511785, -2.5137455337557797, -2.1346185646137394, 0.09150830541290234, -4.284573541901912, 4.580752171789514, 3.254076839252869, 1.9146740237490223, -0.43421041224765133, 0.7536381052995402, -0.5214758430569882, 1.6940344665729485, 1.7613951294229815, 0.13057581173251895, 0.7076829345944226, 3.0311034396350074, 2.416849235453359, 2.2481691026891553, -1.3544092336380258, 1.0328670675148315, 10.575277971344988, 0.58258538287144, -1.126928860622634, 0.6035343421197252, 0.7530067746616969, -2.942554881256682, 1.303405389327511, -0.647414323303323, -1.7575995506665616, -1.6038543916316903, 0.3330015937104079, 1.2998426156846192, -0.7479826553777049, -3.923753131287264, 4.08164588194094, -1.5784001041187856, -0.954607000268606, 4.256341503190857, -3.5332066645585067, -5.024211088447253, -3.3224023664875437, 0.15251767360365348, 1.7336666218045116, -5.337266420684449, -1.6976192993389974, -4.691138034540248, -1.6471739544320991, 5.273928525251616, 2.405061388115893, 4.27670343089669, -1.1694778606132046, -3.63108499659669, -5.935033523513349, -2.5746876804583354, -2.5903385230350535, -3.5976863861826547, 4.865856744948734, -2.60098649468844, 1.2076372120374712, 2.5986115598062747, 0.22079761896225292, -0.08520754480013461, 7.1268052675691305, -1.5361049443199373, -2.114188727695137, -2.295769893204495, -4.2655680727620275, -4.85082301945983, 1.0113224427183019, -0.4222593632936905, -0.3515030835924742, -5.813799339836683, -2.512627745895618, -2.7321728662596687, -4.5752278945207205, -1.8268056452289518, -5.90759027531782, -3.066198495168603, 2.686283563171685, -2.3715506324510223, 0.5925697997686232, -3.767167476475107, -0.551356073138239, -1.6600644623120737, 0.1751601856805814, -2.895517661367173, -5.620292160729682, 1.525544912142459, 2.0358620464971384, 0.20221362414518818, 0.9921708872164388, -0.777476031991446, 0.3666880677334167, 3.9483123858547, -1.0312576348496876, -3.894358104325474, 3.7544221972445895, 6.163890803429646, -0.07854361843793413, -3.387263957598499, -1.8228237164018286, 2.6411592884893524, 1.7017499239932667, -2.9796899719620877, -2.689526464266256, 2.5431479610336143, -3.5735929474519508, -2.2636046612900382, 2.3617828446198157, 8.83223420199218, 5.951770650441231, 1.8034681852337477, 2.0480457118471445, 4.558480678329478, -1.8847458770394099, -5.841866314021456, -1.7753526471800605, -2.374987351748158, -6.868264538609851, -2.882613606590642, 2.29324028034233, 5.067185580171123, -1.4276067271181423, 0.6757853283615171, -3.9142510766178193, -3.593100861598425, 3.2659976516765017, 1.8419531120925812, -1.781390759484045, -5.646270666210738, -2.4036440754459765, 1.2910218462080356, -5.5926357294063855, -5.318911278010201, 1.2767529545706184, -6.7978419560402195, 6.406723728574365, 3.4355864844617208, 4.5997775702679995, 2.0037994971896653, 0.2777660956308216, -1.272034855735342, -5.566858753360216, 3.972224926813805, -0.33858907564032636, -7.42413402972886, -0.10196214137965266, -5.031095816829387, -0.5095083593201367, -1.6727952169106637, -3.4524220837684036, 6.509335093054644, -6.78174903166743, -3.2345640257352866, 2.6689731825836023, 1.4713162559838233, 4.190375322447909, -5.689501164249049, -4.6302369881398935, 1.7069563512656991, 4.797807348565119, -4.8533446830439475, 4.650291286846198, 3.2481496793649294, -4.027317140293261, -3.3992415271386456, 2.3162045385645427, 2.3356416507608118, -3.389196670970617, 0.038842146552117776, -0.01610665197021869, 2.815271313658107, 3.2354429286969095, -2.244428374105605, -2.8233877427127276, 4.921646120473439, 6.0548515502197455, 5.283824065234248, 0.11228058092480886, -5.8429687376904464, 4.267294205376682, 2.6094170510584247, 0.849747698603163, -3.2258004531372912, -4.709610465846374, -3.6710743811597664, -0.8902887469476163, 0.34294120846492937, 2.0727328258250246, 3.9221911209218594, 0.6821152501240936, -5.651181496062087, -5.258763706242676, 0.4231593386752806, 3.424013715389736, -0.8718527343340783, 3.172873111774361, 0.12978436585493772, -2.872454642316364, -7.230009965044259, -7.883565176504757, -4.602398866361039, 2.460639321901532, 5.606804946546716, -1.7001344710257176, 4.7054250270336135, 0.5174117778629596, 1.4436370016783935, -1.3019136731994927, 0.34046335604725064, 1.1783566297565833, 2.262242189819355, -1.5008403832922361, 4.290249827562474, 5.5496689873137806, 2.7135992909021995, -3.451020842841489, -1.7145342131976227, 4.538097056625533, 0.7026551797456901, -2.149495814177646, 3.8724901022984586, -5.555963859604052, -0.3042273368463393, 0.784814256734429, 0.9078621520728399, -3.273493170962913, 0.9630214741907644, -5.687388508027249, 4.127909281448907, -1.576708929297378, -0.7142725011902196, -0.9894897958318377, -7.400390095654941, -1.8386725232889778, 0.7522542077465282, 5.219116325517873, -4.3452918386007, -1.1513036113981239, 4.085948175410758, -2.7472774210980364, 0.9152354115838834, -1.9439933513350898, 4.3939322004688135, 2.7817549001617397, 2.995513773322797, -5.906014978254924, 4.933833136806088, 6.18773325491185, -0.7365407119611593, 0.813084419924536, 1.5873087089307127, -4.765983801585262, -1.6135519458067975, 0.6577111629345674, 2.017275143103886, -1.8351749350607676, -0.3796655183687635, -4.321275326177876, 0.7134314133869077, 7.98561766977611, 1.803040313574143, 2.925900422367324, 2.413242644460841, 4.521134076362939, 4.936712824466967, -4.358255623085556, 4.689772937708662, 0.0026069024902030426, 3.631578244746149, 2.5567310337528366, -0.3782422311586438, 2.517526181909309, -0.4198168637505624, -5.91129474225383, 7.6967041464281625, 3.6868039242391504, -2.046599409199573, 2.0680670907388095, 1.4944780277524308, 3.19261215151822, 1.372666085249811, 3.0549619238043673, 5.186782456748252, 1.6506294175172371, -2.319898046746015, -0.1082536329755532, 2.4988704519584792, 1.3485249092184863, 1.5741612296457232, 6.8514898643835185, -4.276790645890765, -2.457223623544311, -1.1886180318942918, -5.082176984494278, 0.5707144034434625, -4.343081770996635, 2.694526008766951, 0.3968604515785323, -4.409859645149667, -0.8173125556182075, 0.47772776379849047, 6.264206752708025, -3.281715008528328, -2.8802647479119585, -0.6970678828222651, -0.24269455973695975, -4.861439492481767, 1.3645149515077872, 2.605722203825622, 1.8317518193700728, -0.37205317948597955, 2.732771326368326, -0.29134102219052366, 0.11054829523214427, 1.5399099223265083, -4.735525586162404, -1.6579216887965766, 3.6028179560688978, 2.86883506375032, 0.4973407254394762, 4.260762118915722, -3.0614082695075733, 1.8228195925323805, 1.0548756945398141, -3.7749030896937987, -1.7913471789206763, -4.9094632840867645, -0.9770242887964038, -3.985784996199029, -1.0057114205700148, -5.9686421495263975, 0.2963256880843542, -0.044768928063913305, 7.007910883560378, -1.1859431806734777, 1.105155824048328, -4.022210200616417, 6.957778730824725, -4.074238333275797, -4.129925321907234, 2.045424357847193, 5.102564698326701, -5.510353002764777, -6.405996859291691, 0.9163298328831873, 4.2216826492115285, -0.9034841398753725, 8.07850695820081, 2.520059542266032, -2.3035168247353224, -3.3348698624000916, -1.9913785898320666, 1.4656056166549358, 1.0603665755343554, 1.4352342276743855, 9.025733913145718, 3.8052144287732137, 0.5648974485914513, -1.2599891431857342, 1.8083769384966815, 1.497488343103898, -0.5475313632145395, -0.2840638401241459, 5.973459981286088, -0.12456511945408318, -2.7880533210413048, 5.411197144579651, -7.76617520888493, 5.24907831254172, -3.883754135728975, 3.4016700983714148, -1.0123310707632882, 7.807933289880889, 1.897339005025359, -2.261988991615297, -2.187613979365237, 0.028294783045279864, -0.11927488556775685, -2.4586869407187777, -4.412230691512278, 2.2163873406932164, 3.958833650578573, 6.046065904132619, 4.8730587682256985, 2.247152495777571, -2.1503238336838493, 0.032210634637968055, 1.850096985395516, 3.7066299649487866, 8.942325245566128, 0.4059670020201079, 0.22420980809926436, 9.60380284334277, -0.6130232653121647, 0.536161154429675, -3.1859770244390697, -2.5493483971617517, 5.7763824149323595, -2.347792075862881, -5.447285673015123, -0.23775260476454718, -7.3647783766203725, 2.425642150561771, 3.0769099226667387, 6.1094104293279, 4.951490926988366, -0.9524653856023172, 3.812224278346291, 2.9151974852047293, 4.110424927748489, 6.784980430670143, 1.3883182774817397, 2.3058647875727387, -4.256826020654938, 2.013929258572849, -7.7166666033548905, 2.1602547942520998, 1.263818352705345, 1.2213760645264078, -5.13845160131088, -4.536071602499722, 2.358908606478559, 3.0353820748861735, 4.2702940822588795, -9.138656310277158, -2.418665136264306, 7.443717599501128, -1.3586922376172401, 1.438447373411731, 5.8315808664765205, -3.4666047261984523, 3.160197444572961, -2.0094193943328422, -9.98356537879161, -1.0450510257469843, 1.4749211557899504, 2.9003746164852373, -0.9104552032998782, -0.6981889846053384, -0.8079055350805361, 2.2761221050423703, 2.4895495622234174, 3.225202665807875, 0.28131375995769287, -1.4149436147211474, -4.290597547463962, -3.2314625877571794, -3.4212183379260055, -0.7148953514355846, 0.8631699291214503, 4.2204046139922395, 1.9533903408392022, 3.178860335750566, 3.1109388830426163, -1.446181822079813, 0.1607944429137913, 0.9619339999523647, -3.08990327691191, -1.6440054719202337, 3.475671044998006, -4.023128542717159, 3.361705624186251, 0.5682389029689253, -3.686188186351653, 3.446245083536783, 5.927527783845424, -0.4424374805898456, 3.223831778757325, 0.37956477214687473, 1.8497954977715274, -0.9164042654611707, -0.19840909971956888, -5.260700543934471, -3.3579932085054045, -3.709360820964278, 2.343658235345138, -3.9036808125965123, -1.5399550033911185, -1.1388963638226786, -2.0594578368458594, -4.901059958830202, -3.865994802272235, 1.9863937101151927, 5.677816427077829, -0.20079512254752294, -1.8332085706812398, -1.3577288353711081, -4.283449877697991, 2.342206868191464, -1.5533806788419091, 6.683453369660513, -2.672223626725498, -4.74506349478586, 7.88488858854428, -2.0467675911169905, -3.2759431491019892, -5.1649935279205454, 2.9941689763197683, 1.5184052878453769, -3.557215956792913, -1.3636292759293165, -1.598114075716683, -4.810498359103953, 3.3326755598598927, -1.309924131963449, 4.381913857977447, 4.627594604541259, 4.290906620640862, -4.913568345029131, 3.6509637137261537, 0.24107767835679136, -3.40167042643847, -0.3629780833728667, -4.742400363936656, -3.5438394763808203, -2.069038396959748, 2.5216068340288973, -3.409968902155651, -4.681276802582656, 1.4316814684877297, -2.754705172123892, 2.0173396864630644, 0.47169193363754097, 1.669725793703358, 3.9668266752446764, 2.9322371023308262, 2.792519119284036, -5.870511528917169, 6.990678645098585, -1.3608370742000608, -3.4702212732004076, -2.84711870000113, 0.1473336965185032, 1.4932511607757244, 3.03088097610478, -3.5892102204475553, -1.050274883966898, -2.7622332026184337, 0.5858473480544515, 2.1810041857185065, 6.129120424734522, -2.758174437296437, 0.09700932694259759, 1.4768309429897324, -1.254942116601544, 0.7354407471761594, -5.73495993749282, -0.8419284576955904, -2.3864989051646983, 2.3565407190541565, 3.775304269070888, 6.9249900870266705, -0.8697157041027828, -2.2345305862151847, -7.980844017625245, -4.326816173452766, 2.992041634982828, 4.220133135514015, -4.42329514262579, -1.7731602263090438, 0.9766847370142598, 7.593512839849391, 3.7536992398440336, 4.873873807615592]
BIASES_LIST = [-1.3866572573943536, 3.7127394272599337, -3.60961312051252, 4.792900986097239, 6.333642316588285, 2.767583578958558, 1.10105670121538, -0.0796684605447669, -1.1049475737638272, 2.6569093253909815, 2.121846096362735, -1.3670938023861339, -0.006472519030240925, -2.6215535838939976, -5.5020913171574835, 5.2626853424045885, 4.8238229150251275, 1.4771928125458542, -6.5645006608255425, 0.027015802352854303, -5.070501754778988, -2.8007976675181396, -4.061360503934426, -6.095611161150936, 3.9278024610134223, 2.6513793847486267, -4.021198587995636, 2.9192562981978734, -1.0851251617777011, 2.299483061318112, -0.34023203151382186, -2.299569719083296, 7.125259943371875, 1.8504697283468334, -1.6857542144440605, 0.4444401295168995]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

