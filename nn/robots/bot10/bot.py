import random
import math

WEIGHT_LIST = [-2.127372464371862, -2.607963977422595, -0.24241722532088916, -4.011869508598095, 4.9830636762221125, -7.297591554416561, 5.706766425647742, -2.3717949858824774, -3.075178471524603, 0.8661741128994791, -3.011327585153739, 1.6894155378065934, -2.4411022541315184, 1.0786152275595873, 5.070703382372096, -1.2794057782435078, 3.8116924093665787, 1.3037640023797525, -0.42832822681353355, -0.6023521004269874, -1.5034855759322459, -0.6267170296047739, -0.6266049481358311, 2.8105902726902237, 1.2539530991646082, -3.785571485419596, 1.6439114076701298, 1.364944083804045, -5.604601168451282, 0.25906542392385123, -0.16334097026455252, 1.2637447447222483, -2.3010310256535176, 3.8520533569705018, -0.9784417248648354, -0.19971771568036933, -2.3642856482647416, -0.34082958394832485, 2.428668100162854, -1.9309004657722626, 2.160245129258975, -0.8813990448078186, 0.2884477277611066, -3.421970823578314, -2.4041561223994723, 7.218859996022029, 0.6485896613384574, -1.1692388864220185, -0.22104432614112524, -2.984622960086437, -0.6632567096073465, 0.16748892006720162, 0.1844385186127544, -4.145497583793177, 2.115692123588474, 3.671304130448588, -0.03795058326383327, -1.482702888910053, 1.4055868929716095, 4.240417107996079, 3.075398759230815, -4.350997783822644, 3.8022263473590483, 2.3693902492803933, 1.9962473210498306, 3.6689045250097374, 4.4969455327454835, 1.9192071718558772, -3.8517583891712652, 3.4907845657679433, 2.290612040982367, -6.441482040519961, -1.8608489434297888, -6.071666928996244, -3.374224947728676, -3.3085981843046595, 0.3275778142171717, -8.334898962505513, 4.37903716979174, 2.5404157250507993, 0.6192495754680556, -3.8860353287744047, 2.5161600690001285, 0.03789953607484442, -4.891577159298567, 5.033114285835117, 0.36627070426012986, -0.2863592318148196, 1.8690366550472817, -3.304971341957419, 3.266581372968508, 2.995875475066578, -2.5764791166013503, -3.400972348942096, -3.211426951085347, 1.9632004770845617, -1.7845759497802687, 4.592210504128853, -0.4770068876047393, 0.8554828324045509, -0.8173494720377137, 0.8930455012814553, 1.142580813503621, 3.5542087351595146, 2.0492136028227113, -0.7133125611301532, -3.2598501469030086, -1.579241081900169, -2.408140624631834, 4.0015498222233905, 7.231524583107717, -1.3825219774785638, 1.5169142753682814, -4.9270028079090915, 4.099570663138723, -3.7547037882782552, 3.9243043164957347, -2.8014289804742427, 4.35559267243272, -5.559935999500941, 0.1998668011932545, -4.048170237855385, 1.5355640615353772, -2.6044764873092747, 1.1116105875228457, 0.8203269294942603, 1.3450826937406921, -7.168570697632484, 1.4735957321977082, -2.2743579783043386, -0.30020146824213745, 7.321038919592743, 7.749415230949127, 0.004647517060512474, -1.6133532483665693, 0.40617715907410723, 4.65644380586177, -2.7749291735137893, -3.8901399836399175, -2.4209250761477628, 3.172413082001862, 0.25176256735684954, -5.1905762811641605, -1.2881939537642322, -0.16127230327957798, -2.817606772342744, -3.944535786504205, 4.789874851240718, 1.2760754191110264, -2.1536891604152206, -1.099311801034158, -1.4530644973964277, -5.1364872097764005, -2.4829815488216984, -2.3896250482393206, -1.4286022266820284, 3.0858330245003325, 4.373910964154707, 3.08762686430196, 4.885079675593988, -5.120671201363738, -0.5575894926382647, -2.4046833026164682, 2.3043182971615996, -6.864482933585403, -4.675981355409571, 1.0779036323635065, 0.07565231408045703, 0.5605487643933846, -3.88198754275151, -6.6047255318767, -2.9263215364029085, 0.4879000472113617, 3.669016704551076, -1.4759300651639033, 6.222073841976812, 6.233446619821057, -3.2696980328698713, -0.4063883529830771, -1.0589005089535715, -4.016823227270135, -1.5768940473206168, 4.853208514437225, -2.699648876480105, 4.374834155924123, -2.9765962309925493, -3.803984580106154, -3.8613549646849576, 2.323692645305006, 2.980220324353725, -1.8679207011663193, 3.976715820594456, -1.3113345847169906, 0.7824106010379619, -0.23646743587026364, -0.4901346595965983, 4.0229665383727715, 1.68350236172739, 2.0610306774423615, -0.9140590943762792, -6.093526150869399, 4.816501428449313, 4.571301543055011, 3.0583364177638988, -0.9667789004779219, 2.5864513255218124, -0.25651942672085326, 2.131749973338276, 2.542280411536662, -0.31781076806362174, -3.2520947268989993, 0.44194068394121433, 0.4678268561900054, -1.032051726259361, 3.4644479963162746, -4.509356325318838, -2.749988932435855, -1.359708637358683, 3.201571947616774, -1.6671270065833719, -6.158347825942243, -3.452699464153767, 3.994695166574834, -3.46483807683282, 4.522771196541424, -2.9217748055657693, -4.530193789934579, 0.237622807904305, -0.3222664683427745, -3.4728361588819467, -3.625858730796309, -3.727780724683511, -5.095438765641504, -3.4709150313767037, 6.272284935788485, -3.691372808831294, 6.136301549891141, 0.5457884421995982, -3.7446706630330326, 1.2199367203565776, -1.0630616217848963, 0.48340463183711435, -7.355933407907152, 2.0493711953872724, 1.6703266970837811, 3.802724531425156, 0.26626402607566835, -5.649501425731308, 1.555493628141718, -0.5495478391550495, -0.5023727520652768, -0.19414764612211766, 2.0228796781016483, -3.4769874626089594, -4.8993647154775966, 4.299909299354944, -2.5722676205106123, 2.4263411138852478, 2.4413139842222895, 0.9737085242475736, -1.9893820751722613, 1.798124237432864, -3.7756594217104027, -0.37356510296055, -1.6358805762878028, -1.5595037129688674, -0.7767983531521496, -0.7933711144636858, -6.058928949559622, -1.3074816282233879, -2.660464788762027, 2.594140284150258, -0.2320829164423468, -6.268835885006082, -0.3286702530821437, -2.6560528870935975, -2.025057371083537, 4.765293171084489, -3.203849486328656, 3.0099635845222714, -3.6564590114634203, 1.5320749414152743, 2.061471972988503, 3.3249079560672694, -1.9228558179704887, -2.633752652147225, 1.5967830575190791, -2.5594310570708165, -0.8901387336366744, 4.003454294107941, 1.8617498522186935, -3.9321814887430695, 3.5880938514892566, 1.9230456115110193, -4.616309124383101, 0.4636246412136924, 2.766034444873628, -1.071794526090509, -5.260245388597666, -0.6270253805778592, 0.28158996020007243, -0.24976030976571173, -0.4401622762477233, -4.062420149372573, -6.343369721760377, -2.4233409590621706, 2.615738902573992, -4.164153379477097, 2.614249529822423, -3.5139649186954713, -2.5991306185396246, -3.4683912731811977, 2.078685979236365, -3.1584594585939825, -2.193571034025881, -5.69017956512225, 0.060379650859420764, 1.5720306574255858, -1.3069570544432871, -2.6514337912951054, 1.132506344218649, -0.7060992739709682, -3.396408408528499, -0.5500546688060794, 2.8676954724066572, -0.15453515023147646, -4.135945246600236, -1.7222239867967577, -4.89600578781046, 1.475912694614212, 1.7179483460828155, 5.043932122479108, -5.986115252472253, -3.6881196693363933, 1.6755959678252932, 5.310760706109583, -3.339946563714192, -3.133740218378852, 4.1245965720128535, -0.7387597111329973, 3.40176465961103, 2.914403883253195, 0.7577414035259169, 5.554304364065259, 2.22143346740017, -2.770282501352602, 1.4011662158931797, -0.7648581039175799, -0.3416819259381817, -0.16567869254913203, -2.2790973295397547, -6.507750179852348, -1.6855727190803664, 1.1404245046150687, -2.7647950196205064, 2.56494513085541, -1.2087697546295013, 3.1617282112029077, -0.9219653940855044, 3.7429830062274796, 1.9909371557937425, -1.3580801362658037, 5.363701810512018, 0.6915949299351194, 5.849249487907023, 4.355261095447158, -3.9051340631558706, -3.222361036483986, 4.974050552384445, 0.7829500267526439, -6.0807244217735885, 1.745054744566768, 2.4993219024321847, -4.897830351249173, -5.501966135777395, -3.021176890954113, 3.7386984150729035, 4.7310892943929295, 0.5922522573680882, -6.03053641927937, 1.969774190901246, 5.346093277550342, -3.1890598440850693, 4.091170551484188, -2.334644255146559, -2.3985615632550643, -2.257845892888197, -1.7687157094063828, -3.65152493328218, -0.17347127678653917, -3.589788242882909, -2.1080197045335787, -3.207190438781219, -3.5190307554066944, -1.9747733000963665, -4.134620725207214, -1.8486908639044073, 6.874421085984633, 0.33844778962484257, 2.3830908086394285, 3.9172339977077995, 1.9328230511955202, 5.007443971249671, -1.825430927438249, -2.6876759648031374, -2.105703918880393, -2.291424910157212, -2.0043307442299856, 1.070133623259915, -5.783268236049959, -3.5404678912589604, 2.3846860591513694, 1.865384164081977, -1.780126345812613, 4.732281297571632, 1.9151790511990865, -2.759991312988463, -4.937643973209626, -4.509447627310138, -4.410663652329427, -0.07608421631335083, -4.251868571710865, -0.8119134038892428, 0.6203676939237566, -4.655678635627098, 0.022482108793966837, 2.311673511431918, -1.4180059032314853, -0.20795332707604086, -1.3486314095399439, 6.426159806549402, 3.7426263051228554, 2.7154086962159454, -1.0132886557552787, 3.4401990650039584, 1.3180279326620958, -4.796711200396968, 4.2283030668050285, 1.9414371769392913, -1.9859857135391292, 0.17340791415274004, 3.6833697172189144, 0.5517686781795326, 0.24600124932740064, 4.7944684452801045, -2.8019543918711234, 5.609254359786084, -1.0943033365577408, 2.44795050518999, -0.983217461888179, -2.7829683406155774, -1.1103274083708041, 1.7819520301587337, -0.45252670445253806, 0.33819362532304, 3.2679982896380526, 4.79786491325202, 0.3173186769156824, -1.208993363245157, 4.588070316396878, 0.7322349135452355, -6.9885356815808315, 5.514582409358817, -0.8559483181341525, 5.121202841418032, -3.847847715848647, -2.3916157512047045, -1.9199449189857514, 2.72078106742262, 3.7235823286055894, 4.695847479898427, 1.3412431272026937, -2.3906334704173, 1.4279364879844247, 0.6742530551731565, 4.11371346634944, 3.4000292886907673, 3.5035830466897604, -7.433351305933733, 2.038521782511253, -3.6395291967824868, -7.576862663980769, -0.7338977936443618, -5.023415765779326, 3.8023715175466197, 3.9861517183976938, -0.6928356708526526, 0.7584716035389452, 2.4862925611137836, -0.7152262164198198, 4.372691114486718, -5.5268780880838175, -0.43809667443291955, -4.366626604587551, -3.337847921087685, -2.101881773387989, 3.599860355808441, 1.6390627127131179, 5.011276978508395, 4.657246358257094, -3.6127493395001347, 4.031426267780883, 4.8182798780204745, -3.4648376828198097, 1.9407147278650587, 5.781752059486379, 4.217558087665081, -0.30671391176880314, -0.00964500399388113, -4.781079543712292, 1.3708314551267753, -3.247147122155437, 0.5330705956645894, -1.5975608723749342, -2.022623267515386, -2.06547926361346, 0.3050324260386459, -2.5552466805393617, 0.8039204081779769, 4.615134425727405, -6.806085464496084, 3.0357810735407655, 0.005198719852849143, -1.5744406720749229, -1.9534082139280833, 5.723948470030756, -7.435657358605325, 0.8103464673869327, -3.0581425955093327, 3.0168606900454025, 0.1579632222612708, -4.397115465277511, -0.593495752208439, -1.106578183008781, 1.5463879470461395, 5.291257990577848, 2.350895819802778, -4.83929359258928, 4.111830694170471, 2.1142663727421054, 5.140084232952662, 3.987194407640139, -4.034861804488468, 6.3104866459237865, 4.812923602912317, 3.2002423139832095, -4.7340952914130705, 4.219702230757326, 3.835283540902111, -0.004471990357981737, -2.4289164193244397, -0.2510826264747119, -2.5670590604336647, 0.46102506290388834, 5.947835107958663, -2.9103379832850056, 0.21830652168335218, 2.794370167200447, -1.018599567541642, -0.8993178075098694, 3.381338192803291, -0.2434489625221532, 1.243889295526082, 3.1916478466263722, 5.989755340977641, -4.320082059791838, 2.9383143683925876, 2.031094160942683, -1.5219056487989768, 0.8176608059155328, -0.6587116257228394, 3.081968062578543, -0.03712325663750149, 3.3519171752579746, -3.419659922059953, -1.0274940923406901, -0.589022524919155, 0.7068993487072712, -2.094160235143641, -0.6084375812572669, -0.3878263523350196, -4.49007714408558, -0.7324194092050353, -2.13531652884582, -5.264284157763598, 5.298494826824406, -7.183088955766468, -3.308896619649521, 0.48959259580254066, -5.399404009409995, 1.6058900764540036, 0.5421324058994312, 5.726046387818456, 3.492869780944555, -0.6509958935415361, -1.2131796937982242, 1.6881386263880125, 2.5544989494859607, 7.421403499403262, 0.7899464618003686, 3.701577334929528, -6.793477896696526, -0.16380598629544962, -3.5694017060781356, 2.8192164991420166, 2.002600340447777, 2.285128386691566, -2.698434759261861, -5.143611578286931, 4.215277029556473, 0.4815360926133785, -1.2649021069752473, 0.28056701745093915, 1.9387439418483297, -3.1203258034769563, 3.251627646636411, -4.417307334654829, -1.2720239458135452, -0.9719941500673175, 4.428387788107797, 2.514075338392992, -1.3419428486951348, -4.3589876706002, 2.7240537265660887, -2.2139482927801533, 4.534909645502928, 0.777115642919004, 2.427817912456453, 4.749722647437408, 3.530295329939989, 3.814157628479655, -1.5026033853077845, 2.893147617842523, 2.9148006712576127, -0.15232276398276046, -4.002352362534407, -2.88769520556634, -2.04645107115574, -3.4280259846432966, -3.9355402497133536, 0.8132916565429904, 1.9371973238551918, 2.5180532589678846, -3.3641053640994123, -3.559444029489654, -5.455290187990421, -2.577695400842826, 5.1539105153080715, -4.691847715066948, -0.2122063357977173, -0.33845630227001267, -1.8722286914416546, -1.2878343403665307, 3.7546963818051324, -3.1197690398308264, 3.7587776622734816, -0.7110449784942503, -2.9132062913112797, -4.924413761020385, 0.6678299262391405, -2.6630926833180215, -1.6857793442846718, 1.8555780934770452, 7.2766386619017105, 0.9495732737245903, -3.3573863287832575, 1.887533024151419, -4.447416468283626, -0.9064435564122286, -0.7167887020701902, 4.281987733447955, -1.1302885118861974, -2.0188015508324133, 0.5784337297500841, 3.3461870279289982, -6.482508750318308, -2.1572030190258062, -5.1042593591116905, 3.9559906577679786, -1.5939751633203294, -3.321588351901034, -0.2447870319209111, -4.060823062363637, -0.14729610624296474, -7.784348845732491, 1.7569136914648849, 0.385882628308871, -0.35326670382318015, 0.7826215164291688, -2.4620129100927466, -3.583032271635815, -0.831852340703263, 0.8779140874876823, -2.247380628461224, 1.209873348583396, -0.9595604642808615, -6.883618805750863, 3.726863993212751, -2.55117636299756, -4.145133884623557, 1.0737534268585112, -5.15458311903748, -1.739310850393401, 3.332650612222416, 1.593079778665941, 3.6153539870952507, 2.025948690695082, 2.9477535552741427, -1.9195526734892663, 6.695259231745099, -4.153763408182533, 2.8586116345821924, 2.558384319289421, 2.898485182444876, 1.212198799352893, -2.5747810444037422, 7.720593937974291, -3.7508303236446325, 1.2082537179982564, -1.9130267307451263, -1.9276552630243817, -1.3279461478009624, 2.177680979080085, -5.304219198288395, -0.7928558276368984, 2.2279010061282305, -0.8727964661365386, -3.13606119352192, -2.9104080111544244, -3.2499750008622383, 3.441238814514019, -0.17106136374897862, -5.104527826151574, 1.9335199969495012, -1.8450017213863352, -1.8679807945255105, -2.8981005698351963, -1.841846824275717, 4.7392593231285325, 4.166045930039953, 3.3406445829375997, -2.516545039066804, -6.5013177210999435, -7.0725817273842235, 2.7091329030769344, 5.5766843458393405, 1.257317395525519, -1.5513742284711474, 3.696067091144938, 4.004679904014409, 4.888725367680345, 5.647076193584188]
BIASES_LIST = [2.6892137769612674, -3.0380648712848703, -5.362453697943799, -0.2130304507352747, 6.494834545893438, 2.583372384511768, 2.880741904245002, 0.6683745268975714, 0.6956762354393267, 3.6941846307965642, 5.744742836828018, -2.9771697706402525, 2.807659602323975, 1.3266677128413606, 3.414752259741185, 0.6030293784162339, 4.965503982640968, 4.963208807859045, -4.228503712316824, -2.633751671140835, -4.558467061582421, 0.2071355167194846, -2.004689567277467, -6.660537054830818, -0.9718097669923424, 0.24656943258432262, -6.464533625074489, -2.0925144037803487, 2.2831707451429004, -0.9611827220641314, 0.32748349458627635, 1.4916713759531874, 2.7962909881391615, 2.1245552130985264, -4.327851628152684, 1.3742336758236213]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

