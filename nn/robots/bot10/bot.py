import random
import math

WEIGHT_LIST = [0.3481384039109394, 4.047869773813445, 2.345582460382449, -2.538756994097081, -2.5264547360339433, -4.9915518404320025, 3.4990115382720557, 2.0859506846182363, 2.370171161715733, 0.2691702781179599, 1.6301758079481692, 2.398959004211804, -0.41814138467526796, -1.96461324656832, 0.6898909025224245, 2.1252925152319158, 3.86372987239616, -3.859207536995326, 2.6766807164656927, -0.3752433726107305, -0.991002379148656, 4.24260348149377, 5.924998187393118, 2.812637741059903, -2.5327712766922734, 0.8698202120977125, -3.355701770324174, -5.357786061657177, -4.770776025935756, -0.1636636046220724, 1.5604240951363448, 0.19573729482738234, -5.0779483387879, 1.6650103058729453, 1.0767657394842107, -2.443622773994341, 3.245762806938796, -3.7853244880601626, -2.6957061351682867, -1.5602856769831042, 4.636315578006358, -2.532755572007374, 0.6039503681583593, 0.5139408742053742, -4.850402384650428, 5.630605099296245, -7.49155219658405, 0.8668969503603505, -1.6226267940234003, 1.064240920477241, -2.682743200218227, -0.6524726393960091, -3.151939608991232, 0.47621288159932984, -2.905874644722139, 1.379907998260173, 0.8119215982871073, -3.6400976913753453, 6.0566750174885, 7.2204054565685745, 0.028725009602255547, -3.4063778714353976, -3.0377004615037775, -2.782380176539516, 1.309437119550505, 0.8134038830404464, 6.56011916585333, -0.01493196656173823, 2.3317952608791686, 0.5605059572457138, -0.6708528596657064, -5.881916993061929, 1.4028696297918364, -4.20089452283076, -1.1716067526955452, -1.8918594937426656, 4.382945128845735, -7.131803965064251, 1.4375054313522422, 1.472911338409268, -1.4787793873091744, -0.552543428501469, -0.7352341021868716, -2.7633620417123033, -0.26878973583310684, 3.6553830467189297, -2.6958870816079044, 4.077836122776633, 2.7936596056652307, -0.1481124228416063, 2.6080557807794476, 3.621060700331282, -2.864178810305026, -4.534753572250746, 0.12943739249952824, -1.1104971525313974, -2.2267734603878617, 4.511322804644004, 0.5373964396138009, -3.7705081031193286, 7.300622363362242, -5.034410388337804, -1.0045292434239683, -2.707283555739891, 5.332219131407538, 1.2771444886367513, 1.0200791812205612, 5.922963047910243, 4.3893441501985935, 0.14827140885140988, 4.730523072653982, -2.1793278569314634, 0.34425313274754465, -4.209533171443325, 4.499943265817661, -3.9954622409626372, 2.7335104189935944, 0.4706949440428705, 4.139168625155327, -0.3607659438199291, 0.5252628863528108, -0.9780114434312466, 2.9836690276922693, -0.97459848618931, 7.491771604023144, 4.567993618630365, -4.961150086383885, -7.3950300997263, 3.1810229099385285, -2.5869130461174894, 4.271221100941064, 4.6572416075526135, 2.83852509916209, -4.616383334498278, -4.247908330555752, -6.062633393307514, 1.8276951851074772, 1.567474402963331, 3.3170098154659, 2.7636362176775116, 1.9040108707815064, 1.6071867662663912, -6.364080562745251, -1.4632897441814277, -4.016842671730702, 2.249193677740275, -2.937282154473226, 3.107634384875486, 0.5001378126125271, -4.048895812265527, 0.39747885722774323, -3.287245798794763, -2.8128798423945014, -1.4766245053465359, -6.839949918732048, -4.557440389368289, 1.9077432184893706, -0.3364457948868579, 2.3626745383446703, 3.2489313142455067, -3.509161479036116, 1.1415438309237884, -6.6326148381772345, 4.115293405299168, -3.4866013990600195, 1.1510809316768018, 0.40185722065234897, -2.125107775484138, -0.5512690760797122, -2.4433321111686084, -2.1417831659848674, -1.0201673096114656, -0.6886973726702383, -1.5596384366046654, 1.7706247352992985, 3.627264738535521, 4.862947877742736, 1.9780982564788774, 0.0009899913733319998, -6.950627739072734, -3.8852906543795322, -3.556402281262482, 2.939454348325854, 2.618631864642187, 1.4546683268184064, -0.6205427702091406, -1.6578876951462673, -5.589692950833468, -2.5306593939199136, 0.2968347240686553, 2.1813319668654714, -2.9196620824021533, 4.120222458844035, 3.0844571214148893, 2.587743083658775, -1.032273756922379, 2.409875503378071, 1.7263856556299322, 3.699786280949475, -0.7037540930678811, -1.18703713921591, -0.11868876143805696, 1.1069632072957987, 1.1589965668164837, -0.19298675445892566, 1.6448803531626273, 0.09255990382087997, 6.498502429221575, 3.1354700403078413, -0.9015910476796678, 1.6275960701325083, 0.7141854558159331, -1.8483494454310287, -1.0009646343215723, 0.043984047202579424, -1.0354859475275875, -0.726604894771343, -1.5272711368932281, 2.3285439241103942, -0.522458410356668, -3.7157475820964745, 0.7071509332908501, 0.5031537141711686, 1.763201361393695, 4.954724634040772, -2.5291378008328156, -2.405096460987316, -1.7125441180959442, -1.0080924325576586, -1.0709608837677347, -4.356564348810375, -1.381648853865406, -4.448723746332599, -0.3882825433260253, 4.468060040251595, 0.12218009408201636, 5.055862383594, 1.6146369202410438, -1.1671762844430746, -5.113634403058209, -2.798275464450315, -5.8773610025863405, -6.2266375354118235, 3.9494283819379756, -2.3096836944553174, 3.2744999822806635, 2.3294555614296346, -0.781955147919789, 2.440657689393314, 6.249223910827555, 0.3767085645931898, -3.7716710939224316, -2.9171171936151454, -6.117928008573568, -3.7987883380239724, 1.367534581833782, 0.617287190522644, -0.2974713031750529, -4.276879362285689, -3.231038029235741, -3.497060064626108, -1.4407871259223752, -4.028593159048707, -3.632894797437973, -2.6712101532451697, 1.6918084271740357, 0.08155030536744357, 0.8025467189419695, -5.341765015711284, 1.2215518771391087, -0.22662153130637108, 0.8979072413615612, -4.0966310087879085, -1.5252757875577454, 3.0804128504083144, 0.8948325754326962, -3.77728877772791, 3.3478147103841893, -1.0791014316812242, 0.5625424696613637, 3.787949099124888, 0.26821637063746673, -3.095117243657573, 3.881019777332061, 5.993355579958442, 0.38985125320037906, -2.735831859157904, -1.8313929475948958, 3.627500791132805, 0.36282162929669326, -3.6475617231712683, -1.2748209486689939, 3.444393669882225, -2.651458223622103, -0.5399353408033956, 0.6225474207127857, 8.771181552079128, 7.654183663145885, -2.541400707526937, 3.433255482207847, 3.28968793463404, -1.3555321120027237, -2.303586189745156, -0.5731662258687698, -3.3100664832208633, -5.041072778855799, -3.6564771646044703, 0.4799444595718354, 5.328071029757092, -1.664774692501137, 0.27479248173495363, -1.091541748189325, -4.394553566363621, 4.624964425258846, -0.405138638128139, -2.258454272798902, -2.24408107072348, -3.544673731342569, 1.0602898602524027, -4.014019637364468, -3.2155197562750737, 2.3888118656225252, -6.787522786123115, 3.0847698994333204, 5.214870967605086, 2.412231570696456, -0.6621112358568972, -0.5626782791438348, -1.143272228398122, -2.453280848139528, 1.8300473116139386, 0.031990888878498325, -6.849375177338083, -0.6258404101530385, -5.583381870882141, -0.19017243340940926, -1.6097743434105147, -0.06556391955065188, 5.761843683240799, -5.497601039428485, -2.066472177277352, 4.147884071905152, 0.16319299096888384, 4.204320831404246, -2.515824265459668, -1.315541755025408, 1.5790540140707314, 1.8594249904557327, -2.0623393351920973, 2.141407359219132, 1.0475128541640597, -3.254455131953204, -1.582474212163131, 3.631408548347401, 1.2026000520741937, -3.9146751874856176, -1.184067414785062, 0.9554628430853436, 4.78828713560677, 0.9197496363963182, 0.8967399376570162, -4.952536588480888, 3.6574647019014677, 2.6689561617756876, 6.433688922719852, 0.7740931477230104, -6.416196538318422, 3.8668873365855934, 0.46663545682760676, 0.17176355962440804, -4.467373192646959, -1.8467303097896224, -2.04668243876426, -1.2399333410348026, -2.702058792817846, 1.627654094089153, 2.1214545834619094, 0.08660677533515715, 0.012186427711728287, -3.8909075830566446, 1.395289960504165, 2.814339359889754, -2.499590431080275, 5.009315258765335, 0.9380836244074167, -0.24646595373823388, -4.950923994784963, -5.589618548918369, -7.580957694656303, 2.230381986313202, 2.499549647429093, -0.5330870604847378, 3.009249481051719, 0.7339809525047345, 2.254237561761471, -4.4298219755520165, 0.2593805913968392, 5.526702139107307, 1.3904253243618396, -2.0278269505786466, 2.1253195749807734, 2.6933185310866077, 5.403266146369936, -2.457478747361298, -0.8758247502278391, 4.22244257434409, 1.8126729819759282, -3.6872073395352762, 1.9646885698273358, -2.0445944325428664, -0.23981039012197936, -1.7358614636470862, 1.8358756607703404, -1.8069386405972059, 0.849942502056201, -4.256021114387185, 0.2343475546497551, -3.747624052251925, -3.5457570452535725, -1.8097635026310315, -7.273573829454219, -4.15654916903564, -1.1968237948216123, 4.704032990641817, -0.8436186846422558, -0.045108198052547066, 2.6263240176261027, -4.178233613693089, 0.9195825422073152, -1.8102200702391045, 5.400756655136714, 0.6534488068165327, 6.74515413289884, -3.48736278585291, 6.303405942021919, 5.6287891958913665, -1.4046422536796168, -0.1777788505270601, 1.3654609872307297, -4.59016956976863, -0.7125808204798668, 1.2079098478234496, 1.7079184913983716, 1.1697930598278266, 1.2081094337711171, -2.2672017324950424, 0.8438475515114121, 6.356027647824613, 2.9183074534384463, 2.7818810934696456, 1.2719282232251499, 2.4633405377529165, 3.7292471413134978, -5.171190142976215, 4.469308752473565, -1.597508981038565, 2.2154375544106557, 2.9673999295543494, -4.468495744005051, 0.6270520308524097, -0.47429121307190836, -4.863688868555997, 11.50737128724792, 3.710026596644523, 0.40763080937776386, -1.0634534654584282, 1.9955869010628469, 5.2036983414454, 2.1497528011999067, 0.06727283930182759, 4.820232456635735, 1.932926726821787, -0.8128777470343844, -1.3045007727953972, 1.2188898410521336, 0.15332933980990004, 4.662371910919346, 3.4973533404444783, -5.050699148836634, -1.3235194896304874, -2.7234649767721026, -5.033479949651253, -0.3844394272016971, -3.849426732343057, 1.8576197857689003, -0.03155331579362186, -6.142966751578139, 0.6401557667016284, 0.7868884514642771, 3.453629363702979, -0.5461138745029077, -3.790636621146337, -0.7777065619307642, 0.7296364957591053, -2.4829308237890686, 1.2842814521013723, 2.837766190374463, -2.0954912055410677, 1.9613444894712733, 2.4040575354566602, -1.064092314156335, -0.7487273631519655, 0.7693138775868769, -2.9578146322657757, -2.7620110802423907, 3.6236954731283904, 2.1628943950702646, -1.7645200208623366, 4.07902870378504, -2.5052184863292197, 3.1663194218406865, 1.6817198868880365, -3.617990798121567, -2.992748080398173, -3.8722052831315983, -0.07503333594232275, -4.769638381186213, -1.407751490983111, -4.426199024932755, 2.095890747256622, -5.538417486404874, 4.470710014337625, 1.9532040022140542, 1.6270084341314286, -2.5017866856667887, 5.08749255397508, -3.418454652447128, -1.7372772474970293, 1.0518737478625604, 3.6530940732429524, -4.549292256208095, -5.320693508120332, 1.6239787772738152, 4.090617368072905, -2.9921892971924153, 6.326287099953477, 1.7405103245890956, -5.274076530009858, -2.0506664143243736, -4.535084424293471, 2.9011688608374104, 0.6381306550158783, 1.6756255210312156, 4.880082654703574, 2.4900613814062575, 0.7341303715612839, -3.66885170938665, 1.5353233339055872, 1.0224989993188727, 0.04203213190237154, 1.6867122141477595, 3.168393446098575, -0.12918350684752167, -3.4602481479580565, 6.160976862033241, -4.3785624455781, 6.410932527374463, -4.520201497357478, 3.033412143075111, -0.49947847806700185, 7.051695569884641, -0.9073506895118829, -3.221921362080505, -3.7258657484005413, 0.19913465588596302, 1.1876330412100349, -2.08665159058273, -2.390256084048677, 3.1402043998161044, 0.23011392848492696, 2.8705497154519213, 4.31907405849704, 3.627349333368093, -1.8321728645652073, -1.0799341995145673, -0.06829003342350437, 3.7373208136650238, 5.814359967609902, -1.3485442229372318, 0.06445475288086322, 10.473407690591866, -1.3951891968523396, 1.1350622096960774, -2.3613534880922638, -4.22721962564677, 6.706908319626729, -2.072291867064176, -5.619337501696526, -1.8055435186074267, -7.217368170899215, 3.9067097106081086, 2.4996601061179438, 4.128894189903508, 3.6985192082783795, -3.02747981253275, 0.6238778406998677, -0.22497538445962562, 0.8616718006763999, 7.989000149460546, 2.3915529253772103, 2.772656706594503, -7.04895749128762, 0.45624990871692583, -4.958823096078801, 1.9102747257458121, 1.8247599222166122, 0.08859636695255002, -5.348722069683428, -4.982262191490056, -0.7024660359646264, 1.8553839728302215, 0.7926844786495681, -4.938478322185304, -2.8071564828582902, 3.411070524141099, -1.077733541788127, 1.7788477630098862, 4.3382898409574215, -3.2984476340058073, 0.9157764173327183, -0.03913581062616589, -11.190521640514783, -0.34481793766444235, 0.5262181785422504, 2.0664786050312776, -1.9971270412628708, -1.019179249040675, -1.6539744153317892, 2.062103874561906, 3.565356654272197, 4.636833867267429, -1.8076189573423487, 2.2194195172527875, -1.2975030037974986, -3.8077269332821917, -5.901920771410836, 0.33776494323305695, 2.634774965925077, 4.507146149815101, 2.692202569397584, 2.2347288010044837, 1.1024039083478194, -1.9693330495932138, 0.9411791430820502, -0.8460232144039612, -2.808592654727555, -1.6253159692426709, 6.576395167840836, -3.595409343813076, 4.541086462350767, -0.5225848911526187, -4.226237089055037, 1.7345366887138596, 3.7595552845896467, -2.442410583331167, 2.3600466480764157, 1.3342937739309888, 0.6991474685504293, -1.3651880316809744, -0.7266857953580608, -2.442669841790927, -2.111692702585738, -2.927603381443067, 4.0072912918264825, -4.460714779278911, -3.901609695029136, 0.09097215946396986, -0.7408113324422954, -3.106450660445577, -3.6056426979749823, 3.8679935333915623, 4.733311969916525, -2.14317404578052, -1.9795913236160323, -1.8807829337227873, -4.821494952677331, 2.434236062359899, -5.618077368174232, 4.828880777204857, -3.87328919375933, -5.539764555955719, 6.80102045069169, -2.5901527942959435, -1.2921201658964832, -5.656675011820963, 1.8212180004110765, 3.4927625428379976, -2.5779373521901774, -1.412778734186774, -1.1621353606532576, -4.780477794925153, 1.2123396462157903, -1.1155696736404028, 1.232847305969612, 2.9824392976192406, 2.0805790328643585, -3.4783821648333726, 5.134245004339033, 0.3816438058130789, -2.0962446602683076, -2.843423464307604, -6.173102309967169, -4.062939536393589, 1.7290043117589997, 2.663948660129004, 0.9240313135158618, -3.7636048228971353, 2.099623571292897, -1.8052840255810068, 4.463704130463036, 0.45783568126637775, 0.4744452015367209, 3.189830775260016, 1.9741994745993159, 1.8479664234887254, -2.419970205310376, 8.40364291826484, -2.0932234078799983, -3.4009484380412003, 1.0857983329001595, -0.4854858957383509, 2.2273827942288076, 1.4969325053524853, -2.2539098903033543, -2.6828720185640775, -1.5145584740779532, 1.3413000158291672, -1.2187852335698695, 2.13059758465097, -0.30746105687355907, -1.9830875180909193, 1.9152345399425652, -3.3933971302912207, 1.0692184227782615, -3.252648689390776, 3.5675255094805554, -1.5442268792188065, 2.2136903455125316, 4.251478444235328, 8.223608401860046, 0.5929142945586983, -1.7499689286362385, -6.777946711419138, -4.598444670165159, 4.160098366380839, 5.4095878812843745, -5.636840810363358, -2.0641512767809553, 0.090399793560755, 4.217769384508119, 4.002058035627109, 5.533909030938325]
BIASES_LIST = [-1.9909786451591922, 3.2421088191249297, -5.153368834902301, 4.608126515667962, 7.062272639607592, 0.7610020918887122, 2.4307200396913284, 0.7938346553357123, -2.703702727587828, 1.3654966955920864, 3.8426528687897656, 0.3124284165649063, -1.04191071059961, -3.220013714448678, -3.17302405944378, 5.677236140512132, 3.193972321187502, 0.9716278844941539, -6.921403096481639, -0.2944262188740523, -4.475686777186828, -1.5774130897760759, -2.45655024748366, -2.442032864658967, 3.1898539819557588, 2.1361874243487335, -1.5733161481583544, 1.3557376554801692, 1.6349133595299312, 1.1563750363733378, -0.5052205716656157, 0.33500228747939076, 3.2713931888304764, -0.3342852483193076, -0.6866865152480328, 2.3568947913639207]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

