import random
import math

WEIGHT_LIST = [-8.03149026996106, -2.5477760302830785, 7.376638255010917, -0.7425665071809107, 4.101818423178928, 2.4302373977883533, 0.5450314863093164, -7.118419379747156, -8.89567598269821, -1.3863849736904839, -0.04981453702336558, -1.9075035194003132, 0.002480551771657513, 1.557452310344458, 1.660679504564639, 4.024611789444153, 5.705632774088202, -5.091303325514094, -0.6846383320318677, -0.2757531410117518, 4.704013686501409, -1.3922579612068717, -3.4712797481840827, 5.678622904526495, 1.6384798378162702, 4.715148658481136, 0.2677045092900518, 1.237733933497454, 0.9603814093720255, 4.367999763523809, 4.334485364296386, 5.346943071951968, 0.888372203555599, 5.912205697591333, -2.19531115339571, -6.951087452115538, -4.486025688355528, -4.869202977482192, -3.6124771586012163, -1.2641977453897861, 1.7967337689513938, 4.545840189214891, 4.302108737452476, -1.9551141257720752, -1.2699447798892565, 8.815580631903085, -0.314696968393708, 1.3815708978096308, 3.319971456799791, 0.0030601151990968523, -0.7821926386799642, -5.98252980125057, 0.9872207416018679, -5.013792508931292, 0.3778939209449261, -5.991116735358785, 7.793112517736968, 0.58673605862984, 4.351208900078862, -0.45726773754833316, 4.953662821910631, 2.0660893254596933, -5.245549285902926, -3.425977977823478, 1.4264829733790132, 3.7196242105156845, -1.4639271689011617, -2.002992845416466, -1.3143376665966948, 6.318119700959329, -3.17228634433952, -2.43477570488642, -2.4460144627225184, 4.635066593139321, -1.8345606600151825, -2.2576742240635235, -1.595411405976472, -0.006058014463103084, -4.9896147339201455, 5.982931530555031, -2.7551700668012034, 4.5835700174699365, 6.006951518422659, 3.74611301315544, -7.705843681033093, -1.906911429925003, -5.881065613305173, -1.7736825120732986, -0.36072529988992025, 8.025818823864054, 7.211127894018392, 3.4051575254381903, 0.9822692490257929, -2.368789144823738, 2.9070152993680978, -1.7162641577886337, 2.6599310993447025, 1.0388941744712867, 6.157597846585574, 2.333308663150424, -1.1553005121264859, -6.53032260743485, 6.357226688865751, 4.331302396636211, 4.511700427928052, 1.7171517658983813, 2.6250022368055537, 5.221743079723077, -4.842222397990254, 3.7007624423418957, -6.940134217368391, -2.747726299300644, 3.667908647150362, -2.6167676988003037, 5.526745600871003, -2.19703368674624, -9.64837237637211, -1.7132136987122102, -4.376946491195314, -2.9424291481205973, 3.724967542800102, 0.5598985809285946, 7.691590441545858, 0.6924538121497883, 2.2862903568207567, -0.04189625079948911, -2.6813896118459155, -2.373990953005401, 1.0522999741520858, 1.627961703153296, -4.870199861836933, -9.499448509391655, 1.4779485074521101, 6.232403832918671, -4.555721886965204, -1.7385386911208143, 3.4772388794063636, -1.2564045451222026, -3.5258391274810994, -0.5891229790039116, 1.6657987140811963, -2.871437411807815, -6.802253683047583, 7.219029232421714, 7.587988210067396, -1.211826078042588, -1.9155013880213887, 7.962278875278941, -2.6223322596823384, 2.5414191677743987, 1.9180787782465551, -4.308170684721148, -7.270344734744373, 1.1928703406471044, 1.1260294634983246, 0.48847200249405803, -3.746452282083933, -7.453285621657337, -6.012404067619643, -1.2326054684792989, -5.380544115592397, -4.087357371268111, -3.1313200349040686, -6.142035942385416, -4.994194613171368, 6.957482640465231, 2.73220304075963, -0.5871657615237695, 0.6192804187424641, 0.7411996528493854, 2.9231228925643444, -0.07552816792835862, 1.897459431551543, -3.469578619925452, -3.826217652333138, 1.59788526902001, 0.7871526141971426, -6.131225631475653, -4.886593422749288, 1.8749737127723232, -8.041996026348217, 8.641919462586788, 3.779766526846044, -5.603589614745667, -4.209533869888748, -0.5110628802974839, 5.627827400165236, -5.520960720032484, -4.8876944079338065, 7.04275071984065, -5.219822985950571, -5.15298000231995, 4.726647006621214, 2.6239159406704906, -5.305927602629745, -5.260479250555451, 6.943501793686094, 4.215502526577324, -0.4926959724533076, 7.090857470414819, -5.639931823578757, -4.47438820520748, 6.582135750512353, 0.8508062869198629, -0.8413532444576786, 2.625101116634655, 2.881951069894212, -0.645189776467314, -7.4604147933148806, 6.975683624975057, -7.482235355851544, -2.1583162162720084, 1.4204435068018069, 6.6843035109946545, 5.944995810048308, 5.977215384457014, -1.0773013927172834, -1.7039600869479312, -2.9536921060477868, 0.4269928632589976, -2.122407510098475, -2.3792752069797776, 0.13886627895716602, -1.867151664271328, -4.275116284322134, 6.341841908188412, -1.6983582658905743, -1.7474739643340387, -3.824166757497472, 2.605819776354344, 2.4379175175153844, 0.6034206143696739, 5.9996992687384605, 3.3353210646707248, 4.017028615312468, 0.6875528453956539, 5.370609425283437, -6.151925835822285, -3.006107036928524, -4.940455034349297, -6.359950414236838, 7.401976199317475, -6.7620202904361895, 1.851904355229598, 0.4973996078787047, -3.3552303784008313, -0.145506237726989, 4.287488622116734, -4.618190794120456, -7.1736507033311065, 2.015244942663551, 1.9652114506749365, -4.912739503171309, 6.281271499137398, -1.7485544684623933, 2.232112596299301, -0.7283146792072885, -4.524995074999833, 6.788647631198015, -3.935997548239476, 6.044111424497907, -4.321138815627823, 3.048607520205543, -1.2725915299297033, -5.314048303570706, 4.3148851092114935, -2.3927199195784277, 0.5229762572967129, -8.225100819719321, 6.97066114464591, 3.208516138193124, -9.872588451296501, 1.9402416461180625, -6.701403624719571, -0.3128194836827508, 0.12499643278008682, 5.700828423519481, -4.630145568409201, -0.6481816906150097, 2.905272372559606, -0.7895662478619334, 4.127208639935978, -5.893309256565869, 2.9570426112350296, 3.3694289156874206, 1.9391611599665644, 2.344720789775878, -6.324000622631044, 9.850895075280793, 8.5491340781373, 0.7797166032793272, -3.312967995775232, 5.743305843502377, -1.383126313478844, -0.7716615091517827, -5.985860598804367, -1.0922445081758752, 0.6219332077525188, 4.805048903739035, 2.5367140707571845, -1.4821967203282411, 0.20510598307170969, 5.234326626917328, 0.43447763195864125, -1.9188358250458843, -7.24975865899973, 1.8402121676072918, -4.217536450178272, 1.1571041560932733, 3.966277521504209, -1.982126867405525, -2.2423892862346544, -8.1953692896813, -3.2394121888152876, 7.876139204402395, 5.383228037787426, -3.5615903063750767, 4.290936995042722, 1.214656134460077, 3.4482314948517323, -3.0410096900067907, 2.742270868074067, -3.2573616637858693, 6.1627020060267075, 1.3574460473891126, -0.14684657047974686, 0.6860230837277144, 3.5747992232386134, -8.0675525645944, -0.4709615372201317, -3.653366764378379, -6.68087212862042, -0.27088326491492076, -4.0488803592490505, 2.7939576002216104, 4.995445327585775, -1.6578645590113712, -6.596031347071089, 5.236912428123537, 2.8167154222631, -2.171611114905593, -5.852783126667016, -4.45756426021581, -3.6222775527846194, -1.92326341549432, 6.780806993034581, -3.406738152769705, -7.575497993329263, 1.9446508484726674, 8.875834661997656, 8.881440082393448, -8.695088591435395, -6.906889822285875, 2.57424479052863, 8.257773732145234, -2.584692854327904, 2.2371079214273624, 7.8588320090162975, 6.312372542474324, -1.8192927764592242, 7.2837547466090244, -4.292092951678462, -1.3745508489227931, 1.92953045860336, -0.6919002545886587, 2.9341464994046333, -5.625446813605015, -5.875940038341446, -2.280858508788338, 2.127437833571821, 7.347155776411135, 4.517781394191762, -0.08810193641234876, 3.6660168377304276, 0.1952412516333476, -2.432459813661906, -4.988826840999502, -1.1425302755700024, -1.7958601839221564, 5.485414593534321, 1.8166978738593977, 2.86450638199694, 4.063228858973402, 3.649566356534794, -3.439646443552417, 2.2379440536961117, 6.418838471819984, 3.563015246731465, 0.696624575112853, 2.488514466826247, 0.12416953362260796, -3.6683649436573185, -1.1323916817128556, -3.4733968879120525, 0.9085278875626779, 1.5317945909783752, -0.0671056262388654, 1.6327004997176744, 2.9867850706552184, -3.0391180026406124, -6.413021125985971, 3.128689237984035, -5.85881883301651, 6.2546251246001, 0.20030374805516238, 1.1204183891437929, -3.4442681372647708, 0.6103386375741775, 2.504342400802154, 2.261724660929402, 2.9664032373895526, 3.115746346220415, 3.4751379359344132, 0.28412997917661315, -2.1363057126959433, -2.529554878090876, -3.046121419595306, -0.1896564631659746, 1.5225343264731024, -0.7662494615899147, 0.7075895214866423, 2.8182011229732242, 4.145111924800485, 2.510293343179092, 1.3485059371509742, -4.446937025329628, 9.071575311308232, -3.720509957316453, 5.059349315330004, 4.055346495358927, -0.4071489342226998, 4.805193809376962, 0.4118488269001432, 3.0620787346898464, 0.7252018181966104, 3.4871808503940507, -1.8362321338492347, -1.3601090380221688, -6.24694546778426, -8.093066472054263, 0.7553332994866298, -3.859715765935156, 1.008279842722145, 1.4907573345417928, 0.7556590082150252, 6.9451860352666746, 7.303624012382729, 3.2251766312487735, -5.538756273163939, 1.4819936809788818, 5.328811734307743, -3.617863206043728, 3.0789714154377026, 2.334089934507531, 5.354111187160698, -0.7351251372396412, -4.2668181189930765, 6.8263561026918325, -0.15256230791190556, 4.291757003094249, -3.071920365385453, -3.605554381118506, 0.8280132635014581, 0.8951669230325765, 3.367835024756784, -4.471896217956886, 5.45472371905829, 5.192123025538062, -3.481370589000388, -7.864602340632718, 5.547207274247511, -1.714495778952308, 7.240148477565023, -0.15518740071504428, 1.36776230168744, -9.52676579740665, -3.9179119945796743, -0.9823752153932923, -1.8564168719933851, -0.9698291290844665, -6.684082585982979, -1.1869423835138273, 8.06853696866345, 8.18099684588859, 0.7104597897614184, -0.8909660666021197, -1.7459778698113086, 5.504659787689438, -4.255699984674757, -2.6008089990318157, 4.497032533503231, 0.654023598119291, -3.0985367196693896, 4.962538687765672, 2.0314132056488585, -1.1219632021206858, -1.1614143481801165, 1.8664537686326264, 3.2342913971225813, 3.551740318970285, -3.127281478425012, -0.8099830080350181, -2.392765749938581, 7.514995049673905, 2.9684117935870464, -2.8731453499494544, 5.189303918584062, -1.3821165536578603, 0.01420153391991913, -1.5647929560752052, 2.0421499300385126, 0.5812906168615004, 3.9593508503783172, -6.6390757104476545, -1.140676866743125, 0.4255009871257543, -3.6434287492787454, -1.9177723866880714, 0.6056147214451997, 2.314483964369202, 3.947883266842003, 5.8831211416741755, 2.241923055973583, -4.779998413824984, -2.693290216024528, -7.97810870810356, 0.10667003209689435, -4.617571738317929, -1.2534421014332162, -2.955504634561088, 3.7964854217410875, -3.7340590941621943, -6.820199005636699, -2.8601424615003634, -4.0144433693615245, 0.2732678599539042, 1.3963052071921287, -1.6140663217758962, 2.216172399004849, 0.7109758626995317, 7.004398791273023, -1.2620970887730592, 4.682251946474811, -4.013222662933998, 0.3962565681129115, 1.7082292035645366, -7.8717967513056495, -8.277319483958358, -8.448086247709899, 6.598059868539038, 4.037145793397279, 2.3092324526947388, -0.078614790296021, 1.1187442860797294, -0.33331778130903644, 1.0364443514934467, -3.0706991675585833, 3.8160118029163814, 3.635086771129694, 2.840831174818005, -5.076485402701505, 0.4399727714561063, -6.770988622675257, -0.48526478929653677, -0.46875811605273077, -3.393226021603525, -7.962937598526267, -1.1812833361335104, -3.4169332070990692, 2.003034918156528, -5.162258843647942, -0.6013710549007435, 0.6141213941989465, 1.7186218432704023, -6.871599284181866, 3.2382378625406525, 3.801737576024521, 6.715448607525176, -6.138369445872362, 2.1639423528377644, -1.9261007874849514, -5.161752088791887, 1.1241856529339764, 3.6894082578279823, -2.0395637044394785, -0.4914248451265551, 3.6768993656733255, -0.2546447196767167, -1.415298149001232, 3.8662439728965965, -4.934497312493157, 1.2399331331288574, -0.8878000452191657, 1.1355621477289204, -4.984753358141931, -2.709316521800057, 2.097520228035427, -0.7868349287570626, 1.0269296121972424, 9.15463828174304, -3.9846766246810605, -10.429154643412534, 0.26240473338340403, -1.1841094839562345, -1.058259691889454, 5.3926718148374455, -4.364945895324531, -2.983968542024036, -1.1398214067052617, 1.8533887336794894, -4.174785356733493, -3.2679698999186484]
BIASES_LIST = [3.744076901771865, 2.461053337962131, 7.3355036231304656, 2.0977061268505395, 1.5690260382765406, -3.9569397075474044, -6.535622899511957, 2.4986869463248724, 5.479915159751145, -1.3595171021892742, 6.068064838063718, -7.152945763344447, -1.6880415277816083, -2.7021925834335856, -0.6081788824211953, -0.9659203731891313, -3.5174261759550958, -1.3879133706308393, 0.25347249551517476, -3.589716680232137, 5.863089829479484, 3.3143733898407537, -3.6982114572923206, 0.8155584230283357, 5.268952220467391, -7.997670073546806, -1.483490794617021, -6.007259874146225]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

