import random
import math

WEIGHT_LIST = [-0.6900568777440377, 4.631885278843885, 1.125261780694474, -3.1312576746794543, -2.131300704992036, -3.2426925379882254, 4.6837161203161815, 2.11382121755757, 1.8712760918656852, 0.7584244700687113, 2.4533529552490725, -0.23387940054050937, -0.5726738783543048, -0.881926115764021, -0.12142921889703928, 3.3035295137608873, 3.98698017942752, -3.7241764797395067, 2.1006256180410716, -0.4228597852435132, -1.1430346597258165, 6.691811091163382, 5.699798692590203, 3.0388122938912705, -2.2068673957928744, 1.6330900977869938, -3.34815759626656, -4.733280232834584, -2.7586971581677275, -0.10827113464205318, -0.429499101191378, -1.6557156563927946, -4.1848705701636755, 1.947518139573165, 0.4445675535383453, -1.9794180577425882, 3.098224565861173, -2.1592141502727515, -3.631319807178203, -0.11066295515721114, 3.490898261217702, -3.3897949578202233, -0.9282234665214963, 1.068802878602436, -5.071913364615121, 6.926995749568935, -6.772725646238893, 1.3148924502566777, -1.694156711859024, 0.14584934364347846, -4.0253121028832055, 0.14124394163295384, -2.390788727306954, 0.11808560810932645, -3.331489955881053, -0.23473095318923354, 0.7749490304020163, -3.0721841055045314, 6.61994498515638, 6.23201489395968, -0.28862468172973477, -3.163918964310776, -4.166102802061688, -2.4255097853437873, 1.608403738445511, 0.10442272343201475, 5.288384537654062, -0.6928468844347537, 2.839081054551994, 0.21106537599539976, -1.6438794576582154, -5.864313863019593, 1.6390129368361768, -5.588918654926168, -1.4332332419396188, -0.8571888966178083, 3.3893337873818226, -7.901061373263451, 0.40065377053170415, 2.198772125348128, -2.13106927307454, -0.9516127664357006, -1.203324057914541, -1.9516218541509633, -0.4883769843334602, 3.166855434678207, -1.148039943497091, 3.1286464073845144, 2.4099213967860895, -1.400851848669141, 3.078347688459141, 2.0349578486527555, -2.530550129837035, -2.237979257584356, -1.9451740492270064, -0.33390249864438604, -1.8545762694112269, 2.2163613510670612, 0.08123930508957589, -5.111002503801492, 6.295658805524773, -3.6696658721198716, -0.6970003195180208, -4.115360321032471, 5.090114393928391, 0.4968165102819302, 0.9252099614433937, 4.29189456929927, 3.4642319256724052, -0.9275441150268685, 5.589398567616596, -3.5449145553825634, 0.33642886392520666, -4.0155628147262705, 3.648405286957475, -4.060988822449514, 3.31137375011407, -0.4543343782245278, 3.443398995493201, 0.14605823809873542, 0.5027626117348656, -0.8597611467393869, 3.672104990378185, 1.0907381931724718, 6.878648731677631, 4.501598270109543, -5.3772425175463345, -7.6464544123332185, 2.205008266730438, -1.5637810480743959, 3.2599671693457957, 4.236854177363421, 3.511976452925312, -4.227084711464194, -3.9169455432715514, -4.438828042228126, 1.2819519941697175, 2.645121402535302, 1.8986462786044935, 3.841926859571915, 1.1432406178782406, 3.326539093641715, -6.6678849029955645, -1.6671472613190785, -2.2723347885081573, 4.884990536534274, -2.513501549439468, 2.845911539957689, -1.5574925613351167, -4.70091795060896, -1.4962711598206115, -3.8202858095785377, -1.9836696105146279, -0.2692355264309034, -6.524626871609632, -6.577770242774483, 2.9249330310195614, 0.08098617077213377, 2.703560931395283, 4.015936814313579, -2.4282113467623407, 2.5122094917394224, -5.683335644672679, 4.270885411306769, -3.0995684456901254, 1.0172278474410765, 0.38186027640660036, -2.2299998219801873, 0.44884793007552726, -4.0843301982804725, -0.9094819080288661, -1.2038321487003967, 0.3760371719236044, -1.1946930825895161, 0.8139860374562113, 3.5512596719133196, 5.616326022189735, 3.6288466429874564, 0.08620261424178377, -7.612671324609481, -4.2416366943343204, -2.364808243485162, 1.8370676152284253, 3.183096927402234, 1.6750205876211206, -0.8536710163324142, -1.5548427095426047, -5.975755634579312, -2.362036592374552, -1.4869545274086384, 1.2308179527306216, -2.823633515011433, 4.128166651062142, 4.8058879246792, 1.6744154883756703, -0.21179118610548242, 2.655607114078437, 2.8154984145639608, 2.6533304539383806, 0.1272987551427256, -3.160804926027051, 0.3742526810296587, 2.9553191721143532, 0.21542184796341712, -1.24713623782233, 1.0038175855777505, 1.3158751181055726, 6.2635047788407325, 1.0119055619925734, -2.5460190263261007, 1.3258709913802749, -0.5598276594306637, -1.9529027709198261, 0.006187426050849876, 1.1950707782839158, -2.2992899744202315, -1.4288906641775982, -3.577836635493987, 0.5082604545055316, 0.0688574888824327, -2.718515253728068, 0.8481131747717032, -0.10490476264570114, 1.7526605521852985, 5.645015251815155, -3.4281164498234875, -2.4153702214066293, -3.1930115603570832, 0.759522586563131, 0.9220099543744809, -6.581262701403174, -1.4647744681439099, -5.046929273041898, -2.0036066009908593, 2.2907458837832695, 0.6808646621889589, 4.694654191780344, 1.2898714228899628, -3.1291920014105985, -4.795218764320854, -3.8935441084764753, -3.8322380860201606, -5.756422809962275, 4.247502708291938, -1.54228325105723, 3.1366074892914586, 1.3184560893789978, -1.2285783739649985, 2.331139840116154, 8.681183575399071, 0.6899471791246077, -1.9672836611750437, -3.6027789105486727, -3.5957061831623998, -2.9774469141052027, 1.1996082792327125, 1.0513493029641134, -0.41292862056673374, -3.773310360562835, -2.4553055336411473, -3.459358957217632, -1.2410261125630515, -2.114152705656787, -4.465035721808004, -3.9359328326039975, 2.6648938249951026, -2.6385673219053793, -0.7528366554490242, -4.859563435806311, 1.1531551660463615, -1.5743292035773535, 0.7427303320976328, -3.450467739457024, -2.3270719069778485, 2.848016318999421, 0.9590816263221489, -2.3652865369088962, 1.1900345307988691, -2.2866592604612315, -0.3462441467976083, 2.8955408496002235, -1.008343165215921, -3.0073067233672126, 4.367410392219825, 5.324062422245399, 1.0881177337854115, -2.7977740982772796, -2.1311850356206037, 4.257844296819376, 0.9420344668633573, -2.9365055553432073, -2.4290105032328846, 3.7313723394908207, -1.7793129340662028, -0.11252987689003868, -0.38106728888611197, 9.213480381370651, 6.581444970634173, -2.585442769816015, 4.534880176084275, 2.970413890818543, 0.49298253860308305, -2.46980016832209, -2.2562962657749965, -3.3244733110623272, -3.0470979934944085, -4.5915761577265926, 1.5572024260317816, 4.567181218815939, -1.4253811318217633, -0.6483916572528271, -3.5993699594254824, -2.390821293123423, 5.11801491800639, 1.0155218149608034, -1.867774356078902, -3.328599970943573, -1.4297978869534558, 1.9762195131685605, -5.029977863004737, -3.1429322408603326, 0.8765986379512418, -6.02521673351584, 4.475179017965614, 4.9191774845986, 4.175443822078963, 0.23907668575734675, 0.6736464211522692, -0.988337689125153, -2.392911197759345, 2.3877418402996273, 1.370032122677582, -7.349875201613139, 0.5669602297174621, -3.5931136385261775, -0.9233785756846955, -2.743576810156898, 0.2099646586230457, 5.330790781823868, -6.106108056450623, -1.621179325603136, 4.621124029270746, 2.010851408716369, 2.729102580734752, -3.949154790544701, -2.3117857972334948, 1.9008212060847587, 0.9794419083610744, -2.2267478827552583, 2.0648556107048215, 2.736881369822817, -4.501318367301643, -0.9204857565880509, 3.039618045292607, -0.3059349448500783, -3.089703668434404, -1.1110390780959083, 0.2563726068785246, 2.907395841021248, 1.9648677577717777, -1.392634168056743, -3.7446621207366, 3.490147694069539, 3.5647671227129036, 8.590103353633978, 1.4160870744869176, -3.8098633496776064, 2.8620498788810056, 1.994184100888262, 0.866888497013603, -5.243083715844025, -1.9424461781619589, -3.6966240537909236, -2.663211928410975, -2.2317530125325167, 4.118289623164505, 2.815275237666177, -0.875346864376365, -1.9177383154421763, -4.879478824196976, 2.544886095080673, 4.4694334092488655, -0.7663910749211529, 4.702542379745142, 0.6407148117918546, -0.673157345429129, -5.348518161783483, -4.74764848168285, -5.853360977199614, 2.3967765240147365, 2.299690505120993, 0.146847274233755, 2.2385221740129113, -0.02034243010020642, 1.9984925186546478, -3.897122534940649, 0.8518015717561807, 4.827444433587934, 1.3572291127916767, -1.2361813462729505, 2.893504388088413, 3.7989349617284347, 5.431543976926524, -2.52017911372003, -0.8285893732527501, 3.578235385854774, 2.2924394925564417, -3.12811322969092, 2.60803722080945, -3.245372050491248, 0.8453838944119492, -1.6364076138463428, 4.331813530668451, -2.631673116161816, 0.1951320644652743, -4.715761699174729, 0.6073896134494312, -2.563803232338728, -2.321725042896634, -1.1583722919623727, -6.08109692119602, -3.5872976976796833, -0.2930360660273458, 4.904921699034028, -2.6136333094159747, -0.4001424574599457, 2.2926620741320027, -3.8960520123120688, 0.31894201403541356, -2.1082515815834895, 4.575022198549952, 0.8606841921399964, 5.296659854310121, -5.41537085338351, 5.487538219265078, 5.624480843648984, -0.9041636563959656, -0.32051906762610916, 0.764941973358993, -6.708725448050803, 0.3452392571359224, 1.1726000919367245, 3.6702799022661896, -1.2945435365935263, -0.398897968799377, -3.560495973725084, 1.553575572640058, 5.906993370203946, -0.006937764948276581, 3.4154594196796477, 2.2933991837452963, 3.7543081147668946, 4.99450558202125, -4.679167069106322, 4.85776768636983, -0.9419761603053474, 3.75111686848137, 4.018749970606618, -2.092329244134885, 1.180363626376609, 0.44717665756859293, -3.2844544225208154, 10.67888763408338, 3.50331696787942, 0.23123275224323026, -1.5359243356065424, 2.9669494918242925, 5.3090576758518955, 1.4431503281229947, 0.2394631170181909, 5.714242656480259, 2.656463533926315, -1.9305214936076538, -0.09729622208289801, 1.4943784724314204, 0.11096804527385462, 4.407805467985149, 4.860074599739872, -5.51065018933695, -2.8889643187944056, -2.2120455372633487, -4.8261593645469825, -0.30430903245960284, -4.488089289189437, 3.0797339205072456, -0.5947941194443358, -5.348072611946627, 0.5480864585177976, 0.3130486404115389, 4.87371876773073, -0.3942684586527996, -2.8373241484952105, -0.07300262886261111, -0.5474034753726753, -3.113859668152691, 2.087848455475558, 4.338531269045934, 0.18931118935475633, -0.2923242290289748, 1.1671154227033593, -1.1653867947101861, -1.7145477974154422, -0.5496887203218798, -3.2848402393880547, -2.670646010127991, 3.785399971468533, 1.1620580518887067, -0.7648447899639287, 3.071182712046175, -1.8137623068681388, 3.1896175060125227, 1.357120249602659, -2.3753599603127302, -3.635910433014815, -4.86801138859818, -1.2057012518663848, -5.4298888235699705, -2.213867443206948, -4.333864211690898, 1.8770921702431158, -4.183463934055887, 6.593806772018282, -0.8232455438728364, 0.5424099033677634, -2.001184713337176, 6.275116173012868, -2.611034648665905, -1.5603033491335307, 0.36075119635085295, 3.8922973998216897, -4.470062714459176, -7.275025964112613, 1.4607730561678078, 2.746098737295477, -1.5894226741592061, 6.782211054826604, 1.318523900918021, -2.6915467358998226, -2.238521217749909, -4.753474681979578, 1.9042885719996656, 0.6104515381655207, 1.4928917672321171, 5.854029798487307, 2.654807998513538, -0.22991056084218187, -4.075316717365006, 1.4708954168049742, 3.401794104607351, -0.3463542656935572, 1.0240011903667776, 2.029312322750622, 0.5762921604331599, -2.8155427870162852, 6.869991785698249, -6.415736823306696, 4.459508222336767, -3.9481276563804846, 2.9316344339367353, -0.9708412621009381, 6.176387448239254, 1.2133532694423685, -2.127698486994418, -4.712398588441927, 1.3477249395047926, 0.5849819014938289, -0.6461988739360576, -4.197363855812476, 3.013840148332182, 0.9464367474029556, 2.8252345885123917, 2.649950856903934, 1.7711653890252785, -2.2422579164180796, 0.35829975130715797, 0.5709362981965715, 3.3227734988525253, 6.597363777359074, 0.5910025718933682, 0.8867628874002897, 9.897799926951148, -0.35054677726414496, -0.8327558475664709, -2.816423656700604, -2.7653974597149578, 6.4949583901389, -1.9850944250615272, -5.030440972238057, -1.7385487613470572, -6.111471734174177, 2.9861843900765033, 2.1724251786756357, 5.419644758666835, 6.156655875082039, -3.695779561152875, 1.6557199241509202, 0.17150489597776142, 2.0212167403259107, 7.219789735613073, 1.8056494714176834, 3.0555307896213746, -7.253495723398857, 1.735610397326516, -4.700219663819721, 3.3192007510585597, 1.1971722968456655, 0.9549607971359224, -3.98658945478752, -4.844987056406503, -1.041979172362635, 3.294653802213854, 2.989853526915917, -5.093160966077484, -2.31028149159938, 6.744327616352258, 0.1508159840089578, 0.5516698366267743, 2.398458071760004, -3.1563725106428526, 0.2718840616717557, 1.802164771286579, -8.91073495773426, 0.16564335312536738, 1.6475981881385913, 1.2920626386752843, -1.9274885608997758, -1.8261789562931925, -1.4541221969670475, 1.2513425244989609, 2.216466907527739, 3.3601193325472947, -0.4770255209624681, 0.5793339040072785, -0.7511414555742295, -3.2554218847379426, -4.557965171494934, 1.6267289370534428, 1.4331505847572288, 5.308094062239919, 2.856380509312813, 3.26120456375107, 1.4473235514420884, -1.6225548089200792, 1.3949605179746056, -1.5597028492490486, -3.6750609037501123, -1.5844228836975636, 5.019281335137979, -2.730145706309914, 3.440921940867022, -1.7695320999728175, -4.373800501684346, 1.652606450655346, 4.210660818735169, -1.9888581339222422, 3.798891378535189, 1.793298502949857, -0.47618631263498945, -0.4659158622122006, -1.8021394038759364, -5.469771099017034, -2.46510538015211, -3.7689990307077075, 5.666088534070354, -5.583431123144086, -2.3586665475662345, -0.034942122489179495, 0.2600281086076106, -3.7448687861400805, -3.662045554102663, 2.959086132075466, 5.355372196416031, -0.5595459009883268, -2.4638183684740076, -3.157821965502031, -5.208837723669459, 3.0090895433854223, -4.993240024463592, 4.611460190745477, -2.530023083023104, -5.520633249324787, 6.739942888177955, -1.2385995193590287, -0.7278721233367593, -7.391004764447151, 1.7875206804029165, 2.555103660419615, -2.426146196670267, -1.723536445572769, -2.2033589440864607, -3.2076138148327606, 2.069988021499445, -0.5208205028676417, 2.942962114903593, 2.021725764734506, 1.876402778085585, -4.462567982962661, 3.9492668515373595, 0.2886477259228353, -2.4271998990294774, -1.3889548507737506, -5.6029796584800575, -3.3034562885921215, -0.24173261585021988, 3.1265060680567967, 0.6784560263617339, -3.6289833835655534, 1.175391934682807, -2.0113497919971284, 4.35507951661396, -0.2510247970357241, -0.7848617072306863, 4.200525700811749, 3.44278797268443, 2.347474923622487, -3.4475740760732707, 7.499125665996418, -0.11458918535124352, -1.236854206666311, 0.7128823540044094, 1.612785744986878, 0.6695601902776944, 2.5093843852518556, -2.112051846328497, -1.4758776403796043, -1.980778156333025, 0.9116396033120171, 0.07766080558731137, 4.980865695490458, -0.8161014423148611, -1.7294868830886005, 1.2149351293565909, -2.08896777381963, 0.6938924623877971, -2.2139023371993973, 2.6605216826168454, -1.336073396775479, 2.42082098565799, 6.829330000727682, 7.393567876948154, 0.5469962299436046, -1.7090824032739445, -5.82698218487677, -5.629834554736779, 3.4925508874068942, 3.0353700037948776, -6.216225449658605, -1.4944541266468914, -0.3651085794306329, 4.824951407287381, 4.61978901339599, 4.984586266509034]
BIASES_LIST = [-2.944162145864689, 3.0063205073353334, -2.637098849407624, 3.2134645467856053, 7.502441095271296, 0.1393017993556911, 3.673561614824915, 0.9553832456016802, -3.6172945918544546, 1.940503405162537, 2.5285823932988, 0.28702074285437473, -0.24050788177379223, -1.936928554362306, -4.447343375527822, 5.77207744007673, 4.173109719525293, 3.2023515841031944, -5.967063871398076, 0.09991323715850475, -2.855737551507272, 0.011649546141041522, -3.005494784635233, -4.704615328243252, 3.326884959757317, 2.0466081376096747, -3.037781972705345, -0.20959691049913765, 3.1457890072266803, 3.1690726148447164, 0.856114156235094, 0.7925821273652423, 3.4226472883971066, -0.5314706536009686, -2.099335006112572, 1.906749665810315]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

