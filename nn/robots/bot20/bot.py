import random
import math

WEIGHT_LIST = [0.9626000362240574, 5.22813441242705, 2.535149041985311, -3.6774730333465038, -2.385736587675545, -4.768698361198834, 4.226551408507751, 3.1360630725193097, 2.5028783066545075, 1.6895623296895654, 2.899194822311733, 2.6681478837863972, -1.3003767927838203, -2.478882349336994, -0.015014266011259991, 1.8335185244338974, 4.140554957974869, -1.7500965040201917, 3.0310632520338157, -0.07004923908089045, -0.7267019317893417, 6.706957224872962, 4.6318671889771075, 2.787850439472185, -2.7575939892851205, 3.247679246321459, -1.798564792719477, -5.751617559577099, -4.292113204320996, -1.2041779526552219, 1.703129913027186, -0.9350318331989538, -4.205549662039644, 1.825304339128527, 1.7499890294472937, -2.0707899804541574, 2.442348756987597, -1.830800344494812, -2.360003934946251, -2.108736733978756, 4.898333660495862, -2.0832041790694484, 0.8568835890540132, 1.461455195887864, -3.2280186149205514, 4.550477778185294, -6.220670993140276, 3.0976084126375234, -2.1092536438598914, 0.9797737937203472, -2.1269180622563817, 0.9468161978537779, -3.5827757475330317, 0.1726409848288457, -3.769458769697041, -1.1800698701056145, -0.311145649375715, -3.9662194915602917, 5.053139803943401, 6.755881439824752, -0.7422206260761686, -3.2763266412508454, -4.732072659492951, -3.0159204295827435, 0.8157717420441775, 1.5469597003821205, 6.729770512022332, -2.0129403391644227, 2.9477111065152117, 0.938433290411427, -3.193027418932954, -7.391667718201419, 2.5581407057672108, -5.730817155769935, -1.0732528496472422, -2.168334187805015, 1.778631492178858, -8.623188417925585, 0.20825352130030672, 1.8117178395848206, -0.27295243377630507, -1.471107375559331, -1.7017238409612914, -0.815448041306585, 1.5921005101879135, 2.6254581847871683, -0.9672781964393062, 2.9294220379717117, 2.1626181990363254, -1.1869057726320638, 3.300513919031606, 4.282395625483661, -3.3198131317554083, -3.654494051280134, -0.3177737037029911, -1.6456311231340972, 0.08839125290318783, 3.257670126023182, -0.34383633357946985, -4.112534760451912, 7.611032328152671, -4.429004110979627, -1.1485500529428434, -2.5195894460789887, 4.62486883468467, 0.4840467308984877, 1.141283088545293, 3.518926974917699, 3.752265452682016, -1.279594686824983, 6.93811192359657, -2.295738285874871, -0.8860545082005445, -2.635884578750024, 3.0924927820283594, -7.303356334056969, 3.6079215779232836, 2.2420654608927024, 4.178263999936202, 0.9612971503132572, 1.005239624370815, -1.6435811291271791, 0.9185643299144239, 1.6895862160735486, 7.241402483221087, 5.076959519964915, -4.96226728269853, -6.872332883658622, 5.031200700851226, -0.7744264785006045, 4.051658889342776, 4.6420948663246655, 5.376350377885565, -4.772068050441662, -3.795206679980624, -4.805443211620691, 1.7244226300954413, 2.0892585838042623, 3.3917253462731294, 2.1748545179012426, 2.337430991713505, 3.40015121400429, -6.2470881877475515, -0.9452023661211728, -4.319200967444872, 3.60653118807267, -3.9278055229471605, 3.06659988005525, -0.8052539590330201, -5.8409488948973785, 0.30480670372960006, -4.070210262181243, -3.7258317324730346, -0.5140020724037841, -5.206204298003518, -5.381428500238034, 3.266268881102773, 1.318448133724202, 2.307071349084442, 3.8496119253037033, -2.2181178614932953, 1.641160252738418, -6.599720823548478, 5.103917889723229, -3.397091836630749, 1.2917883688576444, 0.5557812402312512, -1.1499556074838124, 0.5975518942165401, -3.3025511707914026, -2.5431242029012324, -1.7047610309297954, 0.6660400179813495, -1.8328445364279558, 3.016442706128303, 3.053276977103672, 6.0031212856198035, 2.8533999378379855, -0.7578283614309023, -7.947857656160929, -3.0750582841424343, -1.4706515708373546, 1.5789867525900947, 2.5444512393387577, 3.7219704044791797, 0.4858419583327136, -2.9977551236794255, -4.753073232386258, -1.3595745043362624, -1.044332724062985, 3.1072180721346383, -3.129636664843582, 4.280091620688604, 4.429241336179075, 2.1177032357845134, 0.3660109804496605, 2.040195265682275, 1.2314838263661314, 2.9614219594502424, 0.4090058588201191, -1.344775661190961, 1.3573657528072154, 1.9214099750746816, 0.497223549824201, -0.41924187677015745, 1.6762216403357022, 1.771114404183857, 8.071119037690373, 0.9395553945962898, -3.2142864651769543, 0.241166306337955, -0.6524705331369725, -2.4422639533462327, -2.1760539358539868, -1.5598260754676252, -2.0856678272985256, -0.5067821209510179, -2.8730335600058696, 1.1596001380380168, -0.8279902801834998, -3.161073936111527, 0.6572353547807506, -0.21955233724268486, 1.1179268172226804, 5.19796658574391, -4.289642203712017, -3.1717769917616168, -2.8336457834341227, -0.7153462466110793, 0.5737075098386839, -6.4385312686137555, -1.9772585856248546, -5.426949244386181, -2.2879728960152805, 2.49154815683107, 1.1157167907207364, 5.499675052142991, -0.8884095470125486, -2.337429482671722, -6.539772686080455, -2.5466483637133366, -6.207731453382451, -6.285456858555404, 3.992726508875445, -0.41217834787041663, 4.286377067396671, 3.0415284463183694, -1.2915089204298278, 2.8439564202009233, 7.843284178659015, 1.5162534566994683, -4.237156878649209, -3.1433156111016585, -4.131461520707374, -4.21021369662248, 3.5416945883407216, -0.14825994475353266, 1.4358162837584976, -4.296284878862736, -2.0563028756679826, -3.9575071471617527, -1.1938548298220784, -3.238033145599693, -4.843125767656895, -3.3928815052742527, 0.47753950102463194, -1.6818485674755221, -0.9184044136433887, -5.805669108089094, 1.418022416517133, -1.9378135693293892, 0.21975540328999932, -3.301892175866297, -3.175221127160593, 1.0210219126039681, 0.3865231753093692, -3.1149824813944735, 1.9993222231492376, -2.224064673153966, -0.8756668877768525, 2.1571860680476176, -0.1064545529488301, -2.9378984188202915, 2.6787877159294387, 7.071654960311145, 0.8740713619626927, -3.4252534361837954, 0.47243880242899294, 2.7394253868177953, 2.1450205531674937, -4.767517523338174, -2.5243530542118053, 3.180239828438202, -2.8760732640773843, -0.7051234555688213, -0.14175225984519668, 8.726037402758275, 8.26421008495171, -2.8751554576101235, 4.187722927070342, 1.2943242863459261, 0.6236708416150027, -2.8626133436005192, -2.1328220026936853, -3.343462262865132, -4.040836957458077, -2.4594325063685165, 0.35876264890480747, 4.638828993130477, -2.333323878732855, -0.7377343219902122, -1.4267966374003354, -3.518229762827401, 4.287738728442815, 1.0459513897152206, -0.9914061965816336, -3.7221482741431693, -2.3895201073435457, 1.5840658136385088, -6.548681634096603, -4.114553800644354, 3.1424064973719537, -7.321112229770639, 4.325662010932433, 3.143696818824047, 2.688124059540381, 0.43874605668268174, 1.5950358800556033, -2.5995178785480375, -3.812026378863159, 2.9749852451040386, 1.4721655755533272, -8.259214530061112, -0.23668963092521245, -2.944916647039981, -0.2688111037690162, -4.295654374042826, -1.8021004096225033, 6.549025183851122, -6.446846128993186, -2.414911861613913, 4.390067159268204, 1.3109953159372685, 5.52308635562477, -2.262672011059232, -2.0162033361712233, 2.6394012250116528, 1.7496022161448597, -1.2188579641167485, 1.1611675087341808, 2.206675171624849, -4.823201957237999, -2.009413268083923, 2.3283891819958438, 0.412360330395916, -4.2954042244828194, -0.5200578690684892, -0.49026180821630394, 5.301686143313801, 1.627435426191802, -0.10372025310556832, -4.753328714511788, 3.037352513290375, 1.7015043911811913, 6.358481549237839, 0.8656898909487731, -5.6498347888326546, 3.642794377737962, 2.4533185084289455, 0.5889943705862248, -5.731206434648761, -1.0613137635269223, -4.019017455862466, -1.3259147625564662, -2.1250474054084516, 3.1043274664062075, 1.8099657343308033, 1.0252680561704004, -1.643979272319229, -5.591641595764073, 2.8461133428325835, 1.946990079460806, 0.10582616214949403, 4.806289001511288, 1.6152905576093937, -0.730937589850388, -4.835893551500697, -5.232260647433948, -8.080820334086859, 1.287795635030767, 1.424814246314047, -0.4392249682291116, 2.672761520429252, -1.164856742043005, 1.9706990895104601, -4.210807307701346, 0.7293170383507046, 5.486482596651811, 2.9241392624802813, -1.098819076065971, 1.7357030477350586, 2.9662091437905653, 2.986442258425453, -2.3354354652763805, -2.335586513357339, 4.415390941931434, 0.9697730742410247, -3.8392787266673363, 3.245327575970066, -2.7076346085256517, 0.6651146552843614, -2.148732850573928, 3.738831198009187, -3.4929254735051414, 1.9887219441159143, -4.819304381284733, 2.6558504013028914, -3.0589446024651483, -2.0220181445305716, -0.1730752026295379, -7.720474685343472, -3.200753348541464, 0.044195667616020895, 4.217024662304226, -3.0874206625083263, -1.316852551935479, 4.267952605031978, -3.821102269536415, -0.27303819169377697, -1.9398590546623602, 3.330208001957561, 0.37295154092275484, 4.813298916928953, -2.498643574546035, 5.489068636777782, 4.176458758805654, -2.4867388942867077, 1.3367954290866888, 1.8581407309574596, -4.463474444199252, 0.2028364667595839, 0.597405661491168, 2.566150959256362, -0.8917852003791572, 2.3419016062727582, -4.841136843476789, 1.9549186351915893, 7.311898504245157, 1.107845661855456, 3.7921093351278934, 1.6391954739017232, 3.006107724265645, 3.9053518445752857, -5.3588167924729975, 4.338187243665592, -0.6605990132798032, 4.376413988707129, 3.484922065550453, -1.9132344522123184, 1.5679163680604153, 1.9133041092514196, -2.850967903218331, 9.43943250732267, 2.965649819884989, 0.04267752941283698, -0.10284483253573384, 0.6707082636869772, 3.1551806889059115, 3.029678835855054, 3.5587326141923654, 4.79445248556934, 0.8089063171481308, -2.330274408749955, -0.40215104127678636, 1.3418157822043524, 0.5709030464077673, 6.2119615468349645, 2.961890587179801, -6.250957044173307, -2.2170109029875897, -2.4201646526742255, -5.1312809922953635, 0.38941201105811984, -4.0073673562458705, 4.246492916990876, -1.92580332452398, -4.552463971056415, 0.46819783540120996, -0.4377732638985181, 4.676343172423882, 2.1356910326409713, -2.993061175787787, -1.569304884183652, -0.4278513186714914, -3.1287821348089775, 0.2238865382338795, 4.881519311815102, -0.2017955660635986, 1.2845113843904947, -0.1716131039324491, -0.7207029578058514, -0.9230086655658047, 0.9337225284852362, -2.888482619599081, -2.776017374330878, 3.9619896027837953, 1.7952293906639971, -1.9447835899016555, 2.137697135571795, -2.5175290919288136, 2.6606854509135625, -0.06526591406086046, -4.215530499665158, -2.7175561369372057, -4.828801386619892, -1.4893617177202565, -4.018572160838135, -1.5595469327728153, -4.061777339786694, 0.872674268956757, -3.3074069469774665, 5.983246411498246, 1.4986813330231055, 0.33441184484411735, -1.9478640750174503, 6.08847451102141, -3.539598958860384, -2.9169595704195492, 0.6854442493969413, 5.692446496397606, -6.504472945043254, -5.270544698301988, 2.238592176464201, 3.1529983893960427, -4.768305720453537, 8.32663766899298, 1.8494583327634517, -3.3320139724318905, -2.9128010852286925, -3.511569843671457, 2.362609880359292, 1.5155381467765912, -0.5334888333934964, 4.628303662908103, 2.0733740133289897, -0.4164421233523913, -3.839679910922939, 1.4595744326624658, 2.507738512739239, 1.608778718840484, 0.1396429883614232, 3.099237021321092, 0.16581590729402795, -1.9576199647957613, 5.418321417044931, -4.070838203876887, 6.037070860862707, -4.635926383731098, 4.138636252427761, 0.0657758278532321, 6.340619018395055, 0.02264286482239064, -3.4218926736986393, -3.76260111928309, 1.383037763424778, 0.16959610081717247, -0.5578959054398869, -2.3166999974250606, 3.284522900397696, 0.3810295972304931, 2.7926948396799, 3.6716382652391975, 1.7822115447953584, -0.9468944489173117, 1.847571011663229, 1.104057498348154, 4.51600142124716, 6.108781344239254, 0.6182799585236509, -0.8168023391937249, 9.118939137666825, -0.8776973877893286, 1.377862910003409, -0.15476757185351797, -2.8539778591326197, 6.431740622790788, -3.184892857809436, -4.716990350465451, -2.062254245706412, -6.60647224077505, 3.26769236850254, 2.4143760892538095, 5.934160657728266, 4.453447133084941, -3.0837828088566654, -0.7638748324768501, 1.2887517321866762, 2.049098449803987, 8.386610329547734, 1.155033314322182, 2.0196929505153465, -7.608519738067791, 0.7294643383188573, -3.88985407655535, 2.1170207259710416, 2.608846006493178, 0.3087809367358334, -5.358418677264217, -4.89951445211772, -0.4696577726540636, 2.775075982443461, 2.0681149737645397, -4.554807879717938, -1.543693856741553, 4.481838012306342, -0.29502788289359305, 1.2266753706589002, 4.4803216564040245, -4.116067172342737, 1.2427003799035408, 2.111977391614836, -9.681344061120143, 0.4735942363527439, 0.1331538592355901, 0.16889296072117532, 0.18603204863860556, -0.9846161789799648, 0.11441400527136025, 1.6400454213233822, 2.5627477375514243, 2.8088289107907993, -1.8181253166787192, 3.6335686053738137, -0.8317754099300585, -2.9408404154155403, -5.176036179021287, -0.48434464882132366, 1.143910966845889, 5.4489284171135335, 2.766504414983628, 3.4897226236713523, 1.0439443425707533, -0.9210823570720204, 2.115145620067665, -1.3719858934449713, -2.3007844623594877, -0.696282476843942, 5.598470453102804, -3.4168702510051707, 4.025061902589222, -1.937221636463072, -3.1671318435355946, 2.268686654591785, 4.540767187591021, -3.260583310416938, 3.4795644561977355, 1.4319652738374762, 0.1822398113721504, -0.4295968371515346, -1.3853542114129154, -3.7007026723132936, -2.3820400852318757, -5.2034283978493985, 3.0830939364727215, -3.166790230214712, -1.8406014353761113, 0.5466801897617326, -0.6496621016093025, -2.2869511706025536, -4.652262197373549, 4.74013209248365, 5.327949393698143, -0.9006037336738899, -1.9389345671050051, -3.0092990566088202, -5.459866072499482, 3.7430414200899955, -4.20201358815499, 5.306790705406286, -2.002308804576173, -4.754925164682106, 6.990635600249409, -1.6761603040875808, -3.4137789849737175, -5.596002973206273, 3.0456018882033282, 3.0859524060283388, -0.4887258791494704, -3.270635651442325, -3.7976473232257923, -3.885437753216012, 1.320245718216607, -2.439904164410711, 2.6861846501043507, 2.063861628545706, 3.6627679949336818, -3.326971311196917, 5.79459435682682, 0.5149667076656779, -0.42252126398058687, -1.7343304916628695, -5.524287053369262, -1.7130455819697472, -1.564019062482045, 3.5777915064241954, -0.4170118783391583, -2.4905539903555436, 2.2573856319120535, -1.54244084080521, 3.9030053273230294, -0.1904720327385212, -0.9423514473129235, 4.571844140796395, 2.8050480895523604, 1.159307510022102, -4.0629399770219825, 9.257611255143345, -1.4682112625291226, -0.9081331334793441, -0.47339189613706445, -0.40341538337064287, 2.2423475257153678, 4.338694376137369, -4.735495046287117, -2.6444844514776933, -1.3318287392054011, 2.1301340859959335, -1.0153640994446471, 3.7288219414365367, -0.22651845459341224, -1.5863873085783986, 0.3965983955983994, -2.0767021619536, 1.9356458529255387, -1.1558718733063946, 4.779950456693865, -4.241840283623627, 3.0864990737282874, 5.370758365584523, 7.3520754910877795, 0.7341130558552156, -2.4052357286931083, -5.863786707166657, -4.985305615394363, 2.073125738504397, 3.245847013873113, -5.5067682577183765, -2.5927038610885234, 0.9284479863014439, 5.054161621221264, 4.718148732103831, 4.6779293657358805]
BIASES_LIST = [-1.2497889667492847, 3.9898242726604316, -3.1411659699558827, 4.153113218948144, 7.920995416465896, 1.5345991725944126, 3.8363853930684773, 0.3796249907950442, -2.7755465570516975, 1.215168822136595, 2.624366891218205, -0.1730161228069348, -0.459820436341549, -3.524716455330558, -3.882332043906117, 5.830589181239045, 2.6723723701112942, 1.9486602966525322, -6.518855337128219, 1.2435692202090225, -3.7880990512368533, -1.8221308804892298, -4.319672766438925, -3.6263536578623916, 4.252021610485689, 3.2666234886252035, -1.4020225785182634, 1.3382018688916233, 1.7935833923101212, 3.484054578142496, -2.060842274963628, 0.2959083424877662, 4.445826739843817, -1.550949971034502, -0.9245708611536668, 4.808899134220341]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

