import random
import math

WEIGHT_LIST = [0.5565694584036893, 4.901564622202986, -2.3211077800919413, -3.5582493730620053, -2.3198931926779394, -5.299015511622166, 2.8743013624245908, 1.8387787842823529, 0.8064663167230445, -1.1065258413936396, 2.5978600833580217, -0.014452789695486138, -0.9020038269657115, -0.7555453400745226, 0.23514792160932527, 4.930834381818771, 4.6797041373290025, -2.9721779410181917, 2.8308168114468213, 1.833434355880045, -0.37493519155173016, 4.354593831093843, 4.922840078253032, 5.411214283687625, -2.119909540079348, 1.606372584809506, -2.1934346801233677, -4.355832904006074, -4.9074847613304255, 1.3852315263380945, 1.354943227034118, -1.1148936208297318, -3.3960075816210162, 5.2468096239754285, 1.0002369393052657, -2.500465653137538, 4.151518028557022, -3.2841807317759537, -3.7567053313473093, -1.036459623838528, 3.8303657494843324, -1.8672542528463023, 0.4300198429510933, 0.16721875203444828, -3.263944225254519, 5.716899044661924, -7.866277550867029, -1.0380747121433629, -4.606564956148174, 0.8755790113997148, -3.840203642830783, 0.6718108463974722, -3.5851285169264253, 1.8843766381905862, -2.237478644535603, -1.6049021579432496, -0.3973270570345107, -1.9889782473647515, 4.896055359362651, 9.863476098969027, -2.1875864841771415, -4.491570095092048, -4.3098234636377875, -3.519478938528226, 0.7276249022010663, 0.19375209132399565, 5.3571342264986255, -2.1917041880735986, 1.2293449829857799, -0.6924645186843715, 0.4489737895863701, -10.35236553861456, 0.4923511892108754, -3.6941620760543126, 0.049001121728224975, -0.9691084506525061, 3.396481640954988, -9.792055182128792, -0.07264518381593689, -0.5717408768281864, -2.4077866381939015, -1.1106010230702257, -3.2580325240714507, -1.212484855139166, 1.0070384713378462, 4.806627944889668, -1.8362532547811774, 3.985458316715155, 1.3648647579499213, -0.6793259462254613, 0.9939942696848094, 3.7816714667511517, -1.245624361481584, -1.0746309477655842, -1.5787729574152114, 0.5378632562403386, -1.747773210505934, -1.126526315202962, -0.6286635545024104, -3.7011278350779815, 4.121567097682195, -4.8231144440602804, -2.3426860489548873, -3.602334024575376, 4.937369770900206, 0.7587228866385999, 2.705779423011875, 2.6849738946947657, 4.956464786924233, 1.8682547744444409, 4.3858540419896315, 0.605758179884037, -0.5365858503752851, -4.3239080499034985, 4.462835396007247, -1.7159492850083147, 2.553861955761146, -2.76759056132127, 4.56054432125497, 0.5711839104818923, 0.6217091529377717, -0.15945633151627434, 3.600693045390446, 2.6105924457545777, 7.021021085479368, 2.4441473080692195, -5.378524549255042, -5.629636027402976, 2.5629649824963305, 0.05029067109983455, 3.6174239156753436, 3.8450607201033877, 6.4972856256163025, -5.733767253662579, -5.194260596542652, -5.1569284787851295, 5.246436529017052, 3.499450539115022, 3.568691400427854, 4.5561595671614015, 2.0709605655467986, 3.470749989143301, -5.2270134035100195, -1.0451802862824882, -3.679519073345404, 2.5277797921943153, -3.9403637748689673, 2.4871364220032013, 0.45221643709303133, -2.479263820450085, -0.42396397247487433, -5.105627051949659, -2.414185726553052, -0.00577345554225849, -4.147149563823745, -8.690109749782435, -0.22053644841469028, -1.8204333145237344, 5.4690628368667245, 3.7981999316453563, -0.9531217357572612, 3.844557254456243, -4.5585943149752595, 4.473046891349978, -1.1262062253537188, 0.3709630948196902, 2.114951659738822, -1.7028391716392821, 3.3612264482165117, -2.5945794717231236, -3.4507580470172567, -2.4269672731238754, 2.0654786566527914, -3.283282222006303, 1.829962347447988, 0.17879429063429012, 7.300023855762391, 0.13229934797553847, -1.2389205450863676, -5.382819832696698, -3.2130401145452603, -1.881291098520522, 2.1579635469856027, 3.6431015654387133, 5.117991175052784, 1.1395585750178905, -2.623405636310677, -6.1058389871823415, -2.506499597783726, -2.1384953136223475, 0.06811288544315741, -4.290668448719201, 4.567596218502947, 3.2472486262773304, 1.9138498832553565, -0.43138522479687796, 0.752462234950874, -0.5174191190193752, 1.6805565945598555, 1.757924233610959, 0.11643326341917956, 0.7134270816114686, 3.036478906972003, 2.4256625989929996, 2.241410088881046, -1.3446015550161212, 1.0272537824686085, 10.579975334882512, 0.586790273890816, -1.1183680770602102, 0.611188983710337, 0.7537202488443198, -2.9480991274984554, 1.2962738572743182, -0.6640131286426236, -1.7597256634002731, -1.602669953769253, 0.3348061933940923, 1.305030978657706, -0.7469754256086893, -3.923534681681366, 4.0893710558000915, -1.567244924410933, -0.9416432661756177, 4.256884686613634, -3.525978292846182, -5.017841956495907, -3.320093956983788, 0.15919815577582477, 1.749625332203736, -5.345515395723136, -1.6983027137916564, -4.688265368693638, -1.6465668050732924, 5.272852434803825, 2.411751946797661, 4.2655589795174516, -1.160581417361413, -3.6232001973657675, -5.939732956617387, -2.5646454048507787, -2.6031519335225286, -3.5930798067948366, 4.86123395719631, -2.595422036911328, 1.2183955639702249, 2.5892244340861903, 0.21934009196107812, -0.08612471300790045, 7.1271328896684585, -1.5452040080430225, -2.118294921127044, -2.2901050739708118, -4.271409357290154, -4.856831478397293, 1.0156273762613903, -0.4121004485413795, -0.3556974584470681, -5.815972915544992, -2.513748005061053, -2.7244965052849057, -4.571286426605769, -1.8257528845413329, -5.900335318365541, -3.070810092421792, 2.689359322346884, -2.3696940094234664, 0.600496890093627, -3.760831366963855, -0.5507517910353111, -1.6554863381730247, 0.17624668824794087, -2.886294169169454, -5.61663815107462, 1.52939141723456, 2.034443932359451, 0.20695534303423743, 0.9893833121584024, -0.7813547145121745, 0.37327109030882877, 3.951974533217157, -1.0265578583308839, -3.902166518033732, 3.7452179525075358, 6.169021961887491, -0.0786232703095203, -3.3756374517756758, -1.823607208121317, 2.6309391317901194, 1.6945988037569328, -2.9805739730043626, -2.691291931807329, 2.5528829321658852, -3.5714714772811913, -2.2546504042092725, 2.3586791821716266, 8.838544144698202, 5.94936961611352, 1.803285822272265, 2.053914311646757, 4.570610969045293, -1.881278703210786, -5.8510533304214345, -1.775399837711556, -2.379512057721826, -6.870178726767084, -2.8814376736465612, 2.2912732080076554, 5.065513491393796, -1.4235267840515928, 0.6679203791158909, -3.9186724241383817, -3.5945230862796214, 3.2704085012767865, 1.8512418096396017, -1.7850875855901074, -5.655270251768116, -2.4194232789933445, 1.29349555909364, -5.596559850765225, -5.313468630277531, 1.2650366288025534, -6.800080089142697, 6.392121526771696, 3.44843674736322, 4.607236115391489, 1.979781869443032, 0.2707856039517924, -1.2741674341376241, -5.558998095641849, 3.9542413553457867, -0.3437540716179132, -7.43104447019251, -0.10586082376166771, -5.035817308516129, -0.5091208839275054, -1.6739570670684087, -3.456921817084498, 6.511490650963642, -6.784886244609907, -3.2354613526118268, 2.6585021838918057, 1.4746940880001373, 4.183307260711475, -5.701352438592427, -4.635142865450342, 1.7078060116643548, 4.802247989376512, -4.850129305724595, 4.645641801337156, 3.256940385236349, -4.021496467448252, -3.3922896835355156, 2.3190570290144192, 2.3533158414143465, -3.388054257654842, 0.04386989983859799, -0.01553915954194129, 2.8147288929670466, 3.2436351588135697, -2.241353281748258, -2.808153620061166, 4.925241730904688, 6.039433462435253, 5.294928760464813, 0.11564895510028159, -5.831931975891021, 4.262382584589921, 2.6071128726276505, 0.8543311383172009, -3.2210086727379927, -4.706645482374549, -3.66431503453254, -0.8920987718961515, 0.34067588019865463, 2.073610897877122, 3.925153952669489, 0.6793077000042758, -5.654615916101957, -5.260796988918969, 0.41626910498015474, 3.4153089806778696, -0.8779640338787692, 3.151057678841836, 0.11573932515093545, -2.871150640131039, -7.237130198974062, -7.878811711747428, -4.600122702127071, 2.461585573860954, 5.600265953155282, -1.705641345549868, 4.703570748789663, 0.5127877578295371, 1.4304657966402343, -1.29955176682331, 0.35009603001625944, 1.1789585302137646, 2.25030450066289, -1.5036448534838724, 4.289181360989806, 5.542822259081789, 2.7161555775582835, -3.456536948280941, -1.7214515619497517, 4.552340618715368, 0.7077652017833372, -2.1560287545880494, 3.866464255078833, -5.558173370706768, -0.29417654119597964, 0.7961924834382066, 0.9064334029616592, -3.2822068531520716, 0.9735538702059822, -5.671659612638156, 4.146264898709397, -1.5761862945334406, -0.7186057883983911, -0.9905001402552428, -7.393640192320526, -1.8464177009609626, 0.7695432949681489, 5.224770562248579, -4.338265880751854, -1.1451711182428015, 4.086105244324211, -2.748695985713475, 0.9100861736776377, -1.924656826335176, 4.3904193067389885, 2.7794749365067566, 2.9919877060212743, -5.900776065228776, 4.92937946367671, 6.187834151953862, -0.7262805217684623, 0.799988570328998, 1.584248297162757, -4.769212370385992, -1.60824290336332, 0.6520627054977005, 2.028300264164666, -1.8288768984968349, -0.3714819837297197, -4.315986602897632, 0.721364450052645, 7.995080948940772, 1.800707750792038, 2.9307734805240773, 2.412543387952405, 4.512427822997523, 4.936923692134091, -4.357452637411924, 4.6810085674904665, -0.004534937387746442, 3.6297061137546147, 2.5528930086680774, -0.3864119056989352, 2.520484152432322, -0.4164400977659996, -5.926955128292981, 7.705775195227842, 3.685911779772679, -2.038879875591072, 2.070398159520274, 1.4902926602619864, 3.1951525824895888, 1.3678495502616124, 3.044335230220329, 5.183566964485385, 1.6574304603281522, -2.318363037071018, -0.10137935680610301, 2.4944340361493347, 1.3381635200726505, 1.5767921083829357, 6.855961652379488, -4.274573564220873, -2.4590158694132116, -1.1987856313152898, -5.089357574784442, 0.5627238671238517, -4.34892500925492, 2.6916714739350582, 0.39889810653290914, -4.409033984624364, -0.8181547423603824, 0.49308154809275534, 6.254240737780631, -3.2811161374740587, -2.8715957712625695, -0.687764040575228, -0.24051970838398948, -4.864106487181729, 1.3554629590470484, 2.6083835836849034, 1.8368283803199161, -0.3642561745266768, 2.72014631034633, -0.28053995064589227, 0.12400597579765499, 1.5384896093975013, -4.739009573276954, -1.6557763276971034, 3.61521548974524, 2.8603552748065493, 0.4865104465697271, 4.26119350663205, -3.0489971352425305, 1.8236203444391899, 1.0507197049782153, -3.772120403686365, -1.7864941628603936, -4.918529106300067, -0.97016794336023, -3.992496528362317, -1.0076651045469174, -5.963269248915285, 0.29343898866859547, -0.047023537756013534, 7.0128509983954075, -1.1882483837669338, 1.1133381118123922, -4.023402716384048, 6.956280854791306, -4.076246696719746, -4.132086820359401, 2.056746167226244, 5.100530820766802, -5.505877936638836, -6.4065474470492925, 0.9069764716701483, 4.233870691077009, -0.9009218237181484, 8.066428409123054, 2.5198761366713596, -2.3007719884391062, -3.3331905357493996, -1.992868994943943, 1.4644674898627794, 1.0702902932850475, 1.4382926790893737, 9.033602705627677, 3.8085584833890165, 0.5520864986940941, -1.2642689299929957, 1.795501769486352, 1.5002978994974197, -0.5529990289079773, -0.28232285016282, 5.972943660658956, -0.11592532079517179, -2.780485938364215, 5.406630044252289, -7.757290387615325, 5.2623205778552835, -3.8963404265551147, 3.4057477602507014, -1.002709367341509, 7.80874353127088, 1.8916496929011954, -2.2437829236914637, -2.1835344628015347, 0.03331206546986712, -0.12108981565106712, -2.46231939206989, -4.417921542309616, 2.2178161556090976, 3.9589028539828877, 6.056362395530932, 4.875542560088401, 2.251861462299192, -2.151036284023794, 0.01961247631932684, 1.8353909650051026, 3.6995018589455286, 8.945538186242903, 0.4005720204717786, 0.22918701588784393, 9.615187350179669, -0.6124505681335951, 0.5353386769137517, -3.188653945558297, -2.5480704075522813, 5.765067721791464, -2.3435633648910734, -5.458412880126334, -0.23965447703270704, -7.364771678362436, 2.422359860138368, 3.0953198462593527, 6.122119316996822, 4.946064144169771, -0.9376843071127327, 3.7985414321806226, 2.9189313682199174, 4.108091883072864, 6.783898737562118, 1.393802606467735, 2.300815483380915, -4.245297554146148, 2.0186494113800277, -7.725413281941921, 2.1642237830713973, 1.2721454971409871, 1.2191434828565306, -5.139526688208639, -4.538708709778579, 2.368286165506417, 3.0239039934453644, 4.2866286038203585, -9.147176951300212, -2.4300398039507383, 7.438358801250643, -1.3554060844545366, 1.4418647317887379, 5.827186727519783, -3.4617027842261896, 3.170918689653712, -2.0170310129434434, -9.985862889498195, -1.0539942772478543, 1.485197248432795, 2.900068512670201, -0.9162820500641881, -0.7135330071896766, -0.8058993948689421, 2.2755296562086724, 2.491703914915236, 3.225637199325294, 0.28325154231618005, -1.406605560977687, -4.284042552065105, -3.2264222778304594, -3.409170578487644, -0.699992232245505, 0.8647057938413617, 4.221350900610541, 1.9649728968159952, 3.1779677969154845, 3.110745325020304, -1.4461767208799585, 0.16045141595514467, 0.965531070807504, -3.0911313198079977, -1.6356226758605703, 3.4774616914278447, -4.016043067757967, 3.359615100936196, 0.5817649479839527, -3.6849174161094216, 3.4466222153800787, 5.923521177117508, -0.434917794523462, 3.2320128204236203, 0.3787694454655777, 1.8533631162834765, -0.9187911718658168, -0.2004274866886281, -5.2636429915006255, -3.3554784855797415, -3.7106911926717774, 2.3418568124401413, -3.9037463095176044, -1.5342313142205863, -1.1485306272602565, -2.067724962006626, -4.906365966276655, -3.8672168650395946, 1.986844413662854, 5.673545796105622, -0.19944820623983386, -1.8251983703801795, -1.363850183095, -4.273445248773404, 2.341070293541559, -1.558596785100668, 6.693258857024649, -2.6734249907294787, -4.7460100360498965, 7.8917203410597, -2.0410808727433216, -3.2831165256859642, -5.162123175054969, 3.0079797086127695, 1.516994694756832, -3.5547217357239864, -1.3624514150362415, -1.5984110031628997, -4.811146864774715, 3.3441222890188715, -1.2978659622184474, 4.382891362645273, 4.6325971577073, 4.285402243746715, -4.917753963151552, 3.650657346896653, 0.24643126104299845, -3.404002555398527, -0.3604982978088344, -4.741984430243037, -3.538656511060991, -2.0721984323530283, 2.5258923821929855, -3.4051652228839298, -4.677621980507529, 1.4335727634372797, -2.7644972899301923, 2.0095716291287755, 0.46430019184314864, 1.6591159961989055, 3.9673734687617013, 2.9356493446233545, 2.7915473266101025, -5.8573680148087215, 6.981478994820853, -1.358883240768456, -3.483766103277853, -2.8488659888267454, 0.1454579925631605, 1.49256353020325, 3.0311570565379857, -3.6033839596145008, -1.0609051593391114, -2.7621550317309618, 0.5794484715632744, 2.1874570513621263, 6.128947715538199, -2.7548961334956346, 0.0924182813808315, 1.4744322484533727, -1.2474640207364287, 0.7337012488421794, -5.731373539605803, -0.8378557191677433, -2.3791673560087094, 2.365049217544266, 3.7679799781476135, 6.926529267036586, -0.8655945080619633, -2.222318282525063, -7.988653471120019, -4.320478658607296, 2.9945176168919097, 4.222900836808533, -4.426030954313105, -1.7783249823450034, 0.9556639587552345, 7.588662379621781, 3.7512995764062014, 4.870581702906973]
BIASES_LIST = [-1.387516258791038, 3.7016212465503155, -3.6082907023278503, 4.788713789545782, 6.33592051136864, 2.7656990151415273, 1.104594148509743, -0.08446349711858663, -1.1112032666086793, 2.651872754234624, 2.1251576775283865, -1.3611107866435102, -0.0016948704021653568, -2.621797265718027, -5.50571293029767, 5.264092659826756, 4.822728082143844, 1.4714120118345229, -6.566854038093499, 0.009866152280807382, -5.0734120890868635, -2.811657482686466, -4.0815683649295265, -6.081329422674649, 3.9206557255174634, 2.64636396164407, -4.029554221607543, 2.91700313469673, -1.0805320998030319, 2.297167443767603, -0.33337278665714365, -2.288825379691084, 7.127864010426309, 1.8510412419062516, -1.6822988234232281, 0.45453852241420667]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

