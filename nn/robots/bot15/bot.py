import random
import math

WEIGHT_LIST = [-8.560601394728044, -2.6973003744095068, 7.387156791782604, -0.5516937314778511, 4.0627624120082455, 1.8418783949660353, 0.13612251768626216, -6.774571717231138, -9.306186401406206, -1.2109696166078523, 0.02623946257767884, -1.577901507493523, 0.34306328727937513, 2.0799794341863245, 0.8655944177967887, 4.414701206798006, 5.080252052553877, -4.782716626024031, -1.0170956650406973, 0.06295656378770359, 4.245063740356182, -1.4624530308900878, -3.4410065442163575, 5.341513164132262, 1.8302102858534859, 4.473722786813277, 0.7087421393289268, 1.1925750021071073, 1.1213974643972264, 4.528180555582313, 4.460158132512487, 5.524926133308312, 0.9614584236195307, 5.640660607234023, -2.092277094019221, -7.099261591054356, -4.021963322247318, -4.7496392412280635, -3.6295595647807115, -1.8411867523701695, 1.7450687263039728, 4.841369253943691, 4.057035133247496, -2.207832126057887, -1.1319528562390615, 8.896958245197956, -0.32217314687030074, 1.0610761499507049, 3.1361410055934016, -0.432051127588278, -1.1027997504127187, -6.154520241499465, 1.592437268712844, -4.818342104754457, 0.2730232994200376, -5.740654855931281, 8.028155720535018, 0.6343106632440467, 3.7771018816467463, -0.7666122833577413, 4.829349933458774, 1.954896864869641, -4.922191331762599, -3.0946666660757614, 0.8223560366351677, 3.6023105292014796, -0.9101547827323939, -2.1579234075212756, -1.6569413200821923, 6.0372549373853674, -3.22449400716333, -2.3156918812326728, -2.3958433589919155, 4.764925759626361, -1.3249741478203663, -2.489340997590959, -1.5039278770083524, -0.004666765571288201, -5.128133817261274, 5.978565739742037, -2.8901183757802866, 5.215607815330479, 6.0260062795142275, 3.8454530891292804, -7.2374979968510305, -2.1538953664044063, -5.534131715885857, -1.5290433297421158, -0.5821366489848422, 7.6707172684494775, 7.372734190649166, 3.2572215336739205, 1.0503600634454127, -2.511867410014674, 2.9796910901589646, -2.022415207320699, 2.441747736090869, 1.0633306544474534, 6.105679374834664, 2.055726922995214, -1.4793944029419646, -6.459081099025237, 6.105732711776096, 4.871199904152169, 4.52229756587857, 2.0406867923943177, 2.855321987504497, 5.427805412214982, -4.827064043490191, 3.5934611557127494, -6.683514275996208, -3.062839189053242, 3.627050040142533, -2.5657311688355207, 5.937507901457546, -2.5477206211780286, -9.948130802860852, -1.6365243563676595, -4.535550018933196, -2.5391059706829306, 3.382473672602672, 0.48252412930792493, 7.283954813533295, 0.10163948084657065, 2.348625114086703, -0.15628406164933512, -2.7537821919598904, -2.9657074091783673, 0.9905107756214031, 1.4676024370311347, -5.026114918060206, -9.522248730083524, 1.7194039778640375, 5.988202194562909, -4.665876338955719, -1.920899697196003, 3.9712211029472253, -1.396234603457992, -3.6917834322115644, -0.10057916111071158, 2.2682898149319293, -2.8564917856229366, -6.756749970937649, 7.172116475206062, 7.432915371179523, -1.4125948447004024, -2.6852534210304517, 8.062428830364734, -2.4967654506937786, 2.209115500763697, 1.8980675711537933, -3.8943628378769093, -6.995596393377853, 1.272666923493782, 1.2300703696514423, 0.5782381732609518, -4.036547431721926, -7.519561844087828, -5.641022466547171, -1.5351352701101888, -4.84146128202855, -4.155835058118484, -3.154369801262518, -6.484196085168408, -5.167694906840074, 6.818307247128228, 2.423657399402897, -0.5483038526430395, 0.18226175528525462, 1.0725251024682838, 3.0234693203562033, -0.18775244709617916, 2.137418241558447, -2.9904484791899266, -3.549933678191945, 1.991295804603908, 1.0182865435575736, -6.483974113002376, -4.723271030962588, 2.235571025361673, -8.066276889812757, 9.092389151084884, 3.864295856034754, -5.454923738426806, -4.023768108637766, -0.6304899008937399, 5.411810180923003, -5.4577834554090785, -5.106363744034949, 6.698528755670689, -5.128350994156745, -5.2048507166602365, 4.950681748888735, 2.3049170533901338, -5.478060487283654, -5.412587342986783, 7.326213175482639, 4.319840612645075, -0.08014926492329388, 7.159282703743714, -5.3249321083432815, -4.4795697169017705, 6.086755405150281, 0.8881329069116473, -0.45438780017051933, 2.3969249921089633, 3.1436086977509103, -0.49394888020903677, -7.313094325145621, 7.328478555269451, -7.257244434629264, -2.141767776710943, 1.5369097487008379, 6.950464683412041, 6.4113547711759065, 5.698974663806766, -0.6141620272605813, -1.8653473193538617, -2.5872040047339215, 0.5002160129664834, -2.014434407957467, -2.1413889576084184, 0.21315538698758896, -1.436802612871007, -4.0053286105222465, 6.001433195429995, -1.1088183532303, -1.6820517324551518, -4.250645727634909, 2.7450117545665855, 2.552833786746869, 0.615948688643976, 6.269989067257952, 3.50271358606579, 4.246659587657931, 0.6197611412034016, 5.411906219369102, -5.723742217055291, -2.6995069712539523, -5.194763954794587, -6.3841727767777, 7.074137888572357, -7.113744685512776, 1.3154296656026259, -0.1637932177076025, -3.133654258528456, -0.0662698131296236, 4.28864936212605, -4.252418305040674, -7.255216052694042, 1.9817549418456473, 1.8387102801741433, -4.960569736596408, 6.42565195733975, -1.4577313773301954, 2.0183004638472704, -0.8434595734482913, -4.389030902129878, 6.550743917238658, -3.7448092369254984, 5.733384880557114, -4.3989855725125055, 2.877573038640675, -1.3124638479857758, -5.270777454984648, 4.6417276382885015, -2.765728981596802, 0.3211775285847784, -8.240694305571155, 6.5145885164041575, 3.5213193977615123, -9.524487337568232, 2.1999830347159883, -6.887271669117131, -0.2570297934563868, 0.4675178563675462, 5.290602391272668, -4.317397450849748, -1.0899493860709428, 2.8330008126465756, -1.2050476288509975, 4.042716115650106, -5.85922506306435, 2.6456230180320626, 3.1990716267909716, 1.5431866717045768, 2.2647275080620535, -6.204597943348354, 10.361007838928288, 8.856659461680119, 0.5060736701428106, -3.789254618845891, 6.140742181578787, -1.0474949959794133, -1.1646782328318255, -6.003069952499673, -1.4274178927892187, 0.5721009394423044, 4.889432637683784, 2.3067455377818313, -1.3706015388078916, 0.08913574973736987, 4.631327547821819, 0.2283697117010291, -1.7852172938792792, -7.158046855593367, 2.2001591634774553, -4.239926798710772, 1.475154738429451, 3.9310733577672425, -1.977425927864282, -2.052469613412602, -7.828225714107597, -3.6633951117430996, 7.524217715955261, 5.839418422932115, -3.4549758219172846, 4.210949122795661, 1.2745732387543258, 3.565363187000819, -3.1659130906828437, 2.8495801189731687, -3.308101827759803, 5.6618272862772505, 1.4469888975244563, -0.2992199144292954, 0.8058471192960874, 3.791480218079893, -7.849781676800684, -0.5106797371371686, -3.6245326662451385, -6.536090708677693, -0.6719148936624546, -3.5336686220633506, 2.9204382764522356, 4.804328904414931, -1.356347650592631, -6.5486121406805715, 5.295553165703502, 3.5896850541933083, -2.2357247144281716, -5.822606022959905, -4.636842324024047, -3.415153543634702, -1.6059726041090192, 7.160144277304522, -3.713928417333803, -7.665982644796883, 2.047235593842806, 8.833932127381416, 8.836858127024971, -9.064478388547974, -6.801497164682737, 2.569027441171301, 8.289696517472604, -3.0128024577812416, 2.26440549494853, 7.376005715993178, 6.0864180077730055, -2.036638323616965, 7.432058955964146, -4.014904964658902, -1.1702122891469078, 1.6006330082127187, -0.6838169518938919, 2.7048457769816148, -5.513980139872578, -5.7282545184775895, -1.6394998374422092, 2.5425184952738844, 7.926634692402669, 4.326719780468387, 0.24090990173951604, 3.9172871372510722, 0.03560238906567992, -2.347542002093884, -4.7467060488599015, -0.8724614081977813, -1.5991237094255069, 5.144948276194438, 1.7234305476647909, 2.827527458624263, 4.0986211628603355, 3.6701741232262743, -3.1465577439803734, 1.9114104519981203, 6.271648680075275, 3.539099009374833, 0.6455528490861699, 2.1465221804852863, 0.16279756569100529, -3.620815241390199, -1.4636099794241986, -3.6939620145572127, 1.3336202923051135, 1.2127573581397495, -0.088195854844694, 1.8362227728360208, 2.9231258809973255, -2.511294991175629, -5.947887579898219, 3.0281534429471395, -5.679426222908038, 6.27712103012783, 0.13645133187055541, 1.242680259444633, -3.436404583276063, 0.4680810636096719, 2.3200649288432027, 2.795651110486273, 2.8593115852175273, 2.674410006552293, 3.5149553813532646, -0.04642395944406155, -2.278003685435071, -2.658230199370815, -2.640271114989998, 0.05341488027812219, 1.4745173250168442, -0.9336974916524172, 0.4675344675142366, 3.014518411179908, 3.9099280615077743, 2.0298657079076254, 1.5575411168921682, -4.550191094039386, 9.175708589266005, -3.281156154362949, 4.871162915557093, 3.8623073670526895, -0.47033143570691394, 4.9784593648672635, 0.8227665451025554, 3.119567873453221, 0.26825110476582564, 3.4156578308109444, -1.4933947795106188, -1.1667167911832261, -6.310777339549608, -7.878041997325925, 1.0651252005415184, -3.5824373592759784, 1.197214472504291, 1.3846284704229226, 0.9164132942576093, 6.8278237013198195, 7.499516349643709, 3.069063475827277, -5.633968734912531, 1.4881946277324776, 5.256314148608201, -3.644121693866485, 2.9584353996231405, 2.2069281135126184, 5.7833606721269275, -0.5106156096253206, -4.195293860890843, 6.542958561517482, 0.36089633343419464, 3.8655573613762804, -2.5160894577476918, -3.7149672219274485, 0.7108198778510109, 0.7689357026492034, 2.977568247638804, -4.050390499731312, 5.338491306400779, 5.40253635965475, -3.6594695167989624, -8.03678063454614, 5.364256204723331, -1.6370546008879843, 7.190844218678829, 0.07865291329218765, 1.2910959545512082, -9.27862174276943, -4.6615711273246685, -1.155337504657737, -1.4303928082228963, -0.7320518540692744, -7.173131086655739, -1.1289198218917627, 7.9765923571062, 7.871474497895277, 0.4865899413669122, -0.9620206732604333, -2.1114790419928484, 5.436055826030813, -4.133609627747374, -2.000372220474767, 4.360269520474323, 0.7090105949784766, -3.479223469696672, 4.909391788196795, 1.5752286924257983, -1.1940953314581515, -1.4606276642723799, 2.2511048445747535, 2.7975728984498733, 3.508261816192334, -3.1236922869283257, -0.4202848178314036, -2.22726318467879, 7.552247236563778, 3.0467752410569147, -3.227133454686982, 5.280679557457278, -1.6262056476791933, -0.4419769981230951, -1.8279458964770665, 2.4708490022363403, 0.06626630024572605, 3.5784381268314713, -7.458541834100555, -1.4978204318127049, 0.18260104015013845, -3.853234524240608, -1.7919534881247852, 0.856434713764239, 2.4892112711412433, 3.9851840385716426, 6.1656346172382905, 2.05364975266403, -4.983078928714321, -2.6313608855549764, -7.4490541302024145, 0.09110979055849039, -4.302398572723037, -1.490874238313813, -2.7642384136066003, 3.7858951358432207, -3.4676262947018626, -6.86426878477431, -3.0378359112010584, -3.964090196098088, -0.09874256785693433, 2.094835393553365, -2.080768325335693, 2.6311038601794947, 0.7263459033711595, 6.907976164449684, -0.9558916998357176, 4.027403084626673, -3.725738283559171, 0.05121035115249761, 1.214207187679395, -7.701493754340104, -8.581771576430446, -8.352900336109439, 6.0357291932118535, 4.1068049596077225, 2.0950102067432494, -0.4769781238834494, 1.0765782550494745, 0.026125859222511483, 1.1002499007969564, -2.8221359764497476, 3.650879183748991, 4.004309343167216, 3.0110607350567644, -5.428351196169345, -0.11277105042126034, -6.828676861560589, -0.3150349657526337, -0.5662513603494153, -3.420910435167732, -7.948415733621536, -0.7412791673090968, -3.141628982292803, 2.0083163062912086, -5.368808914453669, -0.7974902050741792, 0.992530442555307, 1.294505530565831, -6.8536985300998134, 3.2923009308759235, 3.9499240739734485, 6.457766336452384, -6.044427834379636, 2.6928678736077303, -1.911961927539183, -5.128393606269888, 0.9604854311089284, 3.294034652147704, -1.8860619309735784, -0.07546616581566643, 3.7194181374626636, -0.6073500534570431, -1.5484427415110391, 3.6919148856904753, -4.711244797916811, 1.4202218239470832, -1.0909349246592435, 1.3015878247045778, -5.071478102818885, -2.419675029017069, 2.261904269256692, -0.9140101635257079, 1.1501789773277653, 9.396313822346608, -3.6466850488551654, -10.59975201154378, 0.6326211506302706, -1.2636501228087624, -1.1737681745185216, 5.627422150100074, -4.612822936921793, -2.7969074216320013, -1.5723922755282869, 1.7582012606507877, -3.8753469369069156, -2.5972853866104324]
BIASES_LIST = [4.071362875259786, 2.2842592323537465, 7.02241709266163, 1.9864516168229733, 1.4514024044668377, -4.240834844827138, -7.00554049525676, 2.7513771133906157, 5.220894851129261, -1.4228750013835199, 5.70522643345962, -6.802212371480734, -1.2304669746576784, -2.519795109105624, -1.0775308527330352, -1.1987868110358568, -3.2862256784475927, -1.4678197644563586, 0.07040170225024461, -3.494771940239976, 6.023675823701149, 3.2635654422445306, -3.8445155463808613, 0.3912230206066733, 5.229841539663128, -7.600371521813411, -1.6693598768223514, -5.872140640387953]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

