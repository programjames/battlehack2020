import random
import math

WEIGHT_LIST = [0.3545623800697735, 3.9095162147183764, -0.03769962275063077, -3.298820545993358, -3.019001333342241, -4.557877842411472, 3.7756726373011613, 3.5537559680124637, 4.460347460279141, 1.1802496494395558, 3.6556822141390573, 0.30038936992094856, -0.5342076146257404, -0.16594758636689289, 0.19337100870895862, 3.8987465385685134, 4.112357921727943, -2.269302176081158, 4.394147475477667, 1.401014961924386, -2.1006678803337198, 4.831672939941385, 5.4932063423124795, 3.6710389530330074, -1.1560402557758194, 1.8697474528852833, -4.2384995781375014, -5.224628196450199, -3.1741389181459327, 0.1975341516798741, 0.4026447013816963, -0.8623404738856275, -3.8243077539164236, 1.4104663876427326, -0.26089982087118135, -2.1613024209173255, 2.2037307570725124, -4.330966450989011, -2.6594429255955623, -1.6565135228015608, 4.028984832224024, -3.3155831423966613, 0.18695586823171007, -0.13533719979593728, -6.774647112804277, 6.98828415159872, -7.04835631932328, 0.9214923498219454, -1.6949222581728962, 1.8281400441730034, -3.3003059081992707, 1.3730077884227625, -3.503680645368388, 0.48705960185629316, -3.1789262643919947, -0.6549065507445555, -1.0866713906985184, -2.6162170613650995, 7.675409847815285, 6.895387688775638, -1.8003076487435634, -4.702908733953149, -3.9810678642125232, -4.090075392387679, 1.4620791506797408, 0.8715359058751015, 4.843812732445734, -0.49358413812521973, 4.299718773222208, 1.2601004126527524, -1.9553751875124956, -5.918607513603355, 1.6156372760321376, -3.3214566849038407, -1.4601106270796036, -0.5763123364094256, 3.845453344108532, -7.123698959311204, 0.19699370254523796, 0.5175246134811311, -1.9695089429776669, -0.8365843990583426, -1.9182614774771145, -0.9136388670177197, -0.2137027074833, 4.011805699741111, -1.5252826474183494, 3.755247740831626, 2.1455487041753765, -1.3277032907849182, 4.542479913065643, 2.4472280276955685, -4.27789581269559, -2.878130026825006, -0.6009743956983213, -0.48088981162349675, -1.0511264573346941, 2.0396287452940003, 0.3277364059713206, -4.248976209679769, 5.489587077283787, -4.345916361207035, -1.4888002300518461, -3.9918744430331135, 5.787753715002462, -0.14531279946296782, 0.7867086111915764, 3.1541491285138363, 3.8048018213960617, 0.9438469649034786, 7.005894131629228, -2.228339264434243, 0.03717180196102854, -5.08754388570493, 2.7839286270485273, -3.2637008196632165, 4.1291056066431056, 0.7130213882979894, 3.9612446758360207, -1.7431789868201055, 1.305399790462224, -1.7887182885247161, 2.6648841029949573, 1.0060929481617764, 7.19707209471202, 4.887513161248388, -4.895041937374547, -7.6626204580376385, 3.398420935609093, -2.450658944696486, 2.4161098144892015, 4.462928159665987, 4.105775870817899, -2.8545750262859104, -4.559215324695004, -4.104265933532153, 2.1711252554264, 3.003023712787578, 1.6071114794688235, 4.124251233643147, 0.4721334448587955, 3.690424529597748, -5.6837392287549156, -0.8451707748608919, -1.3526503198538093, 5.459681445715152, -2.5889480728742997, 4.650368466968257, -1.566961145687692, -5.029687843036903, -1.175922138822962, -3.8648932970531313, -2.8659108290490014, -0.2191767096155074, -5.392770268403481, -6.467973710309888, 3.0097487758685624, 0.5058049434090812, 2.858631986933706, 3.3229289421609973, -2.0359175808903633, 1.7254457436923545, -7.196265547637438, 4.002753835463425, -3.714942570868386, -0.17339164765699344, 1.9871938039995314, -2.8489225618682155, 1.659346711552307, -4.321575540909662, -0.7531926727623375, 0.3758649051603715, 0.27480556629420994, -1.4402241780330733, 1.7165587039312, 3.2236717007002067, 7.227054400932584, 2.218441910346276, 0.4587479697134922, -8.369908100888479, -3.653604387935343, -1.5557495715505203, 0.7494200436458092, 3.934622630046068, 1.9756245421705576, -1.0072884979742338, -3.531424469180424, -5.311624366762381, -1.0563213820104214, -2.552982458082703, 0.9025305772707586, -4.929713292478062, 4.741287364599691, 2.8239375698372453, 0.5204000994297837, -0.5290885562043073, 2.8832247985538393, 2.0004747144194117, 2.1585909328429445, -0.3998016924034584, -2.2104801100428473, 0.14878170130449453, 4.469381951053713, 1.953846475936281, 0.3148121102141168, 1.0465228198724073, 1.06477801110133, 6.25574318396667, 0.9654104710468943, -2.4991485604853856, 0.4924321739532509, -1.9894066641164636, -1.7403265917623156, -1.2251163511318612, 1.3709018229094019, -1.0490565843037594, -1.1265663193022952, -3.5042155249809843, 1.5765665015982444, -0.7281947368414285, -2.992891185332687, 0.7400899716269913, -0.9382713880942488, 2.5572484422057666, 5.592544922440302, -2.918988789212137, -2.558947489619661, -2.034643573224943, 0.2540492569697994, 1.177574147495183, -7.064136329366896, -0.603293935259622, -3.8801681850058927, -1.7504610507138174, 3.312097271184591, 1.5370774963820208, 6.28435096845135, 0.23382862971718832, -1.708476166141419, -6.216092784695068, -3.1766468415169546, -4.158956198996776, -4.404843022752221, 4.3095717682511925, -0.6503195001550643, 0.6634674395075113, 1.579070651127724, -0.42522644222072015, 2.081903984869263, 9.63808831496688, 0.9767684903827467, -2.377554567895658, -2.7220608089652836, -4.196870987961592, -4.362413048221118, 2.1132573294523045, 1.5007853689832817, 0.29939378827983454, -3.6130055828297345, -4.06674119613002, -2.816901591376035, -2.461772477658572, -3.2354833269451566, -5.474977750862804, -2.6023292296979683, 1.7885594501341222, -1.204268092399183, -0.11794681724562905, -5.277255859580007, -0.7250061052460305, -1.7319734726727807, 0.3653056930414744, -2.667233562189799, -2.55138243307344, 1.1786664960811297, -0.6724468888892925, -1.0936255934781218, 1.2113755065483298, -2.05301071869022, 0.2698914335018934, 2.4774261385989886, -2.280200093656605, -3.2806080642017568, 4.974522746351446, 5.708482257047223, 0.21280766490877312, -2.970379123169889, -0.8877296916618557, 3.538613195750651, 2.5914759964702814, -4.0150046392057614, -2.279765204469778, 2.2658728995147355, -2.364640139162152, -2.0171088718680092, -0.8639194437791404, 9.001249454914062, 7.027113569405625, -2.5075227801671245, 3.777899752125224, 1.8566725180747623, 1.6940391608322338, -2.792617167354228, -2.167797340627709, -4.544892177662658, -4.856068517757006, -5.128689266909263, -0.34109592143866196, 5.557970544571713, -0.6072163708370268, -0.08659841450109529, -3.3843627572895816, -2.04380672447388, 3.389738090584843, 0.9717735375199716, -0.6296223106483809, -4.2241021522173465, -3.1614530009930935, 2.577855814200764, -4.558839997746507, -4.598634276932134, 2.25424414351075, -7.206361320548716, 6.106317889003237, 4.95685070272629, 2.837569238038488, -0.530670620334196, 2.01600674685331, -2.1122513517862336, -1.8641199668668724, 3.786533069021689, -0.9366493909659825, -6.219947214606858, -0.17963280601837928, -3.319562190447196, -0.021697100267595748, -2.180751830108587, 0.2903795203805104, 6.055721959141571, -4.779087950131749, -1.1339383470352278, 4.071601552051626, 2.0612104005171075, 2.6344761501083935, -7.177325515683622, -2.60778775874718, 2.844296737091122, 1.8680783281542235, -2.2298502049041278, 0.7479484241721182, 2.0700127530344705, -3.8912235744910944, -1.6724998209659485, 1.6184038971853587, 0.9161714795618658, -3.3415395235764103, -0.3424763186083284, 0.0002813776765058229, 3.3111712008320398, 2.1299269378669026, -0.7628970339926748, -2.990415006689786, 4.952950814237396, 3.930902209634419, 7.580354105412866, 0.7097251586754005, -4.910936094960728, 3.906599691004434, 2.9774593320848695, 0.4743828720214298, -5.866671121974939, -3.129513313536698, -4.16469207456546, -0.38148926884646017, -2.31824566492433, 3.6998266517940213, 2.0067253102586435, 1.4613409991015782, -1.8125649688831524, -5.775449688881782, 1.6837630104949692, 6.077557427694493, -0.5165625966449814, 4.530449172422332, 0.019999576757291804, -1.4336494568525966, -4.862025811561513, -6.121818181517137, -5.557282973677113, 1.5282786101146653, 2.023506672945794, 0.06846317021788462, 4.015006644592527, -0.06117241434084841, 2.2797352644716615, -3.7930872686772625, 1.1179778389090638, 5.425704818713933, 0.32413510939798273, -1.7730678564218536, 0.8555888146670552, 5.079816240116298, 4.588487150310846, -1.7194911641632962, 0.18203501618622786, 4.504266367140591, 1.7108192542649832, -3.4083604543093493, 4.159692268862658, -4.006400112735368, 0.07338198076711056, -2.472099522510362, 2.492529585797532, -3.7198705950887874, 0.44104479927045404, -5.031759187869669, 1.8451580863993393, -3.480434456105436, -2.5370036058498586, -1.0634082633068125, -6.580232796947267, -2.9409588628795245, -1.225406088684902, 4.687851445748736, -3.2577659172712528, -2.323821401126735, 5.277591088454172, -3.978804073485093, 0.03702927081515428, -2.508617447446383, 4.249164169852971, -0.3909254784425299, 5.825051109622213, -6.4244844357613475, 5.747188638271368, 5.779690954048897, 0.2786703631413021, 0.5383431565365828, 1.952902160722224, -4.898767271097016, -0.4304031777742966, -0.44263932281250307, 2.234229367482366, -1.5280017096261977, -0.6264567590039052, -2.9278284045004814, 0.3237310526849351, 4.75726392922315, 2.052771126839677, 1.7570724176833914, 1.3084112124081893, 4.53419404699568, 3.8318245490752076, -3.099154688268704, 3.8178320255804827, -0.3603460132715637, 5.030741466737503, 4.577524185844226, -2.261404341820022, 1.517594120452288, -0.5218472169010466, -3.48722539342081, 9.48499042668839, 3.1250816712398706, -0.14304209670716805, -1.2613043067234264, 3.362280212310224, 4.465461020488583, 1.7142424289573994, 1.3921520906104745, 5.5815666649525895, 2.3231350144959273, -2.6238696315791934, -0.9244496416965206, 0.333178007398534, -0.8594647867325154, 3.42230461913796, 3.8779674228697605, -5.573536322975472, -3.4920576350586225, -2.957809029498266, -2.9183072458633754, -0.7225402242434472, -3.420260961975968, 4.056915281363304, -1.134184250298657, -6.108878446115761, 0.5606820096194496, 0.4070588553335146, 6.214255316089464, -0.9021961889079038, -2.276479881321664, 0.9587042409402293, -0.19091752543479124, -1.9620792418939317, 0.9986256232011912, 3.6696006699003414, 0.4411670906792635, -0.18869270349959943, 3.3029662513776055, 1.190386431141552, -0.09789630557646012, 0.9864309171947376, -4.681977133033714, -2.909938792902667, 4.585549807756706, 3.5447618558209726, 1.1043803141975808, 3.5935468803858193, -1.6306949026580742, 2.901308657647361, 0.461006810214331, -2.6882146233331303, -2.6845089288882167, -6.055107054180159, -2.624655905330385, -4.41230521654603, -0.7038295341356711, -5.462478400589286, 1.480139122984701, -2.2350560284238705, 6.650362493866607, 1.4465166746230809, 1.8068528217294553, -1.6163689579697782, 6.200190593601746, -3.9057712482827154, -0.4880998616943355, 1.3068129567892286, 3.6435406846508123, -4.5634611192038514, -6.223881455642612, 3.0591525460958007, 1.9386115716413332, -1.3300919987110942, 6.932382984065148, 1.1355515729958232, -3.384447481406502, -3.257783048423054, -4.44246033775634, 1.6047877927583976, 2.2217912307263106, 1.1467755432955613, 6.083529370965878, 0.5807016490998751, -0.2600472910952556, -4.140378745394411, 1.5742575686590428, 3.518160900763717, -1.7465018103908985, -0.3073013667552461, 3.6355884128995104, 0.09048051659765766, -1.3757116841948698, 5.9723927829042385, -5.9705218192179945, 5.425667308004883, -3.204911321438227, 2.7231841325329773, -1.1486530409337905, 5.483842997767904, -0.06517506484879676, -1.903588957569467, -5.253775146956337, 0.9813273450963451, 1.0940341120124693, -1.7990424237292004, -4.845722150120005, 4.301135716037157, -1.5478496017876413, 2.4959252049947716, 2.2751671217493232, 3.0303660942279524, -1.294222429285798, 2.3860027344408383, 2.380355898695309, 4.051614544620683, 7.137847011422583, -1.9668128822393838, -0.3521219555789855, 8.528531490512686, 0.37285093161777816, 0.5490012462287219, -2.406564357817815, -4.080430342121916, 6.280412896256886, -3.3014970774428365, -3.7218389128417506, -0.5052178939823517, -6.857309493649447, 3.9437579463105648, 1.7489370960023365, 5.4532640362712295, 5.412194779515058, -3.287952938706187, 0.918962170906306, 1.4160742220039264, 2.011690548080341, 7.3010976564949015, 1.108170281404524, 2.289973640672561, -6.758551454616789, 0.09691257173015422, -5.015026455289449, 3.7977258138920185, 2.0325852560659325, 2.290840956057867, -4.297017703141281, -5.54347133290023, 0.2397213054359868, 2.628007544569896, 2.4951946183551095, -6.053062643653487, -0.5303874226554199, 6.136295001728473, 0.860060357337052, -0.2604535519747224, 2.820070601299994, -2.355508621986081, 1.546652071037638, 2.6825959029711433, -10.315034878822207, 0.8085839477947205, 3.2704807748077425, 2.841694640362423, -2.9333924702179672, -0.3902637503717481, -0.6115540234722686, 0.7848450592523377, 3.2112404297315376, 4.007186327335545, -0.7016521954854217, 1.7673788998107312, -1.4204417634610202, -4.935810221916313, -6.31517097918309, 1.2437252496082913, 1.39687079469934, 4.0815833545196, 2.275240171632993, 3.130877180109314, 3.9632315598098726, -1.0997326033810442, 0.9706140345688063, -1.447494374545402, -3.0413897514008026, 0.2076945686108418, 5.844730343380429, -3.8867850642942705, 2.013772598249171, 0.05058325668251795, -3.5037899716063015, 2.57369636670158, 2.490951549594842, -0.6986120090107342, 3.1220308088012168, 1.4877863446542552, 0.05386527356344395, 0.22491673296796932, -1.0618883795497747, -4.5453761148504235, -2.57541434415916, -4.763461749597398, 3.103232499684676, -6.07247854742376, -2.2726028117004793, -1.1922818669913724, 0.14462997836172375, -4.972660335610886, -2.990311811406449, 2.857065384439318, 5.213833507434377, -1.4192918798483827, -1.7660721095930427, -2.4356862271725523, -7.0151682062425955, 1.6979678433522811, -4.463622138098149, 4.328369491886608, -1.490291198663541, -4.151832836399185, 5.1820438846627574, -2.815793593656882, -3.2974705954785115, -5.672031948011482, 3.190562265035034, 4.067900513415866, -2.549416841737572, -2.1284872799152765, -1.9715338903742003, -2.6513943645330893, 3.1173299148835305, -1.168822261755601, 1.119853375759968, 2.0571706071037754, 2.6951507547294686, -5.982487435928306, 4.477605514488352, 0.3042349957882846, -2.425917166361276, -3.0107629263839435, -5.196144130261066, -4.171671941331095, 0.3798660685248778, 3.0492180463639844, 0.5005894325590288, -4.125447537857879, 1.7340192587640972, -1.436223551850509, 2.8225856033747916, -1.0818619254326192, 0.18428619007975233, 3.334823047617915, 3.8995354556194854, 2.881229775263243, -3.4939677115214467, 7.306342674928544, -1.0410110347349821, -2.085273932362412, -0.3050901323127799, 1.4897525963995975, 0.2083719650572151, 1.7792811219494715, -2.944978992781938, -3.011338867346435, -1.792945265166939, 0.17127601102733037, -0.046283159250962935, 4.658616974436026, -2.078518798511169, -2.0207730010007365, 2.0170237765599994, -1.685154714431906, 1.5259819144042455, -3.1008620879535984, 1.9670272327435177, -2.223325767389084, 2.061152633864821, 6.37082129362638, 6.947901488011125, 0.15500977407442473, -3.0578990182658887, -4.884746675178617, -6.045903542029495, 3.108565011379957, 2.993494168746869, -7.044796923185261, -1.7986472516519307, -0.8313480150525185, 6.522993747015908, 4.522978778872856, 2.963010126389725]
BIASES_LIST = [-2.253893413798401, 2.4584420670295506, -2.522673295321812, 3.4060105097097395, 6.149573079412099, 1.3715598749020512, 4.873309299882411, 1.052953878716636, -3.4156004364860193, 0.49445954521053115, 3.3726854785433877, -2.015807811982412, -1.025142272906215, -3.3860453339930396, -5.919576877438155, 3.637269061529744, 4.640542656026745, 3.2210656546868606, -6.262173865195944, -0.5527113908529158, -3.8263772872968786, -0.22779743796044372, -3.751535572435425, -4.781732382546977, 3.58709422994506, 1.8265715905911852, -3.1472751975066693, -0.4436751642506188, 2.8122605164074588, 2.015001501233786, -0.8992997642023853, 0.7792051797392918, 3.9896756518700593, -1.1367261905369237, -0.8175072330378347, 3.30231151647183]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

