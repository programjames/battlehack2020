import random
import math

WEIGHT_LIST = [0.5709385253305538, 4.905520110097039, -2.317635189742804, -3.553127886928386, -2.3239005008916354, -5.292260436905, 2.862608123570205, 1.8367418604253072, 0.8077433829216989, -1.1038943318780938, 2.5969713764638254, -0.023020628737017344, -0.9011623773946342, -0.7572317371364033, 0.22928587376004245, 4.932389228957888, 4.684383297729131, -2.97338614895687, 2.8384485363319487, 1.8193312203572642, -0.37111626269288583, 4.352205094749235, 4.92497644411873, 5.417440404504615, -2.117926901392844, 1.6005068757094465, -2.196985802503087, -4.363572262212111, -4.91624611325409, 1.3900432081450718, 1.3560279492391645, -1.1241180436031601, -3.403968907429698, 5.2563890666993, 0.9981502267850637, -2.4958565193804683, 4.145720758773352, -3.27944997833753, -3.758767595014353, -1.0325577664289767, 3.8173772955335306, -1.8578734789773712, 0.4222599080647117, 0.1703811830435662, -3.265502607837484, 5.731112121986119, -7.8747654239304445, -1.0329197261286427, -4.6066301481134015, 0.8747977785462605, -3.8476287655945622, 0.6722313775563024, -3.5877667077993705, 1.886958759841587, -2.2397832051927535, -1.5938180711216579, -0.39743532278711735, -1.9757577098000076, 4.899044306690088, 9.864303089180256, -2.186318914665777, -4.486886780075372, -4.3116982368480175, -3.5169598447331367, 0.7265939252172295, 0.1912952222349586, 5.3534330549486775, -2.1944732872949877, 1.23310758123946, -0.681432871282203, 0.4429801639245661, -10.345024682875392, 0.4865074499554293, -3.6966146753255438, 0.042654733567447464, -0.967708163880454, 3.395623161027025, -9.799735021433637, -0.07166509203616608, -0.569379420422862, -2.4086258670966143, -1.108851913475271, -3.260936899872199, -1.2038156112891503, 1.0136294105536663, 4.79674992274424, -1.8338549268488076, 3.994424529376582, 1.3590348434536617, -0.6816666753396322, 1.0078495788988828, 3.78142327887771, -1.2509098824056326, -1.0641317428391457, -1.5728099970820881, 0.5246630893807167, -1.7420824717257428, -1.1253705156398723, -0.6271291792868664, -3.691631973320437, 4.118197779207076, -4.816086420336561, -2.3393081387776724, -3.603437612768288, 4.934291182387729, 0.7488281754363859, 2.70117707535737, 2.6844301369402173, 4.9519261370955885, 1.8785488265598531, 4.393713851361638, 0.6078224400903963, -0.5349334916735213, -4.32849191934069, 4.465415244920473, -1.7213643862220636, 2.5549876685389354, -2.767725964461474, 4.566341214964464, 0.5623707234938748, 0.6236188934620394, -0.15874763949256487, 3.601644047453875, 2.6148760614542144, 7.015612845942124, 2.451333247610391, -5.370983281765207, -5.636262719157806, 2.5587214528786872, 0.05960816566941303, 3.6274223922604656, 3.844824236256796, 6.503230970602614, -5.740585685623678, -5.2043158816877, -5.151713530613773, 5.240288720165147, 3.507326900934206, 3.564156005884373, 4.559872769713576, 2.0705443806256354, 3.4700062665001, -5.221430392316273, -1.055302816860562, -3.6829387308559602, 2.52004080745287, -3.947828504493947, 2.4945336998152303, 0.4614861394761655, -2.4736069803934084, -0.4265663587363698, -5.110364480784252, -2.4176313715811513, -0.0015458533636459777, -4.156817200519845, -8.679840751274382, -0.22080010033100417, -1.8195572332191607, 5.46405049680562, 3.804264134217667, -0.9557019769457121, 3.8437501543831885, -4.557743489505575, 4.484190471028362, -1.1225951462087285, 0.37841238746438405, 2.1124259743527625, -1.695986673784439, 3.372830220456632, -2.596161217509624, -3.464107839751005, -2.42834252068208, 2.0694389423403585, -3.2914444604852413, 1.8384711953894561, 0.19581927312471242, 7.294742917828102, 0.14361908880077337, -1.235318904902083, -5.3766570812018175, -3.2196766958061342, -1.8784485495647083, 2.1526584446431007, 3.650577510327088, 5.109675062471264, 1.1326119810818598, -2.6220283571020233, -6.097744069659113, -2.513776739272944, -2.123112090936678, 0.07758966040803994, -4.291504557457078, 4.566198235440592, 3.243124328041359, 1.910246884404324, -0.42705620152027207, 0.7530228277351696, -0.5258231665276756, 1.6846833187875239, 1.7585705564024594, 0.12398586741263426, 0.7045570996711401, 3.0352240409263964, 2.422755799470345, 2.2442505687706826, -1.3366545929673308, 1.0368631327653919, 10.579233280577041, 0.5933476590784943, -1.1281722198413597, 0.6030738562602814, 0.7613117972750906, -2.945989188642498, 1.3052956305488725, -0.6620237978416876, -1.7575238636626744, -1.6096507610443287, 0.31866902901412886, 1.294050742234394, -0.735733235461135, -3.9233929547444095, 4.086186871855089, -1.5732354743571524, -0.9462486425845851, 4.251359209093772, -3.5327338798585997, -5.031489254501335, -3.321874484177458, 0.15208301514215272, 1.7590603838425145, -5.331896755845314, -1.7086295324592244, -4.6861187199716134, -1.6427277961849855, 5.271641134668338, 2.4088450594826765, 4.259502598790301, -1.1547041707309822, -3.6193362815378642, -5.941874104313293, -2.5623346468722703, -2.59911299480856, -3.5932938115993225, 4.855980284904478, -2.5898068148313436, 1.2094297369687725, 2.5919191786035976, 0.21725293746570096, -0.0926934891936011, 7.133064419499386, -1.5429182253656504, -2.1199549910062974, -2.303594219626037, -4.267777909400067, -4.857006794341724, 1.015707248931497, -0.41812394366757505, -0.3562787789500723, -5.809471222490847, -2.5039672172722023, -2.732968050541578, -4.577775329346797, -1.8311419844058527, -5.896390698472594, -3.0707251295435496, 2.690885688644511, -2.3794251650698475, 0.6045740624266915, -3.768409045095824, -0.5539054970479571, -1.6508240305764392, 0.17665711190027739, -2.895902814288489, -5.619198860850489, 1.5171297106533497, 2.030068887192086, 0.20538843639788243, 0.9896352445504365, -0.7779423907245596, 0.3706546560057096, 3.959904155013289, -1.0371228790907232, -3.8932848495730368, 3.7389475566099373, 6.163699068443264, -0.07776082136004676, -3.3711113756265134, -1.8217721793104111, 2.6399069503449257, 1.7024074650795018, -2.9846427519678445, -2.684144903483839, 2.5525847740241256, -3.5712205208057775, -2.258563350277716, 2.360920342015128, 8.839476372442533, 5.948506246393642, 1.805483813882654, 2.0485175320649116, 4.569661320053262, -1.8815052324452977, -5.8407748915360225, -1.769855832586, -2.38245672317016, -6.86394814627724, -2.885812429424863, 2.294922457196486, 5.059448064065062, -1.413577689132543, 0.6712516755518217, -3.921896545940485, -3.5960631810885246, 3.2655158551936694, 1.8539332560396102, -1.7897565172979182, -5.654587057611135, -2.4193666487583423, 1.2928050883788065, -5.601523285478052, -5.312403975839982, 1.2618142196593545, -6.800984188173816, 6.396861735332234, 3.4354446959585982, 4.595495021534814, 1.989695206064559, 0.27313914150935736, -1.2738105076093698, -5.554961069165099, 3.9599654026800395, -0.33725264309871367, -7.434424464342523, -0.11215769120708008, -5.031305499127333, -0.5073351510502011, -1.669292866050401, -3.461903915655131, 6.511089728933996, -6.779047216869406, -3.2290449530840037, 2.6610079017386643, 1.481222301708224, 4.185950686420553, -5.697706819480867, -4.635474905549515, 1.7025581189988366, 4.797653908183269, -4.849497432266012, 4.651261014417256, 3.2490560705394897, -4.021796121985683, -3.396123859531245, 2.32076431148975, 2.344248244452206, -3.3971378137472206, 0.03168131471486276, -0.016382942400237424, 2.812230212536834, 3.250315736675274, -2.2459425553359837, -2.816228870505178, 4.911288668382167, 6.05350814892527, 5.288055982165316, 0.11419969755301095, -5.843106859144309, 4.261373129850892, 2.6093165827989897, 0.8612545612543798, -3.217692124634045, -4.696620356319736, -3.6531940149721973, -0.8905019810653547, 0.33223329682748515, 2.065763549535996, 3.921284287531896, 0.6745334575911144, -5.653234834898526, -5.261946629360266, 0.4215336130354606, 3.41542298486351, -0.8699758030922751, 3.1547555117116577, 0.11777924189976674, -2.8702074908786184, -7.2391434077582195, -7.875712980601585, -4.597785835967339, 2.4704108517631975, 5.595782665876531, -1.7032917085015962, 4.712009703899789, 0.49932120334598756, 1.4334128487886943, -1.2968534885194272, 0.33890530336117847, 1.1840734739444365, 2.2539182384757197, -1.5059682053962162, 4.299700154327185, 5.547695064458956, 2.7222340860186813, -3.454305335925174, -1.7184036595299021, 4.558406413002387, 0.7125877598160967, -2.156742991765032, 3.8716982890790512, -5.559870124831553, -0.30143665213796694, 0.7890329978629455, 0.9008981358606573, -3.2886235439332125, 0.9758842812867085, -5.679851486203182, 4.134284198233957, -1.5768566295222506, -0.7086707286772992, -1.0009905707649298, -7.401586426286217, -1.832470421288758, 0.7676695777665526, 5.223056548518864, -4.349228594141344, -1.1397269552334997, 4.079244946162396, -2.749973060937431, 0.9143551664614824, -1.9319170268454111, 4.392498241985701, 2.774917055105661, 2.9958872441842006, -5.906647430385856, 4.943947431488273, 6.186299587883057, -0.7300031986018954, 0.8044632445267207, 1.584094850405349, -4.762595680650366, -1.6099264755093194, 0.6591923583819279, 2.0176017989374238, -1.8294586864404334, -0.370954966251843, -4.317197037028057, 0.7215727656383664, 8.002026745367187, 1.805232172060995, 2.9323228337152507, 2.414889929976842, 4.5175042807131165, 4.936192874256136, -4.361333281327529, 4.677126323804113, -0.0014701532527506625, 3.6285988448936903, 2.5594838221326444, -0.3851818895132007, 2.5162127696453003, -0.4166772988669285, -5.916947210688448, 7.703325221920461, 3.6805359683977197, -2.037451806542786, 2.0745825711317147, 1.501287824344044, 3.19203906478978, 1.3672305702582281, 3.049350756660226, 5.175228123817418, 1.6627773010579543, -2.3178623551815027, -0.11293676250697693, 2.4828457111144253, 1.3393328010920564, 1.577406052602729, 6.856748074477018, -4.27099169890277, -2.4702609781217166, -1.1963053234694447, -5.087828431753721, 0.5695938854951395, -4.356795383869174, 2.687899991049889, 0.3959432988575416, -4.407218875286978, -0.8095130317974115, 0.48272763015962666, 6.25619632182469, -3.269065560576403, -2.876412671418813, -0.6892956885866139, -0.2362086139894039, -4.850926815917566, 1.356330115239717, 2.602160469408662, 1.8436632659124437, -0.36697509400731637, 2.729383773234038, -0.288497016410444, 0.11899202789024321, 1.5368474872706832, -4.742557772594029, -1.647994977156808, 3.611155270707694, 2.8652826354397143, 0.49911381804432203, 4.255576306433546, -3.059206053857673, 1.826480173265517, 1.047195851383286, -3.78353917562085, -1.7818887749100956, -4.916800270053463, -0.9690912873166447, -3.9922244858620055, -1.0017299734062874, -5.965251199395353, 0.29948420018389765, -0.05780399733278598, 7.022184741199781, -1.1934416334169482, 1.108667607370378, -4.018020220760671, 6.951509120387716, -4.071980256306515, -4.128302425798903, 2.0511279805303655, 5.103992216514899, -5.506821093841825, -6.405423033547978, 0.910739523247532, 4.230911984607187, -0.9086916591607718, 8.065228102410089, 2.5214025602909813, -2.2943682622965698, -3.339902194772018, -1.9856341107658793, 1.4655102536547955, 1.0616391978879312, 1.4407864254882758, 9.031425901977682, 3.8105893277164977, 0.5525698668618753, -1.2698917241497303, 1.798556074439121, 1.51482281127202, -0.5394571057100288, -0.28728044610387393, 5.965180888167315, -0.1175187623131724, -2.781559616458129, 5.406468582268596, -7.75663093453351, 5.2592805575768775, -3.8918598951828813, 3.4078743204251425, -0.995973602237069, 7.805303682176288, 1.899395651152226, -2.243550994118202, -2.1760276664439924, 0.027442816143734748, -0.11761274436752103, -2.467847327417727, -4.411921844110118, 2.211750568138965, 3.956610806037228, 6.044710032843118, 4.870948523321896, 2.260424843034741, -2.157829093326336, 0.025723095032717302, 1.835358851022272, 3.7085281185258014, 8.940255340400947, 0.39964373878017634, 0.23360913399504454, 9.603880272427737, -0.6154263469828861, 0.5476818941688406, -3.188818141262449, -2.555270080793856, 5.772316369763249, -2.3518247921867492, -5.453902656817251, -0.2338164382643688, -7.365692617290042, 2.4247934307640833, 3.0945299152874943, 6.104648531124499, 4.948472951694675, -0.9428048450076446, 3.8017960525790726, 2.92939689983445, 4.116409529410064, 6.782848604476177, 1.3941281855487457, 2.304752538260539, -4.255437006269761, 2.0119192187202275, -7.726320250017615, 2.150746329677777, 1.266931411147741, 1.2296108330649165, -5.132144904019718, -4.539854998494453, 2.363288749433526, 3.025094689632876, 4.280447787732241, -9.138157580474429, -2.413290528801365, 7.439755677399084, -1.3579080642613555, 1.4447136578696362, 5.837018340603609, -3.457471469463316, 3.1632091805131464, -2.0192100320207107, -9.989505361085147, -1.0541115181613447, 1.4851433915285108, 2.896710405866662, -0.9090727865075463, -0.7055207676925234, -0.807092659803681, 2.2850174205662843, 2.496280785399845, 3.220274585956141, 0.2866176258659442, -1.406276371138613, -4.289025847711749, -3.2187334031244044, -3.4213381606262563, -0.7125406983554674, 0.8716604526469843, 4.223722666695179, 1.95401224418477, 3.180467083019567, 3.112895055067296, -1.444221821744617, 0.16305997141393902, 0.9616941471800955, -3.09290709760205, -1.6305194506872955, 3.4793213858153553, -4.022180659493288, 3.363051889661911, 0.5842910590048115, -3.689336740647446, 3.442147006585178, 5.934374851141597, -0.4358949203192317, 3.225287733895187, 0.38171785481268167, 1.8465977850052064, -0.9165508580135838, -0.21327538931292064, -5.272697452097493, -3.3574042234013626, -3.713586998176793, 2.351420784674783, -3.9037953965364474, -1.5443753843924184, -1.1464000908330196, -2.06554833113273, -4.905811232116712, -3.8753277796730687, 1.9854608589847784, 5.67168951900971, -0.20450382211555104, -1.82062634372946, -1.3698250264301157, -4.274973543292195, 2.344927021534927, -1.5530440135641312, 6.690092242712193, -2.6811909016964512, -4.742312581258798, 7.888473915366638, -2.034718995805625, -3.282448036043056, -5.164965729125104, 3.005093255748942, 1.513800701331849, -3.5579059803177775, -1.3731226012043665, -1.5996569836258074, -4.802046694340054, 3.3359420813483673, -1.301719477904649, 4.3887775447425685, 4.629329931174557, 4.287484482811518, -4.91980502332206, 3.639728119395915, 0.24635444522098376, -3.4036365085239733, -0.3632336695674164, -4.748285283302657, -3.535327794441914, -2.0683146339516347, 2.5213338415838327, -3.4051240624691195, -4.681249903568855, 1.4196298965652143, -2.754193633618494, 2.0132472685780254, 0.4664973188330736, 1.662875730805893, 3.9691802431352037, 2.932362293873503, 2.785838507544072, -5.866501677435792, 6.994660663957233, -1.3693486131548158, -3.4812533554002334, -2.8485000524459503, 0.15098047880471496, 1.4956932561562204, 3.040506424452501, -3.5987062413511532, -1.0575116041229844, -2.7719657890697382, 0.5847393504063703, 2.1821686040026496, 6.129521700697807, -2.762632642439492, 0.09325567927502858, 1.4769245869389085, -1.2595710487671132, 0.7335152042235724, -5.736171757514985, -0.839067742389881, -2.3960037319539347, 2.3560402211821154, 3.761150153562987, 6.932507683019608, -0.8838532037921901, -2.2277604547428527, -7.983837490606333, -4.319793585413745, 2.9993559677838424, 4.215528333632106, -4.4118894609153, -1.7687062793740917, 0.957514054119657, 7.594625532307606, 3.757547270200244, 4.8712208918782665]
BIASES_LIST = [-1.3819459710489348, 3.702303204089639, -3.6063250954068686, 4.789141604030868, 6.342605818831227, 2.7750510083475115, 1.098564220021347, -0.0788695586952494, -1.1126598463423627, 2.6604149857526056, 2.129653017693976, -1.3698665270324737, -0.005443751502868858, -2.628429740657608, -5.504568734494127, 5.259260705667207, 4.818791104068152, 1.4725111022944877, -6.571286016420779, 0.021770681941536654, -5.078904608627543, -2.808251116147007, -4.07208912875177, -6.086598026732596, 3.9202488379092197, 2.6467979797162418, -4.0299541723894, 2.9111169108160064, -1.0783047423827565, 2.2899241672257844, -0.3418075023051373, -2.284881481334447, 7.129228405802603, 1.8495472787857257, -1.6789515099583592, 0.4498204058119938]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

