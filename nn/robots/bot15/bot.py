import random
import math

WEIGHT_LIST = [0.6325720419083907, 4.2508677231224254, -0.5716812612115793, -4.069246364963711, -1.822806162037307, -5.081275013955268, 3.321995330577858, 4.018537065802414, 1.580193966730861, 1.8872454818789581, 3.3492539598266475, 0.5315553640613484, -1.640448621689432, -2.3197489485436753, 0.9597751150758573, 2.765816522850759, 5.205777148935505, -4.847986447227369, 2.9995837624311967, 0.4041122781590316, -0.004628573600901964, 4.982997030881534, 4.10223317697726, 4.027866401382722, -2.163548220130261, 2.763804116186718, -2.99450334830264, -4.403289224814876, -2.2561249744792704, -0.3320647082925542, 0.08312296363455318, -0.49239935790313094, -2.4536800321009853, 0.7602314015325955, 1.6308959828189105, -4.276058822945709, 2.012491625290077, -1.895561996343494, -3.5746374213115164, -1.1643949825052218, 4.596750008844443, -2.6023310318484767, -0.5888176720414975, 1.1370630763682277, -5.242571916439076, 7.145319543413713, -7.53437204409519, 1.1466933285489453, -1.8987697111671682, 1.2126965586173326, -4.415089762331832, -0.3452643364702028, -2.858306946932201, 2.4896512868669647, -3.3717028254823367, -0.8193322131422212, -0.06530856304486654, -4.806181814818525, 5.828171035747546, 8.23288030882367, -2.8865661642364686, -4.9772700838114545, -1.8858461411507552, -4.644101167269256, 0.36833202430540113, -0.7199611478840223, 6.175159514794332, -2.8819834982670596, 2.8996176039631383, -0.31014962984813466, -1.9763888177871203, -4.977861347759465, 2.056288961330576, -5.161739311467322, -1.812925792095015, -2.019751795997463, 2.870338782459979, -7.675193257364354, 0.01700195034702845, 0.5550451591059116, -2.0385024830372016, -0.6015359956917392, -1.232787376022897, -0.06443131614443964, 1.0078027679774015, 2.5957302022161475, -2.612980514155132, 2.517650490086402, 3.5187956407294445, -1.719077452459375, 2.9276337051646637, 2.2608744692839586, -4.936268154496357, -2.194839898057362, 0.12084367236776528, -0.7647229662949251, -2.215925705507693, 2.68785549405976, -1.8270938238860417, -5.843743066887116, 7.353631555112624, -4.145342017244966, -0.44395911274910294, -1.8864468602019593, 4.054564111073337, 2.1740070096272577, -0.38706750024469616, 5.032700220004576, 4.027956396821932, -0.2722876666692038, 7.249949758416067, -2.33863514165663, -1.3683767309996062, -4.809668025869986, 3.262546795123841, -6.994876325987165, 4.2035749026389215, 1.6687600469467672, 2.7924109683450933, 0.12826035876563413, 0.8911092538505316, -1.843761578899192, 1.5944919846214756, 1.6568096536751895, 8.319216791459985, 6.022370680890841, -5.314697655123535, -6.451801345047838, 3.5378535792706316, -1.86826477165482, 3.832164582508269, 2.2669558760971293, 5.435107276137305, -4.908198320938935, -6.143041504851236, -5.799750093893361, 3.3171054857946505, 1.4045391974591706, 3.3548151384607365, 4.158179630309851, 3.0220186274168936, 4.485226334620004, -5.751179141110589, -0.8851865520328617, -3.411864974323959, 2.5469390628198623, -2.988767120211627, 3.915408792140564, -1.3900211861066947, -4.927126849388673, -1.3755258666123575, -5.117294693374279, -4.765885630929558, -0.9440814760403298, -6.43880188555743, -7.303845772911751, 4.764740285748774, 2.4278645067589126, 4.212530749038546, 3.606940931953022, -0.0037303456748851715, 2.057959892646857, -6.664721566864385, 4.6559922557541675, -1.825223400481966, -0.20182590415906465, 1.4486833755286854, -4.155296600070465, 2.14807576165822, -2.7867524424537518, -2.825629376285849, 1.0715705409401286, 0.6762649976780348, -1.3958147430387278, 1.8650043705559933, 3.0391306516433962, 7.497042100985267, 2.6135366916089517, 0.4841105360307545, -8.540649271470082, -3.1446843782501865, -1.2030044244562446, -0.03292304907258248, 2.5582415416654674, 3.9396828506151067, 0.48690454845473496, -1.979949746187349, -4.116907524158167, -3.1275603289725193, -1.5171100027823616, 1.8881764553046683, -3.562244095908908, 3.7490872998012437, 4.5898547256682845, 0.8578599430874922, -0.5938427420267526, 2.566794375528391, 2.800783635128611, 4.205478188082848, -0.05830905650903184, -3.0041671649019315, -0.40099529919697163, 3.397100778613339, 1.5211685874872662, 1.2064188747997493, 0.7093997321955898, 1.1674670406184227, 7.74897665540486, 0.8168204371882719, -2.593760518469163, -0.6682870300680129, -1.0787154524376164, -2.1759064259013865, -0.48391493232579985, 0.8933090116303763, -1.7607141362537262, 1.1888209195976032, -3.3913941495709965, -0.31213574859750803, 0.6767782863355805, -2.402119362246263, 3.171593963333775, -1.4951412862428777, 2.407322029474557, 3.339723497690506, -3.5387440448681518, -1.3095388673133415, -1.7350623447791076, -1.7882297873037745, -0.27027939230977904, -7.110238807437245, -0.6213010791014326, -5.508565885550464, -2.5392585535452485, 2.8012539923851962, -0.45849747437275346, 5.8712934689578855, 0.8901608552417284, -0.5850244028209148, -6.376749502985249, -2.4079212466250826, -4.273411623562019, -6.318976552277315, 5.546053381101477, -1.967472489280579, 3.3112480912552034, 0.41581219375030587, -2.568524197526249, 1.1446073667273766, 8.00510170244512, 0.8682436629355523, -1.203494027153712, -3.767290024133124, -3.2940760817071912, -3.5659354323955776, 2.7153805953388668, 1.5350562123061593, 0.6512408396891134, -2.8708137728246497, -2.296198960179568, -5.22570572142112, -0.9958487050093885, -3.4567325020753454, -3.329700704734611, -2.345855161650986, 2.5423887156475153, -2.5133019246965036, -1.2604992622382345, -5.784050279659066, -0.2087569848489088, -1.6399556414171428, 2.222905390668653, -3.7999656484334325, -3.5581477182074783, 1.3820701103991597, 0.19835761993967105, -1.6520707901069944, 4.402474618850104, -1.3581235546491277, -1.8739167323480106, 0.8827396395410796, -2.1722823999784824, -4.082734916794828, 3.836889081374707, 6.106430479303591, 2.326229781956005, -1.8407607870878808, -0.4594574167332137, 3.506730665624593, 0.49688907571250396, -5.118988639870145, -2.0741662066029702, 4.707868520598445, -3.6349869746952503, -1.9380088575372314, -1.7264410983715173, 9.198136844008111, 7.916292986468319, -1.2181276016170839, 4.680027607123211, 3.671158496251352, 1.0266033530044525, -3.2739153498157574, -1.3393945205416817, -3.225526583553477, -5.476923589914988, -4.960875249804273, 3.0657099162452113, 2.597647216533787, -2.881328482230647, 0.19610815056280084, -2.491366554363302, -4.184367998552804, 2.920169141792449, 1.6797943794833143, -3.933493596049372, -3.7740601636955207, -3.1832617394547476, 2.802303505273471, -6.569332969953685, -4.552911267205588, 2.649088320083284, -7.461753352158462, 6.981198252819318, 3.850494024965297, 5.603076852423785, -0.03750727586576119, 0.8730380331543244, -1.3053222276449237, -3.447639683163129, 1.7205790435014423, 0.8349235348418096, -5.331307419720472, 1.650774933130422, -3.3569093640082075, 0.1376152731514111, -4.1902671580615465, -0.3196205734770594, 5.815317905977981, -6.857574135021814, -0.5727326489172071, 2.332455865477724, 1.5540081493630895, 4.892766677541797, -5.776303733778743, -3.184944140277137, 2.3124248233583673, 2.6125343893609285, -3.677082867888528, 1.5374201015014277, 3.4490106201410624, -3.5966583111700343, -1.380109895529015, 0.5717756451495657, 0.44173462461507573, -0.9512510761400319, -2.1263663043430236, -0.6257984486002879, 3.2066474682757233, 3.0214474892117327, -0.740259969647532, -3.4606131301393193, 2.9312256811889803, 4.302201731018863, 6.033953392518999, 0.5623031542833925, -3.4476648521355, 3.7883672498504772, 3.259939054304933, -0.9270026647983272, -6.137686529726468, -3.2995897651542148, -4.270139586146799, -0.3375112597122609, -1.3370941741994058, 4.317575692016285, 2.6134402203009586, 0.9557502743726356, -4.119956742944705, -4.5632098028677985, -0.21952224088158867, 3.2677680755870426, -0.4760682608432347, 2.3807700712198283, 0.03624719794396314, -1.1984610233076047, -6.603087518303359, -7.9494658015017094, -7.537728589733651, 4.410720995958469, 1.946951258543228, -0.6734624228151344, 2.1465904016980755, 0.4148710601439005, 0.3008400289300026, -4.071683675056846, 1.858518981122292, 4.36619696039617, 1.6557966661889854, -1.4781999048498202, -0.32641805530088, 6.52054336968152, 2.9881391909447585, -2.4469544929986995, -0.7286006912850503, 3.6544492936489963, 1.1519471910598331, -1.7990597187847965, 2.45724278171527, -3.5942366940372685, -1.5490421022121454, -2.1140604356687787, 2.781012090667393, -4.279884984594773, 2.553407761363068, -5.184280526107784, 2.684960920407474, -2.3409984913790147, -2.4683792340125414, -1.9294035392107312, -5.940077931734604, -2.215489296706564, 0.03850165967728936, 5.806530971457391, -4.685177595967822, -1.9480449961949828, 2.647087545310919, -4.311298366942068, 0.7069798457741407, -3.282404637582385, 4.919738103316281, 0.04828270869921614, 5.370730199027621, -5.384813494973213, 4.345872501623452, 6.0816460357227635, -2.49547196416699, 3.0053802056051264, 1.3063687983279806, -6.848107558151904, -0.6418697536792155, 0.07183041180789052, 3.820816469474363, -2.1627178478918143, 1.4768741596107686, -4.995102700291232, 1.505141505829049, 6.496857441796276, 0.672965341100324, 1.7911782757245271, 0.4816171772770661, 5.255162692169123, 4.2465235991932335, -6.733697606958617, 3.690366460760645, -0.31759432603042304, 4.077788710426955, 4.133264582626337, -0.61435244333612, -0.44443140761168065, 0.23827308366238276, -4.56073786199825, 10.286650945620966, 3.849687239719505, 0.2644363758798174, -1.1993792480051455, 1.5827966445789952, 2.879356105678746, 1.742397389235177, 2.4714606208386236, 4.865696195579178, 1.443199512655533, -0.25334930941617895, 0.3774062996287073, 0.1127457658253126, -1.718815620646342, 2.632537472759738, 2.4481509026392128, -4.2322748336778435, -2.2688121136509527, -3.7157462869769313, -4.317716707112467, 0.33628406938644084, -5.006586150710808, 3.426400784870875, 0.23578803137625748, -6.395677785165075, 2.4511365473844773, 0.3709671521793312, 7.154681897545817, -0.26142342451660916, -3.2623871753159435, 0.4153069416402937, 0.10899981709773576, -3.0903208058622047, 0.7771091290042937, 3.3381964860172753, -0.25383163804183684, 0.36804342560883496, 2.0414348164512224, 0.5913528054013599, -0.16907346027383707, 0.9858015124160631, -4.980936180924575, -1.8818187308826728, 4.562105695290672, 2.7697112007369427, -0.029781934297707036, 4.073722455155617, -2.0716023601797517, 3.337301152491202, 0.8913095857206446, -2.573080587327307, -2.687301015129549, -5.667775426540171, -2.9905265232392475, -2.9073847760474667, -3.244510520249338, -5.199676666823571, 2.7823008312857747, -1.1352991406476627, 4.769794670608263, 0.7418886530980628, 1.096915564930729, -1.4525475793973677, 6.669238393861116, -2.7950308195390634, -2.213217821330569, -0.8473140841703944, 4.656493760716385, -7.537637724289845, -8.010747317171909, 1.027481128056852, 0.6449633008136657, -1.2796111134308061, 9.295617089631927, 0.8759483852045304, -2.648357349117598, -3.1704486169480677, -3.990296314298207, 2.118527537287053, 2.286058391564275, -0.639988151567285, 7.289829927166169, -0.7548981676462647, -1.2268500812705718, -1.1480445959030938, 1.8055175686458202, 2.617520781482104, -1.4400975025591598, -1.62529688061822, 4.307248077481573, 1.2077441275530028, -1.9148147266988782, 6.059125984534697, -6.923706535729105, 5.617556834570515, -4.1743732797411734, 3.430597648087396, -0.9633577587162712, 6.678443759383617, 0.6723441661610425, -2.8022664501400296, -5.431889727219691, -0.7918649151953501, 2.0253180791808383, -2.4127173697043798, -4.144591361723538, 2.054391616271354, 2.1962185544582193, 2.806006915967532, 3.266762395893352, 2.3543460745768696, -1.1235534204739528, -0.0763276324194686, 1.5626033448556202, 3.0255828613807374, 7.702170830010843, 0.32926884786333455, 0.8641908250665973, 7.910627477162077, -0.8341171118772935, 0.9002359672754043, -1.709102677792907, -2.9847194783175803, 6.401957796682949, -4.5879686153058925, -5.66757486317041, -0.40308777944936103, -4.864747220388907, 3.275288973473117, 0.20392475289938883, 6.424158823479307, 7.085848810252392, -1.724927667606394, 2.2413819894424005, 1.7072616761428954, 2.352689343388982, 7.522370091304344, 0.8117263021980599, 2.2809959155999757, -7.617865732819764, 1.2800838149969138, -5.399113432400009, 4.311128750749698, 2.3627631686129558, 2.576247244451899, -5.329608162992934, -4.232341013788844, -0.49210780254775677, 3.4648211704984124, 2.924879404790861, -4.904785984675741, -2.5344433143248315, 6.731491538592485, -0.38449135269367596, 0.9145150195905989, 2.7226772577141354, -2.671560214137833, 1.1247160301924408, 2.1593992573122502, -7.7492577530390605, 0.24671808336924195, 2.694611727115705, 2.127580264018255, -1.6230277030550557, -1.2681517126612853, 0.39786360428725676, 3.147723948850108, 4.053425031892582, 3.216376137791406, 0.0562766558604062, 2.14577570744531, -2.877813640580414, -3.215877992884127, -5.748800278005369, 0.8290349497979084, -0.44333050478545366, 7.334821294806009, 2.6255265196835635, 2.756687180216116, 3.171478148706451, -1.039200790561142, 0.023151842872682682, -1.4390810676938008, -3.446691481516205, -0.31352431207912246, 5.004534826966545, -2.9310139207607104, 4.908437970276307, -1.2550586384495472, -3.380464817936799, 3.0433793636730986, 4.074985000964002, -0.1183856338691438, 2.9241010316642306, 0.04324418096426896, 0.02502567296039837, 0.9942354824615138, -2.0631547881215773, -5.566819051502485, -2.2349612909764955, -5.304020696065378, 4.489822143233871, -4.987332094425437, -0.7695018867521797, 0.27587271982592343, -0.25861002212131545, -5.036301765232973, -4.837111504617833, 2.227906513039726, 4.718858729066525, -1.6494353186902049, -1.0305148998779277, -3.3435845134677677, -5.755781071433942, 2.139182313477916, -5.266231540636986, 3.75398743799923, -2.7150456410909767, -3.5830729331970392, 5.99069417231866, -2.2858957019174153, -3.175494002146951, -4.281767163902218, 3.787172508103791, 2.1004801801471595, -1.8371148144818146, -1.249692911236803, -3.1644178515310957, -3.650005888170063, 1.301764434876811, -0.0369667556026565, 2.1658076939784277, 2.7413627180269717, 2.101549691929758, -5.8141942177243084, 6.193474467233491, 0.5031678311905001, -1.4098407986878665, -4.12642422185254, -5.8903280067820205, -5.323420933073992, 0.23299097681168868, 1.278748268542766, -0.11509645634471899, -3.74411764198138, 2.6462654274822386, -2.468438568071205, 3.8053661379626185, 1.5845973550695902, -0.9825983344878402, 4.266939704156418, 2.295530965135825, 2.4654072568363032, -3.675745760817783, 7.385461899866566, 0.08831813613283335, -1.5421982724753691, -1.248170781657888, 2.111132634123474, 1.4045300371554656, 5.012030284421926, -4.127139392992149, -1.1311391900717631, -1.288473966948421, 1.1141918388028236, 1.0392480212778619, 4.600819591877375, -0.6967379183196443, -2.202810823628872, 1.8828434898161164, -0.65641823789921, 0.5684426715307003, -3.46812442708118, 1.6177882231186693, -1.9267251307566489, 2.2837376999963914, 5.354822212233162, 8.062876202425905, 1.680884213220963, -2.782126889360239, -7.3014049520753765, -4.96921391072693, 0.5693587545462866, 3.586297181158635, -6.47377703576295, 0.8875982583280027, -1.4834908575857166, 5.7971716957607, 6.047414749570032, 4.042424257658718]
BIASES_LIST = [-1.216190441132212, 4.311999196622077, -4.970803602818322, 5.569457182420517, 4.635168319825181, 1.1294869525974311, 3.10861964276806, 1.225264832987147, -5.035455085886394, 1.8052947300942983, 4.341652425386451, -2.631095304890005, -0.7710848050714831, -2.224149864027257, -4.473859302617926, 5.878565775557583, 6.161508155625574, 1.6871900784968714, -4.849199587271183, -1.4206600644484249, -1.7277683561693469, 0.18264523830157797, -1.8028283101172478, -5.642502684156521, 4.631440221855539, 1.6323309536516848, -3.226800084507423, 1.3547126587946385, 2.426019351469768, 3.8973470920247193, -1.2760577136344888, -1.1515577367328147, 4.993689372211894, -2.1227355341584992, 1.042535257353828, 2.456736609241446]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

