import random
import math

WEIGHT_LIST = [0.5615875048875609, 4.906648489048646, -2.3176725468852233, -3.553391081744642, -2.327073495719583, -5.289223943810661, 2.8725832403911573, 1.8255024697479363, 0.8061394003751918, -1.104163178736997, 2.5998409865696894, -0.012881195830459505, -0.9030116220701823, -0.7614127954481937, 0.23045423229822573, 4.935651046756608, 4.681570603753417, -2.9762955661642962, 2.8325148973281293, 1.8257649850938877, -0.3789423780218705, 4.354581480048821, 4.927154417477047, 5.416092170827625, -2.121037933406636, 1.6169308297999005, -2.1871656003125075, -4.356857979613478, -4.911035043815393, 1.3882058571964757, 1.3610521040225418, -1.116183900308987, -3.3989997318392198, 5.263924454475226, 0.9979339837801923, -2.493910651053531, 4.155952974646437, -3.287090309513292, -3.7560980647126936, -1.0329252442940244, 3.831194631724563, -1.8591427759209658, 0.43749891318653145, 0.16016958216157964, -3.2638531030706814, 5.7283775135715596, -7.877943076574602, -1.0395951657361884, -4.615010944065313, 0.8798015405966793, -3.8398479990028678, 0.6717347831542538, -3.576263461867354, 1.8904310297235318, -2.2474163012587027, -1.5874549431632654, -0.4149437248020158, -1.9758998579435416, 4.89272713427331, 9.876128915948886, -2.1962442847968187, -4.4992248367206304, -4.3182212845349275, -3.520841447088963, 0.7247492726782915, 0.2026397003926151, 5.3639018403392065, -2.1949474391780313, 1.228421977796023, -0.6875639431507191, 0.4457216356712417, -10.348322011908246, 0.4905713396092874, -3.700093909906536, 0.04666103859878713, -0.9706075068134664, 3.3889523195783045, -9.801074998771556, -0.07149756846523278, -0.5746522765109868, -2.413278077330097, -1.110715414868336, -3.2495045881353977, -1.2139374117871913, 1.0147685134936546, 4.811595447189004, -1.8426150799191332, 3.9886998615930374, 1.3706806057093464, -0.6899252264053287, 0.9993717763558941, 3.784711372169497, -1.2520950958965986, -1.0632678289398592, -1.5804368030866423, 0.5320121350377015, -1.7529595576598278, -1.1362988939417156, -0.6269044318435406, -3.6892734825119313, 4.114087629694444, -4.823900537679052, -2.323941713893882, -3.6153992515555013, 4.937343848015308, 0.7399964778497928, 2.70176671435863, 2.6810814252276733, 4.967188717741921, 1.8852255080481866, 4.389503305456399, 0.6053321212744811, -0.5277884354972242, -4.314591633284726, 4.460563172607371, -1.708474677340266, 2.556410867945384, -2.7685872815034855, 4.5638096440332125, 0.5687485911332312, 0.6298370387983985, -0.15427811438351713, 3.593250448944285, 2.6190716008323065, 7.007499785493117, 2.442350093240185, -5.364203883898186, -5.634944261868633, 2.550895790872724, 0.062308365460296444, 3.6220622044430657, 3.8480027394865077, 6.503086914788369, -5.740707078571318, -5.190348757909102, -5.165233025908357, 5.251735450427515, 3.511069259554916, 3.570935743162924, 4.5503297293978555, 2.076869338242236, 3.4779097735729554, -5.228645643662242, -1.0557961697679352, -3.6877992541257933, 2.5171976860089775, -3.949617652456561, 2.4839830312708346, 0.46030112107550475, -2.4861596999768643, -0.42712214830725803, -5.123438714713827, -2.4191375510987503, 0.005691762876671617, -4.1576315212397175, -8.685712505574687, -0.2194438664370352, -1.8230162961581646, 5.4583269387115, 3.804863088671319, -0.943972698810549, 3.839512744567945, -4.555862947821219, 4.484056302661846, -1.1237948405952232, 0.3613467480682938, 2.105071962098984, -1.6924894326863669, 3.371695001715829, -2.6084563410026207, -3.456847453408914, -2.4208831435449065, 2.063125793206068, -3.2890314064754205, 1.8328181620962198, 0.1970413945082939, 7.303654236211592, 0.14242253020302464, -1.2373944452212464, -5.371340725132069, -3.2232780124032914, -1.8787448570990675, 2.144696921219425, 3.64779622029199, 5.116440862429132, 1.129387877321708, -2.6305671882130497, -6.109658130570356, -2.508549452961004, -2.134067842699336, 0.07967581554694161, -4.283619481669988, 4.585683147253389, 3.2583868485550935, 1.9122651450053354, -0.4275184469295828, 0.7567385196510186, -0.5212620030553944, 1.693109518087068, 1.7704957573849487, 0.12508046520389926, 0.7039105199501445, 3.0301150676323676, 2.418929398513415, 2.24779020495941, -1.3520730424619762, 1.036031964578987, 10.578005583698681, 0.5795547694983934, -1.1248078861252004, 0.6093835346889308, 0.7486812423357827, -2.9418983585207346, 1.3041186355359626, -0.6510649421407967, -1.75382600006488, -1.6085951377059775, 0.3309937124967903, 1.2996351790597707, -0.754186301408608, -3.924002019934353, 4.082356877215817, -1.579390736702973, -0.950632368453178, 4.2516536285980795, -3.5247571561573134, -5.026847954035983, -3.320870955688419, 0.15702333554158368, 1.7426930438653891, -5.334685443992939, -1.7064777978145984, -4.682373742579978, -1.6463404522002443, 5.274260024571683, 2.4043154398815676, 4.270942923846223, -1.1616830268006995, -3.6213676037677076, -5.93560608512053, -2.5686251163160025, -2.5891439029428227, -3.597941124730325, 4.859672904186716, -2.5985768744892215, 1.2022259031288156, 2.593333115538171, 0.21655476696564627, -0.07741724239872935, 7.119377711814403, -1.5420327583152706, -2.112707712929585, -2.3006838305314044, -4.264343491811566, -4.853733731999171, 1.0153839730584948, -0.4115480282904491, -0.35157518580365077, -5.814805642454236, -2.5186468033141773, -2.730614179742666, -4.580358753612532, -1.8278403049303322, -5.901657886740129, -3.0674251579229828, 2.6859630173606353, -2.3694427871231567, 0.5898752918661155, -3.7592700538341757, -0.5483873941829799, -1.6636568172063753, 0.16260335445191476, -2.895581566936025, -5.613919205821935, 1.5257541025325623, 2.026207918823691, 0.2038543632598565, 0.997805243154856, -0.780185058152301, 0.3624866314943209, 3.942202502827733, -1.0339986194127904, -3.8930110187194282, 3.755586986792682, 6.159988736818797, -0.07993695374118547, -3.3835487505672726, -1.8221213863223416, 2.64022494966131, 1.7009391364064683, -2.9789217973158193, -2.6980638067325655, 2.548142388463514, -3.5662094238449975, -2.2603213509638507, 2.3659937904607142, 8.83121918298744, 5.944213195095346, 1.8039439877553727, 2.048683958065196, 4.560085684177815, -1.8812846665633087, -5.844684113917367, -1.767288689030876, -2.3702278135609536, -6.862463391463062, -2.8859686429395293, 2.297956109205435, 5.069978874321269, -1.4292332121663713, 0.6738004869047745, -3.919128186699905, -3.5962654870200312, 3.260987612970685, 1.8445799819938642, -1.7826612586188881, -5.647339995904309, -2.4020187434366655, 1.2950853136423641, -5.58979150919227, -5.323617817394939, 1.2770455430750793, -6.802363728349056, 6.4061148181467145, 3.4341245422823747, 4.604842769953009, 1.9999594365814963, 0.2798780952660806, -1.2685716521047836, -5.565421782159957, 3.968081631710095, -0.3312442514151866, -7.425920322378415, -0.09983997499691379, -5.02560843581534, -0.5090358595828434, -1.6741606954427108, -3.4526212157579255, 6.515284284069969, -6.784113778987589, -3.238068376657285, 2.662819050439014, 1.4816583566747907, 4.18741618139692, -5.696051620158536, -4.633116920620747, 1.7047156088528936, 4.804319525456612, -4.850007077980078, 4.653208264088819, 3.2508992278567486, -4.024642199020188, -3.40015488091195, 2.3128282384763437, 2.337237691804249, -3.39409666846643, 0.03594203767141696, -0.017191220121883614, 2.821725302584947, 3.2448438128765944, -2.25016845950145, -2.826313609494517, 4.917055660389176, 6.053019952983887, 5.292590044393799, 0.11676581281817255, -5.839956477244134, 4.266943236777842, 2.6111629829956664, 0.8515288277767883, -3.221548481605484, -4.717735811813987, -3.671825103530508, -0.8913916974645913, 0.3450846962148348, 2.0699799876745906, 3.920060604417397, 0.6865203758514531, -5.648831413608807, -5.255815863983867, 0.4248980925049204, 3.4272338155636612, -0.875909672788455, 3.1690364384935847, 0.12186760111573429, -2.8749363326299577, -7.234738224966196, -7.887447124145913, -4.598825209667274, 2.464928105005377, 5.603820097870478, -1.700362824782919, 4.70919853457408, 0.5106088230303939, 1.4419106401944777, -1.2903915358758427, 0.3437841604560859, 1.1816028411383341, 2.261770754475403, -1.497518617800488, 4.294399381471886, 5.561132622518507, 2.7158885886758855, -3.4510084952160915, -1.71798323656443, 4.5383591982579965, 0.7016567457898341, -2.154277122755097, 3.862089755383165, -5.550034964635453, -0.3089475836904517, 0.7846542119691153, 0.901679164259889, -3.2734334988616256, 0.9674239385491729, -5.681483013447297, 4.131273619772269, -1.5813713718660471, -0.7134345262342251, -0.9944116185959093, -7.390264464883847, -1.8378224370201512, 0.756719605994288, 5.225883836921774, -4.343531961099482, -1.1555833556581732, 4.081503013634222, -2.744192690175309, 0.9141444339984424, -1.9413111562081142, 4.394312786557227, 2.7868522435849346, 2.992937365156881, -5.904562391247706, 4.931138625510372, 6.183895694260538, -0.7265964829442306, 0.8056006513051721, 1.5826773364247935, -4.764273225790517, -1.6185667255449838, 0.6518320879760519, 2.0064369629210637, -1.8340501477092992, -0.3737859814787716, -4.323600158777541, 0.7137894499059947, 7.984870243047242, 1.8094115349078561, 2.9338229426643645, 2.4083715896401845, 4.517021601016032, 4.933792734042208, -4.367236038900641, 4.688194534035674, 0.008107270667392807, 3.6309346805029517, 2.5503025158507575, -0.37956096893353825, 2.5198653456757594, -0.41798346517225077, -5.909845143463847, 7.6994830612816605, 3.685080906766931, -2.0457779363657598, 2.069062244531343, 1.497696800974862, 3.1931424772692543, 1.3719960817098154, 3.0500112283377896, 5.179954043659294, 1.6568648092026488, -2.3180083393482187, -0.10703216020187359, 2.4925151635212446, 1.3468241715174503, 1.5754539848915974, 6.8422092534446675, -4.273960837513785, -2.4575920625255403, -1.1976677408245695, -5.08040759453949, 0.5657816546214985, -4.346508354186255, 2.6932435715259233, 0.39736305393726107, -4.410503876943719, -0.8206678737051751, 0.4735048650362861, 6.263920648593124, -3.2822808423047514, -2.884810921453978, -0.6903703525474512, -0.24578934524148793, -4.864421255338674, 1.3648393916199333, 2.6108702481472044, 1.8342713879333516, -0.3753459546556886, 2.7239602330854145, -0.290572022215664, 0.11661769755615434, 1.543704427470227, -4.744974956768274, -1.6575624764438064, 3.609013258092433, 2.8714607813778716, 0.49727810838243874, 4.257548470318997, -3.0584006410955715, 1.825311148300762, 1.0491411613220547, -3.7738722862400773, -1.7916161479955497, -4.908003758976933, -0.9758532351315479, -3.988353253759913, -0.9999408456998533, -5.970747173293981, 0.3036303660571749, -0.04107109835018534, 7.012309559234349, -1.185635045844053, 1.1036554518043256, -4.014863515471977, 6.958345978792104, -4.07595319625374, -4.1254378089526265, 2.04041724703114, 5.106993825223704, -5.499235477463035, -6.406357694839837, 0.9187705631635409, 4.225653886151744, -0.8996657201178623, 8.071596984082765, 2.5207807187140605, -2.303996602061707, -3.3343822555784475, -1.994574334671138, 1.4614096861854078, 1.0657890325456632, 1.4333781167306163, 9.021713581138453, 3.802830526938324, 0.5660346699434136, -1.261556751854253, 1.8075814471217428, 1.5082317053118053, -0.5554213595277732, -0.2852594494124429, 5.983448718566515, -0.1219731962231703, -2.7877843905835227, 5.403890209494087, -7.765622107442564, 5.247573958510113, -3.8819073421409636, 3.3991576703267277, -1.0072175467569744, 7.8099258735505845, 1.8968025156697068, -2.2569997007099403, -2.1793995171777127, 0.03347827079231144, -0.12039076429590662, -2.456666475506517, -4.412903316961697, 2.211799999254718, 3.9603971095093637, 6.045454526214057, 4.877790861224019, 2.2462568812450137, -2.1495836238356514, 0.03171501209626337, 1.8464558206292438, 3.7077633355658985, 8.934835539514618, 0.3974376946577874, 0.22630385714541293, 9.603896845242113, -0.6182385462036334, 0.5332706222820418, -3.192323081350917, -2.5515679745083197, 5.768749442743667, -2.3445614224708327, -5.446735664174104, -0.23819678378000775, -7.362723286757417, 2.4208711478255376, 3.07732604729704, 6.105560456961989, 4.949037057469341, -0.9538488099079963, 3.808097406628241, 2.9166208779619174, 4.114146826576821, 6.7807428706998945, 1.3784371608907549, 2.300015276873821, -4.252953434688266, 2.0155684356593704, -7.7145351367032005, 2.1603237579714016, 1.2642257065236695, 1.2199135613806253, -5.14464013856787, -4.540795411213814, 2.36196673985928, 3.0324864737147106, 4.267933803353625, -9.13868314214622, -2.416788370702074, 7.4433913501018045, -1.3558610017684236, 1.4450714437344008, 5.829317647270745, -3.463865645147226, 3.1616619594895314, -2.0051489953573767, -9.991176031867184, -1.0512043004852978, 1.4725362911404176, 2.900597208533, -0.9068241701956568, -0.6962927256086929, -0.8075425128012599, 2.2748567384118057, 2.49523627730443, 3.221206611601823, 0.2859290657114017, -1.4197311920085809, -4.288924522868554, -3.226408415964385, -3.4264021690867277, -0.7098641351632007, 0.8591133915301821, 4.220170276070873, 1.956819188431467, 3.177270025061438, 3.1089088656427095, -1.4469554975169088, 0.16097452170815316, 0.9606584287031819, -3.0849678760128336, -1.6412977829863769, 3.4775460465550707, -4.019231653468621, 3.3625141817135504, 0.5692756438037457, -3.6921797208798917, 3.4470991163506617, 5.9251497170502665, -0.439067819480214, 3.234037012965775, 0.3813535919013427, 1.8551998222216026, -0.9145894225483984, -0.204233144094185, -5.2595581234645, -3.362356627257702, -3.7110489662487884, 2.3424399797633013, -3.900862027610466, -1.5369291923095756, -1.1405668092314325, -2.063688044014013, -4.904716811617052, -3.8638479477466983, 1.988680199229097, 5.6788435533288, -0.20133581774133125, -1.82753319771527, -1.352146978251563, -4.283370548121039, 2.3479654680065165, -1.554579087530598, 6.687766071836892, -2.679884742929839, -4.746225239302951, 7.887733629461363, -2.048784456519066, -3.2776367437478227, -5.156521604906553, 2.995281114448727, 1.5159495748030576, -3.554644858326605, -1.3614702998023347, -1.5912652631265745, -4.812792726369855, 3.3304540951628248, -1.3062397946200088, 4.378853180855464, 4.627967445765678, 4.294365874043531, -4.910833791922749, 3.647382620137067, 0.23977787530136277, -3.403243349502201, -0.3567858933915549, -4.743490037808071, -3.5436989270402357, -2.0719548358457787, 2.5229802902220144, -3.4082383060707486, -4.68081582510524, 1.4271195756073745, -2.755279408916661, 2.0165159112725255, 0.4747623390051654, 1.6715422696854632, 3.96782654042677, 2.9331514883588112, 2.789402146265957, -5.868846820308854, 6.982960012374335, -1.3667316668960252, -3.465677566629048, -2.845197935683565, 0.14810574923324227, 1.491278319170578, 3.0339886162062224, -3.5921157087951188, -1.058906979008593, -2.7612897293888183, 0.5774032310311641, 2.1889555990222673, 6.12927797367553, -2.7536074741639043, 0.0914965684599778, 1.4801587358330746, -1.2538391251509327, 0.7396658081802816, -5.737957899216928, -0.8318451769812878, -2.383792380252273, 2.3585582844886614, 3.771548679298544, 6.9260113752445625, -0.8654842977017464, -2.233819309742063, -7.981829171366266, -4.325882914046146, 2.993043110992874, 4.222744030858841, -4.416174716320435, -1.7771592786663017, 0.9707230433958483, 7.59944052260421, 3.7627940674668956, 4.875596971846524]
BIASES_LIST = [-1.3838967518768186, 3.710567650267389, -3.616993395389995, 4.794225651936842, 6.335210283977805, 2.775584513322417, 1.1024095120130373, -0.07901457460991779, -1.1066100848692133, 2.655356331719291, 2.127837469106525, -1.3653637109906656, -0.001532740357114812, -2.620678492608375, -5.500506014986251, 5.263721281334487, 4.822818827995417, 1.4774503672466186, -6.565326934101047, 0.021684553144989082, -5.0730741434671, -2.798389983586043, -4.060065967612018, -6.098377595407999, 3.9269484528973124, 2.648929967960154, -4.02918123582805, 2.9125965911395912, -1.078331426480899, 2.303149929416787, -0.34169257217192633, -2.2918285917649777, 7.123111092238123, 1.8505735684797557, -1.6796281831203521, 0.4414109493322678]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

