import random
import math

WEIGHT_LIST = [-8.108227129542854, -2.8198478876114286, 7.453925405734212, -0.9204875206370546, 4.4462756293738215, 2.0220352872791136, 0.35432603775058374, -6.715200509593265, -9.233420698494575, -1.6346695412456214, 0.19571883222146436, -1.8240060868657915, 0.0509137940091815, 1.4516052553958558, 1.3593889019730938, 4.094654196727037, 5.069477824785252, -4.784733767592531, -0.48621422549032967, -0.09314053266723749, 4.029812895011108, -1.3545662383855301, -3.5466445489728327, 5.480071450402325, 1.9013729486528823, 4.209991528564141, 0.16720675347996744, 1.1689439177782102, 1.0842089146603255, 4.20369086980502, 4.439168751793116, 5.408661454728819, 1.2387465808143927, 5.590714364387759, -2.2177210954541082, -7.121562935520287, -4.29696147461256, -5.117823797485131, -3.951003653453539, -1.2740816490980396, 1.7721003803752233, 4.855644452151672, 4.252315541000496, -2.0476483063551094, -1.5957003897699862, 8.687946311153416, -0.4027187054255005, 0.6867565980448807, 3.1823362649846176, -0.4324825105445426, -1.0934765889644678, -6.230352587411069, 1.189651121432186, -4.469156512407943, 0.3418465628993825, -5.469587918202837, 7.974506807325938, 0.7599129861974709, 4.2525410634362295, -0.9464910433180114, 4.9855159558204525, 2.075644455713854, -5.503103754833938, -3.016541254005355, 0.796534901995299, 3.1373977755146294, -1.0225552732827556, -2.0463124788214504, -1.7304218841379282, 6.0757971204739345, -3.3088703909344157, -3.012862515803967, -2.568038643625649, 4.6501559621519135, -1.4561815375831364, -2.5276813221280774, -1.1573840438234633, -0.09245333461832622, -4.61862801303004, 5.689801767621586, -2.803516350292262, 4.730512082794062, 6.354483295285569, 4.010511403337969, -7.123105635513727, -2.186482207255213, -5.4712835275107174, -1.7664396176844506, -0.5873805943641213, 7.6651883929447004, 7.5601596303400855, 3.2788846123229813, 0.8545842235184584, -2.3625632079689254, 2.3921573376349317, -1.8705055627952019, 2.3726242575071748, 1.0815713431545353, 5.887416832615285, 2.9615468386031893, -1.2869310989997096, -6.483885102097232, 6.31099788882157, 5.211923903509769, 4.622633054507107, 1.993905090322246, 2.6954559600430437, 5.285937888776495, -5.344884946420222, 3.802819654191785, -6.676460307558554, -2.525288458693567, 3.4596847556636323, -2.7297194188486205, 5.8786806021329605, -2.2575415118871183, -10.0200196115996, -2.0364217290967384, -4.664502910771987, -2.1698249480181224, 3.756299597170511, 0.573486649502404, 7.136625042887522, 0.6921585444256755, 2.1949620890976638, 0.02684240738356075, -2.932366969203281, -2.992055256345661, 1.1779085445314794, 1.4823331443062846, -4.634951620714787, -9.662267783271728, 1.8214944204303558, 6.0819902897453755, -4.7065781757926555, -2.0206096463257865, 3.7779861914313044, -1.4164247178482468, -3.9586104017591497, -0.12724034056507377, 1.8558028843308105, -2.7884697269329934, -6.93595528505736, 7.152496140499397, 7.821578890346605, -1.000345301528323, -2.5542048139853613, 7.8524865124101835, -2.240053988099728, 2.357456600638063, 1.7713929748889363, -4.1495066601403465, -7.1256157248414285, 1.4374580076921426, 1.2614147744463715, 0.8858017553407818, -3.9362344394757516, -7.51774411255691, -5.731691470247232, -1.5447699601871026, -5.2022777067789345, -3.8635245577763073, -3.155951753032523, -6.07813920197767, -4.601604617726981, 7.162198458170284, 2.5735226318354476, -0.8081317931619527, 0.640624816084105, 0.9471005532357084, 3.2860620182441553, 0.47449182788869154, 1.9321308204305545, -3.4625958262295895, -4.488502012500459, 2.4462547506959864, 1.0973950429533894, -6.672307459276016, -4.781690473677864, 1.931622318686315, -8.173212736039737, 9.265291307468406, 3.5630357458426416, -5.0576908293965435, -4.003013608462536, -0.21337692184511198, 5.1936092417703525, -5.716647803623905, -5.1233432723920505, 6.34625850389007, -5.61825362860054, -5.257191903619004, 4.7869981064385, 2.44124062794499, -5.530104578157943, -5.38079177718769, 7.246421453442314, 4.460317901941358, -0.28773229436579356, 6.875691212858735, -5.625815908520566, -4.572508216430121, 6.5678207274694955, 0.679992560508861, -1.0555169780987654, 2.317664291893332, 3.0007718727221326, -1.1714342554013428, -7.7437828069484995, 7.290141447889047, -7.034018304588332, -1.7986700090652699, 1.26971861647507, 7.409319778058801, 5.986338429303842, 5.923628035050712, -0.20222151176746073, -1.6602878489716004, -2.4615531059782576, 0.7112889905747912, -1.9567479992722037, -2.2267523495906234, 0.06160652289202578, -1.9423033666895888, -4.344041351378168, 6.456520629359647, -1.4293873543411442, -1.7913525529777494, -3.844533542484499, 2.6694015936168722, 2.3278761119537674, 0.4984265465016709, 6.460465851013111, 3.514147715984653, 4.42818282707415, 0.6165608420271689, 5.364041704218674, -6.008734550319399, -2.6318441844330356, -5.0464269222673614, -6.403399919501108, 7.089930353209175, -7.491218301033674, 1.1564509356195491, -0.23842268123520838, -3.0921033250561596, -0.234220764641526, 3.842712075396036, -4.353990271791036, -7.067781829446887, 2.267038518854093, 2.046683458022088, -4.709324427249876, 6.675276281069393, -1.4034200023978023, 2.1700012296353686, -0.8719845966927298, -4.256812807051786, 6.633843102159923, -3.7835670607858387, 5.529986112232724, -4.240301914878355, 3.3436885099738185, -1.249871750400716, -5.363234360836902, 4.407397932304086, -3.116060720563176, 0.34897814469993277, -7.952516714506585, 6.633183400749715, 3.400142187168658, -9.606823262576706, 2.153557390247284, -6.843331946360134, -0.6442118001364627, 0.20361371541272716, 5.805881044975071, -4.508969997855975, -0.8229491058627028, 3.132817023662581, -1.2351679227918484, 3.6564405912313593, -5.5153194852954295, 3.29572836454812, 3.1530994027244854, 1.68538456959864, 2.5953526775658804, -5.9878589313964286, 10.097264823363123, 8.888622010249751, 0.5738771918733958, -3.8422431888451576, 6.2783320189351075, -1.5500330426213238, -0.6049878515971641, -5.9692427831773776, -1.2099420315483675, 0.5396290633043261, 5.317104127921967, 2.717100125760324, -1.425483367327605, 0.06087104810774879, 5.021009032653411, 0.10357195356431831, -1.960592134487253, -6.8725118445150555, 2.579186180132898, -4.433897099417029, 1.24993525040091, 3.6457686896551285, -1.7958141618754104, -2.1531682424567626, -7.6367629445410286, -3.372272159531081, 7.606974863385171, 5.810071506001072, -3.3359778841478196, 4.506855996412942, 1.4671754376859623, 3.0977393204271273, -2.9215474969917707, 2.7905902858760814, -3.7707883187623894, 5.81702154135795, 1.2044740028394072, -0.19809476975667756, 1.1173615811684647, 3.1852361949631263, -7.740184613598053, -0.7257124201962823, -3.420699137123417, -6.854072846966395, -0.5379224600874806, -3.4377349598941374, 2.929931555599718, 5.287853724208091, -1.7459885905833472, -6.508800259471037, 5.435467999872712, 3.3901601543208604, -2.3563753566510037, -5.600908719552222, -4.7350959571714935, -3.911400026474512, -1.5070704075786794, 7.118535109929626, -3.5092120144814984, -8.032594328844228, 2.0628561962679823, 8.615004489727143, 9.153677315297477, -9.160624314053502, -6.486462895347309, 2.8397298111647555, 8.576265237496083, -2.6248574656101997, 2.453770993993712, 7.27802510126898, 6.329422484070567, -1.5717868617452568, 7.500170945386833, -3.9909360635002376, -1.5339488799780954, 1.6003436600777396, -0.9653127216705084, 2.8835777513396805, -5.290888022084479, -5.434687062122427, -1.7783252237130978, 2.1677478923874154, 7.400596307059326, 4.0111994260567325, 0.4649504548351307, 3.965834525666533, 0.11783100526142704, -1.7771345330397494, -4.999085914213266, -0.7597173011879716, -1.6153662725220523, 5.410443729850957, 1.6951001540455806, 2.5387147140075217, 4.096527779955544, 3.7713567523903717, -3.473380298032107, 1.8473829078256165, 6.456961141026848, 3.154286167792958, 0.8194866468660582, 2.330444133548948, 0.1779430597861909, -3.296867490428656, -1.2429944858613713, -3.545030453781997, 1.2607050675378288, 1.456347643385941, -0.13024771401331162, 1.4351450752201647, 3.2400917549939483, -2.531889273333605, -5.661265202369475, 3.4373077268276, -5.637695940599212, 6.126211915761335, 0.03853421919569111, 1.5059998103461671, -3.386197728528879, 0.5122693631421091, 2.0457772776529755, 2.141112788525611, 3.1501513778666466, 2.846780303835983, 3.5211022102825127, 0.25768528201542273, -2.1067386231355494, -2.445240328354373, -2.8003210549037356, 0.27716517483665876, 1.4430120883719035, -0.7845631488954898, 0.6088168824464741, 3.2714720637411125, 3.74691196803794, 1.726706828395145, 1.5420425321255093, -4.291552363669676, 9.104829736758196, -3.610342036168709, 5.547429188716836, 3.869118045612701, -0.5222550202226912, 4.901431650547316, 0.6492578405890357, 3.4092325191542443, 0.39748751030648627, 3.3660756983347278, -1.6071608799101116, -1.5405113086600328, -5.876421437526144, -7.966052408302886, 0.9008662561598755, -3.335629087445492, 1.1501291480742595, 1.3999657383667397, 0.952506209817592, 6.541438042128691, 7.731236064154262, 3.261880061176966, -5.824315352119639, 1.1359986204582389, 5.227097947454414, -3.7121144502762364, 3.298588199849216, 2.443240948624066, 5.762546772982968, -0.6368045642846654, -3.940706762150007, 6.091917888678616, 0.43451270427328853, 3.936736439795872, -2.800306973513202, -3.75821106431363, 0.8736833782988533, 0.9733480627322373, 2.7111887875803093, -4.234889786042114, 5.364408994253728, 5.238125172179715, -3.6457996492254154, -7.7651360937538465, 5.369152479370483, -1.835842285754557, 6.914483195700164, 0.26866098858152504, 1.540600301182014, -9.377269739201921, -3.944816341979297, -0.709336760652424, -1.5058253227440608, -0.947667514713866, -7.098203862011972, -1.1305959300038684, 7.995296258518727, 7.788154861793301, 0.7961031009994359, -1.207530738827503, -1.8057828271131442, 5.798917363988416, -4.373759378343701, -1.926486703929495, 4.739094544907437, 0.5376736797635746, -3.7588434937980115, 4.6037582945908015, 1.2032133617244178, -0.9201161765550916, -1.1175828948523778, 2.127244580879618, 2.5944494885694573, 3.5760097284026817, -3.3316899462257243, -0.9787639067661438, -2.0045655812994663, 7.861636353059066, 3.158140264114294, -3.1731461382512207, 4.936561454908991, -1.4997855849333224, -0.049096070684622684, -1.46424562945354, 2.3714255107744866, 0.12798668053233814, 3.236790760680544, -7.526222230566443, -1.6774697445528, -0.11862552672135522, -3.5898137662875267, -1.5664486754755436, 0.6443244467962259, 2.390973345473727, 3.7640963575082567, 6.572802194354845, 2.408204114873324, -5.269403815347197, -2.575792950767657, -7.507634607328218, 0.0826478621331262, -4.436910313590732, -1.7009819480697823, -2.638284957039026, 3.73525327306306, -3.8543952211660972, -6.570308287309518, -3.120618912590874, -4.308523825542649, -0.27149419380581696, 1.768263020696415, -2.032631916847195, 2.69391458382774, 0.9061418380483666, 6.800419666835681, -1.1654574721955624, 4.051882652901093, -3.636696450575563, -0.504480486159141, 1.3481949093579257, -8.08839340363557, -8.894956053195347, -8.386607860663629, 5.839931135962569, 4.359931369004721, 1.693660819574152, -0.3884922420540197, 0.8429590886400187, -0.08488785846064872, 0.6655616756982479, -2.8185937202041944, 3.605280597210434, 3.964617714998391, 3.088776477406004, -5.519630374820899, 0.2338163597952071, -6.692019587076524, -0.07318478301088072, -0.6020598976422016, -3.1824228309063667, -8.060611888189053, -0.8136120050856877, -3.238743836860819, 2.154478833128901, -5.318183262504318, -0.7409347282387058, 0.9663930416249442, 1.1799271083247491, -7.2159572823217815, 3.8167458518760955, 4.128783150410309, 6.3709306235335585, -5.670159200012892, 1.9690355576815004, -2.1979549626537804, -5.248504580875505, 1.132090225524114, 3.5850972138256902, -1.7500836154445363, -0.08729924039701056, 3.84594091396025, -0.33895107801566343, -1.281678889885964, 4.131306077425994, -4.601931106764809, 1.5569772548011196, -0.9804054951398262, 1.3485003485440465, -4.91190200300504, -3.0434404681672524, 2.3159368491697974, -0.5019779961940459, 1.3075880054576825, 9.013666258507527, -3.745586653271342, -10.344252015360102, 0.5097817443713721, -1.4094953516819468, -1.0595005162106115, 5.258659347621038, -4.4121429657534845, -2.770257019805086, -1.7601463048098698, 1.765644663743636, -3.9053784190001033, -2.6408885161218567]
BIASES_LIST = [3.7765547656072873, 1.8048121270830757, 7.339529375243914, 2.106492335211612, 1.1347215481462603, -4.158162612178388, -6.676754520001459, 2.8653905610937223, 5.332691690423991, -1.4772759784665173, 6.160697119302904, -6.883346954664382, -1.647080404668631, -3.1048865468141695, -0.7811877565053329, -1.3610033390568264, -2.8524287990901596, -1.7124824108715948, 0.2547501597492288, -3.7686945052846816, 6.055159834772606, 3.581399512350802, -4.068771564295593, 0.581967992628589, 5.5283110449287465, -7.9732977134398855, -1.1370410710384078, -5.916252460215671]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

