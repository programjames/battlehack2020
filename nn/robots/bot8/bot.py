import random
import math

WEIGHT_LIST = [1.43138983569394, 3.356250605526305, 0.8803479130952443, -3.6860458605152964, -2.576008041874445, -4.092570468852593, 3.7718684067779638, 0.6948738115733608, 2.1243503614647414, 0.273303659875739, 1.1385886089474568, 1.2451555120586422, 0.02288301601991849, -0.6903685057099533, 0.63563887357366, 1.4127292575034192, 2.5714768367828236, -1.7833258131680447, 1.766792757414906, -0.36095335725723277, -1.0378161627239086, 4.941641603450632, 5.353779067398906, 1.7434154720039432, -2.721501275626271, 1.9986899859168243, -1.6798130286606814, -6.339364752289248, -2.988745317418066, 0.23201469796286434, 0.27864853913514676, 0.2491249659237076, -5.791295528856824, 1.347609799401753, 0.7638152243721041, -2.8802384582902185, 2.9894022530463116, -2.6835689516941166, -3.2018425371425057, -0.8127974885770093, 3.1501628583843857, -3.275801756778748, -0.8248412144617068, 0.533504275525547, -4.89232545457064, 4.983068283287763, -7.345018731016278, 0.7404830238656732, -3.0393174967579326, 1.544902930085025, -3.7403634750932238, -0.7023419896129148, -2.401543512724171, -0.6854959510842265, -4.123235327986189, -1.0121611789818274, 0.9799076639220818, -2.8616848084278734, 5.865194571249105, 7.161526504786048, -0.1735963655171069, -3.540848044756107, -3.902420616756033, -2.331255874910414, 0.5778073876627179, 0.25893902993816087, 5.925164655806148, -0.4344637138011347, 0.9928895484637625, 0.00035071331026248487, -1.6588487062528223, -6.674673141797757, 3.2659394310361822, -5.660119831878392, -1.887434248084216, -1.724036479561428, 4.162237032824664, -8.263607452609769, 1.6779204300094972, 2.082879242034835, -1.9038281929809822, -2.6657100108038527, -0.8217641472900712, -1.2289384664354228, 0.7928170541106163, 3.0689937248074752, -0.6491624783194649, 3.3725112598773093, 2.414279824564182, -0.33577617470311494, 2.886505138877033, 3.7475389022279533, -1.5291332026742797, -3.9326719858181507, -0.130482882832341, -1.333074491523516, -1.657147413487166, 2.769506797205854, -0.6640885005671051, -5.4179014278534625, 8.160689470544147, -4.266711310401101, -0.1614814037265162, -3.6494142998848806, 6.960635083719373, 0.5065512136011305, 1.632876032778109, 3.948176292454278, 3.9851372169632944, -0.2862214654346624, 5.666221348402598, -3.2420271122738855, -0.9293433049863544, -2.5192646677201918, 4.262113251927867, -3.5576359386058276, 3.382005293484969, 0.29329953620798, 4.989028394522148, 0.051694073023599074, -0.4171645929326854, -2.2845153745150903, 3.6159827420660644, -0.9148117301010896, 5.644228421656473, 4.8022608263431685, -4.524905332658416, -6.103907797779171, 3.741858350276269, -0.7639209969006155, 3.1614989785828485, 4.534696588287686, 4.342109759411276, -4.149065813767007, -3.8957876350681193, -5.143690594287255, 1.8341846777968902, 3.0272420856884894, 1.8092513523859228, 2.240131502862779, 0.8855921330685925, 1.9328319480453722, -5.877336738750019, -1.7777351431436488, -3.5288757689980725, 3.1248857977596725, -2.1872422109709926, 2.8582918345207124, 0.21710073640209648, -4.698492718790263, -1.4539300678910838, -3.1852078413699454, -1.44261534486153, -0.44402913537244937, -5.841996744688949, -4.577692357533281, 2.6961162232400406, -0.6410834179087173, 3.6207438497292026, 2.881481142658103, -2.186881167209582, 2.077372741063991, -7.396579517701989, 2.941767430822377, -2.52184719007452, 1.8543749439381019, 1.4882035405731937, -2.587898253497917, -0.1611016568131738, -3.027156899580144, -1.993269422938783, -2.1129345359983995, -0.9568041266147591, -0.8687465380165051, 2.3633240226323426, 2.9202768432095114, 5.231536344012917, 3.362303791592991, -0.7878128275876296, -6.4281165606067425, -4.048159378384643, -3.8141705499849703, 1.6778768194848661, 3.219491843380961, 2.2723179699563287, -0.9713410802878542, -2.6323617609447414, -5.715565908196678, -2.1918734502690826, -0.7484297500998791, 1.5525470878884011, -4.715636368843928, 4.376566480605649, 3.4539569094807847, 2.3783563083841592, -0.0859916987302245, 2.7299231977119254, 2.3384995218011486, 2.9524329412480137, -0.7161109315857167, -2.4985559331056035, -0.9712449034913366, 2.0546812155126153, 0.5944746223364481, -0.557918718699635, 0.9931981997454153, -0.6560347069598712, 5.450100702739847, 2.717037678496126, -0.8578530607774799, 1.867765810771207, 0.5586367807050441, -2.3265617727554133, -1.3553223359761244, -0.9330092091646792, -1.9159537180637722, -1.5673780241930708, -1.5570795706822973, 2.8781719138880995, 0.8191412490314005, -4.447570263801882, 1.0357104753470958, 0.15331511803359277, 2.1760014862051813, 5.707056722228394, -3.7270405662464428, -1.0418534068312957, -1.2569175416026508, -0.5564846722565332, -0.566073566107655, -4.621729263108898, -0.8677871335133349, -5.419843281571355, -1.4979625873816018, 3.773788534345318, 0.9298675844393101, 5.2759822132525045, 1.342430338618609, -2.3258091516244312, -5.634796907977579, -3.5490184864098104, -5.486140858826116, -4.3439512775424145, 5.551877856694138, -0.7410956956246257, 4.113785980695696, 3.550841430616132, -0.8216428350813718, 3.5003385292371654, 7.351732074480266, 1.119582378554255, -4.477098074158409, -1.9666634530717295, -5.16474689364664, -3.033484020516652, 0.4087793026837827, 1.189003358441103, -0.6373118386444471, -3.6669243210080236, -2.4988423025153956, -3.541274062657945, -1.3889488951491902, -2.3828539303030167, -3.0375924667468523, -4.064901858153252, 1.8348030219192948, -1.7446598256623431, 0.38887907062658966, -4.936558509317477, 0.654268982952886, -0.5585529066798212, -0.11621825203841463, -3.2561549697315977, -1.3201048764262382, 2.0582815256879186, 1.671831132635904, -3.3097992116677384, 2.9965905664687638, -1.4508139157508062, 0.30919563043111475, 2.5349435424987456, -0.5912637372116734, -1.9518992277157903, 3.4428095883710874, 4.340933227753563, 1.16739169492066, -1.6748694007837177, -2.1147756459713385, 3.2284297584580948, 0.03293036443177444, -3.8620189942043583, -2.3277208768521094, 3.863687339920711, -2.211545803699787, -1.1621211108747471, -0.11417365593387174, 8.353693194900703, 8.623880701081212, -2.922316682459205, 4.424942419024164, 2.7144237639571163, -1.196932210623479, -1.9712158540936426, -0.8180660025459463, -4.011164301127033, -4.415384455297151, -3.8270948282596775, 1.784780382706948, 5.887377693250054, -1.4985750632172985, -0.5224308492450986, -2.5856368225239743, -3.623732268395269, 4.512667174511015, -0.49837873267917643, -1.051016517256311, -1.6482985774704264, -2.9196354343463926, 2.288768813050069, -4.136090063431912, -2.767941392108318, 2.0718585891684134, -5.8051909051796375, 3.5017820597834923, 4.7543609034428815, 2.243487391970603, 0.47596322005356395, -0.4352558442989123, -1.3377023133229313, -2.832028377470256, 2.358700057908176, -0.2245393722562572, -6.402177568924073, -0.6078295304021282, -4.821169797951751, -0.9654369657661626, -0.8276979405000779, -0.20260552145443111, 6.096350428729505, -5.924446828517278, -1.815036391339402, 5.410300902599341, 0.4113754890542878, 3.658971385951724, -4.17698497608556, -1.95908928121706, 0.8764004438698543, 2.7784995859561263, -2.5117752476352515, 1.9310079944622638, 1.1186979746459427, -3.1240124594252165, -0.6783885348759657, 3.968595171210646, -0.5739327207207615, -2.532285147933092, -0.654090398919015, 0.2203086370567522, 3.3486078274550293, 1.1431427054848635, -1.233685851617268, -3.995938956386676, 3.1460290390924603, 3.3289600119475136, 7.893183715064888, 2.602078115572161, -4.649870076436077, 4.293711655936349, 1.6481618111191527, 0.9897660302423443, -6.163920749910421, -2.850018596480098, -2.5624989034128225, -1.8554355877635837, -1.7110729179893043, 1.6085632743900584, 0.7252040437826688, -0.13526195112713935, -2.1835561371671752, -4.642552836309504, 2.0890000018744095, 2.381753760290211, -2.8196455144402828, 4.606721609250622, 2.7027815026036124, -0.6342523465318126, -4.057282341860384, -4.963609686409629, -6.337518544539329, 1.110658490302932, 2.8466542635432934, -0.49310473501482943, 3.8166899366052, -0.5377893341460129, 2.7789658668938504, -4.295063683224095, 0.9927771269412136, 5.764912737672625, 2.4115153477159286, -0.28668577720450816, 1.544990111104143, 3.6881990003298917, 4.238240204627307, -3.4334220594698195, -1.700100946511736, 3.3540929762096043, 3.4610336684996827, -3.779377382956376, 3.648436051393297, -2.8371392416744134, 0.1925667513762832, -2.9941981026726565, 3.7727521868980176, -1.5916645901132562, -0.32196814723177103, -4.950650904216308, 0.7295461935203333, -1.670725622086441, -2.3119605791132507, -1.6550397834901385, -7.014956112451542, -2.2992033596342765, -0.7457438094335516, 5.598970380464563, 0.1340841645482722, -1.3487561242161146, 3.296090265489294, -3.9363921984652155, -0.555269773925535, -1.089110666338912, 3.9733204604453434, -0.14607940265242336, 6.928877445709648, -5.013614780802904, 6.237847886306644, 5.277628317168339, -0.8831067434688071, 0.38642520574151185, 0.8098073368468601, -6.118327084411943, -1.1303867344385077, 1.103998701626229, 2.326478537955121, 1.4576744142200049, 1.680412286984493, -3.702991386493618, 0.9664433739581799, 5.715224223136777, 0.815415824333277, 4.580497813233444, 1.6093810098676915, 2.4822161820106494, 3.9321890336855843, -4.59010226872591, 5.01412352378995, -0.9938926831709809, 3.236809558964607, 2.117640235152081, -5.043779638680611, 1.7730920909449073, -0.4515645348405818, -3.387569332323122, 10.59348538549147, 3.260742342607533, 0.19814234672264552, -2.356051021204583, 2.1088657530394235, 3.9409123059440514, 2.7908741417775556, 1.0223402649307238, 4.142790284226179, 0.9615091633858666, -0.9678141439892904, 0.7497907424957764, 0.6570401680018061, 1.0086203237400455, 4.328961463708158, 3.2362026579841405, -4.576348783139842, -1.9267529126975422, -3.1915441109446427, -4.507037352010009, 0.6382179063166873, -4.2996206286119, 1.9320414049306374, 0.41474164850306305, -5.450033263368585, -0.6057163457477506, -0.12174408079406007, 3.912098711868035, 1.2620979150165903, -2.7086170148525692, -0.5373844075853956, 1.2931506141719504, -3.5221019086960306, -0.16180072614294783, 3.6423157147883867, -1.447657328453636, 1.6364860609769032, 1.0531306508797629, -0.6027004591609004, -0.5769833980735788, 1.3803401487825115, -1.8437158747346607, -3.7938841293450967, 3.6773584365083867, 2.153958251370244, -1.108000915990681, 3.0544983415453233, -1.4865107659139603, 2.962680241856978, 2.587385694267543, -3.2962240567863557, -3.4670408001121955, -3.7315931183451667, -0.8137266231388258, -4.564259557257843, -1.2001972084329517, -4.777852008924279, 1.7397857357751554, -4.708557340694082, 5.198316371293934, 1.5930424158137777, 0.3099413556084798, -3.998625482818423, 6.360655506071477, -3.2956468181567597, -1.3741212783049603, 0.5002985103414144, 2.68151322384411, -4.617421199872177, -6.548043346138789, 2.1149409445739975, 5.246152277893696, -3.9365483067039087, 5.73618692309623, 0.32493872901291043, -4.5280051140765005, -1.6312121219377231, -3.318434777937548, 1.3642593896739124, 0.27774796082334197, 1.791218260167308, 4.900024636735167, 3.1016106284288734, -0.2695791912478106, -5.21814054734181, 2.786375580200776, 0.5925496261472232, 0.767254638451393, 1.5859783189592576, 2.727031871945827, 1.3221478647416651, -3.9322183616453996, 6.803819316875805, -5.232869687399017, 4.529685486121147, -5.406288939742443, 2.0473403077809214, 0.04070769057844803, 6.62649547402059, 0.7167464114921334, -2.270071267652277, -4.005347004056408, 1.298333292066233, 0.9708884687931316, -2.2506225689098227, -3.160191634521129, 2.276005887059263, 0.40886345613933095, 2.514670917881266, 4.371377073891292, 2.8864216655971724, -0.8684977477354687, 0.7377804765691249, 0.6930377737502109, 2.555819025666734, 5.059544442424107, 0.40677525006974413, -0.2745758480795897, 9.208641195436385, -1.1756888662069354, 0.3990870169210088, -1.538022592984154, -1.480492804472883, 7.038733005430723, -2.5426711635593646, -3.7317387342274033, -0.6268894186128262, -6.751184414311409, 3.4823392095546097, 3.211061729901836, 4.310154815754906, 3.495036819641518, -3.767785419696972, 0.20262451867054532, 0.28430142836722405, 0.41038564439715786, 8.280332688535426, 2.6511117875706773, 2.9105580474209862, -6.322775743589, 0.11470775849288439, -6.024749860142553, 1.666839987820829, 1.7876967132769215, 0.7829751769385633, -5.324748841250935, -5.488842024285711, -0.2944339675302694, 3.473420732627292, 0.580867451252872, -6.0495686107369595, -1.9155350358762062, 5.184542215335486, -0.32544302540275805, 1.041886042120459, 3.4202353827200103, -2.477982660095064, -0.39737391875192074, 0.12348157762244782, -9.342116587471534, -0.1355251850895698, 1.0612481684203336, 2.2288987213710154, -1.9012799979894648, -0.5929968650919718, -1.189224591928445, 1.2445140802073564, 2.643508933938251, 3.898475073947669, -0.7230168556280538, 0.755248938442481, -0.375041742171747, -3.8497066702331946, -4.226793588800259, 1.617167508694052, 1.8364146971074247, 3.0515415378818034, 4.182559017073071, 3.5070579272471596, 1.206035135605866, -2.5770282301816634, 1.5262256009804904, -1.392277036074716, -4.353630931836808, -1.451410468869399, 6.084002738109663, -2.519147014130197, 4.005348541008507, -0.9009232610705249, -4.911248847278066, 1.0421846168255584, 3.404431517601348, -2.573177884570239, 2.367046008880643, 0.8378324732100306, 0.7115575461382244, -1.642808043839036, -2.19087997355916, -3.0752772983099774, -2.036368255392691, -3.9711274132886727, 5.247107753775048, -3.794649140168646, -2.5315531874559767, -0.19769813367354794, -1.5202349506537216, -4.285293514655601, -2.487841832445919, 2.994815363759289, 4.515119340710544, -1.825849309282391, -2.806810269194343, -0.742909751213386, -4.148663509267223, 2.7165726762735534, -5.0148476945266545, 3.3234070158397824, -2.8435623879196985, -5.221531774389856, 6.074381057677709, -2.330560855326146, -1.5590329197176647, -7.352375588520051, 2.3144488384409403, 3.4237188403285552, -2.5223183583594397, -2.0092529451096652, -2.9529524602857773, -3.5382039466710635, 1.5829729283002694, -1.3279383778072944, 2.8538273695418908, 3.272348488713728, 3.480734994258354, -2.2097664109989417, 5.2849840695702035, -0.012335699595520833, -2.1783568961291317, -2.328822247375145, -6.229383936474262, -2.7028991427862223, 1.3511007862278421, 1.9231670054386885, 2.0232699939626126, -5.154867001037432, 2.53796318687984, -1.15591314267889, 5.692794584115875, 0.8139220921083847, 0.5092568858506783, 4.0047098768239575, 2.514713253100248, 0.35270167871157776, -2.2372327659612186, 8.677238001747574, -1.7272734357415271, -2.199525021672044, 0.4947822439147913, 0.007765296443022152, 1.9138870272031365, 2.9979159246074447, -3.2900290045986136, -2.19854054680908, -2.1621972281835085, -0.09268936320661914, -1.78036296207753, 3.3302015195261525, -0.9216943209564311, -2.19406577867285, 1.3580820278305108, -3.786733031655547, 1.6378128946020656, -2.7374110514544476, 2.8804355208472527, -2.182564392213983, 2.7141906479447444, 4.209742666177833, 7.153021125905491, 1.6806119674770148, -2.740570805709046, -6.886862891524478, -3.993777336561939, 2.727805222524494, 3.82566974742043, -5.391260967037769, -0.11975085532692864, 1.4662926978552666, 5.251804276370617, 4.257341368598054, 4.159605333425658]
BIASES_LIST = [-3.5360478429131366, 3.2308718687450853, -4.817328723496876, 5.585780587089846, 8.245391410376754, 1.5502288315626522, 2.0219796169781787, 0.4857227571527074, -1.9996907597297258, 2.021684107467876, 3.2083690236990874, 0.3785943915148531, -0.10581726927361967, -4.074297439096615, -4.757010912116452, 4.867444115018178, 4.816646122147144, 1.651784853882261, -7.861217170162022, 1.0483261399830148, -3.7455625192493853, -0.6657946511954373, -2.406392146794791, -2.775214048955185, 4.078625040280106, 1.8633226416700932, -1.7289278800846815, -0.7666086820945331, 2.173079632723322, 0.8620543795226037, -0.6940205814941198, 2.037973162922964, 2.6952748024715216, -1.0612036811761978, -0.34603636673900473, 3.2197408156719494]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

