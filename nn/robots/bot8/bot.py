import random
import math

WEIGHT_LIST = [-0.7731008754486149, 2.905408235562847, -0.6387140291835686, -3.137017487104843, -2.8484930609989316, -4.7142838627359245, 4.4569459497261175, 2.481206898354497, 3.8919739699343774, -0.5843753125511512, 2.7439788164771244, -0.22493776529120568, -1.3827983976428349, -1.2908376438237976, 0.18313906421856818, 3.3366215891381144, 3.3474345284687193, -3.213573364191416, 1.7506816605185054, 1.013923929602322, -2.1795515734474176, 5.540227106851448, 5.2134821147761015, 3.2709388224064986, -1.115985078563343, 2.1212550575009175, -2.5046124726882466, -3.9756541605313394, -2.1935348383593327, -1.5559989465450403, 0.7779544854026517, -1.2765947760496403, -5.059364536950241, 0.8395855624598572, 1.2857383129637947, -2.4799897765083516, 2.3450865549933777, -4.474609095893831, -4.376539432413145, -1.9826432031036794, 3.3028861342613522, -3.781565518286469, -0.2983060736125638, -0.47800402077756954, -4.617279756719466, 5.836292430752248, -7.122071624184492, 1.0537918131487052, -1.5514654227334925, 0.7136342974806136, -4.743652540663405, 0.5101279276953852, -1.7448391839199997, 0.14421078061167947, -3.9095296564878463, -1.3605273141572825, 0.2609726235424734, -3.3597413135887333, 6.3404198854924445, 6.256079971182239, -1.2843224039597652, -4.6526050765999285, -4.0654062684909595, -1.8718208493131883, 2.0776095496745377, 0.6684868958423587, 4.627195944348424, -1.5254591840403036, 2.4920232975291317, 1.1545951359074715, -0.6313662481881115, -8.116455997386451, 3.171934974047093, -6.070043940758521, -2.112296710786244, -1.493993680190488, 3.1246577745180213, -8.74968861895654, 1.3118489626489334, 0.9983774448101919, -2.769569694500868, -0.5528987163556647, -0.48730656282010787, -1.2880441063554235, 0.03819643808138573, 4.308597096720852, -2.0662405519841887, 3.6215388251165006, 2.1848567310616436, -0.5759893498822626, 3.212686861173135, 2.043692683177717, -3.8198545647513438, -2.537315580103256, -0.9485961549165745, -1.0772841942941869, -0.4721729708004698, 3.0429995058439987, -2.2241493083563366, -4.671100840146432, 7.5629221289223825, -4.5945270326055985, -0.8180571767053022, -3.5139923673771065, 6.763444414776091, 1.3194589390971037, 1.5465073372444698, 3.8944411118043387, 3.054291419386442, -0.514671268154109, 6.849199172989296, -2.525431743193681, -0.1487216502258778, -4.012423082731004, 4.15106712791168, -3.9909122422834873, 3.8197180028912623, 0.2531072021145384, 4.703828313618201, 0.9195887009049253, 1.8175182295001981, -1.8639782556777786, 4.1985679212880065, -0.6535149741107937, 6.7299620448573325, 4.945782688475733, -5.48162241561325, -5.529188819030871, 3.570824110998423, -1.169355209181217, 2.999956277863742, 2.783399697646344, 3.710367027694062, -2.9391617587362813, -3.3084594926023296, -4.724518388450574, 1.1320767739832234, 2.4151272153235737, 2.1569403985735884, 2.417150138197747, 2.215734818722609, 2.0676985244245882, -6.108213779390652, -1.9170833421879327, -4.194839940737385, 3.873228326833182, -2.7752571873890277, 2.4300724010076142, -0.4333461348728781, -5.663747016477339, -1.135237255396773, -4.090306734635864, -1.8801395190376673, 0.31436855700468325, -6.781623995978899, -6.496109732589529, 3.0008805568418175, -0.20782682427454902, 3.9001277433409474, 2.719066578965936, -1.732248428263473, 2.6577621611295967, -7.946400155849153, 2.441553237201682, -2.287527801807255, -0.17199459254908522, 2.5209544155402224, -3.590593055531846, 0.3976160889454645, -3.9503645653909145, -2.599801810356103, -1.559809193144015, -0.24981615248963385, -1.1184209947291956, 2.8924279492047074, 3.0594709733962553, 6.875124478314643, 1.8636400301536478, 0.842592664968365, -7.166478440671166, -3.3351009944611185, -2.9624350768906167, 0.5656407835973774, 2.1156663238670372, 2.5808808222711273, 0.10553570759385811, -2.375210211293041, -5.763604904999674, -3.6516230280557602, -2.084627468018174, 1.004847894105433, -3.602280466013382, 4.168386461756627, 2.980297703941851, 2.3481573758928684, 0.3491505251091678, 3.1741916710380407, 3.3651924905622757, 2.550191524820316, -1.0689688221343703, -2.0121001143123545, -1.3762843572328176, 3.0078831191884294, 0.621415080378084, -0.04364464731930329, 1.5499096680918014, -0.2775053445371709, 6.591624049647108, 0.33256420890212857, -2.191748665998179, 1.4954371337595065, 0.16691809546265723, -1.596943540734125, -1.3901949018552076, 0.483210273905782, -0.9253753719889928, -0.8440364115720658, -1.6068031059198105, 3.1593277243317806, 0.5758614860241322, -3.2325770679253285, 1.702141204105187, 1.104853988098235, 2.4896420617427477, 5.562965069342211, -3.4091634002702573, -2.583958826219211, -1.923006415813001, -1.3041347370947303, 0.7251708790531404, -4.442553045524018, -0.22936520757211998, -4.110290660185852, -1.7076835924202038, 2.9461256688789064, 1.0924171509609657, 4.844855025354923, 0.863736558281609, -2.000427266776445, -6.257320053258193, -3.6872250815737364, -6.0678655458337, -4.58500332080961, 4.0810851889561865, -1.2118979760864708, 3.304503255194742, 0.8541054012964362, 0.014087387936758011, 3.3782787772664555, 7.879159949719517, 0.2896352665377393, -2.2731888116072945, -3.3649108786838617, -4.354684216267559, -3.417964947819093, 1.7314634156952917, 1.4044126525929537, -1.2323212921939424, -3.038078072819122, -2.235576977155855, -3.8282636259449756, -1.9695439122232992, -2.6994800891628725, -4.940470806987637, -3.6996116590827848, 1.3078007646519358, -0.6946814198970566, -0.08963947149188056, -6.371539695406123, 0.19710922084780957, -1.6725439131621431, 0.2583307565178219, -3.2691652348235754, -2.099464653123779, 2.394249042223252, 1.0916911168855359, -2.3116823809261984, 1.6645219584977387, -2.862475490937763, -0.6622006442859969, 3.0589899077071543, -1.5690201273428148, -2.448936898673624, 4.307747343096164, 6.092210292883739, 1.723232902653808, -2.2128757300876876, -0.10625562061317484, 3.2240295766213203, 0.7853518863289413, -2.590275542122089, -1.0475113479012101, 2.892488224324377, -3.0118962810894825, -0.8457438603728493, -0.450290048032604, 9.162144529055324, 7.489028308348473, -2.402887219798493, 4.570082700823147, 1.6217400889703324, -0.19482577336865026, -2.2060909239808675, -2.903567020049874, -4.358014268617652, -4.93215978447394, -4.312002295356154, 1.9289078698051494, 5.345820309334155, -0.5983617168902733, -0.22340613412771937, -4.259376662175238, -3.7911698534368092, 3.4696360591741753, -0.9406196630783514, -1.8398558167470564, -3.535095510174962, -3.4742250979772047, 1.6525768527500846, -4.442180743037458, -3.5772190742321053, 1.043947933966404, -6.41309997676868, 5.110946506068092, 3.5229945810064667, 3.0976751356384487, -1.463218223045715, 1.593742427245136, -0.855240813405775, -3.47677914105953, 2.146592992007302, 1.0976475049247196, -6.985394726882773, -1.1271813771964534, -2.720017516078541, -1.3032202785126759, -1.0650044788442572, 0.8275061070761116, 6.016085059540215, -5.358689185894702, -1.5141117829928854, 5.4577000654520695, 1.2582522107627776, 4.526558594192963, -3.965284329435937, -3.494369841400089, 2.6685228805207823, 1.5617030054834427, -2.3835186266439994, 2.556240549059776, 1.5353083074587284, -3.0779201750224985, -0.493929385024507, 1.7730565779199141, 0.6684933855817485, -2.3756940401057047, -1.1607541433259212, 0.6903943727805402, 2.2582017372495153, 1.659894938882588, -1.6058090671065723, -3.5220462142940034, 4.262072651902619, 4.567445147252531, 8.921111014753636, 1.3090653954484748, -4.645547039498638, 3.6572957894411324, 2.3458936581740044, 2.0462334474275883, -6.052566733766956, -3.7280429813164724, -3.891898546804862, -2.1959454138897456, -2.425087175435645, 3.120074564109604, 1.6966964246938767, 0.6479673485993005, -3.190300021031895, -4.400690633383647, 2.212139316782869, 3.6934715697476426, -0.9760388053051556, 3.7911755020777376, 2.108979788639771, -0.30615798875094336, -5.2513609583388465, -4.656376610918064, -5.901894886510482, 2.36558205191557, 3.208377689829911, 0.11583516282368755, 3.325937709683598, -0.35332517738816227, 2.3828373999441608, -4.272066024776128, 1.9050053576120245, 4.810157815484452, 1.7692128130821203, 0.08607913280393964, 0.8149080435546274, 3.8037391065945423, 4.082097408492681, -1.9146176658997007, -0.6558890425603978, 3.0444349878195016, 2.841841196607652, -3.6321503243442788, 3.969341722122657, -4.599865604058381, -0.6846678097144935, -3.2187178276726627, 3.560182287891929, -3.142702355385675, -0.006941252324511704, -4.513735431646236, 1.8282490140629228, -0.8906209026154266, -1.895454562364982, -1.4967623730323463, -5.838353295232778, -2.428633320534276, -0.389515760753014, 5.474636821097767, -2.9112924956566077, -1.3109619056062525, 3.2051411939664547, -2.5697558976789474, -1.5178209336076713, -1.2867904175661191, 4.140796955913967, -0.13692221386942216, 6.490431171289261, -5.69478996813651, 5.546650896485775, 5.017013533475776, -0.5006080508043373, 1.8011124217127632, 1.0538146247968307, -5.97084163255848, -1.2436325171805436, 0.7816469625882214, 1.1729725072872297, 0.42582240594594833, 0.38635431279148036, -4.62775952993521, 1.205059564900175, 4.885335129731848, 1.2208133316707523, 2.881626579035146, 1.617722642952042, 3.0387798438572124, 4.545335740615775, -4.851725665797188, 4.484460991180908, -1.621244461150626, 4.209022921572617, 2.308179207203921, -4.359121215739818, 1.1575885313572023, -1.5351933146063812, -2.579119551681484, 9.268001140714638, 2.1694893585664072, 0.534941320515748, -2.357517360251071, 2.9511692277866617, 4.7154724766174265, 1.9294111284818811, 2.0596714926441866, 3.669175453661433, 1.2243599608066593, -0.9518438233935724, 0.4066491880922931, 0.6640023066936682, 1.2743965788054772, 4.54106724847205, 4.5597017531697395, -3.702492922650758, -1.8540699147495412, -2.1762467806858807, -3.766970257030649, 0.549564172216652, -4.627058240985444, 2.390401220662456, 0.10775219537896819, -5.888151293517378, -0.9377059740336386, 1.212426488088349, 5.040931769850667, -0.8270750933671046, -1.5508375257942963, 0.02417777180596614, 0.636830378131301, -2.406423824715588, 1.4262260704570755, 3.8552704703974126, -0.32675894518069304, 1.4038260710588535, 2.434328471147065, 0.5478039434334516, 0.09073600303265872, -0.6519950551519456, -2.120827030813408, -3.774197362851658, 4.0865501351859725, 2.926545489594731, 0.5322602153618723, 2.4719263387427723, -1.1974658646713747, 4.30688579460435, 2.260146715542114, -2.52014305293176, -2.554291394474765, -5.0905475942937, -2.322793826932063, -3.538520523742074, -1.49746294881606, -5.4253664409048685, 0.09569369912460157, -2.8325459499023826, 6.058561316356065, 1.4169923836230334, 0.7300386133617862, -2.756720543813426, 5.2012104077859265, -3.120264443492501, -1.157388728456666, 0.4353923199563634, 2.3645470879868116, -6.393557030651125, -7.258118930148177, 1.2744829023961106, 3.9281693306444225, -2.1256526801622413, 6.9069861411645395, 0.40686690031138495, -4.207637842721634, -3.236014998977746, -4.120786591087636, 0.7934726734644284, 0.3255024977759231, 1.1184932168833996, 5.678605527868918, 1.573116928122686, -1.9731948821040999, -4.584643663364117, 2.544647246405905, 1.008195302309133, -1.1203070835618822, 0.7842353545331362, 2.2803195430327974, 0.2676510775872676, -3.1292110239961652, 7.450104766626485, -5.832164786444486, 5.067799792839671, -4.046200376651726, 2.14080439877287, -0.33848467264362625, 6.6057393259088055, 1.780456074419578, -2.580486462586263, -4.618344012420133, 1.2989022662679157, 0.6047768407616525, -1.3963445812005284, -4.547161418569977, 3.60840684583608, 0.05487781279143955, 3.8856849640647955, 3.17828116303353, 3.219986734246163, -1.2548581837455373, -0.2845402311687625, 1.2344527328615098, 3.660445452702451, 5.847480572342026, -0.8938963845383872, -0.17024462718674505, 8.66364155217384, -1.052352006892332, 0.5656813360999058, -0.9875539385405654, -3.231570153119668, 6.537204273023189, -2.592759631080942, -4.95530189069769, -2.39171426305402, -7.276583410351519, 3.570133834142756, 2.441029002673755, 4.704061036491023, 6.0123034398204425, -2.9337818174059827, 0.20132344888025178, 0.4780145633023096, 1.4467972330761683, 7.771105216025839, 2.021021137333376, 2.233444486109509, -5.774661852343189, 1.5596728145153045, -6.313860133857524, 3.4525236509436663, 1.337292036453913, 1.3342777135578814, -5.651172336699224, -5.4389704330828845, -0.11533302396927092, 4.238548235430134, 2.5378674323200796, -5.73029808296724, -2.3725905018518754, 4.627943315286762, -0.4820817186387003, 1.666151290910756, 3.3126219341963035, -3.6120831996704865, 0.923490678432243, 0.7396022550415946, -9.300291825355611, 0.9653405288971819, 0.814204259650569, 2.3380638785717887, -2.003148135848624, 0.35154043850905836, -0.3279550612782459, 1.1972259833240253, 2.790196478183454, 3.34524698273923, -1.192305839659026, 1.4827706004143453, -0.9275711909591997, -4.094535901068134, -5.741168107056027, 0.8474475189878661, 0.14546197215405998, 5.582263685518254, 3.4621760434667763, 1.8974245693675327, 2.2349034021281806, -2.5052286421540693, 0.17065479227746994, -1.1663621578201888, -3.706930102143861, -0.387386105040322, 5.384119959160938, -3.1924531617895324, 3.914816815571905, -0.9598413429127974, -5.417191084202395, 2.2345908070166507, 3.6305513358491535, -1.7683020570770631, 2.126227968561742, 1.3936464437527558, 0.5899910273162818, -1.121601772819801, 0.0611448879091685, -4.19689137447174, -3.150431486585508, -4.026958159653917, 5.314918462556779, -4.90884279592675, -1.6097024798167827, -1.6243474827511981, -1.5426735657284263, -3.578323881421969, -3.4656882818008494, 2.6413026063849188, 3.8594926164564773, -1.163314290189264, -1.593701190509658, -2.2473747678703107, -5.759904313120168, 3.832234087447164, -4.392102309584869, 3.105820497578449, -1.1654178839732448, -4.663346225549533, 5.978195800745133, -2.7603575610727855, -1.837425885088347, -7.679080222948957, 2.8230491630381427, 3.442448280410529, -2.4943527444151226, -1.853959780615443, -3.5013755098899835, -3.324637212243213, 1.874466345423091, 0.49547297013229485, 2.758403469184446, 2.4805294262098174, 1.7456577525019243, -3.147324467360808, 5.345010673110207, -0.5090280858586502, -2.708776115950439, -1.125994482871417, -5.337382103365455, -2.284421328720984, -0.38052513677636224, 2.2394345184286193, 0.7142744181067044, -3.6889334843730164, 2.9614296435302956, -0.9357522495212613, 5.987549898984636, 0.887617110578756, 0.2212708402314978, 2.4517580565284383, 2.776743016567737, 1.9950213713655849, -3.5996442947830394, 6.553212807483403, -1.2588195700560194, -1.942360268145942, 0.9209497604759849, 1.7832265346158493, 1.7036150612659235, 3.291057375525684, -2.413813914744143, -1.928113680819725, -2.287838144678861, 0.8597192014114259, -0.10629980705315778, 4.9180621429761375, -0.03931695890890241, -2.5887992240007365, 2.5056952479113397, -3.084085913249134, 1.8461013817358554, -4.343917855804785, 2.411650115752775, -0.7964812149522653, 2.1562032540558116, 5.286805735307547, 8.136216217968204, 1.173350139200254, -2.0880180238103305, -5.71645329230107, -4.779101747825264, 2.0818488123201773, 3.9004357545861277, -6.725021855360796, -0.3442732174434243, -0.05750548238001141, 5.430154565185857, 5.065123997695913, 3.4190066747285366]
BIASES_LIST = [-2.5823350152155236, 4.0413509751745496, -3.3349195904231146, 4.755145301084996, 8.171799806573578, 0.9681266014134902, 3.5373078644892306, -0.18129205902165457, -2.874576769105998, 2.26841495337011, 1.9404419678888938, -0.49285313922719665, 1.198531028904672, -4.144276965402114, -5.92480709704929, 5.268016572280197, 4.70290582210849, 2.430581155146013, -6.33884907804172, 1.0871213716907802, -4.319492896247461, -1.2875958886836507, -3.290090679024276, -4.307878594400172, 4.903301089367732, 2.0206826431747196, -2.0854080598102005, 0.31418116233013005, 2.9828482758934918, 2.4873106223770094, -1.1843475475022571, 1.7705348401272607, 3.4415720944155552, -2.364281133273276, -0.4693196819482848, 2.916841238681016]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

