import random
import math

WEIGHT_LIST = [0.5647506679784882, 4.907227254613859, -2.3309203363708666, -3.5495777167539306, -2.316260273019128, -5.291333093677209, 2.8735008961874784, 1.8379205230263111, 0.8070319407417024, -1.097293428034863, 2.5915887947337626, -0.01434203656945009, -0.9059371231550082, -0.7516210864683514, 0.24348373878244559, 4.931360457792062, 4.679418925708579, -2.97353973181008, 2.837823200533393, 1.8248603194161321, -0.3785313021534499, 4.355888023188481, 4.917008059790498, 5.413596605659844, -2.1143079390105077, 1.6018375011393382, -2.195464489120783, -4.365795187772955, -4.905061629248268, 1.3898529670456279, 1.3525319968434102, -1.1245318928434067, -3.392324504335024, 5.257298824703334, 0.990513926274496, -2.4931473752610898, 4.156616152856224, -3.27882005287039, -3.7568976041479827, -1.0361045001496072, 3.8267709335439886, -1.8692831649487207, 0.4231719361695054, 0.1735602691109451, -3.2736509217006624, 5.729526845374213, -7.8772643095660575, -1.040993995576142, -4.608645840002089, 0.8719535027851206, -3.843417579617125, 0.6754921545396616, -3.5853072984865406, 1.8828547605294632, -2.251856472069749, -1.5982522925836475, -0.4119098447758738, -1.9807761550433112, 4.90348832536623, 9.865962438089847, -2.18326393035356, -4.50113633257997, -4.300272304320638, -3.529573438065423, 0.737187601040368, 0.20397796495529297, 5.353996621908564, -2.20407693463088, 1.228866270621451, -0.6810011886966736, 0.4520262013388926, -10.350507683813255, 0.49145321933586084, -3.686395697557268, 0.04699189988145237, -0.975794739250388, 3.3849890865154224, -9.79796784327715, -0.08171071611557686, -0.5740169923657363, -2.4133641204020315, -1.1149992485428586, -3.2567071889711876, -1.208150117783034, 1.0153378493735261, 4.7995077296355015, -1.8288627049326178, 3.990687454172682, 1.3717558416922935, -0.6796604178266795, 0.9971015563371703, 3.7809969698852868, -1.2393454361767053, -1.0666876806546033, -1.5773544930220185, 0.542877883729323, -1.7553334735149047, -1.1326881311881984, -0.6192341518100034, -3.6976798149801535, 4.124369862291959, -4.823198342442933, -2.345177198773729, -3.6064879745736174, 4.9502263503740815, 0.7429081171335019, 2.7074027931476463, 2.6873432504339765, 4.958489423170382, 1.875511945948612, 4.388419976387171, 0.6078938363679975, -0.5301407193956803, -4.323411308195308, 4.462370419812109, -1.7181784319737319, 2.5465096988854588, -2.7632518580683243, 4.566284631868905, 0.5686940462809196, 0.6251185637896088, -0.16238205395129401, 3.5954699033385418, 2.622021172922683, 7.01125177065987, 2.439471121574307, -5.364287929123051, -5.630809265821529, 2.5597079901197946, 0.054699043276932986, 3.629534509961836, 3.8521587376515782, 6.504264539835961, -5.732379804924058, -5.201928590280782, -5.1470723447637745, 5.252934086321788, 3.5057532283295907, 3.562736678387803, 4.551339090022159, 2.0666061304429406, 3.4802760460077016, -5.230814704102455, -1.0457186014974376, -3.67630030058429, 2.523600384036213, -3.932657035792422, 2.4896923928591703, 0.4612218313763312, -2.4846140083750754, -0.42627433743933557, -5.11252656114386, -2.4271711136388587, -0.009497503126218184, -4.146019768376537, -8.683163084729122, -0.22523955226989897, -1.817913647882815, 5.4546171908639, 3.8020788874979163, -0.945445174456155, 3.837558364688714, -4.554462346311836, 4.478796400229111, -1.1220234104830706, 0.3712635795871273, 2.111751214275526, -1.6932140264549607, 3.365910203945343, -2.5966901932941724, -3.4603079444322393, -2.4229327835016763, 2.058191430627904, -3.281204230114033, 1.8286527164790525, 0.19997436249145947, 7.308957919320323, 0.13771775652050652, -1.238185214921008, -5.38455912528788, -3.2083256033224674, -1.8830341916448325, 2.158481833941567, 3.650187119317932, 5.11361037820745, 1.135850540687086, -2.621859348801228, -6.099177891261737, -2.5068260708577195, -2.1440794533877248, 0.07263807398086748, -4.283957995830124, 4.565882262385089, 3.2452195036263105, 1.9189963827314525, -0.4335350750505238, 0.7643979120764458, -0.5235805376780864, 1.6751727595812154, 1.7635862541634801, 0.11747733798244006, 0.714433336263101, 3.0369334748312427, 2.4210784092265225, 2.244555877084982, -1.3369360801368453, 1.035740611555621, 10.577828080828937, 0.5833268632678794, -1.131468388703985, 0.6099583265068992, 0.7581435961429849, -2.953544792731836, 1.3082127313695373, -0.6681993246655638, -1.765627442378232, -1.607174004529272, 0.33754589414628444, 1.2986146551822348, -0.7578813922168594, -3.9327678403380695, 4.075096242618912, -1.576625666525077, -0.9471165354920844, 4.257284189287382, -3.5217186979627217, -5.0333303895576575, -3.318235917811427, 0.14903790607259368, 1.7474218918859188, -5.335170693893653, -1.698919300257579, -4.689838255286066, -1.6336005910949156, 5.271155158733114, 2.4043433537272785, 4.266530661879527, -1.168257020249531, -3.622792961241594, -5.943144799872757, -2.572305589546094, -2.597925812049648, -3.597136775819856, 4.852404450446827, -2.593577710639842, 1.2208502001016432, 2.592248669044911, 0.2177711311287046, -0.09293400934822182, 7.131729837333696, -1.5383286656626503, -2.1103462240431705, -2.2925482622545585, -4.271307555059363, -4.861898402371382, 1.0139405584492556, -0.41659979134285613, -0.362135428341276, -5.8128758683786135, -2.4997203083109176, -2.722239150498765, -4.566804232501385, -1.8249772859069213, -5.899745275101067, -3.066142175862547, 2.7020533379879663, -2.3629365987029125, 0.5960525071373667, -3.7557321643194403, -0.5552218177558564, -1.6634816823622582, 0.16679080574828337, -2.8938042442799543, -5.616745888252391, 1.523757614393625, 2.0272698234272606, 0.20350580226556053, 0.9944702798305098, -0.7830530221493534, 0.3713550298932361, 3.948236622480147, -1.0379420065518152, -3.9042578404989277, 3.7355234965885615, 6.162084348193475, -0.08804218398614137, -3.381250757840881, -1.82105020167337, 2.634735753718978, 1.6988484598244262, -2.9721968247557076, -2.695197540866643, 2.543213141807971, -3.567727155261999, -2.260960142670428, 2.3639723246810593, 8.8305913394167, 5.946971536451934, 1.8043212714033052, 2.050212787388534, 4.569716890066393, -1.8764901152474276, -5.8551496039021185, -1.7716234034392364, -2.3797124066245074, -6.870507400523171, -2.8825576333379113, 2.2902901159170415, 5.062123576839918, -1.4200534177606163, 0.6694458441454777, -3.930299601167882, -3.596300811067192, 3.269388038084806, 1.861127416620891, -1.7834387389839614, -5.646127896916184, -2.4164709677840746, 1.2923261479988721, -5.602406034528301, -5.31508440683924, 1.2690575530568577, -6.7968137617970275, 6.39575330054368, 3.440665927996502, 4.603301608101987, 1.9798334117826377, 0.27454277203738936, -1.2693085748494197, -5.550788952340388, 3.9463559940227255, -0.3387583343831162, -7.43998640052528, -0.10793090536493669, -5.032402729011798, -0.5071714789570333, -1.6804162604547126, -3.4647631278296958, 6.511174127787613, -6.789208029370549, -3.230957453676008, 2.6672207390344886, 1.478993127297705, 4.183416503678278, -5.71029304093654, -4.632628332234748, 1.7132971634174954, 4.800308264004205, -4.838868927271119, 4.658388701528206, 3.254237984942194, -4.020659008407782, -3.403283043722319, 2.3117873362555663, 2.34484664896124, -3.395942605225559, 0.03704649476567747, -0.020906111766877934, 2.809402077177427, 3.243165198812051, -2.2477984077789515, -2.811362223617741, 4.9270812160321364, 6.0473576675946425, 5.289584387771586, 0.12258327000179611, -5.829979381822029, 4.2549127794588255, 2.604461366018317, 0.8604681041337542, -3.2143393945236083, -4.705173821374314, -3.6637942578349922, -0.8889267002193468, 0.3358654335710543, 2.0681306043477896, 3.929962754476551, 0.6791003716033727, -5.642439046035808, -5.252853210783058, 0.4200799700483756, 3.423144824707347, -0.8751844807303419, 3.148016665075885, 0.1296160760093633, -2.8655478497155946, -7.237731728499615, -7.878131103933824, -4.600756041484578, 2.4613127022208725, 5.606790322406916, -1.697913393455844, 4.712311443799365, 0.501670608349015, 1.4397793860574934, -1.2933088436837186, 0.3413349248749652, 1.1884315699164223, 2.257007037825887, -1.5072776790905182, 4.290829932740299, 5.541489001135569, 2.7200147310686895, -3.460170156671493, -1.7204265152701304, 4.552833949042048, 0.7068458359119404, -2.1471202499247304, 3.8592588681948254, -5.554606699542828, -0.29720456480964813, 0.7936441182996162, 0.9065346917934688, -3.2786472436855756, 0.9721032153472505, -5.682793034645866, 4.146192975485626, -1.5722273077039353, -0.7113764459339011, -0.9991943733524551, -7.396243920785784, -1.8444772447929723, 0.7595687264733103, 5.230558810015951, -4.336205671901558, -1.140989264827107, 4.084069342688451, -2.7375401142372637, 0.9123518538606956, -1.925807640459403, 4.385483497597136, 2.775739323042866, 2.993185545553265, -5.900277165094301, 4.928904502982481, 6.179129138616799, -0.728850092685325, 0.8008659601900866, 1.5874849747673263, -4.771793386283152, -1.6057767051753014, 0.6653693181265996, 2.0159832065257133, -1.8218081549170628, -0.37272690404478703, -4.326056352586159, 0.7165324696360269, 7.980262131593748, 1.8120931393772433, 2.927419367330704, 2.4023379833968206, 4.5055959579194855, 4.939965493026865, -4.355804851197875, 4.689707227212713, 0.005028491129955558, 3.631365029327165, 2.5554663781290654, -0.3806346125017865, 2.5141660419114817, -0.42353991683755954, -5.922223253124901, 7.707559877729606, 3.685919877255732, -2.0306642466302347, 2.077385358391968, 1.4928561189188656, 3.1958440571227134, 1.3687948222067805, 3.051854330944504, 5.18538582809937, 1.654654480083104, -2.3237840483043453, -0.10553681093678871, 2.491190184876018, 1.347144979793083, 1.5818057992667922, 6.856635954623348, -4.267706188698889, -2.463867393880641, -1.187562134463554, -5.081108531936541, 0.5618348478168187, -4.350082980482292, 2.692454711645576, 0.4131246630932226, -4.410427097500737, -0.8135344010735925, 0.48209524061992326, 6.264022414631666, -3.2825688178320913, -2.878655380071347, -0.6923631373373879, -0.22887103610707296, -4.863995396689422, 1.3647094187223094, 2.6071934397727987, 1.8399731848856624, -0.3738347957407096, 2.7221245224056885, -0.2972442811242057, 0.11982261910109351, 1.5434925747786532, -4.751994770440014, -1.657545333023939, 3.6183095211181566, 2.8710217585385798, 0.49915278736792007, 4.25774150366901, -3.057618248930487, 1.8221843315461315, 1.0505741456573336, -3.7753335644665804, -1.7852265151486635, -4.907611086917568, -0.9762480818287117, -3.9939216790580567, -1.0019396779744267, -5.969973640294468, 0.299164033879561, -0.04969501121742229, 7.011871388294543, -1.188851977114927, 1.1070707460566134, -4.031525442951495, 6.946583747795069, -4.073832471848982, -4.132472012165335, 2.042638216622603, 5.099252063384771, -5.502846441927268, -6.404961916276344, 0.9209975731038583, 4.218989872778273, -0.8986779539845235, 8.083604570411214, 2.5177688039503443, -2.3028560560156923, -3.3355619782477905, -1.9891994766511507, 1.4631168290272119, 1.0762065757317474, 1.446389648923535, 9.025647615525353, 3.8029063521849866, 0.5519325003956561, -1.2541395723281337, 1.8007632679143644, 1.5090550590655807, -0.5430787196150496, -0.28827713345611866, 5.978282059801789, -0.12881737035486807, -2.7885062684157966, 5.405871632438341, -7.760452255192464, 5.254982165555587, -3.883054925580918, 3.407851961099493, -1.0038077181140086, 7.807684540713299, 1.8963492580587002, -2.244594174076342, -2.1747979770270516, 0.04238669154518808, -0.12217267663098336, -2.463387120758025, -4.412513842222528, 2.2118316171384764, 3.9566469816754117, 6.043772362257799, 4.8791884300279325, 2.2462127635111, -2.160999347619301, 0.0237160377734581, 1.8338431286644823, 3.694172034774, 8.940239559342347, 0.4024522602934033, 0.24196083631636678, 9.607752840643586, -0.6135748643398313, 0.533973078034464, -3.1894847787783083, -2.548679609039723, 5.762555967749209, -2.3465422664339446, -5.449691165360394, -0.24265722738789142, -7.36482067111384, 2.4163522112859583, 3.096521352731879, 6.113713635106979, 4.958080374524676, -0.9394152444433341, 3.7994224178852196, 2.9172550621554665, 4.100581193041507, 6.785573208659294, 1.3810915366201872, 2.302719810277995, -4.244609187325543, 2.0218764447524293, -7.730608027937259, 2.1537882300298046, 1.2741402605684744, 1.2311702283744124, -5.131589929986214, -4.54332517441403, 2.372932770352623, 3.0260534496923457, 4.278749235744728, -9.146167318826697, -2.4252833452053144, 7.440510440555644, -1.3618501682205815, 1.4338060405686663, 5.817802951086074, -3.45609847938839, 3.1793844312833475, -2.0125623622634565, -9.983628818987333, -1.0636338788236237, 1.4734920090022694, 2.900521687914969, -0.9167266083019019, -0.7112679388075762, -0.8143855630483539, 2.279994967905544, 2.4828438428860595, 3.2214468865707993, 0.27701532567930737, -1.4189667911832695, -4.294159889853015, -3.2236145951592947, -3.4156397675627277, -0.7179380108232625, 0.8654481123423904, 4.2170845022850365, 1.9485649462544303, 3.173862027243325, 3.1200759938021547, -1.4441779279997384, 0.16151335477276793, 0.9679525138322107, -3.0824725110288917, -1.6347430048318352, 3.480022324206688, -4.01744205381133, 3.363301011057737, 0.576192575333519, -3.6916817570328107, 3.4345001935610204, 5.9183701578865815, -0.4394847750818029, 3.2380693747801237, 0.375263418680153, 1.8570415807077574, -0.9114121734400503, -0.20265577249772848, -5.266100395561341, -3.3588286911085925, -3.707751728148913, 2.356193532671091, -3.899950790232644, -1.5403687872851612, -1.148736653001257, -2.0688498196607057, -4.910509496716687, -3.8777401256676858, 1.9749701903062626, 5.680028199652516, -0.19366090082095658, -1.8255102240578476, -1.3708158428737969, -4.280238301901943, 2.344602137427802, -1.5599976390725567, 6.682077716436204, -2.683284889711162, -4.749105999104156, 7.881277800008758, -2.0400007491440313, -3.2790476099527894, -5.172535967032187, 3.0048096019179007, 1.5202569200264933, -3.5653463775079164, -1.3629871553277717, -1.5954330660974894, -4.808881177236204, 3.3410109306094387, -1.3088253450062255, 4.378065530457447, 4.626946818684736, 4.29562843993969, -4.910704443842513, 3.6436805305990894, 0.24690694449784517, -3.4076991080465944, -0.35318648161918687, -4.732901783513904, -3.530659419392935, -2.068718883257976, 2.5047381467208956, -3.4135590535274165, -4.6742764801989605, 1.4264658029840747, -2.751539157676915, 2.002414703829261, 0.46214913136987196, 1.6610390621832551, 3.9657154640599526, 2.921485604339051, 2.784407577434091, -5.863499773156383, 6.987850784730633, -1.3605654198920365, -3.4760665349646636, -2.8536193455289407, 0.14022201376512067, 1.4836569325108315, 3.0320414384531964, -3.5975970256098635, -1.0655426907334615, -2.755429806587393, 0.5808538375443252, 2.1830216126343793, 6.118375802351023, -2.761425214278342, 0.09648892565369499, 1.4619710627622164, -1.2399836363826742, 0.7273765074375126, -5.731477618510628, -0.8337074830694596, -2.3771384264423028, 2.3636803353680786, 3.7639187700143606, 6.920966379154587, -0.8695941948028907, -2.226829991272834, -7.983224172741602, -4.311766662525662, 3.0033211765974266, 4.222539788391054, -4.419661784465248, -1.770257422773069, 0.9631690767791605, 7.596829764671177, 3.7474314007663487, 4.872964593949704]
BIASES_LIST = [-1.3847743019525347, 3.70585947226006, -3.6047899406687756, 4.788714756759715, 6.340560440328007, 2.7713517987707226, 1.109815284310989, -0.08448795525648288, -1.1183880819537562, 2.6583006745278266, 2.132832387441069, -1.3596706687235085, -0.008017147850264757, -2.632055825344386, -5.505826423656847, 5.262248777896577, 4.826004860116549, 1.477403750601024, -6.5722171736579895, 0.01473283691206439, -5.068684499128538, -2.8118989034671906, -4.0722913310835125, -6.086022654633063, 3.9225312089383193, 2.6438718844434885, -4.02741995974613, 2.9184452424620297, -1.071512699310945, 2.2931637275513346, -0.3441617319861982, -2.2957204315923754, 7.121905201545057, 1.8420806231316031, -1.6859422437948264, 0.4547126195638185]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

