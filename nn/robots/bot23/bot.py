import random
import math

WEIGHT_LIST = [-2.6452936004654504, -2.5427860538160405, 1.9598541570720225, -6.354892005956715, -0.06145244864521571, -6.741983046646833, 1.3549868095018054, -1.2940902604731284, 3.2195666474228277, -3.140668898084014, 3.6692132004333864, -2.501887479385295, -2.7070710728429335, -2.4629787906797045, -3.101150199074426, 6.687852955191025, 4.488533344274147, -4.245072316282208, 5.004548985420333, -4.522186832414643, -5.289374401358373, 3.2562790062001046, 2.0118048262381976, -0.6625488118326397, -4.8802046825154815, 4.648413163250583, 0.5127310350657224, -5.8482500439451455, -4.158216987419044, -3.4056384416110586, -0.9363720798724702, -1.6784045514590435, 1.2182203036310448, 1.1570731131583871, -2.390495756559314, -2.304841920627662, 4.14288489938988, -1.008326359744112, 1.7099591041875253, 3.6101900029071983, -1.034638394562325, -2.385276585379475, 3.4394842438313917, 2.014006095839272, -4.257490461214541, -1.4551366253381133, -4.91271524533759, -0.20082556863728818, -2.695737168686988, 5.2102700588191135, 0.38074468913706716, -1.6074765232330186, -6.2402510552044435, 0.7137370072865075, 1.4180260016863282, 4.235090393234583, -1.5881136910028617, -5.955389194272293, -1.4764965497152513, 8.120850024208613, -4.879947234969293, -1.3603804971861497, 2.890816307863684, -3.4206250175702966, 2.474439031232012, 1.684696019504576, 5.37129514152954, -1.9242805682228765, 1.5807869853408683, -0.7922735031609243, 5.2911916464421775, -3.014260186266611, -0.2823775266058326, -0.3766136341316413, 1.7446609146597085, 0.4540955116574661, 3.294655483782707, -5.598581636845584, -3.0982699235909883, 0.37628726017333913, -0.39536513944232843, -4.115651040752729, -4.3378372032845744, -4.38109689389962, 1.7295276569636404, -3.408338148469806, 4.370868402939649, 4.6695333503767165, 0.35542297084234686, 1.271002521954502, 4.603713251969006, 2.815852088002285, -6.496266549999433, 1.8023853908383458, 2.059562149977867, 3.015411649713389, 0.6090997619398804, 3.2978057289230485, -1.1311011414040981, -6.115969309447267, 1.2939701569199746, -5.450219588285562, -0.5195828915826983, -1.8671561715695952, 7.278227627632404, 1.4529247551759834, 1.1968082131825337, 2.682600196649636, 4.329794564447771, -2.1109250286999277, 4.697551418596824, 0.6079931047120368, -3.1257520703772235, -3.4101583743236565, 3.6855339961199958, 0.235764090924949, -0.9874524513943765, 0.7426239378174082, 5.47264749598707, 2.557322019107819, 2.35011246059715, 3.0236456268032343, -2.379861829561057, 3.4875630209316846, 2.322307651363256, 0.43545363430345674, -2.7140918431599683, 0.6409960660908944, 2.5839765899506393, 1.047406152880951, 2.5445064543606932, 1.5126898467307237, -2.7157800617989416, -0.3590315706831242, 0.06905102540201535, -3.5569066147699884, 6.199750354696679, 2.6128895786265023, 2.3986228360584483, 0.4655293142805508, 1.2318468452273268, -3.9749006764763974, -2.541094098633941, -2.6965383623747474, -7.350697627230079, -2.0019274815231607, -0.19210646066721826, 2.1225410840804635, 4.65135172443177, -2.417621013635383, 2.4100527624860617, -0.7220840072933272, 4.269921142206195, 3.637784451665734, -0.4091335709574655, -0.13212551441603182, -3.4993240938879007, -2.4855844853554925, -0.2672887141587139, 5.686055046072362, -0.12609208067994992, -0.998682146400443, 0.8836089090803112, 0.05468238888120225, 0.3963777461778544, -1.3311648112374221, 0.8649462105030066, 1.0227575894837333, 4.515307490353928, -1.9951238353030767, 0.390593635688385, -3.7232120879374615, -0.5457380487048002, -2.6474926537630665, 0.8072116981645514, 4.883502524723694, 3.2286887740024666, 4.748658742101251, 2.5954326503852005, -1.442945426060583, 2.565432317104662, 0.804515994948257, -0.1284558227734225, 4.917605205409851, 4.665171758115623, 0.06139857977320218, -2.875340367319285, -1.313789103154296, -2.0028420840762626, -1.7244815112873524, -0.44771637767434425, 2.7502505048407895, 5.456474197657897, -0.19949309783842306, 1.4929367497501058, -1.9372761091761086, 0.4254732865874933, -1.791499147343787, 2.1251480336645927, 2.1650037835995226, -4.458469244374902, -4.602111373301202, -4.554004570727584, -3.060323801510313, -4.753001395005766, 0.7494427565263573, -1.3068838311569635, 6.748157626477077, -1.7945433860023472, 2.266518808696327, -3.8134950256673275, -4.346458333638003, -2.535304217659995, 0.12668936350791427, 2.504079053556147, 3.404261441575615, 2.7086314414628907, 3.4037381245368605, -0.3974367375529033, -2.795293211941215, -1.6258218087928358, 2.060646990433961, 2.4109742296917474, 0.022840078948386022, -0.28477763469924344, -3.559889576259877, 0.3519158908366531, 0.4334404439914459, -1.9087648403385737, -2.4140208835079218, 2.0380738769828053, -3.721765932422048, 1.3107013647678363, 1.4603552503483028, 4.1304482405714085, -3.1208271666980556, 1.1826224641473475, -4.905694918027987, 0.238536917832461, -4.656022379446671, -4.9646995192869685, -7.4821397495093755, -6.725002516594293, 7.390334230873794, 0.9642037333007742, 3.3740535578316395, 3.797938678145517, -5.220406958407915, -0.6694284807985258, 7.52675580490904, -2.1513439606673304, -0.33266234684872087, 0.23873782555222767, -7.0178708305939725, -4.166779001817783, -0.3658245269822995, 1.8750638059854956, -2.072580823223058, -6.546673826586222, 0.8976309108209806, 1.5917262776097099, 2.890492414851021, 0.16490626970529632, 1.654129676313259, -6.3117276054244, -2.147158337714779, -2.703992789403961, -3.8815147700437747, -4.4621115962129965, -2.3448502539769107, 3.8919740323722865, 2.7148602548684875, -1.4971113628169428, -6.287351879677152, 4.507289058009075, -2.6307085316508867, -5.091717067423601, 3.928238997989217, 0.3685123641801078, 2.4122288452111236, 2.964966694999038, 1.453597997089644, 3.470010117404268, 4.708540359519993, 5.8913309811455985, 3.492438911670366, 2.4172365838852405, -1.9100779037242486, 1.7262293460288616, 3.0427823801725253, -1.5420688340911681, -4.653536324367531, -0.6698777550116688, -1.3439351970203928, -1.1320142704805922, -3.998354452536022, 2.5881629943944837, 9.483995815837984, -3.121404666644763, 6.20750759234244, -2.2642253722804515, -2.6613338236918525, -1.750260568304111, 1.009194913027165, -2.589801261166558, -1.4763063124363291, 0.5087780987690114, 1.048265124658342, 6.747060013603087, -0.9214743511574286, 2.8539418236840266, -2.8778849667866835, 2.312729635678917, -2.9329236908859118, -2.6312770998544837, 3.2694568703973985, -4.30680361908807, -3.529169149686593, 1.1912781148872504, 0.3293511909220368, -2.2744076910629136, 3.2297033663114876, -0.17951849826939692, 5.610794033302734, -0.8553239913185542, 0.2354073293746617, 2.548276495481563, 4.304101940054899, -1.607008021977243, -5.039385686486073, -0.8750738279110419, 2.850255480119001, -1.9800497199509284, 3.5280198293410665, -5.7739411464896495, 0.6006954273983292, 1.141041171923535, -1.218929617488313, -0.7513488581657581, 2.3216313043007224, -0.01439891870392962, -0.7345694351998819, 2.777759381363225, -0.8677080097300729, 1.6812200753630098, 3.7077361409896064, 4.105632745632216, -1.1429087031349987, 1.6784075558014298, 0.8959273454925347, -0.653138930045188, -1.1401774517373167, -1.0685406324296467, -2.1877961359860567, 2.7351123087691604, -4.633802467443584, 0.925621287803785, -0.09367928220270383, 3.552871436503688, 3.5822055544480573, 2.5138427428252488, -0.43559041150072897, 4.238234056219062, 3.484657270628457, 7.349646876839655, 5.134068529360985, 1.182248434216361, 0.9681567798020774, -2.766158881872038, 4.991294399393633, -0.3553103592868685, -5.67149353487592, -4.391963289634259, -3.318984187877078, -1.142275169272256, -0.4403832866027433, 0.7862295649243853, 2.097554673038333, -3.542376850690972, -5.3809347514492964, 2.7447748386169493, -0.9685262160422361, 1.4774409573475848, 4.1440119120983505, 1.8662311851350482, 1.0054485865321467, 0.42580638313331676, -4.2612667041956005, -5.029441932323804, 0.5550284087758321, -1.6518607692991614, -2.440320770147367, 3.4665185602497814, -1.0130449580894554, -2.6043413184603867, 0.4315859967579767, -1.6227848124607693, -2.4981003435854023, -2.915301980315072, 1.633132771803767, -3.8893638152625893, 0.16860596652056903, 2.3954309404070013, -4.433261554271051, 3.3412265566429493, 1.599944376395948, 2.2317105430152857, -6.9159444376557575, 5.665453643026353, 3.3551372351190833, 3.0109901424102183, -6.030650946907776, -1.7765967688958086, -2.2527177979448596, -3.0686108020345504, -5.023238322112267, 2.6864389602407606, -0.5223995746394374, -4.799467318127102, 1.9727993764857903, -2.65630851577774, -6.324910999189973, -4.203777507846892, -1.7547069051156605, -3.005802664408099, 0.3397996308048903, -3.398580875861586, -3.413375161539582, 4.72654848884104, 3.522760505762996, -2.029805057361452, 2.619377997195631, 2.5312408991669795, -5.559634887994945, -0.8931683822201322, 2.9888464382851616, 2.0682876772774383, 2.047409622936043, -1.5292180245656677, -2.714635658294859, 2.241945659274927, -1.9916646642474862, 2.6523157844181258, -1.9496146843669804, -1.6713950439788843, -2.014588688706535, -2.2121169829681895, -1.5281932699455003, 6.084157731151399, -2.7759683409167795, -0.35487595863224297, 2.3977437638536507, 4.243662792422025, -5.209977115369774, 5.875734649379545, -0.2971748634765047, 5.414360592787085, -0.2793959533562729, -3.493611782935177, -0.5280309504448921, -2.048913054718537, -1.2645104401981777, 5.822304064704326, -3.3648410101348314, -1.126339499023828, 1.7173366272140749, 1.867892675448216, 4.051180683304552, 5.261200476235679, -0.45525955761641146, 2.2454484371086774, -1.5225987011683524, 1.9828809263363452, 2.3386429173179324, -2.3861286317212658, -0.6119484494395064, 3.972217314427989, 3.4323551273759296, -1.7582775817861886, -1.8582585947245256, -3.2797313326630144, -0.09521028370469842, 0.4809172228734797, -4.91081697520375, 0.5748051349128789, -1.16233543339077, -6.839076531235217, 0.6250751220029649, -1.0679533933057668, 2.870731709927397, 4.054044432706584, 2.1427135660721555, -3.2836961785457848, -3.8519087581518017, -2.4445917277886786, -1.1049822825428377, -2.777794859477558, 2.3907390229286882, 4.49261782753488, -3.421270128796394, 1.9563897710138196, -0.46051030989205244, 4.682812327836402, -5.3848940855614815, 1.582874181223426, 6.698552654475857, 3.5247245932498226, -0.38033341315435565, 2.4441933636256126, -3.7911617759976384, -4.007595018958403, -3.983959245495267, 0.7636999049006439, 1.1420025697374605, -5.587113011234873, -3.7773262082124175, -2.1361995200572608, 0.4460203245831358, 2.784820999702176, -0.2813751334876238, -0.11864414826801717, -0.060300266801522895, 5.691364032487169, -2.1854670805044702, 1.4554455533664572, -1.328982769725378, -1.4642012096950099, -1.3544808314276255, 3.8070699661903076, -1.6571150199475935, -2.454908052495287, -5.208537138387605, -4.669917622238901, 1.732319965608148, 0.2856825058614265, 4.240368461173399, -0.13251363158306728, -3.2840230885783495, -3.6419316844123304, 1.713028521242391, 3.2455331593950616, -2.6232788163605267, 1.462855606262666, -0.4130638002067777, 2.570244023545235, 2.950723436858307, -5.266372891745176, 2.920333660120331, -2.964428119225091, -1.8752844573668734, -3.694285978521364, 1.122112218639888, -2.7826721702459762, -6.241783111123135, -0.39318097081837244, -2.81798031347809, 6.227971960876593, -5.283915492858634, 0.5024524703371478, 2.352758860426452, -0.39485809683885176, -2.1003534655847487, -2.264724007778584, -3.9676860597477113, 3.5194958852960365, 1.941653501691249, 1.5062239618913784, -2.227671952156249, 1.0077644653994158, 3.124743549009354, -0.7291476592991513, 0.564995421398655, 3.1632612053770846, 4.621870717106246, 4.876216519694376, -4.503819879663207, 5.56570775325377, 4.357066991988171, -3.7758306986001866, -2.268696950414788, 5.782184812831478, 0.45999929190253397, 0.06909871534965695, -3.3107029676536808, 2.124974502890982, 1.5762133567679895, -6.154660423485266, -5.486734473386702, -1.32609278893574, -4.788641682345596, 6.091310503994032, -3.1845225889085045, 4.6131473989596685, 0.02548143169443806, 0.050885164465177324, -0.0040028949796233615, -1.4383581102412302, -3.8108236201701025, 5.556274089507266, -3.8154935291209995, 4.919725270226568, 0.9088275472588114, 4.795447753698659, -4.696588503941464, 0.9120130816377552, -0.21820463419681357, -1.297633588256047, -2.7180968572849933, 0.8475235279502509, -0.6174045330381176, -3.27145783640907, -1.221417895897268, -6.023454168567714, -3.534984547428286, -1.230767417286952, -3.4458954869569247, -2.2759703797563473, 3.610372801824594, 0.4750289152782974, -1.0452008212362713, -1.0768224398973785, -8.766621893161371, 4.72896130664792, -2.026979233465093, -2.742350424902596, 4.881500373705983, -3.5809626199681848, -5.126303283127499, 1.269597411178915, 2.4448359427148603, 4.025051845583287, -2.9661834665005493, -2.6808493797321464, 3.034208681773505, -1.4584750735622427, -1.4568775675085126, 2.55868017762043, 5.672540644475948, 3.838788594112926, 4.964423858900109, -0.07944414952800938, -1.6978035347539124, -3.9022085794830854, -2.407448770160692, -1.0788358183152102, -2.89781612156854, -2.5028619872145605, 0.29557520650445546, -1.501017628345785, 4.270601250503236, 2.7123042838091838, 1.7234754022513386, 1.9677744449813148, 2.016562618801898, 0.23954766098430746, -1.4391969407027474, -4.286238780103168, -3.543738046132476, -1.8110340558575182, 0.8818334895297208, 0.49539196141171504, -6.066649571168537, -6.28371431542744, 0.5685901708994141, 0.09120796451179758, 3.8291833511048248, -0.9646738478062968, 2.8297870043524034, -3.6405990712150116, 0.110257116553939, 4.883091359629594, -2.000689429916136, -2.756848341214158, -0.9574137357774246, 0.30434533209000514, -6.708855804532613, -2.5169380345734895, 2.083451185725136, 3.8221597383187635, 1.6027022551521966, -1.179399500784562, 2.5749856604797774, 2.5973757931491335, 4.409750979181826, -8.95292740895703, 5.541580307181647, 6.342201891532614, 0.7909094711219344, 3.6371489465182103, -3.192028699413723, -0.292989623415187, 2.677110385966574, -1.5708594077877458, -1.9353066455548835, -0.11600330297733019, 2.190172725381033, -1.1102018309245554, -0.4627301070763723, -1.355029181985929, -3.2708879637092605, -1.8194196793367994, 1.0341969036936378, -6.401259597133231, -2.5261673856583897, -1.1028991190468107, -3.8105637034386373, -5.830612478728937, 5.6294841575933425, 1.9372366006547912, 1.3494802521403986, 4.93364274069602, -0.7049555235225382, 3.0526304503633375, 0.7859370667062839, 1.9164769546239304, -4.255035952955256, 3.276216116189481, 0.5732124599788029, 1.5432993997914881, 5.190698612950943, 1.2047792520596707, -1.992396086711367, -2.9125286118231313, 3.269011579505259, 1.886116563569014, 4.235819382898019, -2.0441232489917063, -1.631660041256307, 3.131895165616619, -2.1199076141971576, 2.408523285064974, -4.687785968559379, -3.4551532030879177, 0.27477042390857, -2.211589411145736, 1.995179917116097, 1.5430802878318275, 6.109084962096086, 4.199559035921997, 6.465184214024803, 0.4020712537835438, -3.4521269727092525, 1.1973468343622153, -5.237058134501188, 4.189103542974518, 1.9227374360097933, -1.3131569036820945, -4.183481520987145, 0.040304155400813446, 0.3384928934833977, 1.4510526878374206, -2.2155072644946774]
BIASES_LIST = [0.0025360841104571374, 6.505293855955217, -1.5078028577825977, -1.457990075508663, 6.494240192124771, 0.273604258633368, 3.1554381832124383, -1.352450146292256, -0.6167361144689085, -2.017696198616153, 1.0533501769451656, 0.7109208390730375, 1.909436721692873, 0.6108237214677881, -2.181765944560918, 5.169346386140846, 4.255199522377532, -0.1250203338683913, -6.296795630345968, -5.442574519209236, -0.9644148779743604, -1.1683086932241808, 2.6985296941098404, -5.538176060986004, 2.1126797830733333, -1.667099019840529, 3.3740306511747393, -3.3850109783184648, 2.833654023111547, 0.2952167171926332, -5.326005969026012, -2.7761947115739742, 6.273308749273243, 0.7536751723258617, -2.8372735015328505, 4.254239648808214]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

