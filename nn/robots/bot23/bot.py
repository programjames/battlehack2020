import random
import math

WEIGHT_LIST = [-8.243476818465114, -2.414350156785863, 7.311779578903831, -0.9520519956893365, 4.524756432589797, 2.317825971414443, 0.42031446260424404, -7.027487866832167, -9.26737541898836, -1.2002172280904149, -0.10774187700500229, -1.836569493666679, -0.23635671712164583, 1.5702385889299495, 1.564237515749781, 3.9106026257434556, 5.145130232571655, -4.540996361235708, -0.728045829933835, -0.2993123983130896, 4.269828388709711, -1.133775868096397, -3.3993752959656125, 5.597261993359176, 1.292141494665442, 4.800275477490316, 0.6998172637910776, 1.4349887612051586, 1.0343028900029694, 4.337960436171674, 4.292947227985387, 5.5581325106499015, 0.7257726275941419, 5.702783663309807, -2.602331029944894, -7.3472593943047615, -4.069887735297909, -4.7478143232115055, -3.615263522752695, -1.307827012932949, 1.6650631012920303, 4.456929489668361, 4.522516380392102, -2.054691263555086, -1.4378247876221244, 8.837500358384563, -0.40305704502538464, 1.437300467337802, 2.851038088138394, -0.09082741296374616, -1.1318184632568093, -6.089764847957161, 0.8058758955187462, -4.789013901212588, 0.7068405451797806, -5.829146264611454, 7.8558072576984275, 0.4301011988605676, 4.120060174726156, -0.6355309310818991, 4.6619340046918065, 2.137245845034075, -5.0129238133134955, -3.2701686542961945, 1.2112422725838023, 3.5176919288253945, -1.0093285825093004, -1.7255075668077107, -1.3463827311947616, 6.19701850348605, -3.3136925116985, -2.339371491245089, -2.4814613410527024, 4.567292692186239, -2.1416864769493813, -2.5359075366235664, -0.9519484465365877, -0.01937061419860492, -4.8807212627682315, 5.961752724289064, -2.997112787816698, 4.5391799468934515, 6.171691314423412, 3.9222372629848414, -7.281821182930444, -2.193659973324656, -5.6334925392031545, -1.6387502879154028, -0.5401586303815888, 7.839058803273088, 7.213268976413124, 3.605745432918629, 0.8638244974776041, -1.9895727813221826, 2.7829012770981674, -1.9320424693265694, 2.6644006345051103, 1.5084920362026906, 6.039635297532337, 2.2201317003953696, -1.62808757911986, -6.5216240905712, 6.550540719796094, 4.563281907075124, 4.694609245499189, 1.8033825716788265, 2.1991223731639367, 5.235798760567618, -5.5895164194449425, 3.977068661328627, -6.960935599859345, -2.771187733245783, 3.440732966515723, -2.8907675788211806, 5.425165565594943, -2.165558754787634, -10.25831807527497, -1.7957137259994886, -4.457605070104164, -2.961841619780599, 3.5914410508287786, 0.7235631123909461, 7.407450287742203, 1.046089776679539, 1.7927950342359327, -0.29061517935964426, -2.3715531585509138, -2.7321099617454014, 0.855653670644269, 1.7687804060214205, -5.080276487394333, -9.58033183157955, 1.7196344465374933, 6.492923827852566, -4.667699836162409, -1.927501045843306, 3.8153599608921005, -1.4506073030478879, -3.6277427029866627, -0.37990526119976586, 2.128517191315015, -2.9771058417875356, -7.004058321029156, 7.230591374819538, 7.849542733092446, -1.2981081075342045, -2.461102517136636, 7.551330853285688, -2.7504404881477083, 2.297741388614802, 1.8039415217725017, -4.041553370158032, -6.934369160202759, 1.3201167694065803, 1.3564701366207237, 0.7706712667053561, -3.759420335625971, -7.322378912375357, -5.838254550998293, -1.0725083479318034, -5.20391181150415, -4.345863750447709, -2.755760186484261, -6.584824283044807, -4.681735931018253, 7.17944116332412, 2.944074421468588, -0.38429622492659515, 0.1803427081900888, 0.6239866729612551, 3.1231609186098375, -0.1326953492505971, 1.829459323103921, -3.479058711328906, -3.966444365326699, 1.785957106556161, 0.6843113413116197, -6.398675933435556, -4.818095256397418, 1.4658374787310706, -8.077833767863359, 8.691619307740897, 4.053906530011956, -5.914295689635088, -4.229423855237742, -0.8490322761475517, 5.995704610362519, -5.348130703287932, -4.887743426730966, 6.620523493291689, -5.247571356223717, -4.933301488623715, 4.4730252780819795, 2.233896179678802, -5.771900467900858, -5.52791825089708, 7.18705214894501, 4.0232358649687106, -0.32955639106265966, 7.187786705190549, -5.904711763451527, -4.714752595475947, 6.653627437435698, 0.8733496966902254, -0.8199758073014021, 2.6571437936099835, 3.0644822743021445, -0.9797782740669909, -7.431166453492651, 7.1393714971562385, -7.483205050143198, -1.9438950945203857, 1.4244402901281676, 6.786844886041226, 6.24539657083066, 5.8272951100737975, -0.8183374614667551, -1.5345523673512074, -2.85090751870264, 0.5298578993410878, -2.3791972582083503, -2.217248057104935, 0.04953505260776592, -2.0066061725845676, -4.740874572010054, 6.420850347507882, -1.5210755118251447, -1.546536991867233, -3.7854568279662595, 2.8313240654181784, 2.358562497981586, 0.4207270176694999, 6.293668771703529, 3.812604282567787, 3.776832193369286, 0.4571565504769443, 5.507073538658543, -6.2761516988960855, -3.2570028670986697, -5.3719898541165465, -6.481173527426413, 7.409601883000188, -6.804448264482832, 1.69820559691924, 0.0468348462185314, -3.155900667216047, -0.08163839424100858, 4.559214330563396, -4.6001771043954385, -7.1436874175229, 2.2681360161683712, 1.7801986219037382, -5.372182399828277, 6.320437741161604, -1.754128767462625, 2.0660158936039745, -0.9020485323679674, -4.439502740355102, 6.555874082023839, -3.5812111231203163, 5.65739272934576, -4.0408630884019185, 3.0455353854598393, -1.5825309286682985, -5.13808953879762, 4.466696836219664, -2.4007482912003977, 0.7915772314567544, -8.324188909678343, 6.9227862290056015, 2.919196008428903, -9.8262121140608, 1.9142391156920282, -6.911221776200224, -0.3619505750042419, 0.6252003593012014, 5.874893812543638, -4.1646553129012815, -1.1773431415767366, 3.188917336604437, -0.6918538894407049, 3.8680234625456085, -5.865379993045284, 3.142963002840327, 3.006641519075709, 1.8132121451944148, 2.4739925901921, -6.7354449199437765, 9.797060072327664, 8.805013997406734, 0.902084927178133, -3.804652785239562, 5.9780074617254435, -1.2869305087944927, -0.7846872186132714, -5.758788890002109, -1.2737200729275036, 0.2833863436050205, 4.9238636565111165, 2.2633792048066526, -1.5295891153554837, 0.28775666938947325, 5.201326249209146, -0.10251360508662943, -1.7141620982826409, -7.172256263264718, 1.840264554539004, -4.299894399956836, 0.8938294560712561, 3.952550960946097, -2.2965346465452794, -2.033563405877538, -7.964936260541208, -2.7031543649360654, 8.105680870605497, 5.367732382216128, -3.1857034791006824, 4.34163989792875, 1.0626754250821822, 3.3692220724807243, -3.195022401873427, 2.562014468729468, -3.682379849299618, 6.026823973621069, 1.2936989518411344, -0.22231340547933193, 0.21011668311423332, 3.058509150594176, -7.614507226946129, -0.42603091906474105, -3.7760177980721137, -6.809113905892282, -0.2638964352851871, -3.824534727917451, 3.0379874034364422, 5.080445302009302, -1.6668406833022469, -6.361915833053533, 5.1393521601936, 2.9738569662190226, -2.3653692300979374, -5.896010764505432, -4.238156191599316, -3.127092519890384, -1.8785754935551873, 6.781601057671329, -3.780508346618386, -7.4843877631297895, 2.0581193286877153, 8.807657275530287, 8.942681176023648, -9.17546784479358, -6.952978360756649, 2.824886518809139, 8.057432204003355, -2.765118785922481, 2.2665028473349564, 7.636594751880512, 6.133452854354217, -1.685511019081508, 7.464024309110047, -4.103095057814312, -1.4091501571921685, 1.8227285170565, -0.7287544859131786, 2.7811933196012397, -5.63960115037455, -5.417812168159747, -1.996100731962486, 2.490957259378023, 7.470607514573787, 4.487176180277352, 0.2677284691072967, 3.8839534733151013, 0.20170372203142534, -2.354650031190135, -4.993354002759098, -1.1402627429381724, -1.9158990329493029, 5.395177580433423, 1.442814280273932, 3.0932768607935572, 4.350131462945031, 3.5349849836626004, -3.1210421029406072, 2.1309085467754745, 6.4867036292292, 3.2710132904369438, 0.8185695067301793, 2.375102651235664, 0.24084004249132412, -3.471816417557876, -1.0399266700339764, -3.4428779934589127, 0.8521278768117093, 1.5889907445128448, -0.07021668874171, 1.667168593017122, 3.039687946065125, -3.0102755870129028, -6.15138680454425, 3.187701473084516, -5.941438958760109, 6.016894739763191, -0.027795130532468237, 1.637634245487786, -3.0612226843158794, 0.6122537415385101, 2.242546788696855, 2.2753017920676997, 2.763408732665827, 3.077018111730887, 3.4665555733612137, 0.24293389136116267, -2.0552422500563488, -2.1109926920896487, -2.7095544393647977, -0.2472362778931851, 1.1117825166454631, -1.177071844815894, 0.935298446007047, 3.5082968781394452, 4.201583835702215, 2.3227661809227422, 1.3743658472510978, -4.232083530286851, 8.96905624530028, -3.710347227448432, 5.047510949704399, 3.786794455148231, -0.35805399272115457, 4.708842252014867, 0.3333102271654798, 2.952185511720581, 1.1784779683045128, 3.4049662865568733, -1.8060387788272587, -1.5307706063511821, -6.110272612794169, -7.900675225405121, 1.3829102703370213, -3.564736703584242, 0.9970893245620953, 1.79559083046443, 0.7838752488562, 6.8824074765608225, 7.179984692003926, 3.225210236698861, -5.665428601483973, 1.3861967603915457, 5.2409954404762225, -3.96535949753763, 2.987699412793771, 2.3237616493770714, 5.201829905805946, -0.8974925621987084, -4.037150994160238, 6.619052279704964, 0.04499984260643358, 3.677618349241923, -3.1115361785484565, -3.507946705636192, 0.34856810413437905, 0.6915344894661559, 3.024068792551386, -4.100049145770587, 5.08766025891048, 5.411613081909802, -3.6828989889113504, -7.74208562326253, 5.186108036475384, -1.7470526458582747, 7.289291821747551, 0.14466710854721176, 1.4803177112010781, -9.71240402157846, -4.251808695743887, -0.9338455030346449, -1.5657561109567535, -1.3073945515234018, -7.100359176336701, -0.9779196366644418, 7.829575334241162, 7.665404600325631, 0.87103093002868, -1.4274442807362244, -2.1771854186769604, 5.522064204249283, -4.237227546684572, -2.0322406305526655, 4.374633582980649, 0.6223251326828043, -3.3857484227195203, 4.60025850228661, 1.4664538506336433, -1.1129022770482475, -1.2927743773732503, 1.9414708608010156, 2.8338797627261223, 3.6164167809123766, -2.885718569993228, -0.7445019533281356, -2.585701401414441, 7.221877221954986, 3.1315880685868542, -2.43806904515899, 5.323585377574904, -1.4325053772353509, 0.2661281915740191, -1.9198973922785945, 1.9914031285522866, 0.3564086677343638, 3.5919498101665406, -6.541438362448766, -1.2805395138041102, 0.26723632453137186, -3.0599343331791666, -1.9233496497729567, 0.6271308219699296, 2.237269482759422, 3.7981901668406644, 5.855381185944482, 2.3462418307799737, -4.654371822280012, -3.0524205883621316, -7.951536478862822, -0.5111538481352422, -4.091281755052581, -1.3151979634707054, -2.847234226382392, 3.939084018467742, -4.233146842518335, -6.516625791291483, -2.844660048000599, -3.9964641776457603, -0.19391842181778732, 1.6046911464142073, -1.5856428920093715, 2.27281983209542, 1.1404795264167285, 6.5697855501535924, -0.977142961761577, 4.93030264345963, -4.166972807344045, 0.06823417693516381, 1.5985532245801393, -7.884651596312305, -8.600188501641734, -8.547261565936815, 6.401153186847895, 4.344925291098865, 1.8817188923604058, -0.1790413930866338, 0.7375489582187937, -0.18661710104213375, 1.1595623151310543, -2.8244616930888413, 4.1244666854253005, 3.781865752673704, 3.28284759617077, -4.824471046918525, 0.29043575895111945, -7.024027642617191, -0.6685292722603149, -0.7337873871107525, -2.9431949318325423, -8.322981482143685, -0.8418953954591206, -3.238670925108913, 2.004673281452005, -5.0823729106993705, -0.616260840304226, 0.7060404147544312, 1.0762416099180119, -7.382520525903525, 3.5860891574211915, 3.645107671627917, 6.553563756916378, -6.021995187719009, 2.3260314157539352, -2.0587566326975058, -5.168030108705649, 1.2041780283819068, 3.476599395858016, -2.052511156824046, -0.2138523439505459, 3.5766787081747036, -0.6688951662906502, -1.4716541698792467, 3.711644844600282, -4.933339645382725, 1.2562578418132488, -0.8621273792124666, 0.8506279892538093, -5.156736046013815, -2.852030742677508, 2.324751264002313, -0.5545621526777151, 1.1001446752343504, 9.041974322674925, -3.46798010699094, -9.94301387723171, 0.3593876146964136, -1.4852341213189524, -1.4184054015957486, 5.4917439450063235, -4.6479917929883285, -3.1547621700932518, -1.020429236094131, 2.228420419301739, -3.9450855259297635, -2.978965513509205]
BIASES_LIST = [3.4903016306192822, 2.1959638794694194, 7.165858011230123, 1.7466773400188953, 1.2531388417994473, -3.6235306609118174, -6.394083672926132, 2.5551466495941164, 5.379514647140425, -1.107474615172807, 6.0042031205691675, -7.096716590983077, -1.6548007147433843, -3.077179336929314, -0.6527258762309461, -1.4388977441194382, -3.4616860963885623, -1.1680412933120823, 0.6409415862220122, -3.8124774445403293, 5.8400986226982345, 3.1499141514712177, -3.7511339283419014, 0.6510020858502037, 5.341020192947833, -7.90566721829657, -1.5844519144437381, -5.935866971337091]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

