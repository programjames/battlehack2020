import random
import math

WEIGHT_LIST = [0.562484163149242, 4.903309731305517, -2.327078151652557, -3.555212252191013, -2.3140550887996656, -5.2910449922964675, 2.869938525661886, 1.833942777818876, 0.8118116205078312, -1.1098372699268124, 2.590978496829753, -0.013699202407195913, -0.907392438607126, -0.7622437834456879, 0.2261580316413931, 4.931509963939608, 4.676781716197654, -2.9713506585375105, 2.8283625380044457, 1.8279999366630497, -0.372060488119869, 4.362887121570653, 4.928955113492891, 5.409558920547516, -2.114208407382623, 1.5970400715356128, -2.195040719963929, -4.353009369130294, -4.909238874696629, 1.389160713976142, 1.3555841612686663, -1.126756868096816, -3.3995344295718453, 5.253969046233787, 0.9901155946049229, -2.4987296923532316, 4.145175720687424, -3.2824683348683, -3.752431404998549, -1.0376127235001191, 3.8267337414504237, -1.864830972132359, 0.428547918722242, 0.17202935605732728, -3.264156480834732, 5.726979242388871, -7.8667250725398485, -1.0384065154202762, -4.609482474121515, 0.8738702884297154, -3.846329023836498, 0.666649415406155, -3.5933657217939845, 1.883890411894973, -2.2434891248891744, -1.5955222253910257, -0.39846715519958864, -1.9777824842666891, 4.889735911661421, 9.871565361166649, -2.1928835284900163, -4.488128183089589, -4.303215843873046, -3.5183568335335065, 0.7312655703414802, 0.19017385852047775, 5.359000823408622, -2.1901622263355103, 1.223344219284735, -0.6812468502681072, 0.44667952147284484, -10.339368316024766, 0.4812546546143037, -3.701151728730679, 0.04144981342797553, -0.9673331856947072, 3.3860905013459073, -9.794360088449753, -0.06804803177346005, -0.5667411036465856, -2.412601978424208, -1.1118996776283732, -3.254821880947583, -1.2142206925138501, 1.0227501495665485, 4.803586311221877, -1.8284883317927718, 3.9842390553856886, 1.3674501841018258, -0.6745635646879188, 1.0056658633797142, 3.784139699302461, -1.253298936871751, -1.0674440575982929, -1.5702751844419511, 0.5353188549665034, -1.7529036740347885, -1.1236943975000813, -0.6344615824815377, -3.7011305832369463, 4.120720062044124, -4.8243275229414815, -2.3342275038942613, -3.607658621168417, 4.940726454408072, 0.7553925118940952, 2.701409649396461, 2.6856792549093496, 4.958713896754589, 1.869886213019357, 4.384934886622562, 0.6071142858198498, -0.5338104779112746, -4.324943596006848, 4.4567922727544085, -1.7114525724069205, 2.5561233686615132, -2.775626788780707, 4.554919649943619, 0.5665448122805783, 0.6245491500180633, -0.1582902398317856, 3.594906193457056, 2.616952115250052, 7.0141380870252155, 2.4504190755951454, -5.370761807162999, -5.639527533943379, 2.5548234498498474, 0.06257048454873482, 3.6176556134441604, 3.854720692202158, 6.509475104248731, -5.741299269612133, -5.2004497888887045, -5.152205506797234, 5.239226182613108, 3.507192238681374, 3.569920989021875, 4.553161584466364, 2.069143189201491, 3.4752492511785644, -5.215326120201982, -1.0543741802729334, -3.67540995418898, 2.5226509064584652, -3.94900049372638, 2.492976487091607, 0.4594874592043724, -2.4845815648449245, -0.4331504563859199, -5.101512744118702, -2.4145459566448335, -0.00617644246933864, -4.149435727478376, -8.68344962360512, -0.21371507911471285, -1.8099061938194496, 5.46337119211494, 3.8048307355854973, -0.9545116586103051, 3.8433528303294144, -4.558489293650424, 4.482582415889315, -1.134518821328393, 0.36730054988292793, 2.110463251936137, -1.7065535564490373, 3.363304728996124, -2.6043976878075044, -3.4580909459801035, -2.4278448973057447, 2.0647851917480837, -3.282888880462756, 1.8376265689931368, 0.19469857294625928, 7.294515055437262, 0.1402685890831818, -1.2330637801426714, -5.369154373636138, -3.2267947797056467, -1.8825105826197064, 2.154671535665443, 3.649763359615834, 5.104308696939884, 1.1382806811135726, -2.6339042870357714, -6.095202544815796, -2.5085904484784556, -2.1237145956379777, 0.08512432872472787, -4.283744982635175, 4.5670463916886614, 3.245583560952646, 1.9122491622030324, -0.4275803499349763, 0.7524134350100422, -0.5251504846923648, 1.686270584574543, 1.7564644825233535, 0.1198625422632415, 0.7048411942222113, 3.0367956546608994, 2.4210846482556225, 2.2466691070510754, -1.3362153301916067, 1.0351653861993895, 10.580825880661727, 0.5831394131169104, -1.130563615189539, 0.598265457538175, 0.757491744559834, -2.942808171240027, 1.3046677711589112, -0.6599991219013274, -1.7596340001694697, -1.6113627210631278, 0.3259408272923397, 1.2936437249951986, -0.7404407539558335, -3.924904765048007, 4.087581572655304, -1.569350450105306, -0.9451857223787737, 4.249876603011809, -3.5284146011448816, -5.025633901024876, -3.320962013063165, 0.1535827409665858, 1.759422367672481, -5.336405138722805, -1.7076746301599601, -4.683909097346275, -1.639784939702723, 5.271980759787524, 2.405178525496192, 4.266314280128237, -1.1609318617008002, -3.6295510553505452, -5.946713212591663, -2.5703534258092917, -2.6010160003400404, -3.59308501148896, 4.851938199354156, -2.5970272713023665, 1.2071661172729877, 2.5908164789197388, 0.21292193736921775, -0.08468048324469513, 7.132224769076998, -1.5440150068783938, -2.11205765244916, -2.306036894288828, -4.2683294181543845, -4.853764027666643, 1.0081551426343451, -0.42530146464039165, -0.3534856528306205, -5.812350040871053, -2.5022758037290433, -2.740516022180895, -4.565868521468715, -1.8226704289137088, -5.896034674462177, -3.075021939132426, 2.6887446480291697, -2.376255086874021, 0.6073297212179811, -3.7570565300566154, -0.5421291110075074, -1.6491027541136842, 0.17794679978507186, -2.896603524449417, -5.619174886737439, 1.5193820399289404, 2.0383927746743433, 0.19465682501627915, 0.9854313616906201, -0.7890327843697863, 0.36998549446100576, 3.9504369405772843, -1.0334422809988748, -3.8998766898714035, 3.7477442989276146, 6.154545039116769, -0.08837812169696084, -3.371501608935638, -1.8278835461389775, 2.6421001547974927, 1.7043535250803377, -2.9808693497101193, -2.686300237877992, 2.547040688358476, -3.5749363403313748, -2.261475712036501, 2.3622292770054947, 8.832117830262316, 5.947924592603834, 1.807729030789288, 2.0520319234135442, 4.574954620306286, -1.8764868068343408, -5.840674182844802, -1.7772591067395813, -2.385851878952581, -6.873111568872865, -2.8793005257966944, 2.2916464392287064, 5.065605571911687, -1.4124934670545197, 0.6675886004029241, -3.92080342338252, -3.6026103458158905, 3.273001634818538, 1.8475925092190848, -1.778171275333754, -5.661722696833503, -2.409960526092588, 1.2980273146953458, -5.601154585317471, -5.309458863207645, 1.2627643718941233, -6.802834320566696, 6.395677425372469, 3.4390256611494103, 4.5988543766595935, 1.9952725862514484, 0.2763729937714519, -1.2739562529130894, -5.563258705304263, 3.959821489003842, -0.3367140903998146, -7.431336856572328, -0.10718174337960075, -5.038380628186875, -0.5012723087502494, -1.6808453733928144, -3.4629191102815473, 6.499392817432281, -6.779510490626206, -3.2250713335639736, 2.665513043548996, 1.476163323332014, 4.186827951212388, -5.694619831865301, -4.6424656282711085, 1.7017648959750231, 4.792764259758791, -4.851782620166196, 4.66257832980147, 3.2510902985886956, -4.01897670487121, -3.39815938456894, 2.313235427761964, 2.3488769534447775, -3.4020086634283797, 0.029860589979331956, -0.015961793862323416, 2.8045860192370524, 3.2500404570053876, -2.241497246864599, -2.823102483303425, 4.918249907859642, 6.0552837532845, 5.2838655367210485, 0.11726331228322814, -5.842466042760415, 4.260456699274709, 2.6128588533693247, 0.8598125085277686, -3.2171077979512117, -4.700808622150857, -3.6633457251330404, -0.8881944918001592, 0.3432070997664415, 2.07019242841217, 3.922026068459775, 0.6778255893211826, -5.6531561689856344, -5.263359622387262, 0.4166011806818095, 3.4152893350122002, -0.8675157596576055, 3.160291298045732, 0.12047743524409182, -2.878490958732692, -7.245587032097434, -7.878826201473113, -4.609136592569942, 2.4666017692073448, 5.606045151435862, -1.7037384073578337, 4.7105026174226365, 0.49796067122109505, 1.4328878253336366, -1.2997472718656042, 0.34260512215167727, 1.186040767573089, 2.249196037313495, -1.5017842459669672, 4.303275926903759, 5.548911621435916, 2.7226128334964987, -3.451083503515941, -1.7157531866303168, 4.553360926552414, 0.7112162443094875, -2.1530405707682276, 3.8628156333086503, -5.550477719374384, -0.2988600563548519, 0.7948659993747583, 0.902691665677009, -3.279785413145316, 0.9778895982619509, -5.680334250666289, 4.135415597549615, -1.581218132744824, -0.7133799802248523, -0.9994913147035043, -7.404094886974563, -1.8399124950940127, 0.765559485797424, 5.219273070065117, -4.3425002471732865, -1.140513752756478, 4.087591055985, -2.7488610132016826, 0.9139845644235111, -1.9293901134363698, 4.3828189515186, 2.777706293737393, 2.9937989991473053, -5.905608924275294, 4.9412610928660285, 6.188044888626372, -0.7343056527187616, 0.7938205734997433, 1.5827633064331772, -4.761432947202881, -1.6030176435553456, 0.6651650863843565, 2.0278741280927695, -1.8200408324633361, -0.3685583478970712, -4.3224830415061355, 0.7229763355397304, 7.9970863156948875, 1.8118224659735558, 2.936910626754125, 2.415486627351694, 4.509989335399314, 4.938603965431248, -4.365485701621347, 4.679083721642542, -0.007623487682898519, 3.638416810946825, 2.556546251952679, -0.38848838830362187, 2.514689278760649, -0.41665471177735286, -5.915696132053736, 7.694672635068257, 3.679619757572912, -2.044210827474474, 2.073960218039597, 1.4907269978155724, 3.1911892623301137, 1.3735849134938092, 3.0522005711739975, 5.179223181293715, 1.6586381955605212, -2.315803414920888, -0.10974545571785867, 2.493664548789036, 1.3402314182811341, 1.5858862830963518, 6.852039090787071, -4.2760468501994815, -2.467341196440954, -1.1944505538261672, -5.082008529521518, 0.5638822841879945, -4.349808926881436, 2.689723054779771, 0.39691539320166785, -4.399628087892783, -0.8171030422965946, 0.48355769149934763, 6.255508779335718, -3.2730706396489584, -2.8763673244750527, -0.6953755383492278, -0.2377028942600376, -4.854286927609251, 1.3553519832721828, 2.604160335327945, 1.8448562498472838, -0.361489003157269, 2.7252004340415463, -0.2889273967974567, 0.11140592362244894, 1.545020678160657, -4.7398076952250765, -1.6540708930555619, 3.6164521953514397, 2.8570069035160697, 0.49810920080640303, 4.252656109302525, -3.0539860741515863, 1.8198795181213792, 1.0533840585418928, -3.783232186512228, -1.78713495611551, -4.918949928286534, -0.9611398688238766, -3.9848964160071247, -0.9954176408212065, -5.969761196976746, 0.2990013247746165, -0.0585515090365827, 7.014380870173443, -1.1965134446081798, 1.1059341694756344, -4.022825436128088, 6.959635958720566, -4.077673956639879, -4.136739658087153, 2.0470787365749166, 5.106834783061216, -5.5004928355630796, -6.404752391930728, 0.9061848105206307, 4.226281268622789, -0.9154980161467802, 8.07333198687273, 2.5193937918292457, -2.301769982215879, -3.334110097783059, -1.9883905467558887, 1.4641104526098558, 1.0704084578707749, 1.4471951938765661, 9.028954942872458, 3.8148756988777635, 0.5581159374566241, -1.2664252299244385, 1.8082535334534233, 1.5095939785938806, -0.5387370644924308, -0.2834559038622844, 5.970252610816349, -0.12521037511699976, -2.7876542908844866, 5.404630257611471, -7.7609388049756065, 5.265213676764772, -3.889460688266773, 3.4069464293613523, -1.0015486239158284, 7.807871310610671, 1.9019049304769706, -2.2387564936557074, -2.177965229164139, 0.03140563414721942, -0.11918617467599511, -2.4659078157025918, -4.419015946142109, 2.2184680173064755, 3.9622547034057263, 6.050442769786267, 4.876999590338782, 2.2570730007397635, -2.1542589209146468, 0.021459874631346867, 1.8391200618834738, 3.7097843708701608, 8.945334233751753, 0.4112608561639228, 0.2324485408298876, 9.603295020083273, -0.6162130307204966, 0.5391829011667442, -3.182270866086953, -2.55792559806744, 5.76322952121361, -2.3434351671930154, -5.45284369148219, -0.2401356129290472, -7.355811647130027, 2.415529355205342, 3.0991659782199448, 6.110663102067048, 4.956345899322319, -0.9461146218281616, 3.8107952188672765, 2.931658672177546, 4.122193055194598, 6.788396325232207, 1.3952774271515664, 2.2965753179595794, -4.255165625208554, 2.0195160034958453, -7.737258074720427, 2.1516882029305298, 1.2671315984376281, 1.2292024716337633, -5.138666958225304, -4.541818473441801, 2.3674416785665082, 3.0319518755154298, 4.277128822793889, -9.137676800595505, -2.4146084069981284, 7.450308581880378, -1.3643520774576814, 1.4436813110900228, 5.83159393527204, -3.4573942573597383, 3.169791932573542, -2.015822752863455, -9.982801385810415, -1.0623034413420227, 1.4764726799811223, 2.8947782984732613, -0.9090839032295376, -0.7081990317632018, -0.8097032052086143, 2.2763403340058668, 2.4946250694714474, 3.228237230567094, 0.28082668720306325, -1.4026400989845325, -4.282992197492221, -3.228108177638167, -3.4152534421259326, -0.7061789261854733, 0.8696610278491771, 4.227509136801648, 1.9562332108531648, 3.1758596594251767, 3.1199909284949245, -1.4424897668464565, 0.15352479721958703, 0.954859042927925, -3.0909504922039734, -1.6397064199868845, 3.4776282216219006, -4.021438528964699, 3.3631441289019537, 0.5751317062054321, -3.6936893283668297, 3.4372110983378548, 5.924646014008202, -0.4368593817977148, 3.2281151895650892, 0.373609640212682, 1.8561436456182108, -0.9145866519639814, -0.21260837362391827, -5.26659227250705, -3.3588716048662572, -3.710149668572417, 2.351333691204538, -3.9019893685526803, -1.536890349898122, -1.1374043512908567, -2.0650568046085302, -4.908903115643187, -3.873934015939268, 1.988846382339479, 5.679357921002247, -0.20119869665905094, -1.8260093319834656, -1.3627095514645067, -4.2795177914969535, 2.3483706047979656, -1.5479113779166045, 6.688240295688155, -2.6788486825483466, -4.749410676505297, 7.878703093403803, -2.0337043304213456, -3.28759670616692, -5.168166810205887, 3.001587300393045, 1.5169827834100138, -3.5616218383818117, -1.3691765963002365, -1.6040067530392281, -4.809126599388361, 3.3351185468092894, -1.3070593202843677, 4.386253562534798, 4.629014824655995, 4.28623460050862, -4.911931769044358, 3.644967851706113, 0.24909283192647008, -3.3988895302032875, -0.36746100385958813, -4.748635457134527, -3.5425929130983507, -2.0664579511757175, 2.5136435278241254, -3.4056383070160607, -4.6922068552187435, 1.4255112334149058, -2.7650331541988855, 2.0071459870327484, 0.4708066613062031, 1.6673799914599232, 3.967147772065284, 2.9372993740523126, 2.7891725236342695, -5.867705899854582, 6.986426653551497, -1.3675409269384253, -3.4785861619708993, -2.8479381010260223, 0.14644436225935095, 1.485987897084279, 3.04278839888478, -3.5989040788140625, -1.0541654794260582, -2.769991055874982, 0.5904754479958769, 2.1831211198889173, 6.122655965716802, -2.761703938263468, 0.0945493899203206, 1.467631498381798, -1.258403897322447, 0.7400015817456712, -5.73683124757619, -0.8375254364433966, -2.3931725986950014, 2.361128922550527, 3.765738498724072, 6.934486674459622, -0.872298358669734, -2.23373539990672, -7.990163068234916, -4.312525023626476, 3.0002620910206974, 4.213342108579683, -4.418255042331048, -1.765044156087511, 0.9659176640619801, 7.588478485890852, 3.7487164527072947, 4.872057373014203]
BIASES_LIST = [-1.380786630298232, 3.7061123769399638, -3.613155362018471, 4.786897528356297, 6.3336208025049014, 2.7681280852598453, 1.099782185391808, -0.0721921962435356, -1.1105889631709176, 2.6506560725294435, 2.1244713082209556, -1.3680121261869602, -0.00017868297042380674, -2.6228010826541572, -5.512721524164983, 5.260960482882119, 4.817413512562161, 1.4696987755986797, -6.5688017318426795, 0.0163756230192674, -5.073637388331771, -2.8010533711903585, -4.080510284520114, -6.079895918028124, 3.917257883123822, 2.6509079437229777, -4.033982589320871, 2.9220893225168227, -1.079079449767884, 2.299026848150085, -0.33560349621629254, -2.2917440178083877, 7.128119325686941, 1.8582059214869333, -1.6882177430941714, 0.4549781902362712]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

