import random
import math

WEIGHT_LIST = [-6.835933407094849, -9.867820516490601, 3.81136465022054, -9.823102944791678, 1.854430901356391, -6.825046401012022, -1.7998703080220828, -2.0808464409518894, 5.528691534780968, -6.797978043640478, 7.262290386921055, -5.456089508627155, -3.9572499817188405, -4.016499376620342, -6.5225103581368105, 9.38163994239844, 5.291496083152619, -4.5643167374808975, 7.27049904530562, -7.853689093955872, -9.885546685649357, -0.4966959938560134, -3.42730754557852, -4.452028375903778, -9.346846498651287, 7.930299330772726, 4.440819284263423, -7.073444498679313, -6.740538453776899, -6.854840913914321, -3.2761053453439466, -3.411007611338343, 6.395387587511628, -0.3949340325499957, -7.555926831606287, -1.2702771319567532, 7.145344401625216, -0.23192440295364314, 7.391943728354178, 7.823884466612675, -4.411626888324188, -2.737580644316955, 7.3259568011866065, 2.1530826657861333, -3.3874156997460814, -9.11020811465778, -2.0002099028576996, -3.1761539081960493, -4.440186146299174, 7.615626740921105, 5.229879681409775, -4.225645416436885, -7.3936805219383235, -0.040315132155674505, 4.183001128793322, 7.277781612596765, -2.7322366238312057, -8.72806664454891, -8.385824375734657, 6.893637709787495, -6.96677524138021, 0.03908669892433991, 8.081399716742048, -2.9299927548413525, 4.1807497032181455, 2.4911248960921757, 4.153341500197904, -2.4053578263858766, -1.1338812583458662, -1.0319092883748375, 9.281043200908648, -1.7005149732946911, -4.656812329254542, 4.042442679450254, 6.9975538567912245, 5.385659095426675, 0.8704334101217768, -3.1190235702903717, -8.875012012777288, 0.2912547595069537, 0.183438430583724, -7.575383242969274, -6.517187624786002, -6.097201970147534, 2.30475691398858, -9.444066494862033, 9.629842180889195, 4.970858412626667, -3.331813191317938, 4.605799322355427, 4.865647538173297, 3.9710623003506313, -8.439497587376048, 6.913989588031473, 2.9493833137473935, 7.244467339231441, 4.814015617719695, 4.48858164297093, -0.442247611918825, -9.50831729696337, -5.8920982930757155, -5.1687091525193445, -1.5617357531723783, -0.6942145765800749, 7.704722302481251, 2.8721459958868643, 0.3253963966587605, -0.5832391491744389, 3.7341995885965513, -2.4479044419062905, 2.8268708238873046, 4.234364613478661, -4.507640427880744, -5.15902505715985, 3.269463585388044, 3.822858958221115, -4.5399300484701826, -0.10342252365489912, 4.275669091490695, 5.545794659400148, 6.139772703133524, 8.853918813644597, -8.376471634989995, 9.09464416414556, -1.1694800780558872, -2.2918707673339567, -0.7672452661345286, 6.865824493855335, 2.1172971739170308, 4.540534161717504, 3.1789186926357793, -1.4263380116350852, -9.067362119429003, 4.192185884630494, 2.365429149158185, -2.1582159235506264, 9.926838169367645, 2.922564059976768, 2.5248979161035052, -3.393226266645737, 0.4789281411324815, -8.461375317501874, -0.2106562593493404, -3.2086697905107027, -9.706411658403669, -8.385974523993767, -0.06924451102052842, 0.7709909184774215, 9.232132894692512, 0.18617058279929388, 6.600772211950726, 3.323566128274326, 8.81983010767756, 6.371583837369986, 6.745637007624023, 4.979065068444317, -8.172815386270695, -4.306788692369121, -4.9956660461468, 8.168299413606054, 3.4183248408475606, -4.894158349056541, 8.069764772388467, -1.9424200382156247, 2.332437505260323, -3.5485605469725234, -1.2616625307490992, 4.351294312693772, 6.211101708861868, -0.3169177807007131, 0.6961417319162049, -5.392460188937431, 1.6859677095814796, -4.630542134261663, 1.5363693140181738, 8.804632155141292, 1.5540022998172098, 9.04234142546738, 5.018929415977752, 4.19294057347966, 8.433695719643616, 4.407102658368498, -3.041122525676718, 4.986546225604062, 8.881868110302236, -0.3210216962868433, -4.83169109692132, 4.210175196926521, -3.9830748541140792, -3.5114085933844263, -2.542696489773957, 7.2189008152568945, 4.8487817931145045, -3.0399936125181926, 1.099840697921536, -5.240351651823452, -0.36396046255416437, -6.555148537507356, 3.6989750308879383, 3.0167369971871025, -9.551188343960959, -7.800675052144054, -9.381529150619244, -5.353058002065967, -8.464811505388028, 0.405893654172198, -0.5439573563882849, 7.605208234543003, -7.567158162494048, 6.0892169849827695, -8.55322635600805, -9.25531616390344, -3.371076307068817, 2.822859543169887, 7.382395153118928, 9.443938510559622, 5.540180373222336, 8.481060216336907, -4.478277088554945, -3.8635446619522895, -0.905458831470991, 4.640278173648058, 3.5073499927821636, -1.5323345692834494, -4.748420436588717, -3.207085732874944, 1.7790860983223826, 1.2891397169417615, -2.8534943480868495, -2.202991814809197, 8.92275374619939, -7.867526930415059, 9.12186849982804, 4.985131670272464, 4.849902152756018, -8.744996692283301, -1.6768060987668871, -9.720865337593995, 1.4200358016341035, -2.9080993132090978, -5.638695496598489, -8.416457313325648, -9.007984956116141, 8.713307597108944, 3.4657078322598682, 2.7473026532939944, 5.123293790130008, -8.10041224467016, -5.379599940437707, 7.495039423016387, -6.117801034259038, 1.2344466386981008, 4.624158167966481, -8.280293692555624, -2.939156937497991, -0.7980461461090229, 4.887593719369011, -3.651066126227156, -9.549638741756866, 5.205037940967896, 4.585852281462648, 7.537187301554667, 5.01826936691284, 6.21663975509129, -8.744195783358961, -4.506946720582146, -5.727682619996008, -7.7850030508818024, -4.226852086805897, -5.408759704874915, 9.536711188969043, 4.3468970274995495, 1.6075706785346924, -9.829587453683196, 5.5109210473823715, -7.8513922939353, -7.224648026205463, 7.206760322129547, 2.2211945172705754, 2.293351993711985, 3.826566609476881, 1.6620960151248116, 8.224551708878302, 4.590927648576548, 7.547067899777563, 5.28504377922901, 7.543521294258724, -4.183148324979726, 0.9020753585524481, 4.818395183466658, 2.741821400162536, -5.920737778480765, -7.112765922658757, -0.08621636713312775, -3.736927676378759, -7.406670239218112, -2.0345712844095925, 9.225633446193505, -2.6235916075048804, 6.692226245782539, -5.9414128259261805, -5.642230582069782, -0.8437326963723013, 5.090654694817152, 0.6289404486660288, 0.9987500524532358, 5.776670227511932, 4.136567676541873, 9.25297866717061, -2.2299104640946528, 4.93481973186711, -4.4185064485613745, 6.751735117155569, -8.11699162247308, -4.125887663812369, 6.973864798565142, -3.821112459938824, -4.233648492058459, 2.3310160221094574, 4.218348931437815, -2.9348569832706684, 3.571940234912482, 8.464309935278287, 6.772172722880789, -8.857529795359028, -1.854146542764795, 7.386629622005195, 9.0505728058362, -1.2070296028470135, -9.548613092113849, -2.8546029804596547, 7.684423838126996, 1.905532363333398, 8.115107027797482, -6.890495844685674, -0.14708317212343758, 2.5900766816494674, 0.2850229903923118, -8.298523668294557, 9.34775473643236, -0.7430393280205205, -6.652327123229198, 5.868594314852984, -6.547635396145108, 6.760146384285644, 9.139755926539369, 5.085562725493595, -3.2123489417591795, 6.577497727359145, -0.5791212467698905, -5.278461380821826, 0.5933670269789495, -1.6485600880618652, -9.147312697355524, 3.889698856861962, -7.941656294666819, 2.7937077917582727, -0.3167289127900439, 3.4943655345959215, 6.295498873411709, 2.722210615881833, 2.6140669951242046, 5.871749813051251, 2.080825272144722, 8.54345986467732, 8.434847538258307, 7.732291297029644, -2.6399623801682415, -8.130147773264206, 7.628997626844711, 5.628152901691594, -8.08546054505265, -4.884716873020459, -5.0256617786917595, -1.0818686572129508, -2.3937845205742754, -0.27816546952839616, 2.0735489863298504, -4.634682319024179, -6.59471417103485, 3.1524712418170875, -3.103671552677141, 6.179728451221489, 1.1872650277950125, 2.2912303717542564, 1.3165577583258745, 4.226472021527666, -4.948021683125951, -3.135101407285217, -1.499676681240107, -5.336320635037843, -4.949565751602581, 5.478950172663019, -3.4516537931346036, -7.2283917916522284, 7.050510043836152, -3.7432725863030676, -9.627125820645396, -8.750682263987255, 4.2959859270402845, -7.94675098526244, -4.9981642090332805, -0.5263401927681635, -7.428616354556992, 7.052783998241978, -0.03405299407349638, 3.127949909201499, -8.595802714553685, 8.64504988905648, 6.991477468352013, 6.5974998154270885, -8.945067560165636, -6.414467890445175, -4.087690264108199, -8.619493792290296, -3.4449195838040003, 3.213102204017364, 1.636846250498012, -5.032766636716883, 5.056828483821169, 1.9786843533784335, -7.728094953350815, -8.403123986916212, -8.818817444443678, -4.0209947931469525, 2.040530321813696, -8.103464697352223, -4.429833329470632, 6.675177246113222, 8.188091263629154, -7.630615371627316, 6.445968746522141, -2.73436914315095, -7.076624027412692, -8.759851051367182, 0.1543663704918643, 2.037516348599766, 4.898208550459369, -2.9401093161838165, -1.6655565925220408, 7.5410361105784, -3.5889666053247264, 3.7479786868669507, -2.141450231154673, -2.161820088848174, -1.7607904181646727, -3.3867974858583754, -8.789153200834344, 8.39221513210041, -9.072668304565099, -3.019633201659926, 2.5070795391764644, 5.8071544463975115, -4.565593758871421, 6.956003137324661, -0.6800725355254897, 9.250412394010901, -3.7744043788344612, -3.6656358478238698, -1.048993521048729, -4.005993153704182, 2.369381558432057, 0.45861867275198875, -7.981719482030869, -1.5507751422912683, 3.980750798881905, 2.210495759347724, 3.439101210950941, 6.577691934022326, -0.14070466616391109, 1.1100286411668936, -4.189052747497179, 4.499318106430287, 3.6472830025408083, -6.952738289288081, -1.9158070720789322, 2.733250458634366, 4.397283419865696, 2.3073741918966064, -3.3267599387802456, -2.028427932934207, 4.887868195706449, -0.7904523692755276, -5.5457825000478795, -0.6795674785961321, -2.6202454508743926, -8.636580394228815, -0.31339187509202837, -0.7435890783822785, 3.5640910552405565, 7.769854729008255, 4.956265219023354, -4.067778932498223, -8.381668278091524, -1.1221030387142754, -1.0554481426390332, -9.313431592931547, 6.992106675680599, 8.026939107052176, -9.341871369610859, 3.130491077375998, 1.5931876554967221, 9.669285492254879, -6.184105405612968, 4.237128376674125, 9.527247432993743, 4.886380556956844, -0.3814871198229479, -0.18939207743708053, -5.280909886219978, -9.885617505828597, -9.883232303571333, 4.56679835514791, 3.2385728267263083, -4.8842022614214375, -8.653646033425414, 3.093785637994074, 2.9340473199481902, 7.593634695382484, -2.178428068604279, 6.08522755607552, -5.242046947087584, 9.663920386448098, -6.431219208927974, 5.462865555869643, -8.424590806294932, 1.556529781989731, 1.8366032679593793, 5.019486266611896, -5.695386364900525, 1.7869660424697482, -3.906978417331704, -9.474120638636087, -1.7094240536330538, 4.185503702569003, 2.8377385010314207, -1.4259044695854897, -0.5979362252032416, -4.066721824239452, 9.597727229254303, 2.1648626554635015, -8.430876958379496, -1.5211041814512747, -6.622662373159473, 4.436550369572636, 5.359145131238419, -6.339143677194238, 2.940208215714959, -8.204418300638128, -2.5187651007098815, -9.102288068639597, -1.556404567078646, -5.4550019970157155, -8.960434333222755, -8.366080484676939, -0.038670887081293515, 6.790925175807363, -7.449598009356608, -3.2402066929971802, 7.235718319747853, -7.399024505634233, -4.605984782520212, -1.8468653838784626, -6.168587754696264, 6.777785731671319, 3.7371369165915613, 3.526005024104146, -3.257953199266046, 1.9771975258820884, 7.756955778689598, -3.2189594324292603, -0.9942074131743777, 4.165765468313298, 9.50853443037969, 7.969553033922846, -9.244661753779067, 6.492268373780593, 4.084491178667754, -7.065204113397825, -5.686173041905363, 0.5871307850158569, -0.17125058383893155, -0.5669055466911281, -5.270806417200193, 7.568518228709621, -2.68085801710483, -7.383085358842251, -4.050495881089984, -0.4266767292038729, -2.450104900738703, 8.879912823966372, -6.866000842311212, 6.854738758629377, -4.991598396048205, 3.00120144597658, 1.1242243900178988, -3.999815701608293, -9.105114158927314, 2.140317830452183, -9.952997850571652, 6.608923824674402, 7.92724890405843, 7.439560453038819, -1.754125239242823, 1.881196467369623, -4.266841829593377, -4.168903560982741, -1.1341484643838164, 7.718350287604345, -0.6436158737591668, -9.557073618403686, -5.434993463090027, -5.016742501935276, -4.732209019051751, -4.613887464336277, -5.24248644498255, -4.797302415235592, 2.620009088992534, 3.9378021144832758, -0.6827778360103274, -3.0142491238646363, -7.554906096725191, 7.572060274680169, -4.656598975072919, -8.212584476979893, 9.561676717350355, -5.486516141041696, -9.177033165720616, 3.409439906288421, 3.159307532404707, 3.437810123216609, -4.52235840085917, -7.189131641027076, 7.763286505797005, -0.6304599466919107, 3.915997940320379, 4.526553970407194, 8.106607583837768, 2.31950683412337, 8.807970805117339, -0.8306733223278009, -4.066844031955412, -6.749429274111607, -7.976890438357582, 1.140324659708444, -2.379612600256271, -2.6033786197839763, -4.3825778857553015, 0.8436433640387637, 2.894032077444555, 7.632050192923682, 8.172175690948759, 1.3078160858198355, 0.3405987226659484, 3.2518342546127332, -5.2238437823385535, -7.591493125871709, -8.533778142997996, -3.477359649035394, 1.4724296731752613, 4.031725832351068, -9.863248310084225, -8.657474398128155, -2.029096920516558, 3.3450108657150857, 8.485058041759594, -4.466078402885114, 6.429814750594325, -5.1794351499430835, 4.237534733390467, 4.120439869381656, -8.304980400334795, -2.9959654776786104, 2.7958774528343966, 0.6166079512626368, -8.039557833934879, -7.714354276255577, 9.71849533119195, 5.825131346579562, 4.121135241160996, 1.4356945911286125, -3.6439469084441107, 7.988509261733828, 8.960194743045228, -9.927872064256853, 8.716892770150594, 8.833767484792538, 4.137955801672559, 9.520280920178937, -4.529017503868642, 4.904236383327408, 1.282198282200003, -3.1413798953325873, -5.915104951884674, -2.3729026946473137, 2.840421455311299, 0.3201549833616575, -7.667068376633887, -2.8084578004057192, -4.033220963404174, -2.348270508286701, 8.791274445373666, -9.827328024458925, -6.268939280418131, -4.186518427258434, -8.037429213772636, -8.138692642255164, 9.900913925061609, 5.53807547217084, -2.4753269216481417, 8.751096803249133, -1.3790371894960618, 4.156445467506876, -0.6791307200474872, 4.564742020452206, -5.133539584339227, -3.21911316324395, 1.4094352540778416, 7.254059456802636, 9.880199609247732, 2.8223509775999833, -4.92280550288071, -6.802041626107727, 8.611593007444121, 4.186988990510965, 8.266926087294792, -5.617972401497344, -3.0751933107559566, 3.0740367674999476, -4.20665122638934, 6.508147620842685, -9.577626833048745, -4.246448860574949, 1.0894467281623292, -1.7341732673073178, 0.7496102536448106, 5.7191551711971105, 9.517358046421165, 3.9565576483005245, 5.316107351604289, -0.6452048145364468, -4.706312210621815, 9.896479302906958, -8.034848898424427, 3.9904718539573736, -0.1620288473576874, 2.5808155704888147, -8.306553954570223, -2.747196543845911, -3.8466070910116645, -0.5076323919595964, -9.85063190609945]
BIASES_LIST = [3.6262206258991583, 7.849080216297317, 2.2392045826456126, -7.080996949185412, 6.671403421425502, -2.188677487256432, 3.874376673367653, -4.21938637559101, 3.694696198239347, -7.079762196413462, -3.0344381787465124, 1.2260170005083495, 3.8383417624652534, 5.873705023811482, 1.5478227916467002, 5.7595280720711255, 4.334605096696329, -3.0106619165495445, -6.436585303734381, -9.338457501316844, 1.3917130612710267, 0.8973120591088151, 5.713070424014566, -7.419820753696548, 1.9482138310187693, -6.847575596534192, 7.17775702467479, -8.20761508055816, 4.2934217377459145, -0.24747160730215612, -9.996907377884979, -5.009176961600639, 9.09392424552166, 1.2594767785409893, -4.623339098493147, 5.539216116186756]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

