import random
import math

WEIGHT_LIST = [-8.120819428895238, -2.3407165110248287, 7.285822928351511, -0.6403302651741789, 4.236050065226378, 2.088655528163567, 0.1670382808460677, -6.825623184327344, -9.381551155933014, -1.3240271461469177, 0.06735288520422655, -1.9680662850909658, -0.23910054539348893, 2.0015259437970427, 1.157930295049642, 4.04682636117269, 5.028350254825988, -4.637383694819397, -0.791798352193995, -0.5007103941401303, 4.041869176625189, -1.0784913101114135, -3.594690351440082, 5.6757306105816445, 1.4356696966951732, 4.75629558521034, 0.8434721520068362, 1.637622694397726, 0.9120489656057356, 4.503046996845544, 4.186797902505405, 5.543253726315064, 0.8449364299796345, 5.765308266486987, -2.4795196960806614, -7.653128373357623, -4.0875952870425545, -4.683977022952952, -3.9000958416494496, -1.4462973344943273, 1.7020217263556698, 4.261684019691559, 4.211434586566624, -1.9896317502018162, -1.086117443637451, 8.91970551933586, -0.07598899563561379, 1.1738924291886732, 3.0725691006480327, -0.00537241993367088, -1.268474284483157, -6.260003139880948, 1.019386659028429, -4.904132410789519, 0.6730208905780504, -5.59923993094132, 7.974204781142943, 0.7809228526493757, 4.196413089370661, -0.7890633005918293, 4.632949828129839, 1.91825799290153, -4.9105119573957525, -3.3994572425892904, 1.189542189801974, 3.490665459727391, -0.9805050087973831, -2.0198285572235464, -1.1478775312270433, 5.73517749158482, -2.8486875102045333, -2.531922661357385, -2.6062050543829556, 4.833481652507558, -1.6425558313101722, -2.538660543643382, -1.1053965115720334, -0.48622304450885184, -5.511895772537889, 6.034899846342059, -3.0211415566149715, 4.936696567183083, 6.124358314141945, 3.8987718638762026, -7.359289777918189, -2.07708667819499, -5.341717709424246, -1.505110188089022, -0.5376015311158995, 8.231069337672128, 7.680456349153624, 3.7726915926307054, 0.9566846050697466, -2.3124843505079475, 2.7911494991909693, -2.148698041778845, 2.32372111792553, 1.5226923757572295, 6.206993428148722, 2.351280367393935, -1.9134659389775535, -6.744840444400433, 6.311243979796708, 4.960967414831172, 4.751295194537449, 2.2280255123313, 2.6119057612962933, 5.312058608881353, -5.5973236110464315, 4.14623555833781, -7.051125057917196, -2.840533412700868, 3.0426622071846667, -2.6341554623000953, 5.4880242073343855, -2.0907618041135376, -10.502957344005189, -1.886694414118769, -4.668487290770247, -2.5575864968808624, 3.250786087267799, 0.7653171814053714, 7.478149953166346, 0.7521332295511254, 2.0570851409911444, -0.2848704463621187, -2.5087107094009324, -2.8854245337541964, 0.7600668226930178, 1.7748781849445625, -5.114842529597849, -9.417246987721038, 1.9597110301678318, 6.588889384996408, -4.897951406860477, -1.9609520384630033, 3.577380828283721, -1.599935761548149, -3.783197840758951, -0.12780568667404824, 2.35731774740171, -2.8634922264537797, -6.998345307712845, 7.5470541984720025, 7.446271543021201, -1.5053280871647603, -2.913281887989888, 7.814624303364905, -2.5640207192802853, 2.2554093464456324, 1.8948622284012013, -4.013076738103033, -7.236132666532866, 1.0606129121379186, 1.4045907849180113, 0.5592435564481795, -3.8825549650569524, -7.276199413551143, -5.645262864025259, -1.5708196349264387, -4.8966744379706855, -4.245782301188929, -3.0360533289622236, -6.4536423102364004, -5.092933297594192, 7.156797780471357, 2.6191955198462242, -0.5465126359076138, -0.022632109215882323, 0.9380074647684276, 3.4527715262121506, -0.05610623490418698, 2.074261390903824, -3.2116064046090265, -4.155296969653798, 1.7725648076282274, 1.0320698664399166, -6.738884773682743, -4.950837947759541, 1.3785720345820631, -8.104880069868694, 9.008828912098524, 3.765957961009833, -5.713631568675488, -4.098002992967488, -0.6979511994673979, 5.801333613273634, -5.551140577150078, -4.997047419461298, 6.876224673556541, -5.375542821039179, -4.504502445683938, 4.813432675397099, 2.0412193112538657, -5.869990531395629, -5.610359386670553, 6.864561746894958, 4.1571400511287635, -0.4484780736574948, 7.148465704694052, -5.687206074268216, -4.615895730893411, 6.408672585405931, 0.86732371703404, -0.3443661636609563, 2.299739828075315, 2.919026226132225, -0.7443308109782178, -7.224397325719416, 7.383563092857216, -7.355365277754791, -1.8811966467829782, 1.505111219383671, 7.21158406822246, 6.4153332013389885, 5.641091170891342, -0.3850153090180938, -1.5606039205431197, -2.8166720871993824, 0.6549815728220276, -2.321559380252975, -2.1304868358859794, 0.32022283150963704, -2.0540389727997432, -4.904136968963819, 6.493439849217987, -1.122020293623202, -1.4087509577090174, -3.9802391004715827, 2.7197002081051145, 1.8817574877935117, 0.7600584753976267, 6.108621352922265, 3.6779590661131882, 3.890303285929794, 0.4984277681059004, 5.373071633419405, -5.965356050207827, -3.0890939232361507, -5.6930189199565655, -6.554287187972511, 7.409488951030967, -6.842510281851068, 1.3186209102143622, -0.19134090448403127, -3.000945532232793, -0.0554034603925313, 4.252976820686825, -4.672509955511857, -7.389565644062591, 2.183566069985625, 1.7266208680009643, -5.362234029001299, 6.466832867088905, -1.6841047274753538, 1.9007841051061973, -0.8832732745787641, -4.236197813719339, 6.222408734123651, -3.5672317577801866, 5.843535017291407, -4.179949252795529, 3.058037316859954, -1.4941521611302142, -5.362498449184203, 4.3012651661415, -2.5467159475069767, 0.4971966092516813, -8.181735612038683, 6.981371110457162, 3.0315949784635303, -9.730800014065425, 1.8592389375108884, -6.667523547745141, -0.6808456506787923, 0.38798402110991426, 5.459489321889247, -4.1276206399711795, -1.252839953650866, 3.379266751759248, -1.0399515139578137, 3.83127060767728, -5.677864577729031, 2.9830275297474937, 3.3293001201909083, 1.8447971045203362, 2.552790884646811, -6.626017106979022, 10.044217136200647, 8.996161207705242, 0.7331201956420111, -3.8205389317273877, 6.2321126679252865, -0.9381974435162519, -0.8164948406482189, -5.990664582738157, -1.4308394753875597, 0.4459737156738435, 4.853561319174966, 2.30011137253343, -1.4270532807106477, -0.11781339335664034, 5.170149855395042, 0.18672162443181112, -1.7330680515655936, -7.227013251071885, 2.1083773776553767, -4.257240553903839, 0.9540694021252465, 3.815344328226061, -2.430477241686754, -2.042905138751223, -7.6128291596514375, -2.8937171329369438, 7.8113342822593275, 5.468516208343916, -3.2481128166569233, 4.450904585131747, 0.8877775093207019, 3.431300383998334, -2.975697407040733, 2.5885354552402156, -3.427463763418949, 5.839892423536864, 1.3193661657366713, -0.06825411115158975, 0.4212067046197807, 3.1945893018169365, -7.222202919891146, -0.4495305554244432, -3.572595344033792, -6.859644906661255, -0.46470229444298805, -3.6477971292291302, 2.885862651977526, 5.335175578509357, -1.69112159898056, -6.479871431625878, 5.421390371040205, 3.1204455877000603, -2.431222718767557, -5.7247500933482325, -4.372314589884723, -3.594487917408255, -1.6779563041166505, 7.27605416489029, -3.899528596898216, -7.571938530825212, 1.8434423305099972, 8.545527913817285, 8.594257198306263, -9.235684481167947, -6.895744839403576, 2.7584142362199597, 8.176815263784258, -2.6229733364318846, 2.4936997347636622, 7.700589406863409, 6.286080917486441, -1.503148428126801, 7.189276713650102, -4.042946292692951, -1.4379578033642284, 1.2806618607018365, -0.5942051847311622, 2.454308297615979, -5.625040883486088, -5.4072148387072065, -1.9453219703223663, 2.286958822168386, 7.393277148199936, 4.216253754552758, 0.5362499945598829, 3.74434126411765, -0.044679501011645695, -2.268175446875622, -5.050225250325727, -0.7483304955181422, -1.4763327204649037, 5.390863957888528, 1.5834871365057959, 3.208173393838204, 4.221900886854436, 3.5374311749129776, -3.1348201532689552, 2.1496632340770017, 6.648122108742405, 3.231312338427325, 0.5724957430771027, 2.2332672974176524, 0.3872318053515169, -3.589615563183497, -1.347784592594279, -3.6419130647892257, 1.0966752807551565, 1.6994891082890131, -0.23692506365528457, 1.7233655290435839, 2.738757930183528, -2.8418813251011734, -6.329242167487691, 3.3371270546689935, -5.891525599905102, 6.009353950217823, -0.298204475848179, 1.7691510602093201, -2.9552068099858992, 0.5167369619485036, 1.9246712822155034, 2.870775598387543, 2.740456097378244, 2.9212753025772944, 3.3648157221398023, 0.03903102144632414, -2.194627106582005, -2.3434078526457167, -2.651460621887458, -0.07150534439940043, 1.150214805400659, -1.1609896013892231, 0.805053998353739, 3.3604287733760256, 3.958214998369373, 2.1161837731321387, 1.2768216789236897, -4.175811409234104, 9.07797897360961, -3.5823607275636467, 5.023027061731696, 3.845888948644501, -0.5830603975558155, 4.755154638428196, 0.3280884965383679, 3.18462543060191, 1.0622108258687684, 3.295016600398381, -1.6855974107564016, -1.696676504468393, -6.159660481824883, -7.896804026966844, 1.394201369230658, -3.316474455734729, 1.2532625797515577, 1.4739016937351939, 0.7339160809513037, 6.753956839287395, 7.635032360103194, 2.889683271915449, -5.465350254015913, 1.22050923285335, 4.967778537561362, -4.047555765311693, 3.021141521984647, 2.6250568962700496, 5.413725767081152, -0.7620568006585045, -4.272087154437818, 6.283671388410393, 0.11692043794163137, 3.7981670997782038, -2.9488195622903346, -3.454071634633743, 0.3514801067476724, 0.8153840572308579, 3.112819687106406, -4.0525543987775485, 5.115623602011477, 5.263671475526596, -3.650022432024527, -7.474898801242463, 5.270350744015971, -1.7606787763516585, 6.982958865399116, 0.18510197018171692, 1.7857564897789486, -9.556715080385448, -4.230538628386968, -0.5919662567655462, -1.5782600388769241, -0.9929510599376004, -7.111928745752883, -0.9186050107444457, 7.925456529570306, 7.883105122981755, 0.8207409636463361, -1.4083868461129732, -1.9708046571298794, 5.717830609114647, -4.3953443548874525, -2.040823300686963, 4.809588478070754, 0.39672389043988354, -3.4497536760258565, 4.7948096846713995, 1.2203088320610043, -0.986765271902649, -1.0381883746564597, 2.0024840649545026, 3.107575398390516, 3.810808987148942, -3.0359213756569905, -0.5741334358250889, -2.922384126116688, 7.205258287908822, 3.0598978633727842, -2.3777489373693843, 5.383887936583249, -1.455032235524706, 0.18997220276429005, -1.7811334535901546, 2.019965568697214, 0.28581167622051895, 3.484851195070371, -6.820978602227322, -1.9301310201966442, -0.03062384585399036, -3.359985730274566, -2.184015820033465, 0.5370250309405473, 2.1819250189033688, 3.8661385789548888, 6.160466482453852, 2.4084831002991276, -4.836562210391644, -3.228868915121341, -7.63430226325874, -0.2247988424840049, -4.057676573720032, -1.499959081967312, -2.6897604484470787, 4.296790734364112, -4.010161356205185, -6.339640494992274, -3.1607676606885113, -4.145969908844138, -0.1197862422388481, 2.0308043494719907, -1.6554315348165818, 2.2971719724200454, 0.7108713416812651, 6.623157872345707, -0.878977379615111, 4.3338028882265585, -4.050983723653264, -0.20846359533768227, 1.6152876826827007, -7.928918482817185, -8.471065999829104, -8.449893112195408, 5.9366958602718904, 4.215572837122692, 2.1417937475411635, -0.3716187677507605, 0.8880452221132054, 0.029279815941239795, 1.0860488869572655, -2.7289274477843466, 3.910614614117672, 4.297087064791329, 3.1248742898788264, -5.106688651269259, 0.2095693743530549, -6.957641735845694, -0.7192516404364735, -0.8812056408859175, -2.8092500091182147, -8.560950705389862, -1.2372358951412745, -2.906758053601531, 1.9947222334149304, -5.179115344541902, -0.7923048030947748, 0.431110131704755, 1.2665814349606703, -7.572746365468124, 3.492645918524721, 3.557166049930255, 6.213648186807698, -6.157725662940764, 2.738721732331519, -2.395710564767427, -5.019666184750058, 1.0917494595981339, 3.795151008573984, -2.0199288127820862, 0.2797914813472495, 3.8504005794142158, -0.4136849328040653, -1.502356945012945, 3.6114721271800203, -4.807879055714934, 1.4131375295978026, -0.6996009274567988, 1.0607406520441174, -5.276695986795486, -2.677865543081183, 2.355473560716558, -0.5396850515896092, 1.2117742741400208, 9.042844056803213, -3.2468421708327737, -9.75945600868376, 0.6421363041166614, -1.5285428959404153, -1.2817039922444535, 5.5820930658575465, -4.584175300872752, -2.975503285480766, -1.4207417047819888, 2.0020237644784973, -3.9264193018764852, -3.1703773536506974]
BIASES_LIST = [3.7037668496545417, 1.9591505517315837, 7.143256746334267, 1.7583653370317331, 0.9453662012934672, -3.821044027894735, -6.561597345303915, 2.5890692001637303, 5.4706128725423, -1.3597331342994023, 5.912087937577182, -6.8416986610396675, -1.8183046427289122, -2.8613972553502114, -0.8785018992709115, -1.147483481417164, -3.308877345933932, -1.2843179042109312, 0.39488236029301516, -3.901864510438646, 5.7227775615017, 3.1957975475846463, -3.4761558040647755, 0.2916648371454118, 5.387620064378849, -7.75831759028013, -1.566051729524668, -5.868358987682625]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

