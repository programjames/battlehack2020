import random
import math

WEIGHT_LIST = [0.5649270779289894, 4.905656071516001, -2.3284105773601187, -3.5585354595609595, -2.3246909642997617, -5.294103331505089, 2.8666581353488203, 1.8448195395749576, 0.8006867908548213, -1.1146999753456, 2.5888417583685976, -0.03116344532860807, -0.9098643766737304, -0.7583897465567537, 0.23212235263006714, 4.922100839610247, 4.6723335131997965, -2.9704141375174924, 2.830356968749695, 1.8290394298416919, -0.3754218423641981, 4.346351799796221, 4.92666970258915, 5.4101666920558795, -2.1065706202315013, 1.5996956805173748, -2.1963037463855404, -4.371333075619783, -4.910661726146024, 1.3971159122799455, 1.3552558346243713, -1.1053106413083613, -3.3933747273467607, 5.263150687652133, 0.9911675871971278, -2.4938631472132746, 4.151851634820521, -3.29542923434725, -3.7582580258559757, -1.0275858309123493, 3.8421290413250793, -1.876301036460818, 0.42370741267732315, 0.17220285724620643, -3.2691804657310146, 5.735826379515128, -7.875149507730947, -1.0336960131033677, -4.6116731343974715, 0.8826617716771354, -3.8384410718387505, 0.6729360996685707, -3.597912575826603, 1.886194844058261, -2.2441253718542096, -1.5873091206451064, -0.39441310695242376, -1.9834239600124532, 4.910895696757333, 9.859739455700105, -2.1848775024684923, -4.501769302741491, -4.3142453371944125, -3.521552188478864, 0.7384139975014138, 0.19712325715025908, 5.360861687655563, -2.2033661967771376, 1.2184926566624807, -0.6829361572361404, 0.4425939900552372, -10.353090284482128, 0.4961500709063417, -3.6949556698423907, 0.04054318846811025, -0.9715697282711713, 3.379260350235469, -9.797579861314533, -0.07844878179033322, -0.5608631905031777, -2.4117463188469515, -1.1122283712026961, -3.2646749989974078, -1.220176457915882, 1.0221904162563535, 4.7951820480472955, -1.8262858489232368, 3.991711687893601, 1.3611634195839726, -0.6848659621236765, 0.9926886199909362, 3.7830001532486524, -1.2481776901874844, -1.0786171583180229, -1.5783546932762047, 0.5423455576180961, -1.7566035759258556, -1.1216447175758448, -0.628640780670794, -3.6863213275059525, 4.122061522992673, -4.82385786417277, -2.3381026224894295, -3.5994113850207925, 4.939191787499664, 0.7445762782265841, 2.6910580765344765, 2.6884159221280424, 4.960073107963174, 1.8729384488883905, 4.386444879901525, 0.6097612767481148, -0.537342698470328, -4.3249759613659835, 4.460156088253746, -1.720629176810853, 2.564091327531228, -2.770118935032352, 4.553279810130771, 0.5677614173619521, 0.6296238637564434, -0.16368820906921222, 3.6020232037233098, 2.610903720193076, 7.006059345745592, 2.449597472467413, -5.373845831444107, -5.632413285406564, 2.5513579058510385, 0.05768212249306738, 3.624401507549661, 3.8433530188632705, 6.5072063778099904, -5.739086488571216, -5.19744075276959, -5.161051303535799, 5.246078258475602, 3.497002248513257, 3.554647586998712, 4.5468321538382845, 2.077923840741535, 3.4780399287907495, -5.237537186742017, -1.0540737425660918, -3.69336496240776, 2.5213664322713205, -3.9397820771690597, 2.4940007277880936, 0.4567595372045896, -2.473349104690416, -0.4267324843206699, -5.103824426058512, -2.4170017387901246, -0.007385224872323575, -4.14896338774891, -8.692271138749165, -0.2175225149465245, -1.8065691890295639, 5.450006805915539, 3.804465134116398, -0.9537590771186605, 3.8399559837623105, -4.548266013695224, 4.4853586801775025, -1.1194870561831816, 0.36041605151884626, 2.114684332081214, -1.7031008371587866, 3.3675461788340084, -2.602117223076622, -3.443807119390568, -2.4161707424888155, 2.075780449761486, -3.282661843457838, 1.8376093182340947, 0.19776130368635308, 7.301793591643048, 0.13257947173292234, -1.2339652627423843, -5.361427811068269, -3.2233150352364284, -1.8778622225324866, 2.1450453713512574, 3.650887680873385, 5.114571041769275, 1.140418342732731, -2.6238068362111155, -6.1042485046996315, -2.5062947179259574, -2.1239645897120307, 0.08672008248947817, -4.28134987220536, 4.574957900267418, 3.2446776307961187, 1.9225524843542274, -0.4310412920449375, 0.7566713316629035, -0.5257309112176601, 1.6769751267457742, 1.7570602547301901, 0.13214775336900034, 0.7055885710102643, 3.0385727621200465, 2.420150359399582, 2.2513177458913236, -1.3314811217945255, 1.0258481965104012, 10.580930118008148, 0.5812448023758249, -1.1361587908900408, 0.6097741838897927, 0.7605709163609012, -2.9331460121689723, 1.3035490688929545, -0.655389633697385, -1.755368726765278, -1.6033219692079694, 0.3392909372687029, 1.307502979459799, -0.7499144441976566, -3.9112667132863628, 4.076351953113288, -1.5723739234393308, -0.9581114920156826, 4.249885281294928, -3.5299208667050177, -5.036255290741735, -3.3288748246158537, 0.14395690116374538, 1.7457149496076858, -5.338776834604579, -1.7054133898540647, -4.683106031471984, -1.6421480532085195, 5.274083026534971, 2.4028321637609134, 4.263167866601193, -1.159985019182868, -3.619337341527026, -5.9383460453406665, -2.5730745342360413, -2.5891921353002894, -3.589141755503934, 4.849752072124872, -2.5963250353394223, 1.2112947849077422, 2.595174632829161, 0.20966206231963774, -0.08569444782423306, 7.1237809643351655, -1.5341972697777422, -2.109483261942976, -2.299970899094433, -4.266623468277169, -4.866470712909979, 1.0112606038480685, -0.41839081056019267, -0.35869392973057246, -5.815916935087966, -2.489490852163978, -2.736727933433178, -4.57387198204878, -1.8303067119798249, -5.8909675316584496, -3.0769486113948803, 2.6999903423009077, -2.3728551312561823, 0.5949679986125468, -3.757812092580576, -0.5588102630119225, -1.6531439154673178, 0.16842646291112562, -2.895058185552463, -5.613020284220921, 1.5315510051097716, 2.0275332209230132, 0.20469526014350345, 0.9986494899995356, -0.782530233850638, 0.37757343738750426, 3.9502885538813417, -1.0331723877301993, -3.90482496133646, 3.7379668081067803, 6.155262059217578, -0.07501577418381583, -3.3762946896958854, -1.8259470877111048, 2.645741914416583, 1.6933546759893967, -2.977475879630528, -2.6926795412591935, 2.550230271075388, -3.575302890918824, -2.2565645622952313, 2.371525367225023, 8.822558415100902, 5.944081330079382, 1.807803196065395, 2.058904228287011, 4.555731559799202, -1.8755064060037592, -5.846077464181773, -1.7758015190643628, -2.3698405569853507, -6.86381995927947, -2.8707530489177864, 2.2806296562110084, 5.058919610559164, -1.4257167502910424, 0.6770956179408374, -3.9195625827051574, -3.6017987077471227, 3.2696070429961925, 1.8547267626094741, -1.7852878364456999, -5.656821589474126, -2.4144522441110188, 1.3018338032104901, -5.603205751110964, -5.323934389005191, 1.2684977103144723, -6.790585530352062, 6.400383200205203, 3.4480743750734058, 4.597919814502137, 1.9891037744686404, 0.2892964142029468, -1.2771921930862025, -5.552026054576182, 3.950383925613125, -0.33976593725815285, -7.435816767087058, -0.0982998371729565, -5.023594189819497, -0.49375293250347296, -1.6742245698960845, -3.464484744667733, 6.504702960354586, -6.770713006248586, -3.2343156322906763, 2.661246446901347, 1.4692129040875506, 4.184793191810918, -5.7077890203613215, -4.631303705754452, 1.6964866075183884, 4.804354972377623, -4.859168473060158, 4.655352108347641, 3.252800978590532, -4.007874792708992, -3.386768777515364, 2.313805838898204, 2.344447919517527, -3.395927927986558, 0.037580504088675346, -0.014525820591272946, 2.81619052283323, 3.24168973661411, -2.2385424791832227, -2.8126294423819713, 4.925438690706302, 6.040590973753121, 5.295812900904146, 0.10885717565295452, -5.845079094111616, 4.260367130780414, 2.6030474283947775, 0.84850698497464, -3.209312375109372, -4.695608876927536, -3.676348491433478, -0.8764951165867655, 0.3451811771627797, 2.070298039038943, 3.9258713055497014, 0.6810481152245486, -5.640922194562652, -5.257267578212247, 0.4151953951172294, 3.4234879686082964, -0.8672102284617743, 3.16315000401952, 0.11926069063033536, -2.8632739183502673, -7.241785261753598, -7.879761531822167, -4.59558842621047, 2.469837438724254, 5.60942673705505, -1.7084603130782103, 4.705270504740769, 0.5138583619291781, 1.4374879307641877, -1.2907266456621327, 0.3469854419814635, 1.1836805839531297, 2.2586310042578908, -1.4917786741994152, 4.294063075968268, 5.539878833532201, 2.7190099545977757, -3.4456091318582436, -1.7274941157714532, 4.552750204279023, 0.7082385581294502, -2.1525787177439146, 3.8768945620175432, -5.5505038225156875, -0.2998753454478303, 0.7710140279007021, 0.8985722622175842, -3.285220763777124, 0.9719773452716036, -5.6853295270980215, 4.143647216756378, -1.5800950889895744, -0.7191921702536896, -0.9881664429785705, -7.404588873152885, -1.846613654806226, 0.7513148968928818, 5.231782657125754, -4.340570245791457, -1.1285326778927467, 4.0803408953396, -2.7588357254859877, 0.9290143730815632, -1.9362271220739373, 4.387606348593369, 2.779660094315322, 2.9943952026752068, -5.904731427209758, 4.9320144211739985, 6.188003919152576, -0.7351259383840775, 0.8034279340511467, 1.5872886171554028, -4.754386350993202, -1.6113806280046215, 0.6656742272891591, 2.015577825716153, -1.8217906384987688, -0.3811745598820009, -4.324398970050409, 0.7062185795459441, 7.985911534500494, 1.810699650468448, 2.936573478866424, 2.41796981115209, 4.51798767891102, 4.934264153673868, -4.355022267486549, 4.685293508007097, -7.141410705207435e-05, 3.630883898259791, 2.55197305021662, -0.3730107607570117, 2.5147142179630184, -0.4179849732366393, -5.907985981395613, 7.700299982851554, 3.6851174623497154, -2.0277585163871215, 2.075203618732702, 1.491219472544158, 3.195219774387607, 1.3670913352857585, 3.0496955017597727, 5.192579128304426, 1.6622417814381552, -2.3257728976716288, -0.09753867862397077, 2.4936827642869983, 1.3409582601839605, 1.581437473492769, 6.858925889907699, -4.273390951726153, -2.4561317902597417, -1.1929180098443695, -5.091938837819383, 0.5602454971736723, -4.359359606080266, 2.698518493048319, 0.4109100580451029, -4.407240029936264, -0.8192453936145879, 0.4772404587909294, 6.272886839350502, -3.286054702183205, -2.873590728176343, -0.6855763089835819, -0.23832611517318048, -4.869531759301616, 1.3615360140323998, 2.6100545533913113, 1.846035471545424, -0.3625707782589603, 2.7267189714854254, -0.30290837832275175, 0.12935908735642315, 1.5423328107917056, -4.740747871889898, -1.6636692444250172, 3.6146365724857312, 2.868385813836822, 0.4993282768865966, 4.271831003469966, -3.053172632998763, 1.8200718771071462, 1.0513028217521492, -3.781327181928584, -1.7887486992959192, -4.9077972943164445, -0.975498224805045, -3.988287374298555, -0.9963676466360449, -5.96796923347351, 0.29576537213045656, -0.04577932204735288, 7.0133409956958825, -1.2012719455753196, 1.117983068307675, -4.012949583630171, 6.958158023482476, -4.074926353954654, -4.1308326153727855, 2.041374608663378, 5.111445667358243, -5.498329367751499, -6.41319046980132, 0.8995990661489296, 4.2335856541978165, -0.908288628213009, 8.078669357332306, 2.512596536296975, -2.296517875057238, -3.335935251039596, -1.996694507567125, 1.45645899021086, 1.0538152253600197, 1.4454916139633753, 9.014489707169782, 3.817676618287626, 0.5675832825882413, -1.2642862549297642, 1.803649230823418, 1.5117100582099017, -0.5359510358609921, -0.2855007681079507, 5.963885420360024, -0.1142161919453634, -2.786968722033269, 5.41688167790903, -7.7605651178267445, 5.259351935472396, -3.897592034005996, 3.410985772585986, -1.0091049341709548, 7.798956774985863, 1.8902012559816823, -2.252554325835964, -2.1774297886960468, 0.047563202438963365, -0.1073714940389398, -2.4578958469156857, -4.413865823216033, 2.2099776159941418, 3.9541942961151357, 6.046396981898872, 4.884815541527687, 2.2639133134209217, -2.153527908080041, 0.03746939467154968, 1.840035026632219, 3.6984415348294726, 8.9400242593202, 0.4109541858812762, 0.22355505693376673, 9.61190675393194, -0.6072877542245488, 0.5390445097128644, -3.196557857229836, -2.550194026397815, 5.765359430497032, -2.3494185518887054, -5.455633551873498, -0.23022956843615652, -7.358876096466325, 2.425250681507847, 3.1074501134827583, 6.118560459012995, 4.955163700847349, -0.9537236366378085, 3.798889293049051, 2.9244539339400704, 4.114036718586439, 6.800588812709443, 1.3888892252808989, 2.3059207094849064, -4.257830072548862, 2.0251031331987, -7.738768286935419, 2.1577470374017365, 1.2631151566224132, 1.2185417356784476, -5.136763783957814, -4.553791866969606, 2.367154924890337, 3.0355265391727255, 4.2670370726437, -9.15578785655232, -2.42249539443699, 7.441976533705949, -1.3619266910632517, 1.4445111137305724, 5.817740760041329, -3.4613983475227323, 3.1683222674629485, -2.0152848564490364, -9.989675455235279, -1.0609683656607038, 1.473083986517132, 2.889733166628974, -0.9146367513508737, -0.7046453727812785, -0.8158951798264688, 2.2891739042636345, 2.4827514967308324, 3.2303668071357268, 0.2801776004850291, -1.420530558081069, -4.278760900703754, -3.2318048014333516, -3.4125054078037733, -0.718220393247272, 0.8621821853951894, 4.219213953648261, 1.9534625502334557, 3.180129165434719, 3.110501249204972, -1.4303539160420078, 0.1554042144604356, 0.9633124204452052, -3.088217727557021, -1.645684115481011, 3.4823171727045987, -4.019120198935283, 3.3671976578523504, 0.5668598177768793, -3.693793410249119, 3.4344633318175943, 5.919655186184055, -0.438145534182773, 3.2294296965065397, 0.3809458197252275, 1.845629289752435, -0.9027653939599035, -0.21914361967206547, -5.257773336292312, -3.356355001949935, -3.707783990932001, 2.3501296388249884, -3.907442833931739, -1.5359712338789713, -1.1464209236179563, -2.0580029206453343, -4.912037941791269, -3.870824170550652, 1.9774874765187038, 5.677736854121495, -0.19675916871493246, -1.8299612612416265, -1.3532095814566525, -4.279091488729374, 2.337853429592328, -1.5532453650418723, 6.6910220858694025, -2.6882208109616514, -4.760749853860042, 7.883581512674296, -2.046938634220517, -3.280816458625498, -5.154661453985573, 2.989517463085947, 1.5307253399813916, -3.5617063108698823, -1.3640991019066528, -1.6101792404874586, -4.799382098573827, 3.3311194184586714, -1.3001646904508668, 4.383764113359944, 4.631293617092031, 4.292962966225975, -4.915776748998151, 3.652732922550153, 0.2363688538099332, -3.399381839688891, -0.35451544262783935, -4.737530294043462, -3.536074878685279, -2.0677725977116292, 2.520504927344388, -3.4140160144425136, -4.6789709631335406, 1.4182420503569606, -2.7638588995225533, 2.012024082537395, 0.4814943324949834, 1.660016366344423, 3.963003199814952, 2.917776206873694, 2.7799144004993184, -5.864392046958366, 6.982082169870157, -1.3615276738063258, -3.4720987975331683, -2.8634121923237297, 0.14338022884648136, 1.484322218828176, 3.0371587621953053, -3.5914150920215633, -1.0650582972388172, -2.7607781221861942, 0.5935599616392261, 2.195757216956216, 6.128129770341132, -2.7541473168054025, 0.09948025645876658, 1.4734103148258975, -1.2443730798408705, 0.7347161249748255, -5.734040476613748, -0.8335312922551381, -2.3764542185217365, 2.3617112112032745, 3.7554529471232936, 6.920269382234113, -0.8703726443030965, -2.2309052500164777, -7.982637071413513, -4.308939611325267, 2.993880828388451, 4.222997380849247, -4.424474994293566, -1.775788968417401, 0.9545652803896418, 7.5956078002656975, 3.750455383404689, 4.870006527328905]
BIASES_LIST = [-1.3917291330813197, 3.709323615822772, -3.614630463274044, 4.801352458968336, 6.327006304609863, 2.768965355498246, 1.1062289820676807, -0.07799391233541104, -1.1117079880989111, 2.6501230760792183, 2.1131798718528363, -1.376009390255245, -0.004540197569920855, -2.6325939910857987, -5.500740263921463, 5.283103633449112, 4.81464859876745, 1.45922031900487, -6.572975775254614, 0.009635682939441295, -5.081350748766467, -2.808127659619594, -4.076134672062303, -6.094565044735339, 3.922668829762473, 2.646502397148513, -4.0251488322728495, 2.920814063342071, -1.0815110334666966, 2.289178755548106, -0.3401002521282343, -2.2974443241547977, 7.132455496814485, 1.8502600010884211, -1.6765032752033922, 0.4513040727266426]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

