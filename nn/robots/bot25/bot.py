import random
import math

WEIGHT_LIST = [8.40286382059977, 5.770065849589987, 0.7760926777836534, 7.389765200847695, -2.4447725372957096, 6.0158592308819365, 2.6859399104379644, 2.9937735014336138, 1.055498976982479, 9.602150383446666, -9.546325118838787, -3.858022961386429, -8.312163067525777, 0.1961438602052894, -4.338839061566779, -5.222110828286128, 2.485884376527638, 1.1205287027861672, -7.147278530578047, -8.706737969178455, 1.2588033919164605, -1.8600840296391894, 4.123934147947708, -9.91983896941095, -8.481181109588471, 6.472866030201896, 2.5263825284764074, 0.5889037911664232, 8.566940242975022, 2.7299184531196126, 3.169032237752919, -2.693134316017276, 3.5936902566930335, -3.8939726523262213, 2.3632735826445934, 3.4313481481905033, -5.921901923272848, -2.5417095421224456, 0.3232390143011976, -1.9838833095530966, 5.587971162267957, -6.906960933788846, -8.10959982893483, -5.167853924716699, -3.9506476288263777, -1.8587077248560941, -1.3140836743740874, -7.00706428121344, -5.530621722883657, -8.162758243020573, 5.2101570253321405, 5.130588753766121, -9.066776306503193, 0.8352211450791085, -1.8675419952631689, 9.490998214918637, -7.943369020882411, 8.315036752222792, 1.0782232183458458, 0.7581557534882162, 1.9300872581394142, 8.757010133232004, 6.203285827155717, -9.131738843019932, -6.214680254223195, -3.8389080643798383, -9.622442861815287, 8.79360516258443, -9.822158303889152, -1.501665294489598, -3.585536989675764, -7.135631965365363, 5.046830691208843, -6.997956038933985, 2.9599142823095566, 0.817729777370495, 8.600880322385144, -4.537606040819108, 2.8804477941660593, -7.668035727942712, -7.554658233739351, 2.38060768544951, 8.673641901780684, 5.169073374309113, 9.74899129034511, -0.0002111269600018062, -7.3536872286431905, 7.772358661430793, -5.7919491370835585, 2.9915498205399658, 0.07112949440193717, 7.238962789787621, -9.015967993106482, 2.3220488586924546, -8.316293155153613, 2.985556537956846, -3.7808502807101636, -3.807427513592887, 2.922831417733123, -5.737655603242953, 9.347454396550397, -2.159282370885112, 5.165897301213818, -7.607968879664044, 2.856138679803218, 3.8922539492116357, -3.874526005103287, 2.798090466065581, 6.646886489269644, 2.723890172365305, -3.505278307714395, -8.962639464995801, -9.603256824836485, 5.914164738854364, 4.8291083122423295, 7.683661544177138, 3.2689982685633083, 1.2235599491431142, 7.715489413449195, 1.4739735971337975, 6.78858548559964, 6.778862469469946, -4.023338935017349, -2.8526753678490424, 3.968248912669976, 9.593922813893812, 0.8571912335537402, 4.846959302391147, -7.4079773514653935, -6.405299352377234, -7.3357920291170124, -9.141322869477957, 8.706613226438595, 5.825419915858223, -5.155016039052647, -7.159471437019707, -5.485937608780215, 2.25508091888425, 2.2616052848916866, 1.7043840655378446, -1.1485714480590286, -4.007221876101601, -1.9163220777225085, 6.291615043988671, -2.951161044633757, -2.973761603113676, -5.361566259023793, -0.5750011675276046, -1.6036845337886945, 7.131025957739009, -2.886740077117529, -7.526255785051086, -1.6040691307364554, 4.7409613394948185, -6.6844687402129725, -8.222953895961535, -2.83026818000073, 7.312252368345771, 6.295428019095908, 4.293770867614343, -9.255082450171875, 5.130091783846067, -4.807209569463689, 1.2860172749711296, -3.505644578058746, -9.507165815599965, -8.890356698542124, -6.660507146428798, -1.4804769087502798, -5.055065286809022, -2.625526317259739, 6.664552002924637, 2.964855467359511, -9.53469619429791, 1.8043186314216264, 6.191920109709322, 7.871458625970174, -5.8524739799911085, 3.3983559829463257, -5.770842405265455, 7.312873851635583, -5.543609758197736, -2.462333211219356, -9.414131172638577, -1.4551843563078783, -6.685072162563621, -3.7948123271392875, 2.007742326420459, 8.784021762010983, 7.4703738655468115, -8.728398919808363, -7.4326863986636615, 7.61939358339216, 2.3107840721176682, 3.5325252349921676, 4.2604177121420825, 0.1342964482384552, 2.0833649434261083, 8.89251622953541, -4.924450288982014, -4.6840162017744325, -9.024471936430967, -2.8122332181085863, 3.6794802167687113, 6.260526650126906, -2.8991681546411474, -1.3580553058615763, 6.341813953592567, 0.9289542905109105, 2.103381562375983, 7.390464863679874, 3.694282340641891, 2.92148633230199, -1.3587277782447416, 4.945454338983142, 5.44806013321667, -7.821055236997168, -5.852411473617618, 6.7228330779004395, -5.728244073865321, 4.117992319793554, 0.9496429198318523, 9.94521080349535, 5.837114946879002, 3.538641056119914, -8.473205111649646, 7.723172152278156, -3.152620621909888, -2.5899929590783355, 1.357716992351266, 5.742266755335464, 1.7145504748148994, -1.7537961127314823, 2.204701015740387, -3.6817301826786553, -4.561011010132237, 2.108372785059551, -1.9364570241354588, -7.796217986376879, 3.286865298278874, -0.2926585761892735, 9.365542525681743, -5.280959847996874, -3.2604770656292477, -4.946105860424268, 0.822204184314332, -0.755667463331612, 2.8964714411390027, 7.705677392238886, -8.289767742260787, -8.117287501226384, 4.851627584000147, -5.661236185760377, 9.686553552573539, 1.4727054087579727, 2.7049474333836354, -2.1641203463857783, 0.1301069375032604, 4.890723247543114, 0.16029989083007834, 9.000846050193264, 9.062760314048425, -1.065557208250425, -2.827022275155411, 8.833854533371039, -9.81728045164285, 7.731406704929569, 7.884588648084506, 5.57516773799739, 4.466519604335009, -5.374806210784866, -9.33673262742846, 9.057479105042468, 7.285534677568858, -9.306806355426424, 9.550214487760606, 0.8571224456206359, -8.004277328149335, -9.942957335828131, 1.7615478188577853, -8.778570771278114, 6.274678060746805, 5.895431020656865, -5.3843249157018525, 2.7286565934168845, 1.6447830954972975, 3.0521510090578925, 6.359284270326366, 0.49534731115100783, -5.978349398794059, 7.981809699601033, 8.13199428255993, 6.48529527710393, 4.712140034981969, -0.09565383535885807, 0.4395322722238788, 7.003818949522401, -3.7299246625809097, -8.587006020254169, 3.6149063656139475, -8.145904419140841, 4.108320009366846, 3.058828632414663, 4.954734754537299, -3.3264917629751123, -4.0256595238263815, -5.9482434433120694, 3.8772523321577967, 7.4736279992900165, 7.4539663155085485, -8.868166263782024, -9.606265977918106, 3.2257963931106826, -8.70471524100035, -2.361925545703034, 5.792175561179395, 1.4050738591549816, 6.949504624272741, -6.908079221318899, 8.232817114342563, -9.673789926591121, -0.6551264298105703, 7.529110081603573, 6.963471255430665, 0.5677183234763721, -3.99417825632214, 5.269010503194538, -5.095770918257758, -6.668267262443763, 4.989964517218716, 9.441686749353678, -7.758108691898937, -4.768529024956769, -0.48524868763973217, -5.811305190036055, -6.100542858908538, -3.7874102532525793, -3.7282075971912576, 0.7774344988125996, 0.5377784433037505, -0.058411228931765535, -8.134611589969241, 6.345301899351256, 2.89656449326392, -3.640315932169889, 7.427703781693534, 4.504146283646179, -2.0253851610197344, -5.304872822948572, 2.655913728976296, 3.3977268397750855, 9.342513458550211, 6.071685025944507, 8.345722705380094, 8.828353578157618, -6.8530712970491425, 0.8853386547628617, -0.852750741637136, -4.70021800700165, 2.204384476803087, 4.66606542636665, 3.3858952104960416, -8.430804262755986, -0.7549038260974719, -5.850735272243339, 5.358777735124146, 3.1735838797274845, 6.796420024109228, -5.8180154707704705, 4.530009785312297, 5.190999613360429, 2.242508666683161, -4.720158655647742, -7.284601593359379, 3.2158450546343804, -4.072088080082363, -8.961825478696754, -3.045970901829138, -6.28231763906387, -7.488348338317541, 5.46632207100247, 4.543975096576716, 8.132960919375417, 1.6213421888291446, 2.1080645316970994, 9.313871799837436, -9.257758447955275, 0.1329889872634631, -7.268279593085463, 5.376058514415279, -0.6357494142825981, 7.743120165752224, 1.8368760602601384, -4.349710173139001, 4.8486536305755035, -4.313941711449896, 1.8169004654298284, -8.882962644931844, 9.642109073063658, -8.275920110824487, 3.7504045816092297, -7.090706054980378, -3.076799068189569, -4.269425592642078, 4.254631158907285, 0.7836438291912984, 3.3940164210699812, -4.552899843876195, 7.932919908637274, 9.53978727165731, -8.621066600787, -0.0694562928380904, 6.545741088836511, -8.450147472887107, -9.579582420574837, 2.991395131364179, 9.69389411318662, -9.91706375783314, 8.82372341836136, -8.18433577976027, -2.7960850718131063, -4.057050625169907, -7.573430454772989, -0.8966254193171519, 8.370387490654366, -9.872059828166222, 4.359077432681236, 1.2785940452220217, -6.532271564283376, 4.715954869488058, -8.02551978594443, -5.665641688609453, 0.7071945155440122, -6.836694699555523, 5.128842485349711, 3.072104982741731, -2.3815953756256363, 9.072215688433552, -7.12230345784723, -7.510278425585726, -4.256007642582665, 0.2216972208298067, -3.3805259865385135, 1.448290858163574, 6.573558618939106, -0.9631504423455972, 9.44111171327567, 5.108175539003376, -3.045166357962197, 0.07548688466231468, 1.6036921238821087, -5.053608410629216, 8.610988318730797, -4.901773972204393, -6.012084227738659, -2.94894818914935, -9.38905114775685, 7.29739204819872, -0.6220323669982086, -6.838805903062211, 9.15309163624342, 6.467725172649949, -5.1684915760548655, 4.091916989714207, 8.570723627130125, -5.792405371614229, 9.525095692177647, -4.145631473500737, 1.5984031248210346, -3.6890608036964494, 8.705826783664726, -4.598429525260319, 2.5904590189847454, -9.016491681511452, -2.5587956473790534, -0.7115528846028614, 7.438523561088417, 1.564346322349941, 5.296056024934288, 4.7673011052339405, 8.540838748239079, -2.643721689763659, -0.9599201136137623, 5.295933963842893, -1.2008706527083035, 8.28546839194501, 6.006335646165969, 0.2390522767641059, -7.231553173809193, -5.978709851331743, 4.352134377037867, -8.269772131378247, -0.346675426516903, -7.856099657476097, -7.089752323183365, 2.8674146109269145, 2.9154711153356168, -2.5747275813579185, -6.429871160764275, -4.695237096836793, -2.270009743600136, -1.6213476886834144, -5.8849552778727094, 1.2815195893578828, 6.725205420205249, 1.9465000384384972, 5.625743269250204, -6.586071885942612, 7.595529793650012, -7.44143798347817, 1.0789976578919749, -6.410145211335507, -0.06074039858822111, 0.6101463623369732, -9.02259559630374, -9.65581628100097, -6.522313424314412, -6.035492571956533, -5.598337749834414, -1.2395518431256178, 5.242210536077522, 8.988421426418288, -0.3329291183053229, -9.326825730640184, -8.921636474426414, -1.9124416976761118, -6.216735447055612, 9.785212434142, -8.735430786244402, 3.205322576479128, -1.1767507767047256, 5.9694703102290365, 2.5539356599983556, 2.76370174349022, 4.164347325183035, 4.711172426414482, 5.926792075869219, -1.3685316312252134, 5.653153589437039, -4.611294859169335, 6.654974089566366, 3.5182282213575906, 0.16348795479870404, -1.1768274083147254, 7.066899563307885, -3.1282797246454397, 7.528863612719345, 0.9742790668865844, 4.4248203071982815, 7.852612350436207, -7.584586453308915, -0.8433958253875922, -0.6186772433270153, 8.195070803987203, 5.438349395790961, -4.430763382732563, 2.9185858900288597, -6.553013007459503, 7.1242065401341, -8.573398385835189, -3.4985183292062905, 8.72995763171356, 7.092397741624254, 7.02919435034994, 2.8891994978676827, 8.67016134783238, -7.5354092155860215, 5.316687632797628, 4.282001555946863, 5.148414637095833, 9.659545944641913, -3.9114416269002756, 6.074436179632663, -2.4123422525883225, -1.3178539168570413, 0.11332346445325392, -2.3952617179016418, 9.451023824338975, 3.416038715783486, 2.569429095723594, -7.165100770019857, 3.996756675501219, -9.367868230276933, 8.023336801144644, 4.7834264872802095, -0.938711343840037, 0.6796545094854984, 4.715501125322348, -7.200858402854968, 8.19795163359014, -6.479482947911334, 0.5273174900121198, -5.905964752677432, -4.229733457470655, -6.29214544411356, 9.37967738511703, 4.363563712784156, -8.76908316933704, -2.8133359002870018, 5.430282687868775, -2.8458553957986705, 7.98422976072526, -4.865509785010913, -8.782390831913332, 0.9463019729399704, 3.9491713892819664, -5.284590586842537, -8.54389774393013, -3.0260141543746872, 1.1004394803061537, 5.057217452194198, -4.906220228056344]
BIASES_LIST = [-4.329138001585385, -6.931019442965747, 0.7722440008083709, 9.434474222190449, -0.4494176365632647, 7.937284239519073, 5.606812650892611, 7.705483419557996, -8.573582794815927, 5.245546928027089, 2.0661528741706405, 1.3842487880232923, -5.623916269538554, 3.0451445778053916, 7.927924068266876, -4.128923796004669, 3.156737964185389, -1.4340231781247503, 3.586779826089499, -6.484128664886444, 9.8207156907715, -8.582902196839168, -2.435451055130411, -5.9470873522390955, 5.1702226758500895, -5.895255054470521, -7.771694379354499, 9.06279525363977]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

