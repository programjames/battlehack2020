import random
import math

WEIGHT_LIST = [7.70906771176303, 7.458010179139997, -2.9943182742747236, -7.514824901292725, 7.664015893649921, -6.847947993390269, -9.257814637947693, 5.20827438788592, 3.758041084870868, 7.015940047920836, -7.3272275762542876, 5.342737108777023, -7.034766582447196, 5.086249518003999, -9.030489008995072, 2.367358264602826, 5.177910077321318, 0.7323496265862932, -8.655884730341942, -9.607230981012556, 3.838111897615766, -5.430335144620811, -6.36134223491802, -5.719478569298271, -5.616481745940741, 0.44639413024257024, -5.8949448383941805, 4.697085391114966, -6.015439292981581, -2.6271323040307752, -4.308719004471746, 5.129787550257376, 1.310133167137085, -9.360960351637484, 1.057112347028589, -8.428672677726698, 6.5014392802111125, -9.593908265965203, -0.3674099025051465, -0.5196101060352767, -9.793336522832398, 7.856537118807282, 3.819434837188993, -8.149541040926527, 4.610689320910655, -3.2307782530157647, 1.0907823168168278, 7.721006517670922, -5.29822010406148, -0.7926360728500619, -9.454042422136695, 1.3799679411345256, -6.830536489113435, 2.5092324647232545, 1.3661437553660356, -6.108870778985449, -6.378891670263991, 0.7047626736476964, -0.5325448060977838, -8.693086138325864, -2.8394258116355653, -0.7297124481673585, 8.515087293236313, 6.8168550817481375, -6.899384171423502, 6.510951067796405, 6.781974351552396, -0.6158836434996751, -2.1415091568340827, -7.551114172125153, -8.481982145593408, -0.4268974540180448, 4.4359934878956935, -1.2517551841803822, -0.3880857935233184, -4.403335472088314, 0.006425869106454485, 2.7040334122589016, -2.179060163521928, -3.6694560218503725, 4.490814732002885, -9.33585370311873, -4.560509551828522, -7.367023545744205, 8.579990521514148, -2.2169114194436856, 8.663657348959259, 3.519125141283455, 1.484349379131281, 1.0382331027778253, -4.8527140855286515, 3.7654583604103564, 0.3739725877445004, 8.85508865815024, -1.2622651867510175, 8.778211452641045, -5.270121555213998, -7.137131736831681, 3.270878312150691, -7.947798168929223, 7.8260318738295815, 1.3053916335221132, -0.8676916088971787, 3.2429931761186594, 1.043341846396494, 3.889569840247802, 7.919759048439158, -8.930276756952196, -1.0771057092995644, -8.238633936672207, -9.944995632389919, 6.334343232171225, 5.569103778952433, -0.5435563157836825, -8.812948609279232, 0.03336794332858517, 5.703325730944924, -8.27187078947825, 6.914414587235768, 1.4786700913667623, -9.485632547606942, 9.363989368010337, -6.984854230885411, -1.9159680541647113, 8.64896190529998, 3.220275485633813, -3.745838054512685, 7.584745969561357, 7.859589623936053, -9.962696732800405, 8.300946701615501, -4.378945301569923, 7.091658776394205, -5.646840413315537, -3.367757702825842, 4.57483721111956, -9.986989495887844, -6.474967575233375, 1.8343358493088058, 4.036188639162013, 9.909636232640601, 2.1781970921799676, -0.5384157088533836, 3.9277050112119323, 5.182348042084728, -9.329949082236745, -9.939549022088674, -5.053189964387775, -0.25713919884950975, 7.9769044770576265, -6.923940306582694, -3.0161894692584728, -9.713605017041996, 6.614656913099399, 7.094222708030294, 6.285113288469528, -9.671310060406324, 8.081667289298004, -9.395235643414672, -0.8114471360887361, 9.464476016034759, -9.41213312773747, 1.7946181895182018, -8.005960169886068, -0.881760244933087, -1.3102020642913885, 7.527815112039317, 8.225905828422029, -9.232911891931042, 7.08403615021097, -5.007214389293666, -4.539501246758089, 9.779439154199355, -5.130555988318289, 1.415827498134842, -6.744576633861761, -7.144170604684517, 5.544791309613785, -4.2148135238010065, 0.4373493369618604, 7.055956892061285, 7.1365672752348175, -9.50196247261345, 7.545946908811661, -0.6698004137278719, 3.289149197852133, 5.870737150664841, 7.579897439985356, -4.475419971750578, 8.993702015050168, 7.2285646789168965, -3.8921497116239, 1.9134412349452603, 2.972348975447023, 5.457601557133621, -2.77510464649247, -2.6279691271119248, -4.635657654920269, -5.096707277177115, -2.4510521723395247, -4.493151225569423, -1.4300531539224703, 9.23583165345773, 2.609094441971301, -4.275047321881189, -1.5951527697762273, -3.7243205292177777, -4.753027939339862, 7.298610320752008, 3.4404689993321895, -1.3997575049951436, 9.603429390283324, 2.486784321180707, 4.084751446062429, -1.1398542248504206, -9.537829190884104, -9.015403744931415, -6.192631596787928, 8.225748004710841, -7.298560245464223, 5.018359049723351, 5.477375007225952, -3.065450901375078, -4.658562541220562, 0.10840639613982361, 5.828370201358782, 3.285662602415357, -4.221309562275359, 2.3048807067534405, 5.141486788967066, -9.973794481604019, 2.7747686600547254, -3.430015066668963, 2.9931356378599077, 7.224338509840386, 0.5457367393942079, -7.5510589630557075, 6.567129355749401, 9.919270555016869, 6.646229241444274, 9.775178902306717, -2.7291666657217934, -3.567374714216214, 6.069216745394769, 0.3959095488968174, -4.42143677909455, -6.283212871098554, 6.325038365948782, 9.842116600900226, -1.7532431247353752, -3.2748537188217908, 7.555462479673089, -4.027089922048628, -5.280955351052647, 2.666137036602038, 3.263850822320652, 6.761075384668878, 5.301972505434765, -4.669169188559977, -4.9558071857838515, -8.330950311355599, 1.6276360907341143, -8.56320860584449, -9.45973056035453, -6.541987481179334, -0.759029296506812, 0.5097516721967601, -2.4339488381964003, -7.264076311372037, -8.03458392125737, -5.681152654316564, 0.36614554965592916, -2.9481345420321547, 0.22155327299435434, -4.996067572565012, -6.774165274530565, -4.286809158215485, 0.5574251408157274, 0.74419992996663, 4.199557344139826, 8.412217168442353, 4.079071996181312, 3.3107699284582495, 8.992918490861591, 4.144442334829135, -4.055016870673722, 8.989401624647023, 0.13882324477970442, 8.229592616894145, -7.951700249775655, -5.183876270945584, 5.725405500043783, 7.548340263946759, 3.559667233500356, 1.0548901735909872, 7.2360022300773394, -8.718833800690035, -6.673281904553461, -8.705426267158142, 3.8413679109459906, -4.902592081803361, -1.7473361753159207, 8.568148409334558, 2.714805847730828, 5.227730503921963, -0.18813810651090535, 8.341735481574077, 4.312510630854247, -6.71786356469047, -0.2725552732308252, -3.8350317850321414, 7.865597533999626, -8.440798225398915, -7.6399417468754045, 8.872025226307187, -3.2832563182718344, 7.1227334524380765, -2.5832551027983275, 1.6186403620794323, -2.183052712477254, -9.905857624464913, 4.695900392719228, -3.8506735714063067, -2.9196046459200726, 3.6748240593290245, -4.663805874053526, -8.580856172438365, 6.9695948784598585, -7.734355750915509, 6.4698611378634325, 9.75210211609648, -5.874885776234393, -9.554399108970166, 6.2098748624214615, 5.486705178890594, 8.863475968729318, -5.366581868541125, 8.248380889443489, -3.5577705469533605, 9.048736827327545, 3.6686925102778147, -0.5088806464778415, 4.643990098092383, -4.055329557770855, -2.0161095959473947, 4.172696197143008, 6.8528164485384515, 8.104653929364343, 1.1976594372078342, -3.6100898927010654, 4.036147528508611, -9.325764200255662, 2.9154647510118927, -6.345238125642529, 3.4959524472766788, -2.2701965104866817, -2.802996201545489, -7.31372366743503, -5.5461928968460334, -8.989813388286183, 3.04085943211515, -0.6882312950154557, -1.6324634640895042, -6.888800878488879, 7.319469185514542, -4.245517343832663, -8.901513685589006, -2.128830231723649, 4.215535855994315, -3.6180919630198494, 7.525358193600994, 7.283722569742984, 5.709256671919059, 5.75679634338087, -5.926131781053321, 5.790656339286677, -0.65184781205215, 5.134948840159312, -1.4686345010992934, -1.6056206660461534, 8.698128393246968, 2.7874265416117545, 6.441563563332792, 2.7426499087838767, -1.8802198163601993, -5.910556344228368, -3.686285071790154, 3.9651827862681692, 3.1893121952871812, 8.676407310696877, 0.589848585682379, 9.005298308401684, 2.798794595935018, -4.062227004234977, -6.182551155285441, -5.475980378828154, 9.988498519495607, 0.3281975528452836, 0.5098217165589283, -7.753806597251208, -0.34799148780350464, 1.066757524592612, 2.538499693253165, 0.46691168373073744, -6.408369231331061, 1.8819316195403584, 2.9771170038360157, -9.73109117702551, -6.957959730974446, -5.971541274980905, -7.444676102574812, -7.0044573308931435, 7.4273607968481805, -3.9703278312925327, 2.0441946827860296, -1.6052250713735798, -5.457721696620892, -4.7720756098725925, 1.223258470830956, -0.24513401506822063, -2.745112085212213, 3.0264065794806037, -5.282635585858579, 9.143719340282626, -3.1995539392168215, 7.831361629424411, 0.5431537414560097, -8.87093449928992, -2.942569643628352, -7.836405913174371, -5.464299168291915, -5.648713771695699, 9.899110409634698, -3.9427566428495853, -6.82352769895171, 1.8352073046759187, -8.977920022993915, -7.887106518949123, -9.865726937860854, 1.659458999703764, 9.650247800900733, 7.519817577310018, -8.083242077783567, 8.602552066048752, -1.798035291397472, -1.7889601170215172, 7.581311213478493, 1.3039550848801955, -7.842979680435011, -0.29123227551551345, 8.060024675998513, -3.0525266680276193, -3.5863449758088484, -2.663528109488662, -5.256537761102075, -4.696349204229033, -4.545465649060107, 9.616456410103321, 0.9565430641219237, 5.3110401819721975, 9.923930602499912, 4.371950737457498, -6.05807427651812, 9.380738065041871, -6.46991247538073, -3.4695948631114737, 8.008888291076087, 3.2925810530903235, 3.9684663278099723, -3.118188819050922, 3.578739214604658, -6.020299415003945, 8.914136762508146, 5.771805178493812, 2.6445806108394336, -6.9363361631598615, 3.7818943691212716, 7.207460193948663, -6.217632313040635, 0.9337632620182053, 9.300312802851572, 6.341337462174739, -1.6033910395868052, 1.7394279204174268, 5.2418692978164945, 6.374389567580732, -7.313873339788072, -7.909982419449813, -0.6559065800597779, -5.031858697053291, 3.1462956228109284, -3.469100907396414, -1.0147760550198015, -1.2902220080165137, -3.894612491679201, 7.7003871498178, 7.443510178913858, 0.9205289265308458, 5.9818199699285675, -4.353994031993087, 2.7624180011269956, -7.481159999561231, -0.5000461707902488, 5.244223465090013, 0.7383268449474976, 2.830057654602676, -1.5294560754743323, -5.983892011373186, 5.8411351159997835, -1.8538313775015176, -9.734235199209076, 5.781298222759972, 3.6690831498998637, 3.164173437288989, -1.0341834351938477, 0.1706265563052849, 9.82452507330056, -6.227878579444233, -0.4483964047159983, -7.9189401150773975, -4.732704216029246, -3.0420064589339795, -8.485974215643154, 3.1752496913533896, -6.10813083493367, -8.775721718019424, -3.7111236600426807, 1.7817731513005075, -0.6890195483768338, -2.6416617799730275, 8.945399077777594, -1.3162891952095652, 7.8664909411954085, 1.2966901811160643, -9.1158207241211, -2.76885187196783, 5.122505161406028, -4.048991767613428, 9.346304271347915, -9.601158593084001, -8.273101081393106, 4.3072901697544825, 8.971320815868935, 8.083704549962299, -4.248944362575935, 4.110427522501643, 6.414992821297329, -0.18300642495123398, -7.28255468454611, 9.249707699835511, 0.060338505741801995, 4.696149271869892, -7.78994865221912, -4.159185017573696, 1.7216329462429911, -6.998525478372022, 5.885282262539333, 2.714668760655874, 1.6749280585780557, 7.1733589985276645, -3.5774419194510587, 4.969626675669122, -7.1149070332688975, 5.083950503950634, 2.4523226277660033, 2.984857933192444, -6.860700635567049, 1.4886258200523645, 1.4269473407949462, -7.204712242432823, 4.931014258524701, 5.791891032891828, -5.250840098965268, 1.3242444698313438, 2.5498489520839804, 4.823244998910045, -6.435687462258038, 0.8396256227133225, 0.0588778957050522, -3.4720740520023075, 8.554795804238886, -0.44614172232536653, -7.21584748206962, -5.390432986942546, -6.632703159094704, -8.177780781669583, -7.234226306026843, 0.5220007385920198, 8.355706231891592, -5.150239200697797, 8.588211766008005, 6.268070375406172, 4.025277360526239, 4.672441483961219, 4.68641076403741, -9.02462097783879, -8.74943975133538, 7.740451896850992, 2.030141471828781, 2.207970754162389, 8.521075789382326, 9.506120374472072, 5.6598410700959505, -0.16910763928365213, 6.00856879673146, 2.723399013743812, 7.0568303622373705, -6.565510534994992, 5.791361419702687, -8.73763383333298, 4.500169481873844, 0.07125401561275169, 9.13536960454391, -1.6976198851309547, -8.398733891732936, -6.910416803258686, -7.5414585852691545, 9.705891959796524, 8.428955820724472, -0.3160804904346506, -1.8200746243999877, 5.554126072392847, -4.661228695255398, -3.4504896905011613, 7.625654586233495, 5.547669047239538, 2.9737522809833266, 7.381780280792654, 3.8286416742194422, 9.71697595290841, 2.246693440739067, 1.4907046939253004, 6.534537890960422, -9.625309266765639, -7.002123616460921, -7.588742788488907, -4.603621284209263, -1.876305342771074, 3.6951095250993475, 5.188693781642419, 2.455405249890184, -9.88615088184423, 0.6926848619815189, 2.5922956605048526, -3.942885657783995, -4.557283534317175, -4.296127263964986, 5.175709623352056, 7.72950826784529, 1.001498481216343, 0.44500898612771067, -7.557186451113582, -5.171080011035949, -0.21409191915276615, -8.579492115153219, 3.2515526050259034, 3.9847825632341127, 1.4802129035017622, -9.474810647729981, 9.491360470670752, -6.256921993738375, 5.944478196117606, -0.7299968380373052, 3.4733603743209844, -1.331612264048303, -5.4229454380541515, 8.032839804280016, -0.9344202509608728, 8.345147161484185, 7.731701670611415, 2.7432464241649193, -6.224819871409815, -3.094475310970777, 3.178883679647374, -9.905086540953526, 4.59033451325293, 2.542964073737542, 0.17598661966726326, -1.1976827918852102, 9.49107150061391, -2.2184954886114845, 7.680793818735875, 7.80478908570959, 5.665258849295027, -8.556621393822851, -6.609084514859742, -8.732752180492122, -9.222250049036125, -1.9258262607569794, -4.3992947090077, 7.607261503372481, -7.542159676424056, 1.8527311607485402, 9.95965516116981, 4.355592082522499, 7.11180552141893, 5.1749150121814615, 2.496442121459914, 8.331775374996681, -6.347456016458803, 8.513410067170962, -7.748395828528476, 5.73297832743833, -7.0329775103094105, -8.428638752364533, -3.8209440888447403, -0.7160606985447053, 8.616076641241005, -2.4653524202635957, -1.924557647699796, -0.7040744229288283, 0.7158558776637154, 0.40979334978828597, 0.39168114718086855, -8.414640042588806, 3.4687922048554185, -7.62442869695507, -8.84071009045984, 8.637925085215944, 3.8067023222362923, 9.90365908239226, 1.9623019059757674, 1.4348902017938503, 2.3428743693468324, -5.840181932655142, 3.702811315286265, -0.42397160425811364, -9.522732727274665, -9.258132607618075, -1.3556235231703795, -4.182072592633497, -8.701757192078631, -0.9008611083430971, -8.7550880134844, 5.081343448357325, -8.207484829181551, 2.1673800544403257, -0.2878110991359524, 3.5078057562830445, 3.201748332073876, 9.85786060816405, -2.8444843435445772, 5.78034145338799, -0.07518119332745243, -7.762892470757182, -0.4314742677529608, -2.999400760914157, -9.002632739461037, -1.9516254574630807, -2.7375012476589404, 5.502254570345995, 4.277579083406909]
BIASES_LIST = [2.8803360543403844, -8.572988934982197, 4.674535442954237, 1.0205650239499064, 1.1013593660598673, 7.862822975826351, 1.1998789672862031, -6.58119412483583, 4.978884431226028, 0.6814942203191947, 7.993017854151656, -5.199662846336008, 3.304761005017955, -7.385815425247031, 3.808902164382875, -0.19420645427136662, -8.09899091492701, -9.041263094382161, 2.9613870286092023, -4.089121525475501, -1.9971913820038285, -9.684100975345736, 2.556176819889224, -0.5807199460360231, 1.4586978162966595, -1.0836681964294996, 1.4396799140101972, 5.074546522416629, -1.9024950596335, -6.990313432580355, 8.686142872433287, -3.2265298324808933, -4.205777811192868, 8.896367600674179, 8.384920498131482, 5.421030544545573]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

