import random
import math

WEIGHT_LIST = [-5.678749438336603, -7.846406025694761, -2.3218437578240536, -6.099392603446139, 9.917343206429866, -7.841154465861406, 5.485689736405806, -6.950767259273571, -8.625754261091444, 1.2997307016871495, -7.131379477973989, 2.557868851306093, -5.358197643684235, 6.4950719639352315, 9.635050477967855, -6.252936646542972, 3.317101673916298, 6.0213718007615675, -1.2114703142196248, -0.27887729207105494, 0.018196695069160995, -9.171855455311919, -5.2793993695646835, 0.4954325917657627, 2.6231670409411105, -8.666740398445132, 4.6636814950427095, 8.310561972409989, -9.329103506673672, 0.24412905392305007, -2.002547884868786, 5.092686071865202, 0.5818059520512175, 4.4988157169225484, -3.6535010914132897, 2.7590146714890924, -7.420364033567466, -0.4151174230772767, 7.144937306900328, 0.07269454849319956, -0.6731297538344467, -0.17460080443594528, -0.5031974343945311, -9.062608768189406, -1.530351106292013, 9.76751216203191, 5.311639573451183, -3.4874013891927413, 3.6987029190728204, -5.959996569583572, 3.089413220042662, -0.07904707767839092, 6.1487436010427565, -9.719024304499316, 6.5377271900912035, 9.18337225685416, -0.3602261494321297, 1.4512234938555597, -0.7871918469848005, 1.5056024813190731, 6.087749538674526, -6.4853766391750405, 9.665982051196487, 6.8790747401489725, 3.423488366376354, 4.3700299744677125, 3.9307227222138934, 5.539910113905766, -8.450133927890812, 6.375065037001285, 7.168257691746902, -5.767116504354504, -5.780199557652308, -4.765203084622767, -3.8787616836629324, -6.349058728418635, -3.74524067056268, -9.120453650626501, 7.386097240965892, 5.362321453984222, 1.5844055330901767, -6.245145063558589, 5.561161444117532, 1.5141137138666227, -8.888096020198713, 8.737880047827787, 0.2925183473905708, -4.492808295246647, 3.1264607363519463, -5.156097240267695, 3.9948932744285397, 1.1438703464039257, -1.726475664663516, -5.570574638301435, -7.563028136951912, 4.4418396005421705, -4.11573138927499, 7.486797411336873, -1.3293503105191284, 3.629146773266278, -7.034201605025457, 4.02539016032363, 1.5342455359267486, 8.914704450039299, 0.18552173033662633, -1.0053571009510058, -8.542094550872235, -8.296193593807581, -7.795849504685495, 8.330842426141405, 9.126722884954678, -0.3732401372085796, 1.66515739173445, -7.804733227059401, 4.166667655125513, 0.5689915800391425, 6.019638437667389, -7.9459499365959925, 7.177507246680101, -9.507781054235947, -1.1148891280840711, -6.397323044703082, -0.2051498768028992, -5.664748630151504, -5.199475386011518, -2.2070187881012027, 6.959317717157674, -4.834220787033501, -0.5488658385910625, -3.662565247934168, -4.30903202879108, 8.320467047446659, 8.184791332107501, 3.128870943815979, 1.435353756456017, 6.5734332970171465, 9.906655410828272, -8.615065261323098, -9.105924889265536, -6.9323611155270815, 4.330019422941804, -3.176963612971049, -4.049979669147136, 0.34972498275187114, 2.8300512670122338, -7.195437629735877, -3.791206425795246, 5.028086969784567, 0.7373458457977495, -0.0010843424085731357, -0.04355784606227786, 2.219913684778973, -7.754623350894021, -2.9288098355587433, 1.8450749177546548, 5.108585036410922, 4.431102048201158, 8.324970910199756, 3.4937118070148863, 5.341582838938898, -7.260556057861476, -1.1935337311403575, 1.7434586486016617, -1.076675148165883, -9.854015940044414, -8.782036018193649, 2.227214416646399, 2.730854208825903, 0.3110115159793061, -6.415458834852954, -9.657342676045111, -4.208766923412628, 0.13719025370067683, 9.231118451444193, -6.534709327281427, 8.756705621219748, 6.536702951057013, -8.929788557751534, 1.21872884634179, 7.6062003268208365, -6.454201234436903, -0.6805488660320904, 9.13168254804971, -5.815534568370609, 4.253108866961849, -6.523133770661134, -7.191450255550775, -1.4538801605562455, 8.076848304486646, 6.05523997252676, -5.126796188838927, 9.873955549148064, -6.74305969697401, -2.4974307606477186, -2.9380762921744052, -1.4547602965085602, 6.173154127319897, 2.9710997676051054, 0.48269921849894004, 0.2752768004791015, -9.217577823014382, 8.285294874158762, 5.108868585667409, 7.2408710235650595, -1.2538536651998555, 2.117062500550988, -3.0525731090172386, -2.942454818536959, 3.3628938825062864, 0.8385448438329064, -8.118864356673651, 1.5099624624137054, 4.6064531956953765, -2.564954170763749, 9.893848317279307, -8.291880978791198, -5.404950661179926, -0.33296827421930075, 4.500862395849383, -4.447546807421778, -7.817409518209559, -7.684738506118148, 7.735459178822385, -9.278038964380965, 3.4185818434534525, -0.26649165494513305, -7.096617200107465, 1.4904309063334615, 0.09716070714012481, -7.72464157383814, -0.3906801482403228, -6.647526213423259, -4.114719929239143, -4.3517841141282965, 9.31234435917274, -9.851215749282407, 8.221120906033104, -0.11769603325509337, -4.98507668962562, 9.337999463231782, -0.8203203111929618, 6.953300643253453, -8.303176837668072, -0.09759661280136278, 3.8041800232593825, 4.626850803792879, -1.911781359577665, -9.359423631768617, 2.314088963861945, -9.43366788097551, -3.4007610397163246, 3.818200441653678, 7.959488967062498, -3.3007900070819822, -4.254290124784095, 4.603259481947134, -6.579384124106456, 3.3258880116108376, 7.932821511801144, 2.1045735951186053, -0.46207023176018147, 5.03358199122086, -5.25253504097795, 3.192730585485741, 2.1706013728392914, -1.4776369424006237, 1.3540152902471903, -0.4418988310239378, -8.479225044695312, -4.8814166270869785, -4.919873480732244, 2.783344342732194, 1.9235067626088806, -8.25352442975259, -1.248414369414597, -6.054475142637871, -3.098005137304254, 6.984087334585755, -4.397375606248055, 4.688837161979755, -9.260882947713016, 1.7134039170447206, 6.894697493867284, 3.511343468491262, -9.675840970479904, -4.124904831677291, 4.38244094001201, -3.470237293603173, -6.806040054273003, 4.599476239603593, 9.55719128258027, -5.151621930103827, 2.0048078780865914, 6.511662267576096, -8.290782081200874, 2.701806384068348, -3.728219457672566, -9.227057653302191, -6.716901404468496, -6.5782388821548725, -2.1029006695709773, -1.7912170871301019, 3.467497343186082, -6.779985979946453, -9.094698482043759, -1.751973056582866, 7.847960392671137, -8.805687522450354, 1.669228305258466, -6.066188139394, -4.608256862869471, -4.5277642210553015, 8.33557452788029, -8.636736146764168, -5.93575183653112, -7.46516657411878, 4.999549066789793, 3.9994419279827813, -3.647667023487882, 1.6229262872391264, 5.807076858593248, -4.303243484917736, 0.5270367228667041, -5.662898813420185, 0.9688806164017212, -4.759191342603872, -9.982762661644358, -4.576742189182285, -7.820517137697996, 6.280925367026882, -0.999776032555733, 8.475417710245697, -3.33147307834939, -8.892615579885712, 6.5014835763383125, 9.634469145183406, -4.766197058030002, -5.7219922624279596, 1.3039052377033435, 3.7446793377325136, 9.861124131887514, 3.0787994281431317, 1.0837339048493817, 7.306908740523486, 5.7871409465102985, -4.435323439068554, 0.4461390906270353, -4.1626826150635114, 2.9524390285621003, -4.044624974935454, -6.3671825467067595, -6.31502300106596, -2.0234818542317123, -2.2320652144933284, -7.020593512830398, 8.074605582964494, -2.2480513229448356, 5.746337607233611, -8.0841350136077, 4.246672119629888, 3.8083835987957464, 1.318154809465593, 8.060544554702872, -0.31729183705303576, 3.7866827170783512, 9.875769029104632, -1.7469687666502445, -8.67314618856997, 6.740062734979041, 0.43691864568726757, -7.163121773125103, 5.315291758297789, 9.811041995727013, -7.230336981772001, -9.517111586955538, -8.980604475196545, 5.870490706455813, 7.064760759683338, 4.697531683374283, -5.378541475306642, 2.006073557356986, 7.866591128766007, -5.783792731976427, 3.6945045602144617, -7.4331942154404445, -4.107568076918351, 2.790230380224479, 2.918654220536892, 0.32702261735396476, -2.42064729987489, -6.498711121444456, -3.1054815172036783, -9.898804041391875, -6.18556771168199, -6.924169126234785, -2.6986718335721838, -3.933780707764214, 8.314916293428887, -1.9177521312311434, 4.939455930654535, 7.925161008476039, 1.7603192610012641, 6.9530848737455955, 0.43893374100443694, -2.6697035326918117, -8.843993985891984, -6.91848994072701, 1.8124421623752554, -2.8024495727015335, -8.574164192429803, -7.426875005068041, 5.184379978698985, 2.795940340400964, 1.6390925547661634, 5.612864497091877, 8.343090615354587, -7.088125150644331, -6.193995656000526, -5.744843159645823, -8.412079567459951, 8.612736728863549, -5.801085413179923, 0.15634281447667142, -3.5334978532531247, -7.743010209308531, 0.9041187266390054, 1.529145355633732, 1.782514852619192, 1.4112535283621508, -1.4192260553102631, 8.538876534490104, 5.073089681371547, -2.0568333804084427, 0.3078498869756032, -0.35295752502051236, -3.4481997129382975, -7.734511386476772, 8.641036289936515, 4.4949413908875595, 2.3428369362241437, 1.3922329141819016, 4.925238803079882, -1.3362711980370818, -0.5945867037625945, 8.264780551882922, -2.43621837680565, 9.519037926032393, -7.3708406343295945, 2.4005406179861044, -6.131624667477372, -6.622882367018066, -6.850040015145186, -1.6812172356471038, 2.96725278693636, -4.858626674379025, 4.856895792880069, 6.307070562447951, -3.604029518119223, 0.22975688353208668, 6.846031178860944, 0.12818940579336058, -8.740211277026644, -0.31192532263678174, -7.3665430057796755, 9.449887007641347, -5.038987491849478, -4.821222117287263, -6.084741074620716, 0.8951784134002523, 3.160691275027725, 6.131636082863459, 3.2670946317431273, -3.442682832466197, 2.202722417182642, 0.18284656573960945, 7.743274367153354, 1.958998516683156, 2.9489505680164996, -9.595754606842084, 5.813480910852709, -5.585647494899915, -9.816094942963304, -1.3744843812065461, -3.5769831020144682, 3.212369879342029, 8.412304302396542, 2.434279159672787, 0.23768337903964643, 5.832637360577962, -5.667068582386845, 6.9387131473437265, -7.584405176265365, 2.3367552908939473, -6.603842561529305, -3.168662730419383, -4.93654613308657, 1.4558902547700274, 4.612540932617502, 8.253499644554154, 8.417405981845626, -5.73997391143203, 9.729734577545205, 9.74954729738539, -5.311294223548826, 7.844631546553103, 8.871211490200576, 6.933794702381423, 0.8964460871193136, -2.7760096056527743, -7.146441886445443, -1.1257504491943955, -7.020294489244154, 5.634726972563708, 1.3294694300654548, 2.6019476082071122, -2.298870165453799, 4.007375126132057, -4.916600020145097, 5.001296075719111, 8.987987281886703, -8.019901210225562, 1.4738342856234166, -1.7987270650636749, -3.449334382617244, -2.1141466000699882, 5.500066928713075, -9.999047878905527, 3.5494985821003446, -6.497966898072605, 3.0252620582628413, 7.655597935981053, -3.080748558884327, -1.7853618818314985, -6.683124323198295, 5.0151481990091895, 1.8325273838364922, 3.090252661061996, -5.347267529266531, 9.925163461647582, 7.5598114762890205, 8.422911325054887, 7.038682988127604, -9.558573740671733, 5.717351517240388, 7.06734837337191, 5.4879411221328755, -7.237971580542927, 8.32952157846881, 3.4898228284647725, -2.346361046972712, -4.581394304997066, -3.0531551974857507, -6.864121498884154, 2.2382381253024377, 5.096635435048523, -2.2129276664920727, -5.740753616294709, 8.97245057486025, -6.069714251592961, -1.873372783396034, 0.5004234894496911, -2.3609602044270623, 7.7407959876647965, 9.435520293002007, 9.939392190143575, -7.6097979586482705, 7.669564722711307, 7.766998674110354, -6.649954837754963, 1.3350170777235721, -2.632579475007997, 3.7989273846176115, -4.060662459251214, 9.125967730393004, -8.271926316897286, -4.607922106539326, -3.741105654114336, -5.534238778932288, -4.772954744611939, -1.779594739592783, -7.842017377203776, -8.243653398870357, -3.291156027689645, -4.735789469697571, -6.884901123676319, 4.820839784794476, -9.623198606917263, 0.4472809991221034, 3.1259691122547544, -2.0590244152468156, 0.2948217870037144, -1.6283352994757792, 7.165183609939717, 0.7059715512395126, -0.3701910399667181, -1.8539260034191756, 2.795473306401373, 1.9946285929198986, 8.242433804592256, 0.5593263703009281, 7.6682890062008155, -6.230541595033441, -0.9676848124352837, -3.7154358354007266, 4.924604805677911, 1.7169355972570877, 2.777850383473261, 0.477479640788669, -4.625373681706608, 8.399450627581015, -3.0904335029297103, -6.163513271920538, 4.31655998230006, 4.542389398610169, -8.208472658597131, 6.368936745161548, -9.267579391552335, -7.562159248857929, 0.340072195893411, 8.946155932089844, 2.119556118137506, 7.160040788375166, -7.347518179930541, 5.478766405639812, -5.396464304117825, 8.630261784695591, 3.5271176443791, 3.039838993614497, 7.417209983377376, 2.2453937227912064, 5.195995581249051, -2.0197398217151896, 2.1014507867261596, 5.634733209472868, 0.4613341227376715, -1.8394783172640459, -5.129726236867514, -4.787493380419736, -9.792370716209586, -9.778563401444204, -1.434740754710976, 2.4474929698503622, 7.3901150513530816, -6.856206976873573, -7.1418223958618965, -8.249562284973004, -3.430146327647723, 5.114768729969493, -6.027385217441223, -5.054226958844383, -0.4542860922247485, 0.024886103640334056, -6.140204803425822, 1.042848238927247, -5.329855854797421, 4.551377465764656, -4.5414478164450784, -6.704393281167986, -8.637124760509563, 0.998055589304288, -1.2905833098877117, -2.9886573495691238, 7.275547578227126, 9.26282485204272, 6.027540075965852, -2.7956673122294777, 4.203483330064454, -9.014832400803206, 2.8631209313582744, 1.41601005721963, 3.275004253639864, -6.75786566212365, -4.976220973673826, 2.4329368712053565, 7.576888346005283, -5.022459084401234, -8.671392387700362, -6.9486980465952985, 3.073031433540333, -2.9481444097227367, -1.7340169760339101, -8.042475124312904, -8.033334415111392, 1.3647056783104716, -9.735798785862041, 0.982999939972867, -0.020771499749363542, 1.9265348588243398, 5.0732736174541415, -0.5669592207658063, -2.5349118250903047, -2.194555552805541, 3.574947583128143, -9.161636222960016, 2.274919831079412, -6.570359702024633, -8.276658842969722, 0.29494076607543107, -3.7241448679731315, -6.064331773565838, 6.478562800780622, -6.975282756897454, 0.2026894642210646, 9.269877792254388, 0.8570508100918452, 8.027712670099447, 8.013157506168564, 1.8421389638801084, -0.7901625224382709, 9.874372371919915, -9.08895097122886, 4.806130234219147, 1.4101714803278327, 3.850228183094748, -1.1815863527944472, -3.247988515649256, 7.167522988533804, -5.432836134863102, 2.832597419838283, -2.673180897362575, -3.1160094255850934, -4.930385828529468, 2.045860575033407, -8.422512241860879, 0.9047991512131155, 6.266649472852045, -1.0665250165461604, -5.738297816405325, -8.266756949421428, -7.25792801587893, 8.284161320201314, -1.2191619532075464, -8.585134089005376, 4.106357221567096, -0.06434581433513209, -6.719727797046636, -2.500346278903061, -5.578235585342837, 2.456520707489375, -0.5992500537417271, 5.304115477563464, -1.5669383792808311, -6.462266576307729, -7.335960685538754, 3.780821054000489, 6.411212937730777, 7.32472996808993, -1.6675876767397142, 5.354204652147631, 3.7823563227893064, 4.072200136616802, 7.332888794462818]
BIASES_LIST = [5.207660747114369, -8.820030781824947, -6.9026333364651915, -3.932089591000971, 3.5337313870642344, 2.7142447477356804, 3.89938716955222, -0.10078928802583142, 5.730008073923951, 5.5041546379453585, 8.868823597806621, -3.5258648486658295, 8.409226745244126, 6.225282431513815, 9.773513599194196, -6.2236133477572135, 4.730666169370588, 8.502329825855277, -0.3105410692717889, -7.60147868760606, -7.05602006136556, 2.4385545913975584, -2.2833195214666446, -7.97464458042954, -4.92407444843312, -1.2331067023122344, -9.00189299826765, -5.247155078355387, 2.2913485597350416, -3.659783791269864, 3.2473322595666403, 2.16001756091808, -0.7198244696385565, 4.618989288259458, -9.566684007294894, 0.17808433573897275]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

