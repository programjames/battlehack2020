import random
import math

WEIGHT_LIST = [-8.112244006949407, -2.6628295705379283, 7.290149202223225, -0.6032499075647593, 4.138844101015279, 2.0285763578910863, 0.3035499104237018, -6.948793507587729, -9.066813234214179, -1.4075258249063058, -0.00705432946603568, -1.9203397086109257, 0.05438676509872015, 1.6843530439385261, 1.4047257546037715, 4.024784098822525, 5.494136689259197, -4.98025897671809, -0.7141251892937798, -0.3438425832242521, 4.316427686141989, -1.602948378409384, -3.0849354804761533, 5.705655184455591, 1.6461279245411353, 4.642997911958032, 0.20811559723622808, 1.1211066824597269, 0.9602185815789552, 4.20306668662643, 4.596614237687679, 5.7497156968027285, 0.7790869763395931, 5.779790888251988, -2.2832056916716383, -7.171864513444273, -4.201571039250798, -4.605152697549748, -3.779108239547527, -1.400520422696791, 2.181165984708722, 5.023374018732903, 4.4855524411189664, -1.7639164844273565, -1.430236205468785, 8.750985300756566, -0.5182624593567204, 1.298372669436992, 2.8525834263244456, -0.12485813866668244, -1.1465420300104874, -6.268324934459324, 1.06361502055676, -4.748659366167093, 0.7083237276119103, -5.703566104547035, 7.967580197011833, 0.4828108463685255, 4.279188829301305, -0.6522784511169879, 4.88000309865661, 2.1545226902725663, -5.101780928692471, -3.175469679943702, 1.077603629157742, 3.6975920453332054, -1.2956062346911528, -2.1199085509981876, -1.224422232673587, 6.336340959606581, -3.308787569384708, -2.8208919266007384, -2.679065701238069, 4.362381000824033, -2.000612193234504, -2.4053132030833333, -1.294823401742224, -0.06857003255017621, -4.612838031192328, 5.5265070123301845, -2.72848310321531, 4.554551741922353, 6.224848747283756, 3.9922133612939024, -7.324580747894649, -2.1549648512474526, -5.462005612174747, -1.7376445827897593, -0.1852647601078808, 7.905007690789765, 7.702967144730947, 3.192747632866684, 0.906899419805657, -2.28577568579417, 2.7089840504350367, -2.027932239665492, 2.868302416493639, 1.1846722469335136, 5.675109979494972, 2.4032596029192974, -1.378953889184786, -6.888037524047845, 6.39265112636043, 4.9866987650173975, 4.7549086306171855, 2.202902410688526, 2.719076972680652, 5.5742697215821595, -5.079379139763888, 3.9748843518835755, -6.655268148635009, -2.897037968300472, 3.614388811993074, -2.9400385776522073, 5.895149700711826, -2.454705423267086, -10.187896851280161, -1.5731563298067552, -4.6578316917704345, -2.756166356430836, 3.4328442417561855, 0.316885060453499, 7.566984668097514, 1.0255492753541327, 2.089827280074782, -0.48648525382877, -2.672381539126797, -2.8538886367747596, 1.1226799567510717, 1.6433702647753785, -4.813241021080589, -9.478356559000483, 1.6818568657507507, 6.398226117052434, -4.741864620488858, -1.7865018424330659, 3.899671263326159, -1.4007840220386958, -3.503801028483383, -0.3151123320799384, 1.8303001397392307, -2.5700860001872403, -6.6714512850690895, 7.027714490954188, 7.686770604740215, -0.9627072770715286, -2.502617070698388, 7.910579222440686, -2.928351629440372, 2.6039740643258797, 1.8118764897467754, -4.513440410861932, -7.096101495840275, 1.2971152414563711, 1.5841468847537972, 0.7145935163138633, -3.84403400917228, -7.7235950886787625, -5.761951046831915, -1.143814433391841, -5.228872457198313, -4.336452158123452, -2.605541085151733, -6.229696788973431, -4.795665187090121, 6.953654056274522, 3.0076860173157463, -0.6573262446384771, 0.794649330852649, 0.5100312768725501, 3.250239853797149, 0.02869790860147997, 1.8069056951774032, -3.6441322614638185, -4.142418573661402, 1.780421529870703, 0.9691596720332982, -6.422536602012991, -4.815765464698935, 1.6524796628099527, -7.751486969507085, 9.048155384432958, 3.710514009403739, -5.558860114341284, -4.1334456426512824, -0.7038895494787651, 5.663520507884844, -5.308717952368299, -5.0182990441926245, 6.611219267265241, -5.501203688933447, -5.154898315283827, 4.655121719232532, 2.321185190326189, -5.467756201179332, -5.264026831109203, 7.272084710852067, 4.47794104173109, -0.08383396950926247, 6.978245583087882, -5.527881139439047, -4.701805411412919, 6.3595245343478215, 0.792824358967775, -0.9908025703776384, 2.2646703282310443, 3.0580585717231665, -0.8008227521847913, -7.53659222204192, 7.256597258727316, -7.43801741788423, -1.9390363961276802, 1.2548003366612261, 6.774513422680724, 6.067616479219121, 6.088221874711043, -0.8183896778088791, -1.7090382740025327, -2.7970171095454797, 0.5119092079573286, -2.138582354047349, -2.265085042052839, 0.36289531619407184, -1.9292760588246713, -4.536883354514683, 6.177059474709555, -1.4763299718116851, -1.7564767814251112, -3.4312091022333493, 2.84689670329806, 2.054623598990544, 0.750451040654952, 6.394253033854141, 3.6553683617476307, 3.8322109850712356, 0.9021103038265657, 5.086874905027333, -6.344029700796909, -3.044006705176898, -5.172422386714581, -6.508549741521966, 7.6252014174324145, -7.2611923816560315, 1.3298286293348398, 0.18101102630087956, -3.208667065897725, -0.2804167380498092, 4.135095795774313, -4.702515642450983, -6.789737837937571, 2.330639287856064, 1.8565269611151427, -4.79824292677782, 6.190823589948736, -1.7164907913458811, 1.8507828939647264, -0.4163103142010596, -4.531989331451778, 6.771175263476358, -3.5191163153228513, 5.8216424447377495, -4.227806055584815, 3.4022208733775647, -1.1084538600202556, -5.263634399912341, 4.590527582867001, -2.6101224896642528, 0.23281786947201694, -8.107019231805761, 6.830674301309133, 3.4858434994481238, -9.771471183644856, 2.2222745164856215, -6.565605340538044, -0.44877864331390604, 0.6212416947107857, 5.891748012418701, -4.7373041495122274, -0.8751710179034733, 3.3386441268069666, -0.6810865015752536, 3.8365808044963594, -5.822011815934065, 3.2382793664229372, 3.1024053650075016, 1.4875756480959639, 2.447421228974541, -6.56101109210069, 9.896158095613057, 8.645094973870538, 0.4888141718221843, -3.41357937514496, 6.0557975455023225, -1.8623697162765107, -0.79124398389984, -5.9334196489321585, -1.1983374419123074, 0.17875155259545422, 5.387682953468074, 2.512793094453167, -1.460590316479015, 0.36403432692683196, 5.302113002686176, 0.01832534722018625, -2.060010121283575, -7.094926922927488, 2.0355663024587525, -4.29213423141986, 0.9224140190356707, 3.687503617811645, -1.988405894037927, -2.198711045602704, -7.996598463535786, -2.940196293587665, 7.653261403081824, 5.07452689913143, -3.406753958042359, 4.521969189602332, 0.9876758338385832, 3.3326016903791063, -3.0270008973261464, 2.8499045009406996, -3.722247315862585, 5.958546748867575, 1.4281629818797466, -0.4348763947724874, 0.5293140562845748, 3.1947159415501827, -7.429544660866508, -0.44772893590682583, -3.382151362036683, -6.344961649770199, -0.603178092272527, -3.744580465875936, 3.0658882285207993, 5.064830473605642, -1.7909202481701505, -6.635320700134304, 5.105687152981844, 3.0103419910199336, -2.361095852339657, -5.6152494922515315, -4.650565486264665, -3.424779404591397, -1.549806589234191, 6.666927490880185, -3.6804672808532777, -7.618804193306428, 2.432899847919708, 8.948305363743604, 9.18682163880435, -9.29086168625346, -6.573592191665327, 2.576951699191677, 8.302852953577146, -2.8695639003159745, 2.3220491915330204, 7.711751101454218, 6.055180004516057, -1.8307184231567784, 7.454365760215452, -4.310484873256372, -1.5855186111005715, 1.8604872103053407, -0.8667589288705906, 2.8569233814417525, -5.51073131510377, -5.49190054227727, -1.979276098733612, 2.52900813103247, 7.295358756860175, 4.4986467284819245, 0.1905303177592524, 3.7599841461120502, 0.008992782499449958, -2.1575601280344605, -5.245673012366634, -1.0437608884466254, -1.9156430327074765, 5.381526543452906, 1.2869814241124533, 2.7538364547717933, 4.047194559249818, 3.8349986918467116, -3.348766695717766, 2.2487587802169835, 6.40121431680543, 3.2636862733190637, 1.267411852630418, 2.3398790644175786, 0.17392361116951516, -3.5948273292481994, -1.0851248426221178, -3.459322448534096, 1.0632727097668715, 1.4239847031743762, -0.06652478591067026, 1.8102695884000894, 3.0665510315966853, -3.0214432530844255, -6.1129826086597285, 3.3101099864925656, -5.875437526427112, 6.090477749352092, -0.0554488572607294, 1.3496849875064996, -3.375682081226602, 0.8810419546805561, 2.1062503462157807, 2.156159026590572, 2.858298869870672, 2.594492317354063, 3.486425177743214, 0.10293378754383797, -2.104629641246054, -2.1044409706952876, -2.9962540746711426, 0.12218179044660732, 1.6564779371371072, -1.1014486290117602, 0.6128002913530886, 2.973059837542497, 4.256377813667007, 2.406022674738254, 1.6448199721296466, -4.076881249093355, 8.787557437822128, -3.7816870142428303, 4.882613580915963, 4.119448027367042, -0.5546273053973363, 4.567769473218576, 0.49938263293525015, 3.5720662220304873, 0.6373399915953779, 3.4242702631362762, -1.477553304355304, -1.4946728621333643, -6.117519139533357, -7.8884816849049795, 1.2528789902220836, -3.5593358993956272, 0.9453463409414118, 1.6361415464539366, 0.8373764212576407, 6.488575812090183, 7.341344701594118, 3.4456492993072527, -5.523458868624682, 1.4017180459680314, 5.508430332004401, -3.7053146782241835, 3.204537589926277, 2.2418252005034343, 5.365349548506446, -0.7013621011190345, -3.905257670107006, 6.1973732514706255, -0.19373553893893863, 3.9199482117106554, -3.3162099755249894, -3.8837313769215522, 0.3374577552500037, 1.0162066868464126, 3.0991675175514297, -4.346791378233355, 5.251999671986112, 5.122107016338291, -3.8436635362238825, -7.817597378170357, 5.596791217178683, -1.8905520159358085, 7.311936161869123, 0.007562764517233006, 1.6240932185807078, -9.538684181718624, -3.7896475827047706, -1.084261507569147, -1.8714348804442307, -1.0642898026856658, -7.220155175333181, -1.0777172432689075, 8.022900712235677, 7.969783958441565, 0.806034165890851, -1.3435674172800198, -1.820470107592129, 5.718678949800478, -4.537606786276578, -2.0555407696521, 4.63251867637399, 0.4891366656643305, -3.410514999238376, 4.813128988224991, 1.8588607640734285, -1.1221985553945686, -0.9790926446331252, 2.3254176769769046, 3.0407636822437567, 3.5216761905085487, -3.18872490213892, -0.7720440496275671, -2.1833575584763767, 7.473021214308895, 2.7941562948360184, -2.724948794880895, 5.037645466403691, -1.1142262880187526, 0.017564990867083297, -1.6997433325329114, 2.1168655654569584, 0.17137099962447677, 3.3608146435029433, -6.803340111746449, -1.4140320803493016, 0.3079305790449291, -3.389399836589958, -1.8509143094900762, 1.0993500870749202, 2.576248202091599, 3.6397380997878397, 6.027650378270737, 2.3752078430158163, -4.812722061226536, -2.938540642065372, -7.6343339153246665, -0.4871348858795826, -4.473545050298217, -1.442132746631374, -2.712550955000713, 3.7435528056255793, -3.8266681341733455, -6.678304460939963, -2.6481106044716745, -4.30222750479394, -0.16782956296673954, 1.7731804314782633, -1.6444161285326264, 2.513829367167911, 1.0011213110792778, 6.6937880313422555, -1.2848802638027048, 4.4887965446694436, -3.8893044172408016, -0.0005265275696312577, 1.6111602068972577, -8.260070684786674, -8.30996097074935, -8.458324464361702, 5.997003946154797, 4.099891996691784, 1.8240398685718922, -0.055567101785623296, 0.7944236234418771, 0.0960719361792563, 0.9094430638532722, -2.7755384737859488, 3.6194323899654592, 3.853931369700836, 3.4020524297922226, -5.184556541918845, -0.03266294615355422, -6.993416569395364, -0.19010532680257108, -0.8888375400406299, -3.3349507117059214, -8.236717419663789, -0.8859628631766012, -3.047896245611837, 1.7531021822088764, -5.280502453627971, -0.5921447881297927, 0.8129848476151795, 0.936770558821661, -7.226794590904902, 3.242676376800746, 3.5779860718639664, 6.340229509964511, -5.944781345889119, 2.417460260121499, -2.249315757988334, -4.981637755694388, 1.464772653017795, 3.475240315956694, -1.7870029822113356, -0.1389269753232384, 3.4789718337619466, -0.689774056177543, -1.764315057512646, 3.7242885117913525, -4.833935596237853, 1.7533033429374631, -0.7013927155268798, 1.0563687650299773, -5.043099758912272, -2.787565712165662, 2.1899557750206373, -0.7839547312863737, 1.2287307091411115, 9.277549062993671, -3.965292500444143, -9.98139886225128, 0.3170514077334288, -1.0389920810449171, -1.3434090137385468, 5.554137175132521, -4.495524793041092, -3.305099217587789, -1.1338552644905546, 1.9859453532390439, -3.9727050815161755, -3.0843789149454914]
BIASES_LIST = [4.017432574530565, 2.3169253716393077, 7.266251708317908, 1.784428993006408, 1.0920792121836138, -4.059907367932908, -6.68173059310569, 2.706170021971102, 5.14154326856395, -1.318957812645675, 5.713623955968125, -7.030626872329046, -1.5902265622255665, -3.1961886149411725, -0.8881719377191362, -1.2447428469044999, -3.3084667553308234, -1.1981354698076991, 0.46097449243165595, -3.8539993407760775, 6.169070105900882, 3.3409916864877287, -3.887617932463287, 0.7931122675206173, 5.171218730747457, -7.702212469377754, -1.5999129757027433, -6.052596337907815]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

