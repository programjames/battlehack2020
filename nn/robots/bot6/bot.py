import random
import math

WEIGHT_LIST = [0.5615167743368824, 4.903764266999521, -2.31458309600178, -3.5508345557408747, -2.3200293328582813, -5.290932975995262, 2.871668093255091, 1.8260198637356218, 0.8054460393302056, -1.104141895844642, 2.60199571100035, -0.01299336815105773, -0.9047755914851617, -0.7520659792246575, 0.23156788927716812, 4.9332412948410616, 4.6782270955077925, -2.9736962387164194, 2.83680342483117, 1.8235543738541213, -0.37154229903143704, 4.351894202081917, 4.932856583705783, 5.417948606516525, -2.1170481359273916, 1.609249574259785, -2.1847811919368954, -4.360895414329226, -4.9030639370554, 1.3837263925851382, 1.3608110191043197, -1.1157454278561916, -3.397086750685565, 5.259818178112614, 0.9963774730486926, -2.489030270420266, 4.151173893740618, -3.280413864615737, -3.753179546897044, -1.031180917738734, 3.82785826707232, -1.8604398700645666, 0.43585046180284515, 0.15920732879957417, -3.264313486156354, 5.736792662002905, -7.8835493797669685, -1.0368036403528753, -4.618532191361229, 0.8864282963340898, -3.8373180459247056, 0.682703404675254, -3.5815661977778026, 1.8907159270982636, -2.2485317050363807, -1.5881025080574687, -0.4115441393107484, -1.981797979343327, 4.8839103624355085, 9.88109803857777, -2.196261982556861, -4.497449961266624, -4.321473555131873, -3.5176224341550606, 0.7258503275168097, 0.20040879239923362, 5.363429654529987, -2.1940426865405938, 1.230525620283573, -0.6875943087868677, 0.44724645786864214, -10.342118602157079, 0.49114657737474365, -3.6907945988546444, 0.044366039180708416, -0.9738855877575435, 3.39519049590494, -9.802212713141042, -0.07075618394308654, -0.5653880977473861, -2.416818838455771, -1.1105625555334255, -3.252396115908173, -1.2151364132333613, 1.0156353084363043, 4.814715537518695, -1.8335312754250976, 3.9925700220679223, 1.3679853769961736, -0.6914521538217345, 0.9963717221353342, 3.784018915941731, -1.249446425128778, -1.064588906911693, -1.5782495443393765, 0.5370976814980506, -1.747204311030909, -1.1335613282106445, -0.627748869858643, -3.6896177176699676, 4.124646870480981, -4.820870825076138, -2.326245371227084, -3.6166014929557773, 4.939107746615583, 0.7481143770578861, 2.7049177970222686, 2.6845942947986616, 4.96531790306777, 1.8831301465266783, 4.389131323281948, 0.60085747963641, -0.5329659034998896, -4.310546991002752, 4.452881534582231, -1.7096153003373213, 2.5613557783167558, -2.7734295906164474, 4.570556750473131, 0.5778899564964652, 0.6300406179700806, -0.15642576657064108, 3.5938564140008187, 2.6141667480722726, 7.008776045069395, 2.4417810874640655, -5.3551000037544405, -5.63412684674214, 2.5546281477065245, 0.06344442259757634, 3.627576204395563, 3.8423680508582243, 6.499894966309775, -5.738915856268699, -5.192005004992515, -5.15343261460427, 5.247777468626684, 3.512047041686098, 3.565679259040988, 4.554910843901379, 2.073468426714805, 3.4763072154189363, -5.226806086605174, -1.05761206863095, -3.6876446070771456, 2.521478060825817, -3.9454600661287262, 2.482170299570985, 0.4629871954422169, -2.4829797602716397, -0.4216286697781569, -5.117465570429961, -2.4219923563212906, -0.007093835477992189, -4.156476129784411, -8.68091689708605, -0.22032100423337858, -1.8176874711241136, 5.467986445746094, 3.8039978605499614, -0.9540304372892593, 3.843232376582861, -4.562220413885602, 4.483695662985568, -1.1261480419248215, 0.3674675501254188, 2.1083376248971177, -1.6938761812883896, 3.3695655243231744, -2.6045175476886504, -3.4590271596288775, -2.426363886040995, 2.064326135430322, -3.287186097463249, 1.8308596334860863, 0.19492915470801983, 7.307125462473204, 0.13683481916743565, -1.232135259057356, -5.375156316655778, -3.221527288158476, -1.8819299468537796, 2.147555572947228, 3.652300664243606, 5.112682397723849, 1.1335158240587528, -2.6351857981813502, -6.113126746028299, -2.513409258516845, -2.130378101032788, 0.08689228426452833, -4.281196632484009, 4.574795136719336, 3.250328944750714, 1.9121819572496404, -0.4221481646525847, 0.7552633643022583, -0.5132906165030633, 1.6931561307374106, 1.7614724569518045, 0.13027388248710972, 0.7128501491866135, 3.0284668195878144, 2.4236659321160774, 2.2474688732537955, -1.3536847800105403, 1.0331261544722343, 10.57599900154842, 0.5780690525673126, -1.1286267680575202, 0.597717884386638, 0.7465203392355622, -2.9380505801267396, 1.3078567266817478, -0.6517353454547603, -1.7555422727166616, -1.6060924349815304, 0.3260332433901935, 1.3010258822614331, -0.7508717599896743, -3.9210983277876004, 4.08341498102763, -1.5714395382129354, -0.9490312415221535, 4.250899258518896, -3.5349581314488825, -5.026826105049882, -3.3216741303109587, 0.15308255381215694, 1.7412645120129258, -5.3351929799851545, -1.7037926511133468, -4.688099880777785, -1.6468736393841583, 5.270264190752, 2.4065378139164637, 4.272944980313355, -1.1755164947743104, -3.6271122697549782, -5.938376840617842, -2.5711907677365233, -2.5892107269016464, -3.591020304893122, 4.862622490515692, -2.5986847811231577, 1.2064380002902255, 2.5991371261362173, 0.21741951159298248, -0.08186650795360474, 7.121892794750754, -1.538717955752172, -2.1160615058148764, -2.30484594424483, -4.26946825331126, -4.855274450776342, 1.016422095210905, -0.4115428610992745, -0.35239287735933156, -5.810994286882458, -2.5062232150947423, -2.724700552395272, -4.580332661306089, -1.827509048252906, -5.904122103437747, -3.068714012493082, 2.683764312137493, -2.3698310820811805, 0.5974986630084188, -3.763442329888313, -0.549602605024197, -1.6632159635516985, 0.1757305897964524, -2.892869332187348, -5.616458840926578, 1.5244298891978139, 2.0311440941011973, 0.2051895800688836, 0.9988446555507217, -0.7831031729802528, 0.36620950738399805, 3.94377002168899, -1.031781314973019, -3.8914238325453026, 3.7595009020724492, 6.160370939518072, -0.07910275446334906, -3.3790512845325305, -1.8262592380464464, 2.6338267150596057, 1.6992059659863017, -2.976403586937242, -2.6967512522448382, 2.551776353162405, -3.5729551785314775, -2.2605485407534065, 2.3619080672363575, 8.829055060540943, 5.94711033853216, 1.8002809671838709, 2.0466009306272155, 4.5647430716470625, -1.879014771928846, -5.847510367204751, -1.7676237403387332, -2.37530105225532, -6.867773485423187, -2.881426482020118, 2.2941019125225597, 5.0619387889243725, -1.4249198708565607, 0.6753940058728757, -3.919160194574457, -3.597448595057202, 3.2643632214908553, 1.845319008112697, -1.7868437680784466, -5.6475799335223655, -2.4039484784991507, 1.2832998414540457, -5.592676862936489, -5.312604093501475, 1.2718495543538777, -6.802449669802778, 6.407400728204757, 3.431772172109523, 4.60282874312897, 2.0022344572250566, 0.2847242915088245, -1.2701602047945821, -5.565903207049169, 3.972599186863551, -0.3343470084970824, -7.422461300396752, -0.10840370908933726, -5.029349761143318, -0.5078991530020297, -1.6685889437752999, -3.44854891210499, 6.509594628069513, -6.776996871445829, -3.2375590922048954, 2.6656591838614307, 1.4733052704966187, 4.187864430021377, -5.690314205645397, -4.631079485698251, 1.7045867629987403, 4.806930041319742, -4.851088029514332, 4.6568587488663695, 3.2467555857223727, -4.027262349275358, -3.402858808139272, 2.3152429631400873, 2.333789464700676, -3.384809652364012, 0.03544772467634906, -0.017135576845432054, 2.8119663282004375, 3.2435960544109204, -2.251880020752287, -2.8240750561881054, 4.927475185530967, 6.050767229764708, 5.29151695816451, 0.1141605906998426, -5.842383124780278, 4.267090642114857, 2.6111846282054016, 0.8517755511966477, -3.223045573945297, -4.7179859001711595, -3.6650615487373357, -0.890377907876581, 0.3439326758111278, 2.072750851017532, 3.919328659548663, 0.6812963902562379, -5.651173758301298, -5.257303643309843, 0.42410420286011696, 3.4185296403629453, -0.8695717228989769, 3.172701375664066, 0.12521215177493786, -2.8708162697619506, -7.2372470554404895, -7.882869689573986, -4.60169351304627, 2.4630630760810948, 5.606673732794247, -1.6982296348141646, 4.7057501807785, 0.5112539299865053, 1.4421966986340096, -1.2962316798163898, 0.3385121683418867, 1.1785023347577241, 2.263124225957393, -1.49562148327955, 4.289734898572883, 5.552485793046337, 2.7157213177627293, -3.448584583342583, -1.7122811853014934, 4.538332089023267, 0.7011515992825298, -2.15464831212272, 3.869388461679161, -5.556669659088199, -0.29791544059685854, 0.7840777636768536, 0.9011941630544943, -3.278589811401488, 0.9680604549936461, -5.679832842666815, 4.133003027465953, -1.5823818962829654, -0.7161646879687776, -0.9942807115896076, -7.391549455403107, -1.834628269723588, 0.7539860881973067, 5.225652407623936, -4.347643162699341, -1.1487488376452977, 4.088712595034737, -2.742352085854745, 0.9160626510262881, -1.9397852304097953, 4.398852147853208, 2.7823364760080276, 2.9961421004974222, -5.9075312741322525, 4.938055915822115, 6.1844598544323155, -0.7384668281423081, 0.8070475343463155, 1.5812537633310009, -4.767404617131085, -1.6182677219874748, 0.6541326123233532, 2.014679310568559, -1.8314597214996833, -0.38137539526202896, -4.319364974425017, 0.7140282716312534, 7.989529658090185, 1.8065726523338208, 2.9285339797099206, 2.4174028283367024, 4.517632947394468, 4.933247717679497, -4.3580034165135695, 4.685013938220854, 0.001117979262510815, 3.6283963369127816, 2.5519840536325056, -0.38062781066581164, 2.5185646879103527, -0.4181603726050874, -5.908124231315496, 7.690602844514072, 3.6846757180585006, -2.043060472635416, 2.0732787632160607, 1.4985372976834137, 3.197904138501624, 1.3700008521864036, 3.0519593000012417, 5.186175062128556, 1.6544093436111267, -2.3232187343902364, -0.10515714382167908, 2.4926436220533894, 1.3485522545696478, 1.5787313904474778, 6.845893781905275, -4.279164137238849, -2.457072441110455, -1.190256343436419, -5.079366533172265, 0.56870372074595, -4.347598652562306, 2.69326851118748, 0.39828556019741695, -4.414702517820143, -0.8113081613362338, 0.48402466724449733, 6.265919377565925, -3.2867228565211564, -2.8847310862734266, -0.6931324071050654, -0.24133812862116735, -4.8607668037253156, 1.3593747282500834, 2.604681049779638, 1.8398442065608882, -0.36906884987704053, 2.729222187865053, -0.2865457714576619, 0.11187350164408569, 1.5448036461440897, -4.740224212744079, -1.6517502851041632, 3.6083203110817523, 2.8720398013751067, 0.4932276006703712, 4.254929792871192, -3.0534946210591736, 1.8240035461026078, 1.0465006438193283, -3.7739974408292905, -1.7958110129096856, -4.902670803421268, -0.9759873196722523, -3.997079253545605, -1.0082297006964411, -5.971317165992216, 0.30396454737909695, -0.04106454881795997, 7.012437087437319, -1.1886331433273665, 1.1042814287786187, -4.01514146095478, 6.95626768749404, -4.077878189090333, -4.131592423607561, 2.043436213906024, 5.105050570399908, -5.508484557591879, -6.403866916683167, 0.9172600151859563, 4.224649409674644, -0.9049743581374494, 8.071985243160585, 2.5274777856741517, -2.3089217458381213, -3.333558724653903, -1.9944040049044847, 1.4613109101021917, 1.0611511754841387, 1.4373729407899247, 9.023946401635106, 3.8048333262132097, 0.560313219560717, -1.2598604629128392, 1.807477489156986, 1.5068131517208039, -0.5486333944564394, -0.28850771351336185, 5.97484375600355, -0.12671601118564105, -2.7879752075032784, 5.41070828308289, -7.759961401758268, 5.25302848133964, -3.887565476608857, 3.405960607806954, -1.0062540047134205, 7.804774159403051, 1.8943567012966618, -2.2584523859635897, -2.1824354171709723, 0.037463520938497044, -0.1183075468167811, -2.457983055156857, -4.422718992589868, 2.2152960463861042, 3.964014396636668, 6.046855909319763, 4.876947778767422, 2.2486436003584953, -2.153348917083786, 0.026873590702496102, 1.8497653625320896, 3.7089011997121095, 8.938357867651472, 0.39998429978496575, 0.21985648810046976, 9.604279456554437, -0.6111235974497018, 0.5406744698988152, -3.1854675749564136, -2.5459771578164303, 5.779431634151799, -2.345682062285747, -5.447938642619144, -0.2413651467791798, -7.357698440875683, 2.4156090377641224, 3.0787821463501404, 6.112411647551147, 4.950001574571893, -0.9511628498781706, 3.8129569365850906, 2.910059373903718, 4.111909667176784, 6.7898014989459785, 1.388963991119936, 2.3051076926770806, -4.256265566301223, 2.014311505704873, -7.7168378361935615, 2.1596387667414394, 1.2622626681003175, 1.2215124630580687, -5.1335938875546985, -4.540401318017937, 2.3607899453306143, 3.032480691177805, 4.274593811726135, -9.129171693608505, -2.4264232268541504, 7.4468118135048575, -1.3616901617498947, 1.440739949118378, 5.8282755729598685, -3.4631867316339555, 3.1593575126809603, -2.010172948005507, -9.983875887616811, -1.04938850045839, 1.4728258681857167, 2.90921197082915, -0.9123635216250587, -0.7014900188036772, -0.8087838791432876, 2.2713704319560373, 2.4929842670614266, 3.2253468252859916, 0.2817894161524768, -1.419897922015492, -4.289527919795337, -3.2233556889857575, -3.427805143441263, -0.71531001010315, 0.8615011618924663, 4.225103853988795, 1.9553876563449561, 3.186239692238079, 3.110774103353816, -1.4417928042158004, 0.15626394429293428, 0.9670901054613852, -3.082651839436169, -1.6444136046327333, 3.4770245886386872, -4.020582408604992, 3.3559631282443996, 0.5684878219531474, -3.6911622859304303, 3.4430850711154615, 5.92731708803541, -0.4431935546957002, 3.2296490264334055, 0.38110106511921205, 1.8527416968353758, -0.9151448861895267, -0.20051074321923829, -5.259102979680042, -3.358341432140005, -3.7114112286982697, 2.341011394888633, -3.903238469840482, -1.5420875089654655, -1.139324325176659, -2.060661653209617, -4.902626347946714, -3.8677678076477804, 1.9805693100432749, 5.678105505418052, -0.20118556444702512, -1.8233647680702787, -1.3563627973425159, -4.276150446814387, 2.345047456683508, -1.5584730068393051, 6.687963601790955, -2.677476563039005, -4.746846357677746, 7.883224704194147, -2.046237939185431, -3.282562387656763, -5.163147218118885, 2.9976198763390376, 1.5245958788216365, -3.5616412201081253, -1.3601834286242438, -1.6000362274886442, -4.811647606352572, 3.3317486093338378, -1.3049198608635217, 4.3855837075853845, 4.6270575477544735, 4.293365158705019, -4.908829560416871, 3.652772133977577, 0.2403681837306716, -3.398313895595132, -0.3574217224835788, -4.744170289427854, -3.538793421259813, -2.069423108517687, 2.5259801729940343, -3.415054093306674, -4.679370006961943, 1.425741435523486, -2.7523180224882133, 2.013263622546819, 0.46734356295510815, 1.6695137815250625, 3.9653135883060457, 2.9312105980623766, 2.789408074069127, -5.864234863736533, 6.991262052852785, -1.3596796849017467, -3.4682236588775406, -2.851000958822357, 0.15060383301482178, 1.492451325110179, 3.0323954917375713, -3.59337888996108, -1.0524874315074493, -2.754926003537323, 0.5830671787661738, 2.1801593426480834, 6.130130029396146, -2.758381272083512, 0.09444941623487754, 1.4727634923484085, -1.2542613868535826, 0.7356568129181835, -5.736675120115321, -0.8448411762594723, -2.3836786198427165, 2.3564765577209412, 3.771587812599988, 6.921523413287483, -0.875221349526293, -2.231633803529468, -7.984977087750354, -4.330079952878494, 2.994421911622737, 4.2231594885887365, -4.411058192128836, -1.7800208932150074, 0.9730807251176136, 7.598756874226085, 3.755635362876021, 4.873117809434599]
BIASES_LIST = [-1.3846925171279656, 3.7044171669075396, -3.6145044658586896, 4.793198843380112, 6.337644374819438, 2.7724400994511367, 1.094183627043371, -0.07772469903231796, -1.1064530036159876, 2.6508694555922854, 2.121478654702874, -1.3698728934624953, -0.0044075869007595, -2.6179016282840464, -5.505212014159814, 5.262178262616781, 4.818576551296645, 1.474524522482264, -6.568947227093033, 0.01985491785765863, -5.067810273004368, -2.8066986905906024, -4.063584550711742, -6.096361451382366, 3.926829803221015, 2.646685574779829, -4.0253080727934805, 2.9175549169663957, -1.0836476805894364, 2.303463679028733, -0.34460962048706567, -2.296758122254158, 7.12233521028823, 1.8535542978366388, -1.6793378070391414, 0.45152026500315895]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

