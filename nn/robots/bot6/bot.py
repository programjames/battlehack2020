import random
import math

WEIGHT_LIST = [-0.2680236123159849, 4.076684968302254, -0.6781599384308736, -4.269896197883544, -1.566235007542374, -6.164616682052295, 2.6969145638096315, 3.366773732740107, 3.2690517202542653, 2.023327457897918, 1.7194799503434823, 1.38520925242348, -1.3834449317717634, -2.3489002326719595, 0.8575376580246004, 2.4628612278369557, 4.561552359902634, -3.5727952073156333, 3.1515198187917344, 1.6380727489137792, -1.446383782304134, 6.19248104203598, 4.968610485780184, 3.8078625365303367, -0.9587704939950124, 1.9068392019561848, -2.668081567134056, -2.56361244131798, -3.2380599848257434, -1.5395264883898074, 0.8374574700612891, -0.9594031379840571, -2.1684077303940024, 2.460054217979274, 0.032598614876504284, -4.1696236542277845, 3.85268026160219, -3.3328748842761327, -4.529232442338278, -2.2442064977628866, 5.139997948753418, -2.9387265023886373, -0.45847158541833544, 0.45114922148154, -5.5696595576447825, 6.410010495212096, -5.855415689132328, 1.2092610829252655, -1.5237295397230175, 0.6525349430447684, -4.77999167435257, 0.6251440809741453, -2.734001410952591, 1.7594439214475974, -1.7658712086758988, 0.03671463395236829, -0.5662606210346599, -4.108512908136927, 7.193794552066979, 8.556440926624052, -3.163895302679844, -4.450568811703347, -3.0798377620986233, -4.360611342908523, 1.1509160705936168, 0.0914496451297988, 6.583962014315749, -1.3966612330248174, 3.549858054602897, 0.30272863451867593, -2.674406840783755, -5.936228644331664, 1.597300184826281, -4.917423118708368, -2.279718956882573, -3.8239862652758863, 2.5180718111316236, -7.870610191855331, -0.6781544833511917, 1.0963581163619414, -1.8810584246758675, -2.337120102631534, -0.8460350439046338, -1.7762624941273542, 1.664468162909384, 2.9458464758285183, -0.927220142989543, 2.3088533575799546, 3.5322515565782275, 0.28181889476900235, 2.337669726239848, 1.913028853660803, -5.276692212037871, -2.0730605457579614, -1.8055844869954654, -1.9142231676646269, -1.9792480117575277, 3.2376249354408007, -0.9682804448567723, -5.125285196087408, 6.183704650744947, -3.392193775001031, -1.0156364787741552, -1.6106201087102943, 4.992844635222404, 0.9128253338147403, -0.54694503935817, 3.7214572036945546, 2.9571497339635155, 1.531499012847077, 6.5512106028954165, -1.8000575463567194, -0.652211038845038, -5.295702010480914, 2.348391877708786, -5.29642592013086, 3.4398984438429405, -0.3542399705091015, 2.7719002591558874, -1.4549278144990168, -0.544356308694366, -1.370459862336615, 1.7613554777199587, 1.7259458746026928, 6.212131368512957, 4.4850767967391825, -5.381803969849595, -7.247297898132448, 3.679167939458363, -0.34219519822791056, 4.036261963107576, 2.0739256151668064, 6.109867759533571, -3.7138904092007836, -6.222300950197357, -5.297501215352598, 1.3716366903048867, 0.9284449519978326, 1.381100931526924, 3.5979564293755413, 2.800402473052284, 3.3447622644722586, -4.993222189967383, -0.36410833107370066, -4.714535929297071, 4.122459673557781, -3.3174770150925825, 2.100516680274511, -0.7765328732225099, -6.496976731081675, -0.10365312223919221, -4.760341621788811, -3.177584218509421, -1.9936208654424523, -6.336868559673538, -6.8148990389843185, 5.226238198743159, 0.7869509884505295, 3.6985218955244754, 2.436371146433749, 0.11189391068029253, 0.9025219296374598, -6.162426700831907, 4.551619386584781, -2.5513014672176393, -0.25679079420228157, 1.0097414183017785, -2.438302148016713, 2.3702448923357498, -2.298136460651098, -3.712974928382087, -0.16160664026901406, -0.416818738298265, -2.65865120138278, 2.0155727570119346, 2.980769741442764, 6.818832640154655, 2.65968663937329, 1.1510349487865978, -7.707015350575175, -2.5047908460631056, -2.4667905116595445, 1.0032642210463347, 1.8913664335749907, 2.9986770208008293, 1.6503230705785938, -1.4341157058329872, -4.574874423957727, -1.381143911207859, -0.0020540528407810843, 3.2959591485932327, -4.468932267509425, 4.7916473828283666, 5.801181887646185, 1.459794451237923, -0.20847510487020027, 1.3466483163797678, 2.8775239660176704, 2.439405606685683, 0.3194949711302877, -1.0750656288671478, -0.25618310289571133, 3.0968412769995464, 0.6909685770347944, 0.654646572081534, 2.260401673023325, -0.04682891249723298, 6.33353967218197, -0.5024434808375325, -2.913015669205836, -0.21847090242251688, -1.4526877747584575, -2.192773396700601, -1.3044817684217094, 0.5505934461779161, -1.1251465844512663, 0.6890172221582835, -2.72594373242394, 0.32583731917423986, 0.1944044614725402, -3.5965857441629465, 1.6746458744635477, -1.3593592107245767, 1.5653409553366062, 4.60069762713564, -4.264739545940272, -1.4948355447478292, -3.1161442635345775, -0.2142415516563424, 0.5524320710046835, -7.406210367447422, -1.0389775140133846, -5.214146975024571, -1.7426993040025345, 4.097893263429334, -0.03292220651570821, 6.681236755721957, -0.21485576251716698, -0.4921826508572251, -6.717522857349859, -2.39764831788205, -5.507583539440681, -5.25289070415122, 5.416462970664317, -1.5543839003075723, 2.350944603695509, 1.7631189759654555, -1.3710187118716044, 1.9145172141727178, 8.71011646210667, 1.4762019689177306, -1.4689545153387202, -4.6191069554131525, -3.5135155063371886, -3.3118977788832207, 2.4120984273874395, 1.5907632930811473, 0.11219188493687926, -4.514095070386748, -3.036804358820437, -4.449609451217193, -1.2612185452260207, -3.4853958669642733, -5.177238813207259, -3.769298916516412, 1.8362734668023535, -1.6295472038001517, -2.5670452698916204, -5.04736669981755, -1.6277271995223668, -2.2300771084162387, 2.7669970744195833, -3.975509567936357, -2.36115808456642, 2.1295214623069856, -0.16559401238488036, -2.723979455000524, 4.27657199614612, -1.3251394033656443, -0.38496245288265696, 1.9827723649549949, -1.0466681017381694, -5.006189685107163, 3.2122114080761826, 5.286271240004841, 1.9936190673592842, -3.135509434978111, -0.254636454997641, 3.124179097673876, 1.116318274525553, -4.465534096195385, -2.4401526552962363, 4.272173502570013, -2.677233781177925, -2.6867930918227936, -0.7165923162297556, 10.711403323933832, 5.9449001565779165, -1.8613626800555203, 3.6647898049379712, 2.363433260059997, 2.1601263654452203, -4.5758543111455205, 0.24511605801447134, -3.579537736673007, -3.7042172871388006, -3.374698799645859, 1.700174475918402, 2.7101341969029846, -1.699539648628432, 1.4616859452412068, -1.776347262521684, -2.5266227294615966, 1.8310587763479873, 1.4667015674623842, -0.7459244996321559, -3.9572917107793, -3.4555385108456926, 2.0015894727355246, -5.144948440315372, -4.441055225345537, 1.694467694783813, -6.1171957641053565, 5.9797938718299894, 3.8301814447230456, 4.779467388816262, -1.03715360242932, 1.362530208609459, -0.7931725033386827, -2.821699082326327, 3.7255368437250596, 1.0638421799716422, -6.131841180307494, 0.8003806662096173, -3.699065304642132, -0.6104705535873536, -3.139488366407922, -0.8560347619753956, 5.23752733002326, -5.866227454456107, -0.8550901317853972, 3.779685707560126, 1.2953867572728202, 4.561253913169727, -4.1964135448803574, -2.779536455896025, 2.728689410363426, 1.1307978512749317, -3.675043261887506, 1.9390042925951163, 2.483566947891835, -4.857013953223306, -3.134643439062251, 1.2499364181949577, 1.083324988076488, -2.8175460632590092, -1.4751237852800991, -1.238197388838473, 3.6434033107539596, 1.9026085804951705, -0.5794109967446435, -2.94697103182484, 4.706921651865906, 5.200790776341593, 6.866560932835174, 1.078461230962274, -4.0263025958875645, 2.555914502829964, 3.224790283904099, 0.8860543424883913, -4.777875188179655, -1.4507862555320319, -4.884563828580145, -1.6461910487892166, -2.456249468527728, 4.310184244575284, 3.000038251180415, 2.2669061338362404, -3.953202538227073, -3.907507109335853, 1.4684403378378907, 2.9750714685983253, -1.3383085231261491, 3.4826987029901586, 0.6412621919303207, 0.019932989620186747, -5.083602652390684, -5.913656867437575, -6.869286268362462, 1.7966252031149175, 0.7820967218501422, -1.7816145878623237, 2.8710014959458854, -0.322208020514109, 1.5900184421248582, -4.384513160474037, 0.8293604257858513, 3.8897959531402453, 2.289043551693453, -1.4969615165384993, 1.7932090568031471, 4.764501274062671, 3.669375351044139, -0.6107549365609823, -1.2828547771037808, 4.679640793139956, 0.3900834699161799, -3.3101237030353072, 3.548328614560802, -3.3242520426172613, 0.12376831419549816, -1.1867676278202268, 4.309812748008977, -5.0505895081988665, 2.0258201360972983, -5.3395500278549015, 2.205800860378648, -2.9392128782193865, -1.585764002217544, -0.9908784126931057, -5.641921625036199, -0.8706406658741594, -1.020996922295982, 4.731705182548398, -3.4721140275619513, -0.8626836839132757, 2.6201463173836514, -3.913799749222025, 0.017094391329524505, -2.852194981680017, 4.631668998102324, 0.5138416848901752, 4.162680980243483, -4.693943630801714, 5.903166224851373, 5.577945386034373, -1.8893324779295562, 1.7802813086214186, -0.1417788844642638, -5.7520084829319975, -0.5744979201721512, -0.2547297449641607, 2.3675485300759265, -1.58497035833068, 0.0935742832855102, -4.110508240347224, 1.9549936409181496, 7.223716971716922, 1.3187832950708245, 2.270122891297256, 0.6025429560634117, 4.335783171563506, 3.048554140661997, -6.33384947285147, 4.654924505362817, 0.3605862765130874, 2.7202351754805463, 5.167497307671285, -2.8570623962447557, 0.3568368297725606, 0.8009274760163405, -3.2895987383985856, 9.014389834873427, 4.328789863715948, 0.4160943795918606, -1.176548690596369, 2.4712693801251575, 3.0254643185747625, 1.987185825980995, 3.4503893710168976, 5.093296245412942, 0.49848944432797704, -1.5793764425652783, -0.16914450580264861, 0.8648561114449069, -0.39852642367061797, 3.7909783072031997, 3.6230322076075243, -6.3560570162197605, -1.6497493032704487, -2.2577263200749815, -3.906897246106904, -0.007489184591591758, -5.129967468331869, 4.493013330323965, -0.3247801228900813, -5.264425380096244, 0.6162207062982095, -1.066143187929741, 5.796452476350771, 1.4482516349058079, -2.494290058813542, -0.23837814097186927, 0.5656922010744461, -2.5913995381178037, 1.5753646472351912, 4.025810605828105, 0.7491287574752963, -0.45786905741927864, 1.0701392839722939, -0.5307858927355318, -0.12560038298540455, 1.2022963013567747, -4.268301500050831, -2.8395771413748543, 4.7302087856165445, 2.7727188041741364, -2.003381405937965, 4.652590264397468, -0.5510753437008102, 3.132685515069925, -0.12072080657164364, -2.3342771021412205, -2.657250722222823, -5.471228250525231, -2.34355789786136, -3.078425893779847, -3.3587934690812213, -3.9076020756257153, 1.1793076156723892, -2.184140254977126, 4.236066552202415, 0.16363795700143102, 1.6710983742445347, -2.2344489525883926, 5.352970381970114, -3.366270612665505, -3.542743723339152, 0.47131930110670295, 4.584151450083329, -6.75567747213433, -7.512545853806209, 1.2270237047036225, 1.1467968300067333, -3.2236031525451097, 7.770501634345001, 1.3119758519459972, -3.898493022247744, -3.540090681717327, -4.482632315452725, 1.7539592491119063, 2.494528888809369, -0.3788099040609385, 7.375091934536528, 0.6148987668856667, -1.8759199868681653, -2.7318761219947376, 2.9199037597384807, 2.311842387938955, -0.24588042003477506, 0.3566936141617132, 3.8043128002437196, 2.3237841422876886, -0.27185227248276056, 6.163703354476873, -6.152589392183885, 6.15858355655103, -3.8707244071263105, 3.0770200396284366, -1.8237563652633009, 6.642801382890567, -0.21636167825525154, -2.3437383031776156, -4.623875288137706, 1.036110409774424, 1.751308146048629, -2.843642799680203, -3.3333583448099002, 2.4051465804940806, 1.3189828840035975, 3.666879436393079, 2.311215011528992, 1.6882820459500536, -2.120387737569493, 0.7513500359119991, 0.5318681060121477, 2.3941701597412477, 6.5515511820506, 0.05868806152796613, -0.1851627220593144, 7.715601781880734, -0.6448630363468633, 1.4199459421011502, -3.081963979657182, -3.189474748799705, 5.515164240446886, -3.2243309899361625, -6.3385059571338935, -0.5582277219511944, -7.327715590292176, 3.7217836607323687, 1.5437405120339287, 5.127233199583323, 6.553601950555543, -3.8334654308225855, 0.9530947787018582, 0.7414427787476223, 2.1568739664795986, 7.516495293357851, 0.8002107461551584, 2.7716941760460134, -6.0865582586079086, 0.3980919306463131, -6.119577658030005, 3.023851652658876, 1.6666163275635864, 2.0472263241065995, -4.270447114333901, -5.06501689871474, 0.14359121828973387, 1.9834121821344404, 1.1065754635966325, -4.132729149633629, -2.938457154469326, 6.445950213153544, 0.7810056770327882, -0.5645359255075075, 2.5954371371975506, -3.295509351044982, 0.7313654912752001, 2.9695190023852773, -9.001501008084265, 0.13582663334834444, 2.183107207473236, 0.7992525723408834, -1.258172783496084, -1.5030707671280314, -0.17845839540132014, 1.0381447687982943, 3.273631386799565, 2.8431666437828857, -1.0547302590964494, 3.7917551246202557, -1.8104640424862375, -3.153381146126333, -5.299851551929911, 0.28135084865767834, -1.2466559351191338, 4.682198537261284, 3.9129145697367234, 2.8707618757279203, 1.9259496045283298, -1.0606926178277973, 0.028924639274681585, -0.7025543804215786, -2.7503879796934276, -1.6362446061128977, 4.963568523111873, -3.075741195978096, 3.2830745055527606, -1.0559056624324796, -4.206074408144397, 0.8335013213854991, 3.8328293641265354, -0.7930469327335196, 1.5727150192374295, 1.420949028574337, -0.38364635483600207, 0.5671608459865243, -0.4861126484992666, -5.894386403853609, -1.8956541271979686, -5.459883113903556, 4.6336033239118715, -3.829004323386093, -0.2791154051618754, 0.5652628505342796, -0.5249046540399678, -2.902789244691702, -4.06798732566484, 2.7207334064481863, 5.34848489568131, -0.45169728005820475, -0.4083834178946629, -3.7600865656476454, -6.267772981038087, 3.208163592971732, -4.020002466319437, 3.6241721002175824, -1.6212962414008667, -3.967119419504855, 6.0734345339498335, -1.701250353615826, -3.9976378002197315, -4.901834685593973, 2.512465581534162, 1.7370465687861407, -2.1355385468140353, -1.8090923358678666, -2.6986470623514918, -2.664754195641062, 2.438725811929145, -0.941398312068388, 2.743893012625443, 2.03404886235403, 3.0035266585484033, -5.800708273852101, 5.1015436943476455, 0.3360331377260395, -2.3569493042920056, -2.172006507300838, -4.53391189917097, -4.33586649990993, 0.4976032722131034, 1.8796672801915615, 0.6301697233742356, -3.007841839306697, 2.7521859592636035, -3.2995492208235575, 4.47396414337836, 0.016469051142652624, -0.3519629397485381, 4.069288345846882, 2.748356611385859, 2.8853257788351447, -4.258225184193531, 7.125624497029415, -0.15586329384578157, -3.22523024209368, -0.552060333607938, 0.8770051822367155, 0.6335053132095863, 5.03451804923182, -4.3622062293505675, -2.603754923016403, -1.031565575880701, 0.14141265395657854, -0.8784133506988396, 4.361808196308307, -1.500996556762573, -0.8942017192935405, 1.0461501838242513, -0.25173008251657825, 0.47781530891107016, -2.3765211540839104, 2.3434023689957826, -2.1671609176020894, 2.0902727926341, 5.164558484384856, 7.261821594324543, 0.744173006883561, -3.4162972157620075, -6.579743199183364, -4.809553261550839, 2.3347286147485926, 2.4597105251659666, -5.400019979757927, -0.8960473660193036, -1.1264312581179583, 5.4081563368555745, 6.143024302400897, 3.5810274328644596]
BIASES_LIST = [-3.3609385075786795, 4.391465976651483, -4.234680451573933, 3.4972203910546256, 5.928269599369478, 0.7517061608093591, 4.274706616740943, 0.8728920363577655, -4.107398593967417, 1.936776532130033, 2.1601438716682884, -2.499828546918862, 0.15199718837726994, -2.1171492152140328, -5.1232010393340275, 5.8972056364167225, 4.844775859654476, 2.228380764720722, -6.324992885079874, -0.018551350739599126, -2.8945227035756056, 0.00842981970033252, -3.1112504027641092, -5.4085231240423415, 5.024249117586029, 1.9542595382157648, -3.43803221322214, 1.2853172232661403, 2.739430170544984, 2.074664876479904, -1.2832243763157973, -0.8231569630944822, 5.1479371214726175, -1.2089948524952523, 1.1848469120315706, 2.2919467551574924]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

