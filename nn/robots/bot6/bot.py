import random
import math

WEIGHT_LIST = [-2.0340990778702466, -2.684059472778575, -0.5338934392106105, -5.586158065539985, 3.1611937523822, -5.394348817477381, 4.289118099991056, -3.292499284738687, -3.4535645864343696, 1.1676461391562927, -3.710920640299416, 2.054067361285621, -3.658931132494286, 3.685455187294597, 5.925227380469694, -2.0125950994347255, 2.121513274867743, 1.2690159363896436, -0.24773576956764898, -0.5613232655605432, 0.4205012197936515, -2.6332136573813316, 0.22148047977002783, 2.075943520957991, 0.797680364810677, -2.65287213140073, 2.0905146968148602, 0.5022153800463944, -6.562097535135688, 1.0229618961820641, -1.2493292538413383, 3.1496194760347187, -2.714091879355104, 2.8145518086199077, -1.8814532478823967, -0.4861790678321398, -1.8061984956235713, -0.9247339161821799, 2.1270046342871622, -1.0995475448580359, 2.218218242042859, -1.382497717408753, -0.7761711808252634, -4.534564346678213, -3.5158157106586687, 8.320480699446545, -0.29989594707375056, -0.5144960545043746, -0.4733610054434674, -3.0808194241240217, -0.4475659846007183, 0.5362720364725571, 1.3490846631600624, -4.961322114703161, 1.6551717758510467, 3.338179443719892, 0.3095057086869777, 0.08301164946250328, 2.938327873853317, 4.835994521435088, 3.212391690229543, -5.37793535455422, 3.245038990211543, 1.6784205230929534, 2.6309865096182152, 1.7719586471979865, 4.937166183393076, 2.0428212478943846, -4.45408192596766, 2.417011644474485, 2.7526617227867733, -6.288759831954111, -1.136137415154963, -4.712599849363525, -3.0695370980050343, -3.458704712557142, 1.0724082686922904, -8.526579227977553, 5.311002639883512, 3.8517516965707603, 0.7599020712545033, -5.40017768330043, 1.534850870788218, 0.7006168143892793, -3.532440428730017, 5.3775540966451345, -0.36163295743943835, -0.6071365619364033, 1.9667255237140573, -2.0356182877075084, 2.8031784266430373, 1.59642669208744, -1.5760323838874357, -4.930500604971719, -4.726439092453545, 1.172342279510766, -2.908504962710486, 5.078923113733821, -0.9718771515526456, -1.30511042477484, 0.7643327400760356, -0.8507933923869297, 0.73319328841459, 2.0180682776123158, 3.170945396077485, -0.7231051724492001, -3.5492053265532997, -1.5005788782670912, -2.362342208364601, 3.2865662501578763, 7.70030390368264, -0.8109494077952415, -0.3321749392372023, -5.734003394663053, 3.380033614078526, -1.6735708317637374, 3.844537211237302, -3.5624256437863853, 6.889282276820701, -5.151372649144329, -0.4821366169020358, -3.3754246181950514, 1.8427302719289074, -3.66173925080086, 0.42783559696234175, 2.17769167056527, 0.7310194816209761, -5.601528386419854, 2.271826003101185, -1.5528977355973297, -0.7713128441449033, 6.773265244459523, 6.142519407120984, 0.16898614607730567, -1.8623176621834734, 0.49164542449189796, 6.235174101303166, -2.191486139244043, -3.499411664168205, -2.713415157146963, 3.1978582632014403, 0.374145688365499, -4.483464752364502, -1.3664435160174706, 0.04093563620556351, -1.9810529213607613, -3.985678844191658, 4.481290435593146, 1.3693776230225625, -2.080445403901045, -0.9154680928234774, 0.10130972486792711, -4.169853137359986, -2.303779395582386, -1.623742847804924, -0.39905126980707206, 4.081175150779103, 4.69189667263833, 2.60675022663038, 4.278878783658645, -4.902829167356926, -0.22930668333833593, -2.3589161590504366, 1.5648362114948453, -6.510683049387282, -3.4105682752639117, 1.4569993238242658, 0.8943404034245546, 0.6034224426210262, -3.8240560062040543, -5.726378699541955, -2.952342348683861, 0.5775718059039379, 3.6998545389561146, -2.8631677607720216, 6.533400635922695, 5.1036118692462615, -3.5604190896250607, 0.8244397140343265, 0.8996876550408412, -5.641550895369399, -1.9375234624195588, 4.776037723608644, -0.990592858569731, 2.631514484944094, -3.686936426410556, -5.8759692826948005, -4.431348426078657, 3.036685610701701, 2.955941362773239, -2.3420780474600535, 3.243821136691711, -0.9243842599242402, 0.04960826111066141, -0.36427506665600085, -1.4396507063781216, 3.6043898440318953, 2.5111592906169746, 2.511900219613704, 0.029884854700391594, -6.68959485870793, 4.176290500907964, 4.206281302448528, 2.9911863667613443, -1.5418176307114342, 0.5890680241063073, -1.0854419825958987, 0.3900255585400778, 2.6244372141907535, -0.3718427060316405, -2.3301182828886304, 1.965412369997967, 1.33937328249176, -1.241161296812671, 5.247153600266383, -5.588647340042545, -3.120243306243472, -0.07579368882770221, 3.4961307159386443, -1.2628629576702923, -5.4040477549715105, -3.473421088894705, 3.141778030617851, -2.5602317079578425, 4.717999113267506, -1.930741734115469, -4.128004828591836, 1.0349062322298557, -0.4901767346513324, -4.799187995127857, -1.5247942728012374, -2.8124158342233323, -3.8303660972552365, -2.3380148564904912, 5.821744991194926, -4.051696165176662, 5.928310704580248, 0.19643544930936585, -2.8240766740559264, 1.9059321481950793, -3.0716246791143202, 1.6181004840003146, -6.676059156188048, 2.6513636635483717, 1.5737872383768385, 4.0266599464721065, 0.9969628332823242, -5.810375607490956, 2.3875861279428356, -0.10080507770245672, -1.6675640451489873, 0.08487311679072596, 2.041278695177767, -4.485491629495267, -4.110027456604609, 2.3112526019595183, -3.276274145729536, 1.7620510115150418, 1.8001960423226842, -0.7056376801989022, -2.341654845911143, 1.6487051714186096, -3.6722086113221724, 0.8414552748299917, -0.7121997176857524, 0.40295765362613944, -0.40725760937372535, -0.9140053267759751, -6.800719710214901, -1.5310342337405063, -2.9272952036283226, 1.1905625196005984, 0.037549022243366315, -3.965537230831972, 1.1097119483598954, -2.078373393179274, -4.028746089467048, 5.403654985262254, -2.0545750444755537, 3.0309557925667576, -4.126602220400722, 0.07464789305821506, 3.272198241155606, 2.7967885087477757, -2.9762886750412036, -1.485867834303898, 0.8355995856169367, -2.70962674041139, -1.7769385639979276, 1.774001444539815, 1.9705143504012352, -4.167389970184983, 2.420511617982231, 2.257324416044285, -3.9629300012385604, 0.9432728707942855, 1.4408339363522842, 0.06331431271091947, -3.910030178431122, -1.0401122376428051, 1.0575587876663284, -1.0896865680283139, -0.1034422266553311, -3.130136042526109, -6.725903124755406, -3.4756409705539353, 1.7011074572626583, -4.372222610666592, 3.78291071274844, -2.865011821131903, -2.8782361165429338, -4.251357708964045, 1.982304494496518, -1.2289364316854983, -2.39120302803886, -4.125550526773319, 1.362118364334052, -0.0024518645180555687, -0.36585575553760763, -0.7567917602245295, 0.8533050309518453, -0.26726935287409526, -1.7676172627577653, -1.622965731579249, 2.214747823709528, -0.4606395213849208, -5.279456869368027, -2.3877807837660683, -4.445759840445152, 2.3668627282407266, -0.010426531623379809, 3.240707363047936, -4.365553378574324, -4.030228616797667, 0.9857596099943571, 4.700878214293376, -2.1836401591863956, -3.1951944313920997, 3.6850013117719786, -0.11288467617462405, 4.377889472240509, 5.105714792810903, -0.25132790463700494, 5.1549507376864385, 1.0667412239768832, -2.3417867131980703, 0.5823532830338016, 0.021402702292620646, -0.6922292547935076, -0.08870789246483435, -3.511168891476866, -4.199646687102453, -0.5777379812230408, 0.4196677855908988, -4.5610084565204065, 2.058166172307428, -1.3966792776091952, 2.22080035767064, -1.6707831658972356, 2.2741676991908064, 1.9677621292315104, -0.7850835105130143, 4.838040323021381, 1.7859062829676833, 5.757777503739537, 6.344486411165338, -3.961577402507094, -2.4445854235538746, 4.318824619016944, 1.1115127082680196, -6.539084967758515, 0.6117728332533192, 3.369585841660622, -4.1130083710218095, -4.862707023418755, -4.1227023012434945, 2.9198243205268364, 4.337318129602742, 0.7382676154512333, -4.378782889977927, 2.802786551947357, 4.832543245121105, -3.4026045919434846, 5.100543194380856, -1.7971868231145234, -1.692428813143549, -0.7557860704946207, -0.7576803314993412, -3.3984662527045453, 0.24062297197443105, -1.391243397324732, -2.4085396386502076, -2.35043160893662, -4.148915908143795, -2.4454604445879737, -2.829982795138532, -2.2492478787807944, 6.87575234713174, 0.1905019287834644, 2.5278153180787584, 4.176514149434888, 2.091504089188323, 6.212262354119281, -1.8227263450717124, -2.3147011494533656, -3.3799443412224877, -2.5386398417723886, -0.7902682661406797, 0.3555429413794087, -5.030569845442779, -3.2319878522789938, 0.2876230122834387, 2.843274388130892, -0.01105707374337217, 2.2152464701315147, 1.6139219189145084, -2.896573640138649, -3.5408740331977544, -3.6053100921800163, -4.5953433515308255, 0.721439647702526, -4.442475466884909, -0.9249733189539332, 0.21731064794334798, -3.8957317708453876, 0.7199182788236245, 1.822510576638277, -1.9015422639911095, -0.2147629824710623, -1.8747412608749987, 5.517698572498501, 2.771583808240794, 1.9657681097461115, -3.1744961942591443, 2.4714655088701707, 0.7750171528906655, -3.9662087831861026, 4.35051330151699, 2.8501008872310836, -2.2046561470436803, 1.1274921261459787, 3.5166791572505387, -0.449448209851272, -0.3170509697238506, 5.371615612403862, -3.4586814963198993, 5.612692615771909, -0.5915883705656253, 1.3737616409104891, -1.2633483236183163, -1.7429700867058668, -1.4021084393098922, 0.40815490520768205, -1.7425970181425334, 0.021191046821715576, 1.926695438921664, 4.3485475043579935, -0.6993079121185835, -3.3804938817296066, 3.750805183384622, -0.8682616830552523, -5.277079937652003, 4.539497378006886, -1.4347997800220016, 3.859844241204998, -3.390413005703408, -1.8634910668124254, -1.6618416972598729, 1.487564307698701, 3.091268311371861, 4.314657497116182, 1.5812973862847297, -2.8401960183304844, 2.205368039760355, -6.795037783557945e-05, 3.399001202987262, 2.650623168547342, 3.6537189912664934, -6.847732139309003, 2.464840471337721, -4.29743530969337, -6.966603734469877, 0.24892549272124054, -4.340255147396561, 2.2869566687549625, 3.9659459709494733, -2.013292465279873, 0.7794320580448679, 3.413237816876615, -1.4269102058274632, 4.276359487647881, -5.2193714933278486, 0.15582598466792108, -2.5354900806009417, -4.139927368852968, -1.8174729274548462, 2.484813176422362, 1.9643140655615907, 4.592321970757758, 3.9213557065983444, -4.145415174400529, 4.309808665171838, 6.142867820698514, -3.172823803938339, 1.1480912445455944, 6.561533730369326, 3.689204638784248, -0.3758929035656976, 0.9841147552637615, -4.347389076143461, 1.2576459431328662, -1.587627284634431, 1.9109798492355363, -0.8506821500019861, -0.5347140556041421, -2.4623876024899634, -0.9607531708268118, -3.249399847368573, 0.017692670854945414, 5.508880990243424, -6.475585788369093, 4.287940318335312, -0.5871499252889145, -1.984525952167826, -3.5418881470405292, 5.118876240894047, -6.431776011083279, 0.7013654466163666, -3.527248766558576, 2.3110152830464354, 1.6977266706486884, -4.193542246234005, -0.320112036900696, -1.171412025628314, -0.40983567612886107, 3.6266916047244466, 2.1362981351312555, -5.591147063868144, 4.160122244406969, 1.1568474691781194, 5.087837989497482, 3.3440699549330093, -3.070889562873764, 5.456044955294298, 4.740007846669943, 2.963893230320907, -5.667909572001146, 5.455201745876808, 2.6759146065526416, -0.9328850646755875, -0.5860961178324051, -1.0852334075532883, -2.5913443312589965, -0.20053837408313058, 5.909085793577637, -4.388386537014649, -0.34615314059232505, 1.6742639254439355, -1.3810719837980299, -0.7855894238656171, 3.68424715431867, -0.7497961531527162, 2.7308768764124225, 2.757286619711704, 5.401105774194446, -2.4164493299246184, 3.6446997663829626, 2.846185207384212, -2.1383931966510983, 1.3201561521014478, 0.24315256448286493, 3.6537369911341235, -0.10425331476723221, 4.300266848848777, -4.108374372091792, -1.9052603427119492, 0.2564561976061064, -0.48357847470189674, -2.901570126759661, -0.3623274056165815, 0.6138890350657253, -4.071160523196683, -1.4411508102363972, -2.807362171475998, -4.479507639769297, 5.791658304861275, -5.949509276834769, -2.0159793778305675, 0.7510897777562011, -4.350772509114692, 2.385845329328867, 1.3320535350354041, 6.52637870939638, 1.8164259527947584, -2.29712804336524, -1.8235015250396, 2.4435607646802313, 0.3729901261740347, 8.708879172769404, 0.6627019724963044, 6.236714425645828, -7.126778005736213, -0.011329829211564557, -4.36618516501437, 3.678203532899043, 2.640883591448757, 2.392383668624147, -1.975525627692281, -4.930083415430245, 4.664251349533373, 1.063727604465746, -1.9567866671517224, -0.789789143421193, 0.6311401764742728, -2.276478704111436, 2.681672985392222, -3.2739978445283855, -2.6717499461866634, -1.556588455912878, 3.386836984153258, 0.883962596594069, -1.283927016723114, -4.337474635286749, 3.7589485239398783, -1.5786454668841616, 4.0647733167149305, 1.2299318017517455, 0.6341138577940728, 3.8016762146252026, 2.9379541175530286, 4.344526577496911, -1.796533926041524, 0.888356437056695, 2.004176150729325, -2.0182890370673525, -3.4584934587556697, -1.6376737854388306, -0.8401022056120526, -4.352540594629402, -2.2774175629891387, 1.845356065492659, 2.103303102118895, 2.278132164630467, -2.407855863519023, -3.6501412546935006, -7.135472884065167, -1.5377506872495366, 5.202879321555875, -4.749902245879813, -1.2041672645341737, -0.10075056477177524, -1.7543916420726648, -3.399768098779151, 3.1788248029709765, -4.755641993560623, 3.3546529875947, -2.1421875765724794, -3.7918497644023876, -4.6950956509217106, -0.17975293584176755, -2.494099707778479, -2.1762363116163974, 0.8397816056146061, 6.911005809612814, 0.873808277642389, -2.026462485674058, 1.79732587410387, -5.2403887300744065, -1.1781524023444274, -0.6398856186801576, 3.2800599469641183, -0.9791688815433077, -2.922766800718593, 0.5623715849419786, 3.8290009247485397, -5.519756157487134, -2.4147207517607168, -6.139807686745758, 3.523045569041111, -2.078271172160571, -4.228857633827227, -1.7950082156277314, -4.47054303882487, 0.48767263631879043, -7.654917997336143, 1.7772112144378855, 1.2986250889007263, 0.1310222018881242, 0.6746786611442974, -0.8467542718366143, -3.2988126343721538, 0.04252697899623592, 1.0920945021093251, -2.7457190119595962, 3.1916836714927417, -0.6253941808952994, -6.016977281761014, 2.4358846297411496, -1.6026813261831598, -3.8363922663244923, 1.271854226443164, -5.986733781009172, -1.3462693751491464, 4.652217938328871, 1.575267026001729, 4.605691842273352, 2.3245089551027838, 2.87068954252584, -0.6473643304871026, 8.35411857166995, -4.977951259343268, 3.299754861135278, 3.4776526517855846, 3.011408349488538, -0.7785675691850298, -1.947468361264206, 8.729385474919038, -4.372108276356259, 0.3676962986469492, -1.686212622084681, -0.8222236397519684, -1.6389000061568382, 2.060941147834646, -5.929146134840286, -0.6565203223009908, 2.0134795886151657, -0.06961322896241318, -4.45095648959242, -3.2658149810505095, -4.184038229028884, 3.718163107807344, -0.08908009484884394, -7.110265335582138, 3.717410034528424, -0.5921583530625296, -2.267074006580649, -3.1642711350202974, -1.8194336226064354, 3.076153538200769, 3.5073280559454068, 4.1402614146926355, -2.2188194396044505, -5.700880071723591, -5.731825926425945, 2.744022478037717, 5.6483397758317935, 0.5561105943915194, -1.5318581720553073, 3.8366618750226866, 4.233773784521003, 4.41903205515377, 6.076795796133489]
BIASES_LIST = [1.822446123147874, -3.4437705221601833, -5.121750724988386, 0.6638474376155354, 6.06177139316871, 2.769208784626465, 2.4907370081091296, 0.7671161239485302, 1.0351416121640242, 3.3080644839839684, 5.208001008852799, -0.7877601570759012, 4.500378100327411, 0.17902674763417914, 2.979048383047025, -0.017953701174780567, 4.8536216145313755, 5.834455629910359, -3.114067601620971, -3.6775211544334665, -5.785002557187365, 0.6060666145973967, -3.1925969540260257, -4.74095760836609, 0.1010307500065244, -0.6793923217228679, -5.8324215338430765, -3.069195979976109, 1.9566271781659683, -2.1065321646083945, 2.192110533650638, 2.4325324593671755, 0.2816962571054298, 1.8583877345015747, -5.578462294825895, 0.8170335640253803]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

