import random
import math

WEIGHT_LIST = [0.5652045155693878, 4.91087096711478, -2.326084603639236, -3.5556714699547567, -2.3217533611612, -5.2934501713175255, 2.8594961921225224, 1.8402270985568276, 0.8069896037080069, -1.1113241701033272, 2.586966693175188, -0.025969249316515973, -0.906915514701519, -0.7648810001605568, 0.23780847932152055, 4.93164851178933, 4.677381769169514, -2.9755617192980903, 2.840787004094452, 1.8259612920103023, -0.36031847819137897, 4.3464473253641405, 4.9260270978732015, 5.416752679600444, -2.117616095148313, 1.6103588527705344, -2.1836942395273815, -4.3588536530064355, -4.901814548527937, 1.3933257588579915, 1.369726089431886, -1.1199844862569794, -3.3998018758088655, 5.244918901888048, 0.9898225398421151, -2.4839133783879572, 4.132800821590797, -3.280203855235572, -3.7622905507911657, -1.0262917695751896, 3.8375563991967017, -1.8773504771536549, 0.41538988297851237, 0.1584836841587609, -3.27550417725844, 5.710747455310108, -7.864722057956189, -1.0403557780320833, -4.6031882374037405, 0.877976672300109, -3.8408182527413226, 0.6650336757544785, -3.5892692223233165, 1.8723152273551977, -2.253983905448028, -1.6035944602972336, -0.4109000515032962, -1.976591293133313, 4.890126923015219, 9.875991103812096, -2.198193343406891, -4.496140015077331, -4.311322314941861, -3.520941146490224, 0.7362476485692191, 0.19639264995403538, 5.356216438811187, -2.196738946756902, 1.2197549293696714, -0.6823649737357986, 0.44846220742195136, -10.33800773969075, 0.48191013690738693, -3.6956549316724017, 0.04611716203027692, -0.9723351893775318, 3.3835423354217693, -9.801934506576108, -0.06507585121554996, -0.5677052648139327, -2.411037980007731, -1.0996559792025942, -3.2525400690427824, -1.2251593800600944, 1.030612765628933, 4.802058959993941, -1.8392703685343557, 3.989376161855898, 1.3561206917995077, -0.6786010020398144, 0.9925873164630015, 3.7926264041669198, -1.2468530788353054, -1.0663875754341086, -1.5843397541719504, 0.5411302329370653, -1.7517156905297053, -1.1320827698470208, -0.6273001772661764, -3.6859807089970444, 4.114476629290209, -4.82738014081407, -2.3411491372547575, -3.6026151753432853, 4.939573086087216, 0.7469357988847847, 2.6902208107240124, 2.686484895016289, 4.965729767548869, 1.8761416769523769, 4.393696786502146, 0.6119325738394081, -0.5324863334341321, -4.315892302427732, 4.46104003105925, -1.7076371260554932, 2.5565592758592874, -2.7621781607212124, 4.55683764919581, 0.5672101751737468, 0.6100441236669087, -0.1582268817763993, 3.5921070552273044, 2.625208400033208, 7.014638257497722, 2.438386476375932, -5.381960726176943, -5.632234197690407, 2.569255619574656, 0.06469943189697205, 3.634691226976898, 3.8491134671923195, 6.505996667550076, -5.7379515408504345, -5.18813823324399, -5.167545254711376, 5.241549874412246, 3.5139860499274946, 3.568984332844215, 4.547769162560228, 2.089901053503108, 3.4736407235971845, -5.2227417862512135, -1.059288331956497, -3.696504704672327, 2.503276647439023, -3.940413534199764, 2.4785917953536685, 0.45718740900245763, -2.4767838003969875, -0.4207433226056731, -5.09739268052868, -2.412226059157709, -0.015984643559333045, -4.137021690125432, -8.681882215442156, -0.21932642056971904, -1.8171393928041089, 5.451176296985301, 3.789609084120554, -0.9476602016752974, 3.8424917410752184, -4.553137189379747, 4.485571825368107, -1.1391688972808207, 0.3628589617901991, 2.104115162327359, -1.7001655805269131, 3.3631055594684574, -2.609824673929334, -3.4671751147536973, -2.423006851281019, 2.0625466540184334, -3.2804562272729094, 1.8426845765121762, 0.19740560816237984, 7.312529006943934, 0.13738389985815025, -1.2270542087603782, -5.370154637982951, -3.222347884487729, -1.887988124464759, 2.144218962218006, 3.6480081181331143, 5.113369618259706, 1.1234172473723774, -2.6409651635470577, -6.09975664009686, -2.500255035491776, -2.1233175509097677, 0.08450028417552853, -4.26927429288401, 4.563804052829352, 3.256673158928905, 1.9096255429987645, -0.4192777553889946, 0.7625214548197128, -0.5321838932751299, 1.686399133349079, 1.7549246691132634, 0.13931619856824506, 0.71167998382584, 3.049929775883685, 2.4227186105068683, 2.239885879742796, -1.3308642052165132, 1.0332674177555552, 10.566525221811816, 0.5971089316499693, -1.1245754752033932, 0.6137401288356901, 0.7557487879055559, -2.937359682956386, 1.2948171965218016, -0.6659622963588273, -1.7536125157568294, -1.614742015292084, 0.32727205455602754, 1.291903703579597, -0.7456842171975963, -3.9107129226121193, 4.085358810535326, -1.5650106402975916, -0.9496939075605775, 4.271893218501331, -3.520215312657066, -5.036254026378692, -3.318541549819544, 0.15594933080803758, 1.7641560482415937, -5.328154361479082, -1.7100567293778832, -4.676341096540472, -1.630675753907392, 5.271439263405549, 2.406585513160881, 4.263683050419144, -1.174214769590751, -3.6260930734331627, -5.947318739555524, -2.563367883720787, -2.591616440052865, -3.599347562572896, 4.84467483805665, -2.5948010511536026, 1.215967829937608, 2.5974512828177003, 0.21992893536461183, -0.08049262585040286, 7.127733581532243, -1.549035699263135, -2.114693432710026, -2.294271716199832, -4.2665801797602345, -4.882695967857243, 1.0039071567916233, -0.4269573402607969, -0.353103009476815, -5.800011240557478, -2.505870860901231, -2.7266129179613454, -4.573758826911951, -1.84076412824196, -5.895889269556103, -3.0594872315019344, 2.6966630434712013, -2.37124598969061, 0.6000025760678324, -3.751332580083353, -0.544171470256899, -1.654298418277921, 0.17605592898714598, -2.8863230229194885, -5.621471337582063, 1.5207105993531715, 2.0421017658351386, 0.20981535326457385, 0.9993412475658708, -0.7883937485482007, 0.38011923223315064, 3.96009454136862, -1.0234889565157792, -3.9043641110560596, 3.735901641873558, 6.15382629538642, -0.07333040909887908, -3.381633271575716, -1.8291305495206445, 2.6438370174732104, 1.6861052238109373, -2.983895249863575, -2.690169533202953, 2.543156759664552, -3.5605849359219537, -2.260122191948733, 2.3766814194713244, 8.844943011237154, 5.94429284022646, 1.8123635286733382, 2.0417789338788963, 4.557466860549993, -1.8697922042296278, -5.850315932430126, -1.7739286621139108, -2.3715694860521164, -6.871211866728846, -2.874747533387512, 2.302215372563321, 5.0709424265536525, -1.4185318232953446, 0.6701719435155137, -3.9052089028004784, -3.5890092254402943, 3.272630025282751, 1.8453949051125946, -1.7711835702742988, -5.654449142899781, -2.409269397897176, 1.3030648379536727, -5.596216399779696, -5.315218269593243, 1.2730060326277852, -6.793188437360247, 6.398232059987881, 3.437687974619259, 4.597166036939203, 2.005122634228102, 0.2862963456520483, -1.2756831967606217, -5.565941409456399, 3.953586514195193, -0.3427841162012444, -7.4214393338571165, -0.10309987182230933, -5.035083222523411, -0.5071130535359584, -1.6827790372014098, -3.449440411164738, 6.50775640381873, -6.770245566599633, -3.2288832736819066, 2.6674424361668008, 1.4835419745266318, 4.200549312885791, -5.680442962757384, -4.647799849740512, 1.7024155128068377, 4.800186216349396, -4.8587268069127925, 4.658225387278141, 3.2501415804605904, -4.009294221150402, -3.3992308240933746, 2.3108326107365635, 2.334398780221763, -3.4039918335304558, 0.04127872224122756, -0.010236117434965794, 2.8057327733236344, 3.2331643085381816, -2.2422991653761253, -2.8196463380218946, 4.923422915670485, 6.058550667589292, 5.290718794104786, 0.12419326057682613, -5.839989685215356, 4.258421976970831, 2.6045739476524172, 0.8450426311425986, -3.217145630447783, -4.705231067552521, -3.6563853550166536, -0.8821276361246161, 0.3368725086088722, 2.071862675984317, 3.905863460410236, 0.6770668875328664, -5.652960410499203, -5.250148926844344, 0.4164117427882419, 3.4244572702737104, -0.8716920840578407, 3.157295816485546, 0.12862079552775393, -2.87574324652383, -7.238766192316193, -7.878413618259013, -4.594787912775688, 2.4757619553384687, 5.61554126034765, -1.7104261117283674, 4.706465567703922, 0.500265648870773, 1.4363769236530508, -1.2991949720763054, 0.33565200825360864, 1.183311488932014, 2.2582692031977047, -1.5023037499589664, 4.29304607221141, 5.545003940674553, 2.7261486650360136, -3.4562381577018195, -1.7307570278369142, 4.556678349087343, 0.7164681974037009, -2.1565801867991796, 3.8667577054403606, -5.555135401750285, -0.29730862989067436, 0.7840882925732231, 0.9042963019595, -3.2830427788578116, 0.9889835456200357, -5.692020403429351, 4.134095382750122, -1.5742879640950942, -0.7206930124346113, -0.9860523136631294, -7.407002001643656, -1.8461883180074095, 0.7672511981178085, 5.217478737862161, -4.3393385433915865, -1.1375154387579685, 4.080281841409878, -2.754560153929901, 0.9243031042894486, -1.93178793936706, 4.375124164451445, 2.7914573900402777, 2.992063561463257, -5.904094760607924, 4.946308259297297, 6.1817806370175274, -0.729007700663965, 0.7889014945293706, 1.5732829537723838, -4.76570677883287, -1.6017109866532684, 0.6602043711469218, 2.019716697602577, -1.8152101322214724, -0.37489753592219227, -4.319099788560511, 0.7206522893357693, 7.981687829400748, 1.8185914732392547, 2.933957100913921, 2.4248030319365905, 4.531096999331847, 4.94252561117263, -4.367937649415686, 4.69228607548995, 0.005857220582100657, 3.6296642300584345, 2.5646839780676944, -0.3719763182617739, 2.505712618720906, -0.41700659402840135, -5.929162327679196, 7.693497901479645, 3.6861114449692645, -2.0366052589016634, 2.072858575076504, 1.4908929605293129, 3.187254803793317, 1.371334299048607, 3.0534802283860287, 5.182978777050293, 1.6624632530197965, -2.3363117980912183, -0.10354875561106006, 2.482049087195172, 1.3327758449917824, 1.5773759293851013, 6.858340385536698, -4.263251809397125, -2.4611767516035394, -1.2060847380402735, -5.085638695293192, 0.5599530362762032, -4.344037684075938, 2.6999622700262558, 0.4083383707169958, -4.411596429560383, -0.8234889939516118, 0.48496642456568284, 6.255871266552905, -3.26402998193519, -2.8691023238239137, -0.683556614911588, -0.24493275501936215, -4.852140271299127, 1.3563598841704179, 2.6124010998675113, 1.8376539276540034, -0.3631640602878401, 2.7365555903618106, -0.30350560161479684, 0.116806938139232, 1.5395555138360288, -4.745221016832178, -1.653307788949596, 3.614994232115166, 2.8725213179138738, 0.4923450353413316, 4.268000526849699, -3.050449550619079, 1.826043518961698, 1.0456963727563628, -3.7803879497324764, -1.7857776061810515, -4.916797710298714, -0.9755033525485532, -3.9969261041294324, -0.9995371954388915, -5.9713102537919065, 0.29855213854819923, -0.035356239150632705, 7.024632231644866, -1.1871840000718115, 1.1096489681987407, -4.00827281857739, 6.959879079648474, -4.073008098775082, -4.124152497684093, 2.0468030553080654, 5.101708418561683, -5.505431743449074, -6.396718205751978, 0.9046270202422099, 4.216961465722928, -0.8894728804704565, 8.067578822045045, 2.5159790597975276, -2.2974333207572792, -3.329966475810302, -1.9846274129322, 1.45216334745295, 1.0663495189647318, 1.4522564955060158, 9.022666964784463, 3.8070990273707874, 0.5717305788807486, -1.2608224986320005, 1.8088055661383655, 1.497929438765466, -0.5457158548016542, -0.28227938855438184, 5.975732370166431, -0.10377053581896176, -2.7974466161341054, 5.4209231330820025, -7.75647871679001, 5.253786321117163, -3.889625068799886, 3.4116880059918384, -0.9944323041170908, 7.793383723318433, 1.8972732617262584, -2.2370540924653994, -2.1850484308919462, 0.04685597647343562, -0.12201246499299437, -2.454107595817238, -4.413531341975115, 2.2111406935935882, 3.946403577998298, 6.047497714100721, 4.8780653445126365, 2.264591617739224, -2.1464609677295163, 0.025762166720513693, 1.8503444341172464, 3.7132218033550135, 8.946853105954819, 0.3989936897858682, 0.23766891831828504, 9.605523590456231, -0.6249984054109697, 0.5334240045773548, -3.186394526576368, -2.5383212087821128, 5.7628538445410005, -2.346027781034246, -5.462490714614456, -0.2332895122761455, -7.369222795651863, 2.417371235080887, 3.0928533678485963, 6.113248268012167, 4.946659215590986, -0.9665559958549361, 3.8002229431079138, 2.920461404796828, 4.113963601745024, 6.787781014156617, 1.3998090733688255, 2.2969826295697597, -4.256550832183359, 2.0273411857106143, -7.742823495132159, 2.1499123007943566, 1.2626106487148385, 1.235290438223201, -5.130610189462774, -4.548978035919342, 2.3706018498727492, 3.038691286059893, 4.275212904365931, -9.14153445281726, -2.409983043545561, 7.4455566221477465, -1.3523893407251901, 1.4370592415417087, 5.834046602119834, -3.4610863107693532, 3.173857713391659, -2.0078564364296554, -9.98952381206253, -1.062202455073783, 1.472534950042381, 2.8992293222738192, -0.9142164707927908, -0.7005221688922517, -0.8194376138427045, 2.280597371472724, 2.497772072047517, 3.218019074447003, 0.29155761785367124, -1.4146603520874395, -4.282345618809559, -3.2207098045880946, -3.4153681478913276, -0.7051245967106654, 0.8546968534028058, 4.210913977142247, 1.9467535885555698, 3.1829065224232247, 3.128029964971879, -1.4352724395849208, 0.16347497516218595, 0.9652348713962091, -3.0901925300970485, -1.6217903139755139, 3.473436879463503, -4.019271660117566, 3.350582156893804, 0.5712813146734118, -3.6911824410409286, 3.431125107986063, 5.918191226891093, -0.4495764248831258, 3.220590885504512, 0.39398954784308193, 1.857359560067892, -0.9012847404986631, -0.19930654248521623, -5.283518557104019, -3.3504497171833814, -3.710166742536833, 2.353422637288054, -3.9024661638052827, -1.5315023693961654, -1.1269272248247286, -2.051657526980793, -4.896117392643042, -3.875358792881163, 1.9808920211987573, 5.676411992939646, -0.19923533255824502, -1.817113176552292, -1.3583073813005306, -4.273769002159321, 2.3497887883259896, -1.5478174650474192, 6.6746419476492544, -2.6780407982878023, -4.757252122737001, 7.885270974536511, -2.03820363414879, -3.292996720941574, -5.161423739448158, 3.0047350917294, 1.5233311908673692, -3.5575916284448312, -1.3622752995838139, -1.6092471264058166, -4.799589202776841, 3.328050596484083, -1.2992791388287548, 4.382970793921942, 4.624167540916953, 4.27792075439024, -4.913073542462184, 3.6450308911267424, 0.23780552551143003, -3.4024643039277467, -0.35778250168798353, -4.732308901585404, -3.5436102242551675, -2.070760605735055, 2.5231060963364875, -3.3977275500045296, -4.685309275118066, 1.4239816114309154, -2.747213780707096, 2.0011464813746027, 0.4660560462346929, 1.6541036438558196, 3.959208687124703, 2.9441599190580776, 2.7682945307431694, -5.863033643028031, 6.975036556786102, -1.3550677939635898, -3.479287227288674, -2.858922309804571, 0.14482221427921796, 1.4851166138567062, 3.0491112017340574, -3.586053979723237, -1.0561011557644313, -2.767948456897469, 0.5939335107280393, 2.1788791100762808, 6.120301969265129, -2.7603322290709094, 0.09478096843045666, 1.4676425478166208, -1.2497306613521275, 0.7301561615533498, -5.723545864517062, -0.843130843407871, -2.380634901510901, 2.3622473989282513, 3.7653942536813445, 6.92526219515989, -0.8747907878851346, -2.225144137402085, -7.984772270346519, -4.321506574945624, 3.0108524102441545, 4.22657517247298, -4.422017855885762, -1.775442723118814, 0.9594497259039533, 7.5861656576389365, 3.7630607920642087, 4.87794245083198]
BIASES_LIST = [-1.3781586595689417, 3.703141044571382, -3.602511093374275, 4.798375568910014, 6.338906093403731, 2.7619139267430928, 1.1074604580065424, -0.0802097558322458, -1.1184963839261872, 2.6492324809884815, 2.1303487034080306, -1.38201850334877, -0.011395950370088136, -2.634098572242783, -5.504892913716226, 5.279609524890217, 4.821775951724121, 1.4605691469770639, -6.576080083488834, 0.006721763281009941, -5.069363739574591, -2.81099152487111, -4.065336572108694, -6.0840690955118415, 3.922456833708678, 2.6505541531488435, -4.023781376712634, 2.9158907195918458, -1.072738795270386, 2.3018885605207156, -0.34009549354357826, -2.2860363760933873, 7.123803684928392, 1.837349776913215, -1.6917726466396301, 0.45377562860972975]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

