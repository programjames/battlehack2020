import random
import math

WEIGHT_LIST = [-7.990272754050041, -2.7045109996352883, 7.263730987635552, -0.9578067515128583, 4.182949994704533, 2.114678770574952, 0.2624070764952491, -7.086564783847663, -8.931904073868315, -1.3377902496040963, 0.3244127170925172, -1.760638570264246, 0.0769987541534124, 1.9724587461643328, 1.5406654728322566, 4.203907748665908, 5.598636255733612, -4.616705616775663, -1.0397677713408346, -0.3877646206682246, 4.168579298817195, -1.332694782482381, -3.4529496174743173, 5.589307259397926, 1.7959971112268949, 4.179607215474138, 0.3078295770695656, 0.9750433884476062, 0.8941037136490013, 4.258498246022434, 4.029074837403318, 5.53744446313424, 0.5962924196307587, 6.05161277810749, -2.027779372394771, -7.426665690520156, -4.351794109483555, -5.085698514145634, -3.965166023333177, -1.443496851784383, 1.896547283870545, 4.512690780636146, 4.311948966507261, -2.0184861525294284, -1.2946624530193984, 8.715471740524807, -0.25865424253002633, 1.1211171029969829, 2.882225980478882, -0.0985660235663677, -0.7923250271021558, -6.419202412146467, 0.9046787424063865, -4.650106624741579, 0.7042535069643253, -5.685684593222107, 7.746531326216728, 0.7371744038361836, 4.27157562305029, -0.9688637658434078, 5.187616399716409, 2.2094311721201043, -5.0629814108559845, -3.2783239310171908, 0.6197294723873096, 3.287001436630841, -1.2141576355944979, -2.276260034624843, -1.093600460824768, 6.145228313151634, -3.216475813747045, -3.048509964382668, -2.8192543812253152, 4.565028925616588, -1.8197628001073094, -2.6171052661885508, -0.8211473898736588, 0.21153788475215063, -4.952647299283661, 6.094730480790402, -3.359663958964479, 4.2614971251131974, 6.2225529243701905, 3.677799381880061, -7.653618331638403, -2.673640461400657, -5.662314984839881, -2.0321001401946335, -0.5373734309962022, 7.787284104595098, 7.7081103993680395, 3.223005902945233, 0.7971371383673096, -2.3800201137450827, 2.532868792979574, -1.486101603591475, 2.704118591152919, 1.30532946553485, 5.814227119344782, 2.5738678227259815, -1.6249002204959557, -6.941258924396013, 6.001542547586008, 4.537742124726763, 4.792303757665207, 1.540581313357106, 2.65299820126491, 5.467756847496674, -5.215895648015613, 3.5053747107508597, -7.236346704606231, -2.8438289182441068, 2.982804454835387, -3.0485370531605103, 5.606591000327425, -2.1917154742172222, -10.127245097994818, -1.6640829638463752, -4.581070077571862, -2.2283138086192364, 3.2594125078557052, 0.5527985381176674, 7.367954281722676, 0.8068199255316595, 2.107617813795298, 0.12333122075263359, -2.7327337583699878, -2.3469819902009865, 1.2640616046610968, 1.7765464386735899, -5.005225600496088, -9.356108201135056, 1.9037084013167036, 6.638531859624019, -4.4661684892002205, -2.0494075774675156, 3.5241971171957127, -1.556296752991597, -3.6709664166143776, -0.513283197854899, 1.6043044589777742, -2.5894045986402503, -7.216709313847309, 7.521983425753513, 7.955033503992408, -1.110860741126148, -2.7033246115597, 7.826332210001378, -2.2231553161657116, 2.173487990272534, 1.7116946283274992, -4.1646500312542, -7.1333432704295605, 1.517059582348506, 1.3128128694566146, 0.6885975787271409, -3.677167730629071, -7.090078847185, -6.387318996036343, -1.164296028732034, -5.339988846008333, -4.09018773420506, -3.485304703665193, -6.187535885593108, -4.486287123019138, 7.050651472904646, 2.572498642984441, -0.5255369865477203, 0.4597136552673631, 0.8883777822832248, 3.327114801303906, -0.11012240818927993, 1.9477291361548603, -3.413556505058218, -3.968895553261188, 1.912298425193154, 0.8936437687092689, -6.698903080796153, -5.135110644096065, 2.01222563237296, -8.136015620146178, 8.985607929856513, 3.6773952123296834, -5.433311839180065, -4.517338183142788, -0.17995423022011736, 5.816636324571594, -5.809118236926994, -5.252277826494045, 7.220176035891678, -5.38856364226216, -4.922613362287889, 4.574546547341653, 1.8930409745715202, -5.538235731861876, -5.837840209915592, 6.777964956827077, 4.231969231918846, -0.5314893591080297, 7.116828665188897, -5.812827658892874, -4.933165899530187, 6.747494620812396, 1.0646615825755925, -0.32222856272154476, 2.672742208297781, 2.835621109645321, -1.1109717480851353, -7.558309056670635, 6.889162673919726, -6.818730628819906, -2.0245429619161603, 1.71055530080223, 7.084805335031264, 5.800801481050413, 6.132725817828482, -0.23146853095564024, -1.1139283672561748, -2.4258712213188875, 0.8526547193277845, -2.361504633940191, -2.348385340329795, 0.4100831939356141, -2.2492870057528003, -5.110967252380314, 6.119158703778198, -1.5230528447288576, -1.4608619279360457, -3.667425376266598, 2.71389765188147, 1.9922362733706362, 0.4520712119575896, 6.114339415688114, 3.622115728679928, 4.040069109300411, 0.6038394576724322, 5.145516117422177, -6.037385869577775, -3.3794693286269935, -5.183546834069402, -6.470217954379413, 6.8786006505627, -7.05129069818176, 1.700822497686829, 0.3786820045492453, -3.229152168787823, 0.13248474178018088, 4.327607729313207, -4.527842289326194, -6.959669031283237, 2.0441928656860933, 1.5564767750244337, -4.54762192535737, 6.3081667339739065, -1.5823516200572278, 1.9863339099144948, -1.3008370054317535, -4.202268786210295, 6.549054184805302, -3.866943565459443, 6.106776208931006, -4.0541265227676115, 3.433318654764075, -1.0951546795174947, -5.485144306350902, 4.26255958893021, -2.7482950379765008, 0.3763838793410573, -8.3682311274871, 7.2234472088990085, 3.5498593291738585, -9.950430563343396, 2.1372439529180003, -6.883941618784939, -0.14176083023726743, 0.6788186114779888, 6.073662014049687, -4.466546152952755, -0.8652436039539376, 3.0571382901534934, -1.2033367531370225, 3.739682181664759, -5.561183722365896, 2.715611700240685, 2.95124113327738, 1.4682119217305514, 2.5258568941686654, -6.292172967875007, 9.597817348073812, 8.606586815226184, 0.6783727073775369, -3.586148287256706, 6.246676129677694, -1.2685679796945575, -0.5555044846709238, -5.840661463285414, -1.0293827031776162, 0.3084153012016264, 4.7284143121047935, 2.620615009472396, -1.6338262042685592, -0.10923349273067759, 5.135534925334949, 0.7215232403522618, -2.1363704967003536, -6.56394861567557, 2.5319117047018818, -4.279356725350357, 1.2226765124937242, 3.753455022207228, -2.3577153658580716, -2.5677052744500255, -7.882238563457974, -3.1271561177420777, 8.079352391520118, 5.3745668962426585, -2.980041375258631, 4.314629699688618, 0.9331438456607992, 3.594448221075621, -2.62210027898057, 2.7240949300611597, -3.446395042583621, 5.667149263494223, 1.4520222028644467, -0.28210436548097745, 0.5567607958783992, 2.769018926914895, -7.740164785245172, -0.8838974256637768, -3.3898202569723273, -6.8424142412584725, -0.16091177714520571, -3.6220672949561745, 2.9478520179910443, 5.387185568322731, -1.983639654234769, -6.63409693896473, 5.427514352098606, 2.855295996361214, -2.5225801442699822, -5.671759646136211, -4.507901781249332, -3.987116012732101, -1.4422208151042055, 7.163188233844638, -4.018301682286488, -8.125641222899244, 2.3008210702896523, 8.712388471441935, 9.374130091271423, -8.824308301368587, -6.652426215429797, 2.905586584072201, 8.202672564721782, -2.578096193379265, 2.45019004695109, 7.895555284276372, 6.520621321079432, -2.065237446530766, 7.496852661243441, -3.950244648844582, -1.2754889862318783, 1.710356769150783, -0.5710937608564798, 2.8269929564149034, -5.8138497793629345, -5.640178499493762, -2.4038098910279135, 2.705370330867048, 7.503955053531442, 4.341145630719071, 0.16899879643195848, 3.699111487012032, 0.09443421904805915, -2.5082080386577523, -5.228599699539009, -0.801918811345643, -1.6402199478213115, 5.497396839287448, 1.2115911241665376, 2.586960961053432, 4.376260546064208, 3.769713470845666, -3.2157451024473227, 2.161967438423698, 6.462687514637456, 2.830095959505882, 1.1839329094746296, 1.948385936847904, 0.6562472981784536, -3.4572859241033855, -1.2576814889633148, -3.2149557912807456, 1.5699532472992506, 1.5414099399770378, -0.18302343731285126, 1.316077111281502, 2.6759038858301345, -2.8743801949024137, -5.865103564175746, 3.2987376520865537, -5.697509386529098, 6.077457167576502, -0.6563495135754056, 1.752340834165049, -3.1096586274236397, 0.2729490023756749, 2.043151082927751, 2.21752159578822, 3.1056359914293727, 3.145989343331167, 3.130077740563765, 0.01814577635762593, -2.5473808893990313, -2.6795972424876577, -2.7783111180821622, -0.005309701821380075, 1.5273536178328346, -1.1353833455766025, 1.2637558665681345, 3.0370686110809517, 3.5916115484461386, 2.015523521424213, 1.2397914574057527, -4.06892817171712, 9.451870773121238, -3.825846912065419, 4.900481171364011, 3.8900816863511993, -0.7964858427794653, 4.706188878865219, 0.27631617048123336, 3.423933633292587, 0.4866425369000468, 3.468645276257038, -1.8412450817592183, -1.3131080481682469, -6.215550432325146, -8.057803788686648, 1.3028547869008764, -3.613498972774834, 1.082634563739048, 1.4206623344379496, 0.5665067853688298, 6.9859502738461625, 7.61020404222573, 2.8127343483574423, -5.671467438300902, 0.9331014033386011, 5.077268671865948, -3.280394794913521, 3.1166838879568246, 2.299274868116325, 5.847128321036366, -0.7557290792836604, -4.081987274094074, 6.0436576437199445, 0.4740586525315358, 3.593808151881417, -3.3002170284337, -3.811490869275631, 1.1187722276809875, 0.7730619505665728, 3.2679647691796587, -4.317473412592672, 5.284648024781863, 4.871731641757733, -3.517453608598152, -7.955070710843647, 5.12380905895814, -1.5990327665464792, 7.5748163549295535, 0.21858916517637783, 1.3814595687481703, -9.397178937770285, -4.056258880781798, -1.1057269040646598, -1.5643211427313035, -1.3277843409621168, -7.010631911951376, -0.8676865121936441, 7.740806889961866, 7.8393434885657145, 0.8207522223464794, -1.2855581303788413, -1.9703249114812063, 5.854435840063312, -4.109802496589597, -2.5505322802380723, 4.449347514539108, 0.8033594081344089, -3.083826490853764, 4.945921469168056, 1.4438233708342858, -1.0157883153688803, -0.8996112466100011, 2.125456637947776, 3.2230243564407095, 3.8725564663512815, -2.9465309619308204, -0.7147142515581197, -2.0034922965317303, 7.19475460911326, 3.410736254604947, -2.9165842172280225, 5.283447892746929, -1.1494647736452894, 0.03526831231714589, -1.6615994026309986, 2.206910819703169, 0.24477230164901365, 3.107242209487297, -7.103069703495359, -1.6354169540678474, -0.10379680458670831, -3.1987902671820168, -2.1241002137748506, 0.49078635736220977, 2.100494174701133, 3.439060716073593, 6.035419182522201, 2.297248666261286, -5.085640503855342, -2.8212840672134663, -7.904471827407224, 0.0615290849254877, -4.489223747396765, -1.5606118915057452, -2.769422396690076, 4.029700030675227, -3.6614553743747313, -6.693854002837172, -2.750061319093774, -4.446496646246359, -0.3367424666494903, 1.9987663413740855, -1.4599548598556114, 2.3297418211785983, 0.9040277046057965, 6.587674094647668, -1.4063957847692674, 4.299863879849399, -3.3757271535285325, -0.4264569610300289, 1.380523201381576, -8.288827983798141, -8.644682242814444, -8.150174566728698, 6.14535579245334, 4.555260350234241, 1.9929537288607608, -0.06289208501883786, 0.8515272661306843, -0.16691507991107513, 0.8155603524198369, -2.851799165906823, 3.8312187436808847, 3.899321663321502, 2.704815903459626, -5.219166982769925, 0.11923898777042052, -6.668463571073937, -0.5751770553679203, -0.7299930711211913, -2.814573284713206, -8.554085198206426, -0.6964372011680728, -3.712235171257662, 2.1945516766630044, -5.079432357182803, -0.8446643997985477, 0.8556333494710247, 1.6132317741516802, -7.709713947354161, 3.5316035213450423, 4.001221351813252, 6.547325059461384, -5.758147775752891, 2.3345438082105954, -2.4440441342176786, -5.2941207276877496, 1.4190133258070043, 3.5814443300037357, -1.8444708291524534, -0.02724510623933918, 3.9485552067330802, -0.5669458032102044, -1.3483309789156714, 3.887457938719809, -5.146086724434883, 1.5501379044039585, -1.0571112075654834, 0.9252931114301328, -5.281151675943726, -2.7977358288043295, 2.1357517888108886, -0.44659844239582897, 1.4002827467873848, 9.1122007448042, -3.6834489045035648, -10.273787086913625, 0.2410628446691424, -1.3251632027134699, -0.9109177527102321, 5.438394439565644, -4.348349458358132, -2.8123681018100104, -1.5741073177868117, 1.8225705392592146, -3.748533536873622, -3.1478672988941065]
BIASES_LIST = [4.02962864318756, 1.7789488207049098, 7.176436245454525, 2.148413964176064, 1.1653104219389179, -3.4905922383413177, -6.106973088993427, 2.740404827761278, 5.192454921785637, -1.0735558885139294, 6.096584796645449, -6.545396574084612, -1.7919401512828441, -2.717746589993353, -0.6351116904994127, -1.0533317316214292, -3.2154072439768733, -1.4611088816837412, 0.2716787077998519, -4.20375332820277, 5.859400552686375, 3.441279516813162, -3.7800665699164693, 0.6342845167224047, 5.328064921472536, -7.879789480165661, -1.57196250576656, -5.725848723673149]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

