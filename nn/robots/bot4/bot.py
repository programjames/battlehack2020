import random
import math

WEIGHT_LIST = [1.1083323864731498, 4.352441225042253, 1.7203990780796277, -2.937903987245206, -1.760864903359801, -4.936875993148631, 4.416625359397707, 2.2837726333319432, 2.854377154914234, 1.175208981877307, 2.714780614886281, 2.143484281404781, -0.32806112572493284, -2.682758093561526, 0.6887231991401748, 2.6901905851604537, 3.493288272640343, -2.535385005928762, 2.269518908013747, 0.7154693795518781, -1.395894922334726, 6.283112384954635, 5.030070571244658, 3.176800887980586, -1.7716165321724098, 2.6509721749041146, -2.385134560577728, -4.754839119089063, -3.5370675372410787, -0.5322233570516726, 0.9241866503398102, -0.7324119813485792, -5.082344807144651, 1.215238346689958, 1.4645648612516124, -1.8078154691724482, 2.8388739864850887, -1.7041856873875842, -2.6092652050404537, -2.0948733861495983, 3.9885360949950712, -3.029548690959457, 0.0538829560961287, 1.6915808727432986, -3.780275981296958, 5.0834622805985585, -5.584975802394451, 2.1725304808420924, -2.3374805119235393, 0.6076891843776258, -2.9859237086280404, 1.0629031839863599, -4.052590136934491, 0.9771604002257164, -3.4223414550367184, -0.8548585042728523, 0.3714372112957667, -4.213370011130342, 5.252757837279131, 7.417172177190363, -0.864783766729095, -2.897159557511891, -3.742240279057654, -2.7961185223307075, 1.3403199344742953, 1.0443782420969296, 6.186843583026313, -1.1239854701614114, 2.294824651777842, 1.0950590008314092, -2.44201802754914, -7.063036006322928, 2.138461828301476, -5.389047056125668, -1.3509200146777498, -1.5881033377073326, 2.759689730254601, -8.085768861349038, -0.18704707257839037, 1.314944795704411, -0.7681182878111034, -1.2132761404118808, -2.010779486252369, -1.1189467126235109, 1.0799653549935955, 2.441622585469726, -0.9646253571537333, 3.869879288015894, 1.79768656795987, -0.20461428059635378, 3.38647522789965, 3.6757181264573813, -3.758424931218668, -2.7799091564121077, -0.5194934985191426, -1.41757274072645, -0.5479188866834446, 3.578055263056288, 0.4134180716451432, -3.7487677657735112, 7.340552425768733, -3.759742578605577, -0.644706233614144, -1.9311882476680797, 5.266901299478601, -0.12574054762899978, 1.4746603276891808, 3.958718047318312, 2.98969546858679, -0.4547486970424208, 6.218749547960991, -1.8827849572953974, -0.425594298196894, -3.5294005302977194, 3.5498470101262765, -6.363933080520289, 2.8198683719227557, 1.6301599364840063, 3.3856046715556456, 0.06514794824311432, 0.9233079349196731, -1.329533573076892, 1.3469873465550046, 1.126774450233298, 6.437354179169461, 4.212808983056334, -5.091737862700737, -7.541837100316091, 4.261147726608996, -0.7757303600376464, 3.2325587246298086, 4.817122373658356, 5.7948743129954146, -4.1615212682499605, -4.339119941183181, -4.690814165375516, 0.7946089175850848, 2.554378725282694, 3.1769945574619562, 2.3840075109222525, 2.0265568978750172, 2.98862009399506, -5.6349896323333475, -1.5220010065271568, -4.563420512417206, 3.3691039702826755, -3.757467788330366, 3.105496309083337, 0.10048615152825247, -5.966152399865686, -0.34092788702728505, -3.50309761115152, -2.8818781978086676, -0.49744058488615783, -5.799150242839344, -6.008676037973659, 2.9554985799365254, 0.558408808146118, 2.996436568431073, 3.0203438943157703, -1.6083045808121408, 1.1451767386413376, -5.602538002782117, 4.3185420682062725, -4.046709865692266, 0.7572497255394697, 0.4901749223134395, -1.6788139002194304, -0.38351131835733054, -2.493014140499633, -2.011493967458873, -0.9060835082008794, 0.16176611949321051, -0.8689036006175754, 2.622578845640943, 2.319246556375277, 6.479789983925388, 2.0759949304873873, -0.05855173373069955, -8.313025506033556, -2.601699161231286, -2.4120623634408895, 2.110781557845689, 2.2772731813997087, 3.1003912889690444, 0.8253080552564034, -2.3170453507070095, -4.661784216797978, -1.9600021242754078, -1.025126559460125, 3.2836900619735143, -3.191899912578784, 4.66921461656068, 4.6704749517861845, 2.6272471204122594, -0.499855744849496, 1.4498815616171505, 1.5077488611243535, 3.567308894966077, -0.2385252800134885, -2.302931783846156, 0.5575791522616655, 2.625053451426242, 0.2081701248556751, -0.682963824861979, 2.136696440512278, 0.8166903004069579, 7.6971262435415255, 1.8072884800696825, -2.6930067289088377, 0.03887291862815334, 0.12335769155789222, -2.1345963576173603, -1.390407228297088, -1.0862475700613223, -1.6149926825698027, -0.7807159900416181, -2.0772463996733395, 1.6880229515671648, -0.8210048040889918, -3.215623065157163, 0.643678752720467, -0.2605412385961874, 1.28451548973425, 5.475485974657523, -3.719923088996283, -3.071212611730974, -2.895851101950579, -0.858304287408889, 1.0937024101314616, -6.248648380776326, -1.061553473845631, -4.528817802226127, -2.3695814468480876, 2.0343994877338494, 0.6509361515198369, 5.351731497924842, 0.013226340260775515, -1.3859538668238607, -6.319732658894087, -2.9973363755515736, -6.02023075107115, -6.286352525657053, 4.089454706825229, -0.8563708758013144, 4.129084692231029, 3.423948666520401, -1.1758016971416556, 2.705454812650907, 7.485635934712931, 2.269407786986832, -3.936829300834921, -2.721248184281978, -3.7237107783677663, -3.550150534989079, 2.5881325917900693, 0.28051447052937784, 0.5849054630105497, -3.6705197983493205, -2.0079706255454424, -3.8389109410194844, -1.7745049063608032, -3.876743138643195, -4.340146224283642, -4.342866706236151, 0.16903041073752, -1.266992318076106, -1.0276620485744183, -5.148084408253269, 0.4423065596270612, -1.589825985379702, 0.810682869507928, -2.4868572855678357, -3.195589448048798, 1.8139428568083336, 1.270237549628988, -2.915984648056022, 1.9554778302021392, -1.9861086798458818, -0.008576492704065908, 1.4779375964465777, -0.4890310936045874, -3.0995787647657957, 2.990089978844604, 6.247876101080031, 0.6766309624040399, -2.4482929623934537, -0.5232060867008301, 3.6212470457751778, 2.1452968868857965, -3.9140688759413935, -1.5836245396908089, 4.109572719037662, -2.9070950733680796, -0.8011339533681618, -0.15895039392248111, 8.822279718904381, 8.108192830816222, -2.8314154560409985, 3.9150366426123666, 1.7349433112306238, 0.8021564056948507, -2.626882706569745, -1.210397121343789, -4.160384900135953, -3.6050220903782844, -3.0628928997199703, 1.3076896832537122, 4.026247851445078, -2.8226717719992576, -0.18179152761006523, -0.8745814557566431, -3.117633240230229, 3.987725821403161, 0.9777136922065315, -1.9833967071437055, -3.784621383447445, -2.53484642939571, 2.467973067581255, -5.958174737031472, -3.149871760147962, 2.2449343094095813, -6.768912272745283, 4.536960978565716, 3.894107196730242, 3.0309652845617663, -0.011526372089504133, 1.103927553563194, -1.8362525346999279, -3.4774620054154717, 2.682503760491328, 1.5302361609493476, -7.773438579604268, 0.5337295722320368, -3.2852935738689464, 0.30981279884163837, -3.5842846268674826, -0.918701412875734, 6.217411072135119, -5.969217575788603, -1.9407436891648595, 3.5164041228085523, 0.4631282529992662, 4.613549395911225, -2.948889306793377, -1.8600167400115084, 2.9294087989898494, 1.2789857054748035, -1.7027183531111574, 1.820871433241694, 1.3458585295106107, -4.859959427790132, -1.5884292707589194, 2.5528219804081775, 0.584248703623985, -3.5553885075955765, -0.653640213937996, 0.03791709742984484, 4.5734137857508985, 2.098926154685007, -1.0626266978652876, -4.158955395467382, 3.589427476824941, 2.5665832375928606, 7.049938997776035, -0.09614384567930911, -5.970237175798928, 3.091533273476559, 2.6019536229585674, 1.3047437136259301, -5.836656699663318, -1.0932102889004938, -3.438980236887631, -0.8344396888027064, -2.660294955382205, 2.7285004763491014, 2.074406038193799, 0.7563182384003708, -2.1556946045088425, -4.820587880011783, 2.4099057833469177, 2.0143384515643543, -0.6870889083445775, 5.08170824958858, 0.9267458391201597, -1.5651049357241138, -5.649691540027934, -5.3183818309744115, -7.282887920096595, 1.2208293453111185, 0.6212843658401948, -0.5108606075779805, 3.2768303048821874, -0.61784465408972, 1.471917764161061, -4.9212970223269945, 0.5431971853403001, 6.352498714239803, 2.876323164360219, -1.3623324565887178, 1.3937453685063996, 3.7425681913703874, 3.4859842443607683, -2.233647366381645, -1.4535072404125033, 3.713611937422529, 1.0563392372951173, -4.586235895092306, 3.1012441824574672, -2.147167084342765, 0.572935572115354, -1.6764299736655361, 2.751115032302574, -4.346456011822865, 2.5080326510327935, -5.79463425017461, 1.688987236760334, -3.2055393052612766, -2.214534588047698, -0.8355080641437234, -7.49322124503308, -2.6711813930882924, -0.47619312406197534, 4.003792960561102, -2.398524772303595, -0.8417986544861377, 4.112689654384663, -3.7498215731922278, -0.6614872184238789, -2.4575347801246306, 4.254356263913988, 0.6493903682261939, 5.5428742692794195, -3.3573017862365884, 5.383863656297265, 4.71620440112188, -1.6413960503916594, 0.7565852278134348, 1.1300733702213117, -4.545857629674712, -0.46615238319731844, 1.0656029423840838, 2.6551843919135276, -0.015684417532556894, 1.499722424168774, -4.582809471039252, 1.191619530357257, 7.092303798058127, 1.9307779559922738, 3.6350506820720083, 0.7075992689135167, 3.5822633985091272, 3.2596375404542473, -5.789526800927168, 4.432328806530487, -0.1713119048315952, 3.8172911978467345, 4.032880356332043, -2.5261872722765437, 1.162867057424279, 1.2823984000793511, -3.2593647524721776, 10.238074163152104, 3.8597457761697918, -0.41380119432662377, -0.9565539898865474, 1.4223979125405286, 3.580228361628998, 2.589199820011121, 2.8534899224178205, 4.143400926936703, 0.46951117046678204, -1.8548664215649515, 0.43856359590932703, 1.075475785776253, 0.7950650599862179, 5.316151944704799, 2.416980031744731, -6.458634254222903, -2.959738450667639, -2.297744203932046, -5.5080806567912814, 1.0867400790250255, -4.588016983250306, 4.261081000337927, -1.1012840387641365, -5.3161658163715195, -0.20970257589761743, -0.6497262210634254, 5.117255946478842, 1.7043171887851152, -3.546819823642698, -1.2557159610847295, -0.13856961405727342, -3.4531074934397896, -0.06499172545574683, 4.105645278384374, 0.28956334427246877, 2.267225365732851, 0.06914684390902925, -0.17178230870078093, -1.0914873159718255, 0.7453718976693011, -2.7349076394882204, -2.074376691586511, 3.5924401919589437, 2.266443796439879, -2.6044359665746795, 2.9953638009813393, -2.176887784986355, 1.930848878775555, 0.5197942025365831, -3.373689179489639, -2.618011573451502, -4.876921076631577, -1.8264803553987423, -4.856914344801886, -1.5825687964713007, -3.4212932501187376, 1.7329393487192148, -4.107904741717837, 5.098081919547828, 0.9742191356443657, 0.9935247950036874, -2.2216847745012642, 5.850755452613489, -3.9123608239982515, -2.5176324139087525, 0.5265590647207536, 4.856252225596454, -5.64862461578645, -6.252386407792446, 2.089059676157205, 3.2758717444025836, -3.8608756794633727, 7.691288063889301, 1.451987379265132, -3.667116004309434, -2.6600008506625326, -4.023593748307348, 2.0394561190652283, 2.0162215881348367, 0.3881755373606117, 4.930102349790917, 1.6629382972389521, -0.7831455899609042, -3.459823809042174, 1.2051243484982157, 2.4807688736348315, 0.7073473014904832, 1.0106226842632875, 3.9436480899183737, 0.4592963252798703, -2.41346293884865, 5.574082213340009, -5.022285232811232, 5.233130011739007, -4.31417980806667, 3.3593092845456916, -0.12109745542959227, 6.30859042488747, 0.2847311393151859, -3.614897664545702, -3.187749833434741, 1.1826760335770041, 0.06569709490495423, -1.0770729994048756, -2.588604313803084, 2.9718024700641172, 1.0320860456837146, 3.286787279502861, 4.218406246422871, 2.6765279112715303, -1.4716553634215952, 1.4785999355896777, 1.091001157326012, 4.131266929318961, 6.1588122044943105, -0.3728249868352058, -0.32180856491224885, 8.817046963037065, -1.3757142522315586, 1.7308376456893289, -1.0168277867361486, -2.715518331977051, 6.617211997483188, -3.0657853583283385, -5.638677621415553, -1.6120462395509636, -7.34295535951982, 4.168198408944747, 1.6759296598867763, 5.133518794668573, 4.725771215980982, -2.861323016070015, -0.21440719072156722, 0.7773839436723793, 2.291549114340149, 8.503658456018474, 0.8575028119786394, 1.6966690554486972, -6.68880961388592, 0.43377222011741323, -4.540597405748535, 2.3844924302157873, 2.253811276843564, 0.21334180762264943, -4.692958541700058, -5.131106873253799, -0.0004051583433966055, 2.1961619518516944, 1.7317565196819107, -4.815009591980187, -1.268006964406813, 3.9587164354566813, 0.29003607047896907, 0.7017047013803466, 4.52010935467802, -3.8040925613740786, 0.8333807695423983, 1.8661079468682065, -9.831294631713904, -0.4609043122715849, 0.43416240664294414, 0.7745283474893707, -0.601480589672637, -1.7188524519495845, 0.09579513736511247, 1.7389933927585188, 3.0280744800107753, 2.9015273411088858, -0.9370074407229321, 3.090288078497541, -1.6723564282028465, -2.61974742612374, -5.931614260070273, 0.2395172820958149, 1.4360077850162636, 4.525915433928244, 3.085096127856401, 2.737762263780171, 1.3215035316031827, -1.1881197977591014, 1.5074371424679383, -0.6374369076176994, -2.7038763829694203, -1.5071711436920743, 5.578741226459853, -3.419156370257341, 4.093670218394343, -1.7368791654767566, -4.120725882970376, 2.6153451668201324, 4.635012046281723, -2.4001442769767354, 3.575172156253542, 1.1369057014747677, -0.3033969875904726, -0.34183943261452465, -1.1955921436982448, -4.012663087070905, -2.3030997209352186, -5.0167740725938685, 3.3293771347059398, -3.547976683683144, -2.733864431921619, 0.47750286366088357, -1.1656050241345728, -2.839904419145337, -3.7130352351840235, 4.16850824586305, 4.765161254762067, -0.11224157859438777, -1.9586768370693552, -2.482240673592222, -6.088489921008277, 2.78851679550154, -4.455521501349429, 4.541694861147741, -2.13112458541586, -4.264091669777081, 6.994859057184689, -1.4972413108234166, -2.5707447300769335, -5.055501005247203, 2.600345802441039, 2.7189613477941297, -1.3462687944101284, -2.9526742555596233, -2.947858710171019, -4.840954276220522, 1.245575277423037, -1.5255149858957504, 2.71540281499347, 2.095307302483701, 2.8268883421161304, -3.954773693047281, 5.820985190536878, 0.06925184105356541, -0.7226955664353001, -2.4881344014260844, -4.954447631700855, -2.695856819150324, -0.8633799176650554, 2.605083383554521, 0.5094530406622748, -2.2411209811289328, 2.3881329699475984, -2.4977954208878996, 3.7931254571639768, 0.16474997509921785, -0.14829818471578715, 3.7034794443417507, 2.952241229913019, 1.7588416860029112, -3.482357939458515, 9.399210555189391, -1.7117335116987398, -1.4340409371086733, -0.6951501800240216, -0.9822348493765105, 1.3414479864884137, 3.6778287497286852, -3.80015326777788, -2.068504072399308, -0.6053026776815053, 1.1444621946715405, -1.7421839319299721, 4.118960573429099, -1.158330949563871, -1.7370906925683767, 0.30611549762053647, -2.5390633803616676, 1.2643777686540139, -2.036835585727373, 4.27349718974423, -3.4123184321990507, 2.6302136002702365, 5.445156096222713, 8.304896207968028, 1.2754374245702502, -2.242443443888937, -5.511333722843476, -4.882416568116274, 2.0007265906522322, 2.8104019986772797, -5.93299201094213, -2.088479716300238, 0.21828018923140613, 5.654742086900992, 5.249157016522899, 4.533534934869198]
BIASES_LIST = [-1.815414824212156, 4.158766059645084, -3.360733040665967, 4.857625169831698, 8.495170727097124, 1.5340315256507182, 2.8540899748506208, 1.3780134918782099, -3.275880094635177, 0.8310234819925162, 3.3537333272526446, -0.6148415614952975, -1.3916623162212804, -2.9637194644719993, -3.877095884814458, 5.991817829596321, 3.336408951469404, 2.3966997649004016, -6.562688304833758, 0.7525012022649844, -2.8815575576953845, -1.6283287179658394, -3.6328782511093847, -3.5639925997229245, 4.011786373414344, 2.445741606278681, -2.3831709355930344, 1.2630211340513648, 1.314696123994623, 3.01875236911372, -1.1911593093956134, -0.5383416494224198, 4.480186271365643, -0.7336999570139573, -0.23842296096128746, 4.0159638293273]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

