import random
import math

WEIGHT_LIST = [0.5665305275133731, 4.910423720552353, -2.3297112260183206, -3.5571427492765144, -2.3255484485790503, -5.298206561285025, 2.875976940901329, 1.8360079582962543, 0.8102272078252126, -1.117130760364207, 2.5989265000754034, -0.024700804452011928, -0.9021872445832775, -0.7631460484988606, 0.23491515297239213, 4.931226699036667, 4.668141689267003, -2.978484390033945, 2.8375121502319827, 1.8314686611723692, -0.3732010355345326, 4.353450312045058, 4.924452345555553, 5.4065275741933325, -2.116931361743914, 1.6116822828389548, -2.1979895121401722, -4.35487453391002, -4.9123309204306365, 1.3910038679503745, 1.3543427370017354, -1.1179534744451, -3.3929821200442145, 5.251630176681478, 0.9983228267804629, -2.4950653692149825, 4.150341165905705, -3.279807659941827, -3.7494566024807936, -1.030404517486709, 3.8252034305198124, -1.86902087784962, 0.4254381124520496, 0.16543308144059943, -3.260752316520866, 5.72739664851326, -7.86934487069384, -1.0428985098922778, -4.605143948074819, 0.8836233557425234, -3.837900830369991, 0.668796039643097, -3.5831615865114004, 1.879696502040346, -2.2401061995198135, -1.6032356955340537, -0.4121228104173425, -1.9852240690847498, 4.90006282544823, 9.873395997156397, -2.182695796101074, -4.497213835087008, -4.3160914431126765, -3.5279503924245974, 0.7310257609728037, 0.20596315969780882, 5.3557609857925295, -2.194571394921791, 1.2329334923469182, -0.6823884199727457, 0.44043558097751684, -10.343831185793007, 0.4883002332785666, -3.7005418775945733, 0.047459418623389996, -0.9623841980799926, 3.394637861402679, -9.80389553544964, -0.06687838821582864, -0.5649857930723401, -2.410302198481732, -1.1120458805706563, -3.2617451244120788, -1.2123569519868842, 1.015926125052536, 4.798105931410816, -1.8251301424637376, 3.9810052648084664, 1.3605322363080787, -0.6812996632251299, 1.002888852483046, 3.7871493867849564, -1.2494876489372273, -1.0685295720511947, -1.586079213088104, 0.5367646871303368, -1.7497009171919982, -1.1388180056970478, -0.6315355881678484, -3.694852650362408, 4.130497193808481, -4.827280040858303, -2.336726737219404, -3.609002345168008, 4.94213646826216, 0.7428735629945167, 2.692783509167481, 2.677729009507404, 4.964886832824651, 1.8792923096782912, 4.398389453643185, 0.6127438706143847, -0.5257824008298327, -4.326531033704653, 4.4665149234916, -1.710979836316561, 2.5527517403964435, -2.7753436754444296, 4.558599724343993, 0.5759141782653794, 0.6185824504751863, -0.1589989948079034, 3.6039833951186147, 2.619753897584934, 7.010864163009803, 2.447826234654254, -5.365083505724039, -5.626206062157212, 2.5594275846411407, 0.052944489803772955, 3.625353369568057, 3.8429445892052474, 6.501432907950936, -5.742728063546984, -5.199772262700305, -5.1586645080677584, 5.239825003211953, 3.5081188873548603, 3.565199289594957, 4.554701878994584, 2.070676850525855, 3.47732308171913, -5.222000535569785, -1.0492825692436412, -3.680947195309757, 2.5195615694267537, -3.9409564722196198, 2.4849918380763807, 0.4659990993822343, -2.4802857540908017, -0.42358650013718635, -5.103568984350978, -2.4198610718986213, -0.011580638456863013, -4.15407262964244, -8.688510530852176, -0.2209015571487097, -1.819360549201958, 5.459837501810961, 3.796038484499277, -0.9479845786897458, 3.8393764362900447, -4.561566979002008, 4.484347174175016, -1.1255741967487434, 0.36452474396555967, 2.111436933067646, -1.6889002701210423, 3.3691570493496474, -2.6077641877567137, -3.4567853907164348, -2.4228189112556793, 2.062002020017248, -3.2752114752215133, 1.840733929564933, 0.18891599509994564, 7.299985627722014, 0.14012799936363796, -1.2311614256034158, -5.379058520610002, -3.21776227524554, -1.891809004220942, 2.150258469995632, 3.6532701728723023, 5.118054073440727, 1.135966405596586, -2.6292484217916425, -6.104262636609945, -2.5001575968734127, -2.1276500722996317, 0.07916934938678366, -4.2855069414080305, 4.567466677107484, 3.2557322569815628, 1.912906721670863, -0.4254287246376269, 0.763129755009028, -0.5211479207588008, 1.677958936174102, 1.7655648781264115, 0.1209571938178392, 0.7183255307508897, 3.031024832117177, 2.423635008108276, 2.241342915146987, -1.346115052597621, 1.0342964321622614, 10.57396901790258, 0.5894880474392472, -1.1253934749238756, 0.6166042640517635, 0.757596327682993, -2.9489157005290223, 1.300094942352309, -0.6540995905367819, -1.762315057653972, -1.612192673705248, 0.32696035709256804, 1.2985618598572257, -0.7487075951236233, -3.92436457939384, 4.081808626503192, -1.5771495355810121, -0.9418971876524372, 4.260772667040202, -3.519734176575896, -5.030521427010848, -3.314826054363184, 0.14434332727491908, 1.7556429961961233, -5.333824829845603, -1.6993724917074131, -4.688020180229633, -1.647748480704157, 5.278263501782639, 2.4040112299702523, 4.265851264170712, -1.169945030598328, -3.6337279957687474, -5.939150408052917, -2.57325301299612, -2.602809446140099, -3.5905897980266834, 4.8541069118128135, -2.604763841979977, 1.2113108396069445, 2.596514190126448, 0.21167082883082802, -0.07387778927236338, 7.120439837744145, -1.5526266317183102, -2.1190350424545783, -2.293071529898595, -4.272407520610214, -4.857790170639838, 1.006054020785815, -0.4216749405922439, -0.36400458155709137, -5.808555486848165, -2.5015351984724883, -2.7366934934182026, -4.578665598052343, -1.8239831240387268, -5.889993004227983, -3.067643525202664, 2.692175815724593, -2.3701648464877008, 0.5980585360968, -3.7665130804783837, -0.5519944814140489, -1.6446282002566868, 0.16227834669071708, -2.895851976946531, -5.620412128714788, 1.524385905494999, 2.042378329855398, 0.2081102231574141, 0.9882197567867932, -0.7925837898731453, 0.37476848861109757, 3.957666125046365, -1.033500209573293, -3.898277067780175, 3.741511183584643, 6.1565978630780585, -0.08611395537303942, -3.370956763559146, -1.8274024410249166, 2.634003211750701, 1.697346386179358, -2.9766612953826064, -2.6920192704803867, 2.5461102405828515, -3.564714384884454, -2.264824257146875, 2.368145495622676, 8.834564569765371, 5.951417102036583, 1.8073164358485112, 2.050491327170482, 4.568327219763037, -1.8761129530560128, -5.849708114017591, -1.776959744930589, -2.378045555695266, -6.8709098068399115, -2.8728345011960315, 2.288565635744989, 5.066182324320726, -1.426960031142094, 0.6740620652731831, -3.9082357366865437, -3.599395661786844, 3.2772721066907105, 1.8447911512455846, -1.7790876046776578, -5.653146028033779, -2.4148697615684256, 1.2903737704611649, -5.603634308196193, -5.31332691063769, 1.2686525506748392, -6.795310993167267, 6.4000628395798165, 3.4346594179102574, 4.604759882801173, 1.9955315815722698, 0.2698054767095354, -1.2692560677451412, -5.553096034055316, 3.956907900681179, -0.33840566564752605, -7.43569580477285, -0.10512681608160808, -5.027284802404141, -0.4970248031396472, -1.6723721535809122, -3.465284381101944, 6.503041831135649, -6.779739785222674, -3.226340918360046, 2.6641878954880673, 1.4884664658306868, 4.188943745687722, -5.693531449929937, -4.637333929406114, 1.7085482638675056, 4.794812137241451, -4.857437251473456, 4.660781732961054, 3.2567361603704343, -4.01944617111044, -3.3917431588127656, 2.3167500468632265, 2.343518913317388, -3.3981613778250788, 0.04386615954206961, -0.007948509184652959, 2.812349278742111, 3.2455714758569507, -2.248424455845373, -2.805124309346764, 4.92373181586711, 6.048334531872774, 5.282163048165423, 0.12354204058913137, -5.838593851968082, 4.270342233243507, 2.6102472548275726, 0.8522581845280094, -3.218515988031849, -4.711236578548227, -3.6589673304694026, -0.8917971883470729, 0.339398677682844, 2.067770993491448, 3.925099852581955, 0.6785593434358692, -5.650038578096697, -5.262380499014068, 0.4141336150916748, 3.422463139621642, -0.8831156040894238, 3.163506204617637, 0.11689107189797869, -2.8681389389278853, -7.245834186428151, -7.873501699877798, -4.597108116834322, 2.4625949680636445, 5.610171227531438, -1.70754609223856, 4.708049430016011, 0.511234692381932, 1.4336525989725564, -1.2932196373628198, 0.3466414215525008, 1.1767248760394244, 2.2660797978826994, -1.4954973128159663, 4.292263213032348, 5.548005810607964, 2.7174791399343756, -3.4571977416008406, -1.7163521227615623, 4.551625588528195, 0.702388884336054, -2.1451121428616537, 3.863045884206578, -5.550617294343613, -0.2934660005900056, 0.7835365407788144, 0.8984759621272312, -3.2940069551563096, 0.9746653767152298, -5.692185575413092, 4.14151102966406, -1.5752359294121894, -0.7169516247001649, -0.9952775811158106, -7.4030629674881165, -1.8382086400275206, 0.7651882865366548, 5.224172674830445, -4.338779130253229, -1.1436747184015255, 4.079353051599759, -2.753389970543211, 0.9170415147362314, -1.9280768212341857, 4.392997586563774, 2.7822573851909103, 2.9869522332854026, -5.898936725671777, 4.9467996415051045, 6.189187250516575, -0.7331391182048039, 0.8057913321781244, 1.581474000250898, -4.762546336447376, -1.611081395346881, 0.6642032676318224, 2.0174546720722595, -1.825786264428352, -0.37177924747700813, -4.317411654623578, 0.7185082987920228, 7.999133121203205, 1.8204530148149631, 2.92402901611711, 2.4229876110731627, 4.520940466965193, 4.94109591438394, -4.355303476508793, 4.6833850883809465, 0.003165757919097968, 3.630255847856912, 2.5623731727225856, -0.3769590375990768, 2.5165018623712494, -0.4191279192241159, -5.915387129558074, 7.697582706126998, 3.6851345148146324, -2.0324533237481264, 2.075351378746841, 1.4942263266865925, 3.203983154071345, 1.370289254609547, 3.0479108551512875, 5.176833633379792, 1.6565484850507457, -2.3302327136439422, -0.10016925474710506, 2.489161674620671, 1.3417395931926084, 1.5834482822990548, 6.846121017887016, -4.264441653102664, -2.4582958469897966, -1.1958588852580074, -5.087572792459987, 0.5694949787406589, -4.341954324898831, 2.6973680792774246, 0.3901361820380626, -4.413279290553171, -0.8187237263837774, 0.493709859854693, 6.262447551255892, -3.280399561576374, -2.872238629069819, -0.6835229541088492, -0.2364708920840367, -4.857844695526712, 1.3539519520923864, 2.617455896974159, 1.8405825250814378, -0.37332218260187994, 2.716887602130512, -0.29512188892814945, 0.11496011405978207, 1.5296256391667913, -4.746178959590138, -1.659262110529514, 3.6193051352485917, 2.865098130749891, 0.4918873981549471, 4.251964000101705, -3.0507931637387955, 1.8131699285372358, 1.0521016017514495, -3.7824791664919992, -1.7854896699454097, -4.916946344502827, -0.9655623051876419, -3.985904669763001, -1.0039678163056123, -5.971799999413459, 0.29123998689939046, -0.049819068486335494, 7.021920730102384, -1.1888749398315077, 1.109224784190523, -4.016765482968549, 6.958312766020556, -4.070087872121106, -4.126744303622741, 2.04480589197483, 5.1068384499174275, -5.505629027655457, -6.404531069339704, 0.914193676715773, 4.229008995791322, -0.9099723649589687, 8.067370327014219, 2.513510737768996, -2.297237828850366, -3.3266340072005662, -1.9878014779716444, 1.4529640464146425, 1.0768540406269544, 1.4406770084035188, 9.020701094599962, 3.807627168542907, 0.5477935242297657, -1.2582528755311178, 1.8023181381396185, 1.5079462115374345, -0.540866762139596, -0.2695810308384156, 5.976972143243787, -0.11259671143001161, -2.7875945142207144, 5.418108885131091, -7.755331571752979, 5.270349487177649, -3.8911197011716125, 3.4074578628802996, -1.0020951160786056, 7.812724503111635, 1.8951202515438985, -2.247146705812748, -2.171922168989223, 0.042058220282327544, -0.11430718011433191, -2.4589630302443397, -4.41245829199265, 2.2179100804672904, 3.9578219569559074, 6.046954589242968, 4.880122632405632, 2.2531886837204307, -2.1621624828162047, 0.03585439311372921, 1.8424491760212522, 3.6981368900414253, 8.942201790632222, 0.4030785649843206, 0.23066040807006788, 9.602523142933581, -0.6116515187880237, 0.5348041671682101, -3.1829383431462155, -2.5500961297312315, 5.760906225679772, -2.3382432456755424, -5.451056582265693, -0.2414971600073873, -7.363591617378747, 2.4171181607575267, 3.084384111251907, 6.116673276842598, 4.950830643914442, -0.9492094273796238, 3.805673888832554, 2.932234588310287, 4.112229414753374, 6.786321298729338, 1.3974953176969651, 2.300209999967058, -4.254249190614631, 2.0225023333823984, -7.739484368086737, 2.1616345495268163, 1.2606860661485981, 1.2308735972113627, -5.140474359936916, -4.541758083939911, 2.3744411445608598, 3.023885436559713, 4.280118932020784, -9.138725563563863, -2.419962525317455, 7.440544860520775, -1.357965727615753, 1.4477951957370823, 5.83387246338954, -3.46105091229124, 3.168384173840872, -2.012436202101161, -9.980991364876989, -1.0586308913856175, 1.4767371769679907, 2.898950674134257, -0.9075615657194748, -0.7042165658273435, -0.804677243908486, 2.279024213068208, 2.48799984668002, 3.2276453968797356, 0.2824764427266237, -1.408720526720209, -4.282045408162965, -3.2211058392296463, -3.424265068375601, -0.6988886616703303, 0.8710216078495439, 4.216992695487965, 1.9530629128636876, 3.190989892801156, 3.115270194254702, -1.4360510557434008, 0.1647628551955936, 0.9671109792036611, -3.0899960157387527, -1.640067694820578, 3.474974005461997, -4.015884826814946, 3.3573741253123357, 0.5760080373738333, -3.677503056784573, 3.444719517201952, 5.918782821403576, -0.43762840044685886, 3.2270093218658173, 0.3747509193481352, 1.8503870058453742, -0.917951692229336, -0.21244066640625534, -5.273813715583494, -3.35784215688705, -3.714311157724335, 2.352932722688623, -3.8976927351850903, -1.5490265866906914, -1.1452817121895384, -2.0614320395823222, -4.914079111978538, -3.8732502171312797, 1.989556115627923, 5.674893802664982, -0.20587976299734906, -1.8288566742513865, -1.3633479197646088, -4.278788385385028, 2.3514695201019444, -1.5560275846976612, 6.68514013284665, -2.6752083675733402, -4.753513620330926, 7.884196147244729, -2.042228659518256, -3.2858559860758203, -5.166930893439896, 2.998541331191108, 1.5249499650485365, -3.559400029568153, -1.3612881845340272, -1.5945602568805686, -4.808757134410336, 3.3357569932137756, -1.3060488508268024, 4.381205076083962, 4.624857574859882, 4.275550961489755, -4.913044899273688, 3.6541565135184797, 0.2404221410066207, -3.393492867393195, -0.3619735955814545, -4.736722304217729, -3.541811504344797, -2.0672210785919245, 2.5245114748226767, -3.411557960100567, -4.687912820829476, 1.4233881869586216, -2.768486407053246, 2.0131582271840958, 0.47006387516310477, 1.657840076641461, 3.966256379553986, 2.9337790339792997, 2.7904622029521686, -5.8573773645746785, 6.993599930852304, -1.3590342490271659, -3.4791792327273616, -2.848965040597433, 0.1374775758794051, 1.4889584592935496, 3.037472767662526, -3.5924441397664424, -1.058497911960259, -2.7606594686359784, 0.5932844501230322, 2.1807656987023414, 6.126646314330191, -2.766035161724682, 0.09611038447568938, 1.477210399903954, -1.2478118994564131, 0.7368150348414254, -5.735658132855168, -0.837978384608223, -2.3889775727845453, 2.3609590654967088, 3.769585895041494, 6.925335497714235, -0.868362922936691, -2.235612835362473, -7.978735053274224, -4.324092072560424, 2.998639809059638, 4.223585521680573, -4.424632977010818, -1.7650562051052374, 0.9572428791500579, 7.589492751215268, 3.7617520317150785, 4.880252401564075]
BIASES_LIST = [-1.376161704692134, 3.701463795090904, -3.604501660821284, 4.7935169516580505, 6.329070332389944, 2.7699405685456244, 1.1105399284539923, -0.0850408611895702, -1.1129376123522465, 2.6507553062507228, 2.1223897160600522, -1.3794533771175088, -0.007083306332634336, -2.626888733130392, -5.503114480718449, 5.258513249180255, 4.821888443945988, 1.4741704647801064, -6.5708531310425515, 0.022602175991482995, -5.077404480053464, -2.802712809729251, -4.084112231524467, -6.081562620733094, 3.9194558303913922, 2.6527144166792214, -4.0307709907605584, 2.926013527146266, -1.0819797443864523, 2.294400603950494, -0.34003174388030105, -2.2854536054845758, 7.1268038442342085, 1.8391506570438971, -1.686827628514945, 0.4479896964104438]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

