import random
import math

WEIGHT_LIST = [0.5610037677371187, 4.906979769586297, -2.3229709611539917, -3.549531491426721, -2.325017335849338, -5.285508743221732, 2.8770495317112843, 1.830329939986539, 0.8061726724271436, -1.0982444063976597, 2.5999908858836376, -0.015153819389156078, -0.9123015159241114, -0.7557041892223436, 0.23820865437392932, 4.93548288535504, 4.681543698162192, -2.983882582407609, 2.8286138211772283, 1.8302420190403657, -0.37847225790260275, 4.352531150460174, 4.926192880258293, 5.416277194790656, -2.1129331205512774, 1.6140718979449822, -2.185216902393493, -4.361889712750951, -4.905829626471642, 1.3804848760151558, 1.3670995346923491, -1.1255166811389705, -3.3938846022445346, 5.255547453409682, 0.9932022173241211, -2.490447072262825, 4.154492184084443, -3.279638797271483, -3.755272676086605, -1.0300917803311682, 3.8291253484452783, -1.860126823975921, 0.43532870752907105, 0.16002278104813025, -3.261957543445078, 5.727332945376951, -7.8813919370766365, -1.036611813401706, -4.621152223866991, 0.8798426860830054, -3.8403641281832424, 0.6776811329435051, -3.5811478406299107, 1.892123014503635, -2.2482917277247934, -1.592513694706232, -0.41520518404603607, -1.9818446171567627, 4.892177502104037, 9.881778992783559, -2.190801058025006, -4.491436558868009, -4.3193163280744375, -3.5172948619581046, 0.7293119372022231, 0.19628866609757167, 5.357999854672676, -2.200154563695177, 1.2310234324248308, -0.6901946237136162, 0.44984144472346804, -10.346327841708906, 0.4896279958472149, -3.688019683095449, 0.0426877678234638, -0.9655461147682701, 3.3903266028972254, -9.80013540252047, -0.06237463872495844, -0.566282766572826, -2.4183979881710678, -1.1110799493858972, -3.2495888839542557, -1.2146676483435173, 1.017789602192696, 4.809022212734369, -1.8401783347464207, 3.9933843755294185, 1.3645445856810803, -0.6895547931189857, 0.9994459766048166, 3.786561691311002, -1.2471253725184877, -1.06518184694583, -1.5823908989084288, 0.5339780071179319, -1.746915565181802, -1.1346621854171675, -0.6242449713481927, -3.688689685166722, 4.124301246109823, -4.825291224224631, -2.3291626234224694, -3.616317451768458, 4.9339220765834435, 0.7522905615368805, 2.7052759219265243, 2.6828178141704555, 4.966227727544361, 1.8933447889596091, 4.385993192753421, 0.6034134776259604, -0.5280742756956835, -4.312104678783998, 4.4624048384532164, -1.7085487761640226, 2.557213396598727, -2.771618243593721, 4.559355430886442, 0.5745616236138312, 0.6271812261690642, -0.158870575155564, 3.6002313011172236, 2.6122575144870743, 7.008322869759601, 2.439669825444821, -5.3602442340201, -5.630516553044624, 2.556374556900071, 0.057604578401509565, 3.624576963657041, 3.8465763404540123, 6.500474559353246, -5.748071431290038, -5.19629183666663, -5.160011499597601, 5.246611055672788, 3.509113871866128, 3.5649940658426527, 4.557645593909029, 2.068485024612103, 3.483399679455448, -5.228270225852805, -1.0564841966708811, -3.6849580700225326, 2.518905705278077, -3.949981856518309, 2.485223315724082, 0.4658987276147642, -2.4808221101711188, -0.4214202743487992, -5.117546310231882, -2.4201412734776393, -0.003972574407890074, -4.1529416040853455, -8.68429485405875, -0.22261508056304594, -1.8157975123413432, 5.4650054984304415, 3.802358246798669, -0.9498265749359168, 3.8391711240397957, -4.555935358256324, 4.489851717405421, -1.1289925040423887, 0.36912895270019286, 2.1111381628001253, -1.6943532780988984, 3.3762328066335883, -2.603774212260721, -3.4500321589432077, -2.4284009702149816, 2.060737162298054, -3.2874309885597977, 1.837810110969883, 0.19471631892465374, 7.3050636301813, 0.13386479193324669, -1.2356144146293322, -5.372231587759095, -3.2206057191508886, -1.881767070826301, 2.1477356336575824, 3.656077580479135, 5.116219269047017, 1.1308287384609474, -2.6334485724227688, -6.109634496131261, -2.507337817870774, -2.1359721374002256, 0.0879345857964137, -4.2862937190795, 4.578076465039493, 3.2498712867539177, 1.9172547036438254, -0.4290758227707564, 0.7516605084267702, -0.5113718105868973, 1.6913064561437114, 1.7604890573446783, 0.12732519781807558, 0.7127281739008267, 3.0370905000601303, 2.4202101179694098, 2.2463992555630656, -1.35556049232242, 1.0358037051544744, 10.582446655210312, 0.5814100493680361, -1.127464524648591, 0.6061652088995673, 0.7515266980050249, -2.936091900932739, 1.3091700162125943, -0.6525173384530732, -1.7518280567221318, -1.6131062540448193, 0.33669935111579224, 1.2973399566094463, -0.7567789277076596, -3.9182787494007134, 4.078137695802064, -1.5707405808543842, -0.9545226809437545, 4.2473153157423065, -3.529027876887435, -5.026775997813572, -3.3263852604863473, 0.15619807657411394, 1.7405939714870269, -5.338238521921661, -1.7065857490513094, -4.682653180969824, -1.6413883047525433, 5.277323837465245, 2.4023004490398376, 4.269543326898429, -1.1726675728247538, -3.620647866176646, -5.933516793161681, -2.5628450962872042, -2.595648696916774, -3.5943587723712676, 4.863067780180696, -2.602717813900753, 1.2092651823736447, 2.591316593503929, 0.21428212785020706, -0.07732170112868969, 7.122482821215423, -1.5417024416236007, -2.1188686341700222, -2.296814830199524, -4.269933512887493, -4.849186962388046, 1.0234352285923585, -0.4138443207591629, -0.35533205480477875, -5.808487459292309, -2.509592959445018, -2.7312677533073346, -4.57930731957162, -1.8266915792370388, -5.9011594091331, -3.0624656247012316, 2.6880063740678133, -2.3723925416058544, 0.5925995129088036, -3.7595180119913345, -0.5508650428135761, -1.6599684591678696, 0.16682559497883853, -2.8959319180363723, -5.618937106474505, 1.5262861846905058, 2.0289675328332795, 0.20540200053720647, 0.9997690602497343, -0.7774305054100795, 0.3646129221684002, 3.950264021140308, -1.0343996379463525, -3.9009877061024882, 3.755414660107384, 6.163144098153002, -0.07247098893901571, -3.380334033370483, -1.8250504764073725, 2.633695469874169, 1.7030310270802789, -2.9742794176346186, -2.6913876181609124, 2.555553768228624, -3.5694005353946783, -2.262979705573775, 2.3572526258336155, 8.834762451352876, 5.9433717881843195, 1.797566687886346, 2.0506873757935895, 4.5643198672329195, -1.8785127758146616, -5.852580043737099, -1.7700364360603538, -2.373662377475009, -6.869907667220688, -2.8833842141829775, 2.2973075927632607, 5.065112356283664, -1.4314518089199724, 0.6740442800038067, -3.917369317143622, -3.6012772144925327, 3.2610787584673724, 1.848307375561229, -1.777188889187008, -5.646324373536933, -2.411095344291222, 1.288208083818509, -5.592928594863215, -5.316992869843191, 1.271692672438883, -6.79906145953656, 6.401872228768685, 3.4328325266974207, 4.6008278728532215, 1.9964376231590513, 0.2818411033152559, -1.2668101923951625, -5.5677140911906795, 3.9707307905473193, -0.33566501389681025, -7.42796552821353, -0.10299015246016131, -5.034205900240319, -0.5053711889397822, -1.6737807033417549, -3.44836746547281, 6.517216111271712, -6.776364899211223, -3.237490487248374, 2.6600751886380642, 1.4786116922952226, 4.181776477081938, -5.695075349228882, -4.635849896421069, 1.7041602596436056, 4.805233775036977, -4.853259503462268, 4.651885098293568, 3.253818119514015, -4.02900453682018, -3.404809467874383, 2.3108742625833454, 2.332948587024226, -3.387150768641016, 0.03492219440386883, -0.015165456791565652, 2.8171615299139843, 3.2402801545406756, -2.2499524655214493, -2.8276392373815913, 4.925158852732081, 6.050275518950193, 5.292653344164839, 0.11271008610193038, -5.838578727338712, 4.2572819975494305, 2.6003954928472064, 0.8546118478885655, -3.228199826191531, -4.7128278656422395, -3.66771591084138, -0.8855875450949521, 0.3393672899334928, 2.07337122275564, 3.9213162826621826, 0.6813738594573858, -5.653885234869323, -5.25501953368163, 0.42249477262259755, 3.422573266539402, -0.876537394492869, 3.172122193589403, 0.13063865186887058, -2.870943047895186, -7.238875169838497, -7.878538717970836, -4.602605206810849, 2.469457329250825, 5.605514926168285, -1.700702114215531, 4.7081234630004225, 0.5085085035532464, 1.4421990920217476, -1.2988816909820347, 0.34206773149216463, 1.1867439584904333, 2.2665297245129965, -1.5031762178869688, 4.291106670290457, 5.552420603274776, 2.7131632215238897, -3.4479014177996, -1.708411327837908, 4.537623736005115, 0.6991253147060899, -2.1511094857033934, 3.8714473067979656, -5.551279439401377, -0.3012297458431586, 0.7865941620061152, 0.9061758919518281, -3.280920924948814, 0.9601009545951642, -5.679732883648208, 4.1268138734766175, -1.5835010270539915, -0.709221807815664, -0.9950082491058733, -7.3972425395323285, -1.8397097539960323, 0.7509953925302861, 5.2258687705039595, -4.352845464788539, -1.149681241836325, 4.085922656291084, -2.7391584693729008, 0.914523914588042, -1.942179881374991, 4.394162511055812, 2.7797359403372535, 2.9919570909916136, -5.909493862729003, 4.936122389145881, 6.184457715601724, -0.7351632863489023, 0.8048234076967388, 1.5819500911556792, -4.762948902040748, -1.6149759341718641, 0.6545560242624751, 2.013926320532867, -1.8290604320259698, -0.37447175236995445, -4.322311679719539, 0.7146198771379635, 7.986317015049654, 1.8057447884618778, 2.9302951536187996, 2.41944204019404, 4.5169835830277805, 4.938424138676251, -4.365319478856349, 4.6845990374849915, 0.0017275300217100874, 3.6269724253130438, 2.5604691732900564, -0.3787916493958482, 2.5210327677566817, -0.41439667136052116, -5.911159019577924, 7.693345950980896, 3.6795579182946176, -2.0428265198627797, 2.0668218507317495, 1.4911593793645277, 3.193691528764387, 1.3743304970514414, 3.046903608814739, 5.1787870485725, 1.655649227027287, -2.324449737912428, -0.1052652587120048, 2.4994889044663773, 1.3499120345270412, 1.5772203021485751, 6.8507245811770465, -4.2731614400000355, -2.458839955734247, -1.1937192617182726, -5.080266599612078, 0.5679486765333145, -4.346501802228104, 2.6996080776502915, 0.3966031198759568, -4.411151462062189, -0.8103443106303694, 0.48088202167415994, 6.266624941911031, -3.2829905700737716, -2.8790070799979413, -0.6942448515182058, -0.2409952088312809, -4.859623953686224, 1.3642697715044518, 2.6111654038684455, 1.839481495203744, -0.36372616909249733, 2.7266968289758613, -0.28811186712171477, 0.11385157739094716, 1.5455631911713597, -4.739797137275353, -1.651250795826493, 3.6043939044188917, 2.869013601252096, 0.48925529627045444, 4.259403609672295, -3.057995891340242, 1.8228076223977743, 1.0499114629490454, -3.7733294121339496, -1.790650321116017, -4.90405847983743, -0.9755097439850177, -3.9940257918016684, -1.0077427929522091, -5.9702617538440705, 0.29872240043927184, -0.04073099124357006, 7.00718957070641, -1.1838605343419493, 1.1082560822097602, -4.018257417258719, 6.959198377321054, -4.078346131800883, -4.132109978882698, 2.0461349739103905, 5.108637691964628, -5.505805167968805, -6.4081570128503715, 0.9114126540611419, 4.223645503259517, -0.9075444393667419, 8.069375176484781, 2.524521217182987, -2.3042601768291813, -3.3337936727717414, -1.9960216178724723, 1.4623387398967551, 1.0633300421137941, 1.4372878532063045, 9.02391825185729, 3.803254301744388, 0.5683389528762132, -1.2697854614504909, 1.8124380740320651, 1.5046785110545002, -0.5468043614769547, -0.291007568013574, 5.975512161141898, -0.1250918813445888, -2.7890594462003033, 5.408149087491662, -7.765131475326405, 5.25188860019626, -3.885235803444946, 3.4029895836237487, -1.0045566770688388, 7.80983208239893, 1.8941930184942435, -2.2605195696334186, -2.181176631128194, 0.03833324761073727, -0.11866280048323422, -2.46028234328818, -4.423571890108256, 2.2163969786612814, 3.9638047934651324, 6.046963790749812, 4.875387443897403, 2.24652093053246, -2.1559797515364805, 0.027168781441366766, 1.850157877258846, 3.712429279091222, 8.938546251248573, 0.39637235982242447, 0.22722764777189908, 9.611222911319507, -0.6128834826047669, 0.5399182468797366, -3.185943751830233, -2.5531456739283085, 5.7737852500096025, -2.3465515734814053, -5.450154368783557, -0.2344890172104874, -7.361083892805777, 2.416715482067089, 3.0808589774952693, 6.107934987909501, 4.951041737010417, -0.9511868361035587, 3.8048619984551872, 2.9151333728010904, 4.1111043818252675, 6.787569386994239, 1.3882258246070418, 2.3010305146927834, -4.257258376896749, 2.0129914862856975, -7.714763782622949, 2.158601743590992, 1.2658017417251688, 1.2185268029085212, -5.136156973382076, -4.542999139400208, 2.3599464739348215, 3.0357285792504216, 4.273543457584059, -9.134804758991706, -2.4232986826187153, 7.446440430370204, -1.3591959354786252, 1.4396303164984465, 5.8323818756628825, -3.462355037745971, 3.1585711091713486, -2.0064194658512684, -9.990323600674628, -1.0511452409138968, 1.4705726168127549, 2.9067041536628127, -0.913838376759094, -0.7050652884331405, -0.8046886924862687, 2.2736433083663923, 2.4916206078049474, 3.2276921832590886, 0.28000971577240646, -1.4141381279214154, -4.288496425718735, -3.2232880778655857, -3.4219790275371116, -0.7058101393289435, 0.8650638853843629, 4.221543070072724, 1.9538758144590342, 3.1802967229394157, 3.108728679750062, -1.437885864841828, 0.1648321804165265, 0.9632746045719311, -3.0876276150024418, -1.646935099757283, 3.48155607790538, -4.019110588161251, 3.3579823578269754, 0.571994051519809, -3.6915673595522778, 3.444451987960819, 5.927162938652193, -0.4425343967712265, 3.2298423445054047, 0.37974868001147133, 1.852956531983948, -0.9112269833987674, -0.20201871145585165, -5.2630006846616455, -3.3588442475152864, -3.7145538140679464, 2.3428912916354716, -3.8984450464536833, -1.5394101968825948, -1.141334991757233, -2.058930078012198, -4.9049979267284884, -3.862402289047116, 1.9815607584475223, 5.674838099315913, -0.20473344316121125, -1.8287901676905896, -1.3603669273483778, -4.281519743019919, 2.3476545346061877, -1.557493820476851, 6.683953973791589, -2.6720766410082013, -4.743207778341074, 7.887986603143974, -2.043155084191905, -3.2789755593298286, -5.157698247078119, 2.9981161840160517, 1.5237153790530769, -3.555804439141837, -1.3613972134924335, -1.597712682631498, -4.8053669004288055, 3.3292591609539066, -1.305274715964358, 4.383673980094896, 4.629505538356774, 4.290635487922331, -4.912412428736983, 3.646810163198637, 0.23570390718703493, -3.398867851480734, -0.35888695763785716, -4.739658478785957, -3.5369515562450378, -2.073364703892993, 2.5198361798026143, -3.414742136764153, -4.676103869649559, 1.4349983558231272, -2.750750207685239, 2.011060190115147, 0.4678176153748159, 1.6709144526225033, 3.9638329857536445, 2.9298133609322807, 2.7923740217146866, -5.866844219996596, 6.99286784915165, -1.359583903155791, -3.4719238978235913, -2.8457578193127473, 0.15520274646794935, 1.4921007428778654, 3.028352234329527, -3.5933885046028244, -1.0546689197160806, -2.7608766902160413, 0.582976550366704, 2.1792017802350307, 6.12914493087942, -2.7598578257461495, 0.08579299254497161, 1.476074384435144, -1.2545812661135214, 0.7346569931072291, -5.733819981751817, -0.839464691749772, -2.3820573340612117, 2.3576031057591025, 3.7675666638073784, 6.924445068937778, -0.8691434293028947, -2.2325514918853147, -7.982448365178033, -4.327889134723874, 2.9988799729550246, 4.217580564456273, -4.411341528415736, -1.773210821649161, 0.9700981114727086, 7.594650625549901, 3.750624523695866, 4.87469113075501]
BIASES_LIST = [-1.3825995318559068, 3.7043236829747217, -3.6207409611580488, 4.794988797610524, 6.334829147061139, 2.7700433651109613, 1.0987132346765534, -0.07706587608363112, -1.1051055848472944, 2.6550736067141916, 2.1220081264941903, -1.371778034605296, -0.004481679720935591, -2.622641627683648, -5.505122400026741, 5.26884542066564, 4.8173291925330215, 1.4748118713956466, -6.566662023522897, 0.020092220674156176, -5.070094967393281, -2.8048353500316443, -4.061455179563842, -6.093062310467157, 3.926585980807205, 2.647742007838008, -4.028172260066081, 2.9174708086192256, -1.07582903205338, 2.3012570479404517, -0.34516823529333734, -2.2920775986136475, 7.118255025934056, 1.8529088901183932, -1.6790095270342078, 0.44561550978879955]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

