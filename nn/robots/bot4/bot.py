import random
import math

WEIGHT_LIST = [0.38368179265453883, 3.931769569001778, 1.1682835656678527, -3.711922266962218, -1.598809855400098, -5.891947615007873, 2.641461958753152, 3.0163964517976307, 2.147965687123397, 1.6588455379511187, 2.1086481959785117, 1.0633546073473785, -1.129682737243293, -2.406978322672255, 0.5132822688484189, 2.686937357510454, 3.405521074773521, -4.172811776808981, 1.9833228466073267, 1.1830133050012988, -0.0900686757841519, 6.848095017780233, 4.080099267745019, 3.316058903353218, -2.270138621219602, 1.704655629214555, -3.4570583073364682, -3.701043561413189, -2.798628068707301, -1.046769916324496, 0.7824371840447584, -1.1156756106141907, -3.0846243013384873, 1.0325725982292435, 1.475631923909119, -1.9934429316543447, 2.733798140213256, -2.484079378339552, -3.759780461381204, -2.108488778068727, 3.4735760880303133, -1.718098657572032, 0.11491879145338713, 2.1428746759601007, -3.9357867294150166, 5.546072748909961, -6.674413461720684, 0.3161047439873914, -2.502246673482113, 1.2283441889632316, -3.729545242986167, -0.060455806782301336, -4.0921946195200345, 1.3870235718851474, -3.3312289803025346, -1.1771729974774647, -0.9190029112360976, -3.308095284579882, 6.570084468430537, 7.038949852574788, -2.4589183136329997, -3.6539113229976037, -3.054533407940395, -3.669036718834392, 0.21117131989505933, -0.6327712666348937, 6.470211828441243, -1.5018509676820844, 3.730854534991381, -0.3243135024203072, -2.458703813109346, -5.853675142592822, 2.6845660333413006, -4.967838505034952, -0.9453313910426082, -2.505224032536791, 2.638991761086567, -8.45045683890389, 0.0002733650456625547, 1.9850524823234075, -1.099752262095421, -1.6494800479542178, -2.457281118623036, 0.26151180393884865, 0.2561524957875625, 2.400140525719015, -1.0860042877066072, 2.903665998479207, 2.462057792129667, -0.7710059969764699, 3.493538613003908, 2.4912382682853575, -4.418771627795642, -2.8830383458931728, -0.11375040102783895, -1.144123612919046, 0.060734047231568944, 2.812395262259556, -0.8434457413857969, -4.325409081162554, 6.713216744245663, -4.380161243667015, -0.4742007462002906, -1.8515023604472802, 4.534980911755504, 1.6062576379124813, 0.6991352266218287, 4.334919195587371, 3.281391902676174, 0.28267092965738705, 6.001275901018652, -1.692648252157398, -1.7593130432284407, -4.311627579757567, 3.492939881179045, -6.690396936787739, 4.0099188914960875, 0.26109349033424945, 3.06668889236839, -0.5867802492933969, 0.466045318870679, -0.7702492592792654, 2.7838074867574214, 2.353370257670624, 6.536095542788432, 4.992930274250936, -5.197992509427595, -7.042832679197377, 4.673840273619323, -1.0956808989241553, 2.2440203841890964, 4.430690159691503, 4.998704131313563, -5.149372142411416, -5.6103760862960135, -4.116854980606264, 2.6004151755644513, 2.3732975637228946, 3.4047326033500482, 3.501058134759827, 2.9344666647892144, 3.5841837471527906, -5.386122336887169, 0.1506818614329104, -4.824144829679923, 3.0636715458620447, -2.996825131804732, 4.0957391187581305, -1.1746724453756858, -6.10007439518926, -1.2480298491347503, -3.695855879083856, -3.299859202024579, -0.33376955621374493, -6.187123904611459, -6.990294675089588, 3.2432992409969614, 2.127797296625417, 3.270804832491077, 2.543303971250788, -0.299953231673445, 1.4068804488694013, -6.579424494942649, 4.2333627912725795, -2.2105499295866897, 0.2177023726737457, 1.5213926538129412, -2.7032738732448927, 1.1534116221894326, -2.159812614521824, -2.3209456400497466, 0.47174130057289476, 1.1980425482984223, -0.458114621269337, 2.52424155585893, 1.8014864133341586, 6.654549873344751, 2.401433172160779, 1.1735547463494753, -9.1016905002731, -3.0868034294362348, -1.7184647053962285, 1.1714004085141836, 3.18870025761247, 2.833752028584869, 0.07227989597962647, -2.039214062704791, -3.8793447536906918, -1.9633982061497715, -1.9099227905730913, 2.4792197998954366, -2.864392898384474, 3.264276530551898, 5.0016065565890315, 2.795666775113619, -0.26633569585149064, 2.403771017784225, 3.347604352401069, 4.331879466223896, -0.2506101581743445, -1.9687523837882204, 1.4989713944738128, 3.7093377239375593, 0.5340515413378004, -0.2019326543606197, 0.9708891650225346, 1.5097501974676049, 8.335033608606931, 1.2572979698363342, -3.6771030659809503, 0.4005799786273567, -0.856819271595235, -1.2629433379102526, -0.7962052088296422, -0.9575012021619866, -2.6138970294585304, -0.7595759311550861, -2.5729663335757698, 1.2178875228668589, -1.055569240500415, -3.490796257634856, 1.9699042254111676, 0.30949976607328744, 0.9311023632886866, 4.167530061431269, -3.8039221599780135, -2.148310832429119, -2.3489953138178077, -0.49101894774454946, 0.6873492281570439, -6.278896563114992, -1.7815283285649182, -4.260069162437726, -2.0433169669926494, 3.375170329803235, 1.0533607945074426, 6.2278441312134865, -0.12243044942082992, -0.6780971986574835, -5.751609694098328, -2.7721889718623154, -6.145247556863392, -5.415525533509509, 5.619014997430286, -1.5822265057236369, 4.577129464636826, 1.7274352356486586, -1.4924220392664918, 2.0449723010077645, 7.390799274298951, 0.6565665001065542, -3.7129649254550685, -2.5382426028366023, -3.087850781820151, -2.945028004707652, 1.719672912640724, 1.9118033304193593, 0.12406636625983047, -4.409937597639457, -2.5352915431991647, -3.595490720608155, -1.848111181264082, -4.2447700226754215, -3.5189627558648424, -3.8681063271046376, 1.0870316119290773, -0.5842038304366812, -1.7451509137254124, -4.596684529090524, 0.6803772325071444, -0.8429784439028467, 0.6123915455185394, -2.22355470631297, -3.7692516459938274, 1.7984390698288015, 1.4523332601438939, -1.7514840616067122, 3.992395616148923, -1.7666690046056337, -0.6762240064241615, 0.6314955079692288, -0.4050334868096179, -3.3380277058379306, 3.893538932520433, 6.106258377501611, 0.16279582283258254, -3.387392605505876, 0.09576267503236746, 2.7092472684386313, 2.0393207984384905, -4.90170941279507, -1.3611848514395237, 4.850880835225376, -3.1684992262664733, -1.5899990847911294, -1.654522196358473, 9.91758985724213, 8.227450826134158, -1.1156256494492627, 3.2881196505925354, 2.951149602108872, 1.6352212834748605, -2.744363553848398, -0.6318982228702178, -2.527120574609917, -4.151939706040249, -3.513217637852988, 2.5144628848997828, 2.625526667066466, -2.7989663529200355, -0.1026129643043211, -1.7512646059985502, -3.978880410035621, 2.700950987892337, 1.75411086468461, -1.8864706383999699, -3.08034484827996, -2.337366141222353, 3.3794389448832423, -6.405753335073765, -3.5846790629494834, 2.896391903775561, -7.6375041694812795, 5.773626325608312, 3.7006055795433523, 2.9529698910288458, -0.9321602142517885, 2.36439480698553, -0.6995040274076265, -3.784305904474114, 3.3154874182655822, 1.530242971611993, -7.929679385894288, 0.5911854286201934, -4.3908761796685765, -0.42786483437202616, -3.4398908903490915, -0.3667786642350841, 7.188987066622754, -6.907130945289787, -2.2489023580014678, 4.004182871925166, 1.220065084406004, 4.357058913215454, -4.125397388176814, -3.301080348036, 2.4560522353151537, 1.428380960112439, -2.91912934118103, 1.5324981680530718, 2.675763368459945, -4.423852885554723, -2.3379008888353363, 1.818988571896055, 0.3145572178754199, -2.575006998423719, -1.7999331789694821, -0.17607114549040137, 3.90831040301149, 3.001387434877655, -0.9041529933435176, -3.408503975300997, 4.398763488752253, 4.437420894041939, 7.2663242136379935, 0.5049322432636005, -5.808767147106296, 3.25899350267233, 2.762040569390354, 0.3334354458983664, -5.131349017231184, -1.8224574359394965, -4.262570780322371, -1.5014717652446428, -2.1936136859730473, 2.5253871160676002, 2.3306066876821316, 1.6488894239632925, -2.703427399980376, -5.108432152869172, 1.033306254725039, 2.2359572075681244, -1.6271889035658287, 4.3088467328259785, 0.7910106041918472, -1.0368654549695429, -6.394545810836567, -6.940210555318077, -8.102243566854634, 2.124695807154159, 1.3286366309884166, 0.21648044951084966, 2.4358456271787796, 0.03453101835116046, 0.992662703369992, -3.7633256190456805, 1.2634179509045165, 5.750722740841238, 3.154236081695977, -0.4430260098057326, 0.31997055470430014, 5.076149139915243, 4.083037576860198, -2.7202896557230902, -1.5894268574267258, 4.715497559269619, 0.5133347908059493, -2.7407089561382705, 3.0942609777165853, -2.9026642508513936, -0.8875121105364998, -2.0670979978995696, 4.043341755203504, -3.8224293149566195, 1.5797740996161878, -6.3736498572780445, 2.785303638786558, -3.8423253189134146, -2.5299624057177943, -1.429793034293006, -6.5612898510912405, -2.8131667715761033, -1.08688434315188, 4.559170950855197, -2.97774433524786, -0.2775161444871259, 4.78792215398634, -3.120463958992234, -0.3051170013896265, -2.9262002896485546, 4.1403309331212155, 0.8408251638863173, 5.828765922474715, -4.08096939023046, 6.030610058546811, 4.003918902214512, -2.5276531053601135, 1.754629212266054, 1.1625660776504478, -6.3340725609481705, 0.04622166005901196, -0.3007628877857923, 2.650948769270834, -1.583509605890642, 0.21039554460715815, -4.441939857637664, 1.0360700905959837, 5.393105630703035, 0.9511042728126158, 2.3301389384342936, 0.1616655983750941, 3.5965269108315594, 2.7786641199518716, -5.814571080371297, 3.1541891322362465, -0.31001243826470926, 4.766991206044102, 4.421061391101977, -2.0546622717468805, -0.2062604920440353, 1.5515463453441076, -2.7298465398079848, 9.275102426549637, 2.5646614580603346, -0.3965889639799731, -0.9376050937699911, 1.6147156058166794, 2.8524334592521043, 1.5195087167920756, 2.7304072937471813, 5.150994166991177, 1.1669173829620063, -0.8936121897340441, 0.8520118467914184, 1.3270742299882023, 0.004211057974095267, 4.614948915632562, 3.209250541251995, -5.18348396149413, -1.7443861837644596, -2.626715678096203, -4.037173104054908, 1.2732770578804455, -3.551965059990424, 4.404396340500484, -0.029180165436720196, -6.399139626825876, 0.9801991148169593, -0.30776306378233775, 5.482403721642548, 0.3657050915469202, -2.258428292155541, -0.39590535514823766, -1.103845660298427, -2.5004212221836277, 0.23964207473814847, 2.8935625012578896, 0.952790367378852, 0.5235451439638616, 0.5592289895704989, -0.39405386612478455, -0.6642134705538784, 1.2656269615202071, -4.384988921049577, -1.5373081983048418, 3.8603210024019345, 2.7234182060939465, -1.6418321401606664, 3.6335002546664397, -1.4848594692272299, 2.937515850516167, 1.3252638099257354, -4.2722964088165805, -2.0264201190075664, -4.803336245806941, -1.8577790719157126, -5.049933320143159, -2.1650478341914745, -4.368152175723204, 1.2685283828405378, -3.1434938978358584, 4.146372338448593, 0.20180730144400671, 0.28001701966020454, -2.0156584002775157, 6.506859702274211, -2.9931878311755105, -2.13457497297426, 0.9248907535577657, 4.572160441119232, -5.877320856550677, -7.408862825445094, 1.6449241300096, 2.512021887330775, -2.237417145107135, 8.23331882376742, 0.39717894441041635, -3.7379785414261595, -2.765463371860034, -2.953609594634969, 2.183552119574047, 1.366555192430717, 0.7223030307519918, 4.959957105175935, 0.3784843696178881, -0.6320977605357705, -3.4765459452962473, 1.3112591814726589, 2.2531661261414198, 0.5378116095577601, -0.5203311588586177, 4.2857349953005714, 1.4738547698587388, -1.4603266177443097, 5.020435172953339, -5.404985258934456, 5.613700025260435, -3.4010845407373616, 2.7953732056599048, 0.3384807971329522, 7.674234729771351, 0.19913190353305366, -3.692114303895385, -4.264610278429664, 1.484494619563252, 1.0287939386720684, -0.6930429474874986, -3.2800707048554223, 2.85114079724851, 1.489420588829781, 4.136016950125966, 3.602884072223527, 1.589947673430014, -2.4734111891114274, 0.5767036262866652, 1.495141947287717, 3.914660598957239, 5.867474239028997, 0.1576243369186776, 0.548492029965556, 8.472738974427646, -1.1808050676367412, 0.6343767290889311, -1.200779773725006, -3.0243760019142307, 5.989479932806479, -2.584508903768089, -5.029874638539518, -0.6603511810954426, -5.609380305296894, 3.795904367807859, 0.6265203616796042, 5.418165815832235, 5.256125517344268, -3.4427392917673334, -0.11168600812374219, 1.6836977804125843, 3.3945692927183746, 7.4158745916377455, 0.654337757208435, 1.6455340956854885, -6.581693481022148, 0.9224136678989516, -5.416930680038129, 2.555102509051709, 2.386907753662803, 0.8106380037972047, -4.632860863868721, -4.9655099907331, -0.7959606419613497, 1.9683585376186121, 1.7944578480981566, -6.229130088322873, -2.539174551139581, 5.581641190653347, 0.04675608211020332, -0.2997302812521947, 4.570351717302408, -3.520680496283648, 0.5882591128513315, 2.1046926439038094, -8.80742398768737, 0.036082045315526834, 1.6801419614216604, 2.372799965078853, 0.34585100788563294, -1.9596000770928421, 0.11459333030541785, 1.324962876042767, 2.4358784165064873, 3.3964223363151085, -0.6350096885309265, 2.5143937281023048, -2.2219345733489386, -3.1027604466464975, -6.898680902321933, 1.2264597879488135, 0.16098974461870696, 5.06025316569749, 3.5881399375608316, 2.364917189822969, 3.0054113818600996, -1.443805000065626, -0.6074507564339865, -1.8567717415754916, -2.5216242687242256, -1.1303849576262548, 5.400518399760411, -2.483304694434085, 4.523222396863436, -1.9973903674097044, -3.666223650493145, 3.02608763001803, 4.897967015321705, -0.6269642187004864, 2.71979428032179, 0.5574112385992864, -0.8382791028606418, -0.7463307953837992, -1.210911379418933, -4.597233572357437, -2.8476518167196505, -6.017413962952871, 4.853669899165351, -3.6393777304370465, -1.8386402046542272, 0.8947221906152887, -1.686631690729746, -4.070172104128428, -3.545076335652711, 4.46075137612804, 5.087928375523972, -0.1125878226777447, -2.222316518116705, -2.8228587435778554, -5.708864092237972, 2.856750622772986, -5.207682674411347, 5.004876964315571, -1.7557580321938457, -3.7039945754033763, 5.679635799337274, -1.7107113320169798, -2.879604817233366, -5.036266891632552, 2.5420152950592603, 3.325844447448068, -2.387391491584956, -2.0027886689520145, -3.4725412638230067, -4.044204378489398, 0.6183488056604021, -1.2764364889873017, 2.2429296413548006, 2.593436618998168, 2.848021775790822, -4.5196632343353205, 6.616283561160058, 0.07255502430582039, -0.6170269278086247, -1.8819248753338083, -5.063110507479859, -2.849840308460995, 0.5881729275803105, 2.1876882467143712, 0.7250356281138655, -2.3176227350159753, 2.4298717407055355, -2.301780968733717, 4.452095824903982, 0.006532688087524718, -0.3025236840522505, 3.0057757779900633, 3.4725482726052377, 1.4761622467547841, -4.017308906319209, 7.627481859032175, -1.0169213585013883, -2.310932940280992, 0.13983872269490716, -0.568614865770076, 1.9324067619129783, 3.8307167341541835, -3.0644418061683565, -2.2879446850921044, -0.461497457829976, 1.3137495494953288, -0.9086424482999311, 3.8723689143395177, -1.8388398572428484, -1.6461408788804568, -0.039169381021925576, -1.6767942375843747, 1.3616548071904502, -3.0071959005786617, 3.149480507949404, -2.9681732014413615, 2.7696734668850818, 5.303612155898323, 7.461151196727107, 0.3058789773245447, -3.582412411503924, -6.352333346733108, -4.106025979982325, 2.3701852071920237, 2.590500832416212, -6.513948960167546, -0.1634190703289966, -0.8117794489261482, 5.786146880144872, 5.656477923788475, 3.912927988339135]
BIASES_LIST = [-2.553632232301231, 3.845988035466087, -4.13227230231519, 4.542483507753078, 6.021249840372503, 0.7640471028370421, 3.7644972554681075, 0.33016796793179237, -3.0730386529816993, 0.6256402720597631, 3.0392096410169245, -2.3264962713724247, -1.3926509102432016, -2.135899598193644, -5.421073702445812, 6.546805810340411, 4.658367023727668, 2.722603601025071, -6.05141523991468, 0.76299939350133, -2.1139541245715936, -0.3425844458685179, -3.2545520695532, -5.061125264230225, 4.533993782592467, 2.3212914229258343, -2.7590792125876114, 1.810942245066013, 1.7666439852297549, 3.736063986850141, -1.8020767193825538, -0.3501814759737891, 4.201432705155692, -1.2513822064507116, -0.5297795475773932, 2.982849298720632]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

