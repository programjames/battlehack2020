import random
import math

WEIGHT_LIST = [0.5721437655629321, 4.895816559499034, -2.3202199542840574, -3.5537179389443794, -2.3277964654847394, -5.290736329675792, 2.869533015707775, 1.828320556330118, 0.805665689447623, -1.1034431253708699, 2.601857021135295, -0.013387199130355024, -0.9086408088673449, -0.7676665750352634, 0.24175520055928532, 4.941677612584028, 4.6856088278403325, -2.9664552889293856, 2.8408364796476593, 1.8351278601309375, -0.37055547457675503, 4.344401756825313, 4.935018589029554, 5.418542831679034, -2.1110397203942703, 1.6078918415031955, -2.1897131966987198, -4.3625764426998135, -4.909064279927078, 1.389994666078812, 1.3704171677111239, -1.1180563758863284, -3.4022660073788247, 5.2486053245344815, 0.9900600984335692, -2.4869854593158225, 4.146565956179959, -3.291324347044801, -3.7523887763301738, -1.0208520827895267, 3.830588178133965, -1.8713574904307755, 0.42860188700124097, 0.17005141493744183, -3.2761157676879655, 5.7211262330519315, -7.873986797583954, -1.0356812688990087, -4.602707955807553, 0.8781037942377653, -3.843241730839117, 0.6757397981265983, -3.589523643707173, 1.885403717306526, -2.240775149106999, -1.6028788638635258, -0.40613473216695956, -1.9810740861193148, 4.892492986964184, 9.86726503226859, -2.197046346536296, -4.492694416177511, -4.314775154641728, -3.5252326991534244, 0.731266554411626, 0.1903015086815797, 5.3570336935655565, -2.203624422654939, 1.223192275768417, -0.683112122535317, 0.450587520046845, -10.342845828913903, 0.4844031143588804, -3.701098161339068, 0.03507236850112547, -0.9727433037681796, 3.38999212703133, -9.789102368859213, -0.06622204554832722, -0.5655007702706144, -2.413137240473447, -1.1004014622073028, -3.250020696290802, -1.214345451663694, 1.0209774210478009, 4.799333590182408, -1.8388463221592006, 3.9934045332497976, 1.36984904790429, -0.6815831583454247, 1.0026977422177157, 3.7885134902500277, -1.238352118526647, -1.0669161786763124, -1.5762493248325118, 0.5346158225372053, -1.7563117463408218, -1.1321384839728654, -0.6328475929438788, -3.6929703767973474, 4.123378657822553, -4.809667096474199, -2.339198976396606, -3.6160334069593185, 4.94041490943942, 0.7413558349663725, 2.7014400068540096, 2.6858420237079277, 4.9546098600695165, 1.8836853109848348, 4.388404421731749, 0.6130295751888444, -0.532221736577998, -4.326963160185459, 4.458800242044408, -1.711765131491045, 2.5523877097489156, -2.765464603090382, 4.558120401181276, 0.5679942384528615, 0.6228331535137599, -0.164869817332788, 3.6020872724453397, 2.609719111115604, 7.012907681120487, 2.4491502994898613, -5.377147978739007, -5.639918816892184, 2.558276580069191, 0.056686731369066795, 3.616395061757936, 3.8419597694324654, 6.511165059473664, -5.733620937565775, -5.186708865657434, -5.156580375866589, 5.2516757649187165, 3.4959670083623657, 3.573243349254681, 4.554484207145851, 2.07844833958358, 3.4893760924197528, -5.228775623624643, -1.0483239630541792, -3.6797973629976948, 2.506830955670943, -3.944907177969004, 2.480901807634705, 0.47105492924985964, -2.48478646467604, -0.42727092653484783, -5.106011722822262, -2.4153474392651515, 0.0038935005365417644, -4.137393443426008, -8.680499570642532, -0.22693797640306712, -1.8255877045621256, 5.451357066549092, 3.803951525595698, -0.9541905055994843, 3.8364731021595033, -4.5552830492764125, 4.482112924310739, -1.1243703217267902, 0.36449603854793683, 2.1067628726777103, -1.691043526557823, 3.3663092593240505, -2.61197650144006, -3.453569578353887, -2.4254248391320195, 2.0673686506194735, -3.288346822047494, 1.8403993116412676, 0.19257683512517265, 7.312002912888947, 0.13536035768492616, -1.2398159377421873, -5.3729318712348, -3.222119596102868, -1.8809838591129424, 2.1431442810807506, 3.6513792742883906, 5.107901906617497, 1.1312348852486656, -2.6330556673854373, -6.098252064898722, -2.5126979235022437, -2.1319554841369883, 0.08337000630685938, -4.282387048171611, 4.585405280290651, 3.2491231372812432, 1.9055876703490355, -0.42038227215338886, 0.7536948565393378, -0.5333887669534485, 1.6907344704906764, 1.7695567383057702, 0.12399771194308394, 0.7141708137331637, 3.037058329705246, 2.4311839474515557, 2.2467861633371795, -1.3406435130822976, 1.0446395911892368, 10.573005624155973, 0.5858514495992365, -1.1321574777416696, 0.6101116387324834, 0.756335391611372, -2.945969124777281, 1.2939680671603533, -0.6668608551994478, -1.7487119886734985, -1.6109930277985904, 0.33765919968963226, 1.2942124544046436, -0.7464797769383059, -3.923162125709161, 4.079121263501532, -1.5666610452200862, -0.9511103240126926, 4.249588664276182, -3.5291659232764543, -5.027575209127316, -3.324620720965178, 0.15602264137885216, 1.7560558011029817, -5.336764320611639, -1.7014735113802848, -4.685137335219765, -1.6425089833925774, 5.265360318318663, 2.4026991759894925, 4.2675229193395765, -1.1719559125106738, -3.633320759091561, -5.936084622159186, -2.5683086996429716, -2.59965891042815, -3.5930970533670146, 4.850783465011202, -2.60621794083788, 1.2169444013992838, 2.593832281285397, 0.2176823060054191, -0.09098798338567798, 7.126291412455771, -1.5303279079880734, -2.11609013569055, -2.29459035943906, -4.271046703572006, -4.863844264405051, 1.008419156511246, -0.42502686680652657, -0.3548495048993019, -5.8133721224871655, -2.5045180610920936, -2.730430231476713, -4.574937376897648, -1.8332309101536386, -5.893186406819938, -3.06372777567354, 2.6910668467492718, -2.3778345266436776, 0.6017719922259044, -3.755345103314245, -0.5417681845587646, -1.658396667102869, 0.17561267097567138, -2.893348188666003, -5.62357746909286, 1.5124260786947068, 2.0263720250539965, 0.19925726322588522, 1.0037370437945001, -0.7739149682715316, 0.36704218921071846, 3.961890248841321, -1.027385859488113, -3.9057486832535453, 3.750723621172417, 6.158955078103596, -0.07364167035180609, -3.377160090425946, -1.8216300124751135, 2.6449430551367596, 1.7058224491765563, -2.9882100370603735, -2.68694211928184, 2.553158338074204, -3.571389970669586, -2.2567697108620535, 2.366919951142616, 8.837842364000487, 5.937308575280429, 1.8017477605898664, 2.053935802312921, 4.565783294651064, -1.8747030355117742, -5.843406414611297, -1.7742216930756716, -2.3712194264010638, -6.87329076503606, -2.881252528262816, 2.299003582698357, 5.062623419665012, -1.4210088737075066, 0.6684912105376714, -3.915553753164918, -3.6023617098950687, 3.270625961988183, 1.8528079250826217, -1.7809825333480467, -5.661070786916024, -2.4040064649879023, 1.2928448102578334, -5.594684817720363, -5.313938756321338, 1.2803230761449282, -6.798134544543738, 6.393951664602325, 3.4433215665589136, 4.601186714475423, 1.9841359071018962, 0.2876146993906496, -1.2754625133432114, -5.558422905203678, 3.946702569733204, -0.35138397614618727, -7.425171811889958, -0.10328656352162545, -5.0249514976275735, -0.5062106166133518, -1.675781413112623, -3.4626979808106033, 6.5121498772540765, -6.774653432549395, -3.236805788899069, 2.670170639512759, 1.4874047107341863, 4.195245786895554, -5.695599930368491, -4.629110504095808, 1.6948973578652438, 4.797175091866116, -4.843466871361183, 4.652783609770574, 3.2627510644613436, -4.018147349351639, -3.3980120905659263, 2.3187284927108958, 2.342656156418408, -3.4043437528760676, 0.0401079292546654, -0.011883304408701795, 2.8077807986915384, 3.250300477672612, -2.255669686078896, -2.8178540686789586, 4.91810243160309, 6.044483676376258, 5.285487561124878, 0.11073173782315542, -5.8454363302127454, 4.271854789210078, 2.610723299083871, 0.8579546656813648, -3.214622051444092, -4.712909683176476, -3.6562689319912294, -0.8914197208019848, 0.3351827682423906, 2.074100496233936, 3.9144719073237484, 0.6779932829037209, -5.648998417939718, -5.252722907236041, 0.42029832388778765, 3.4139335811335494, -0.8795766803492208, 3.1530082179189005, 0.13486329180651158, -2.8763375262411364, -7.236789547066328, -7.880684558480069, -4.602041120036447, 2.4703104669048352, 5.596453518864346, -1.708567416010829, 4.699265833604504, 0.5076288813721751, 1.4366078789752823, -1.2938605312514542, 0.34390843386725944, 1.1826758899033107, 2.2575258512020433, -1.4952070222682592, 4.285045472640126, 5.544035945730247, 2.7210501652077346, -3.4507885493356447, -1.720327463994881, 4.5581568970694715, 0.7078136512280248, -2.1452626639755645, 3.8633334776363855, -5.5556477847047665, -0.29449994629667, 0.7843391493925661, 0.9060089535659084, -3.2902617298799846, 0.9726124888971097, -5.68435721591869, 4.131489459375011, -1.5709794894673337, -0.7107113873512975, -0.9974726756383153, -7.400780825046229, -1.846962003318125, 0.7587093827721486, 5.219973450897166, -4.34159543120605, -1.1383103302843716, 4.080124029603616, -2.7408981063719486, 0.9138142878087261, -1.9298885472214908, 4.398347921041757, 2.785783531553181, 2.9948156296641164, -5.907824137807468, 4.943107168559885, 6.190754251681635, -0.7366199369905502, 0.7902571116764301, 1.5754133328644582, -4.761780343033213, -1.6146659060423494, 0.6577017662184782, 2.0207159480458867, -1.824753347167178, -0.37737969911073754, -4.320735967454436, 0.7104439640409013, 7.989126974224175, 1.808892218027669, 2.9321487742875263, 2.4048557864933584, 4.5196171872116, 4.932676073842787, -4.3543140597361605, 4.690984914890036, 0.0023195115160973964, 3.632720075085208, 2.559376271009535, -0.38715245193815223, 2.511481690513236, -0.4268512029722116, -5.920036188065847, 7.703505608896447, 3.6827817164923062, -2.0445430439426078, 2.0706350545678807, 1.4903882383294709, 3.1927590124868113, 1.372932034360284, 3.0498230904156536, 5.181625330026668, 1.6632803373790224, -2.3221976651633467, -0.11070618287364088, 2.487607947245212, 1.3462932647210963, 1.5810349834206845, 6.850707406675181, -4.259202842194936, -2.464771361371047, -1.1988920459383752, -5.09246197237956, 0.5692523295019911, -4.350295434646743, 2.7016768123299353, 0.3973876082072265, -4.4016870589600074, -0.8162549768820185, 0.48603632193162893, 6.261305377318373, -3.275065402198381, -2.866068682615406, -0.6893814659362483, -0.23732195022009975, -4.8575911024358565, 1.3661794834551442, 2.609887387183933, 1.83171011341044, -0.36735670945746113, 2.726394171539469, -0.28495024802308955, 0.11163644289473973, 1.5514934875918642, -4.745759250056814, -1.652185356795441, 3.616745319931803, 2.8728498616182274, 0.4974045294220418, 4.253187197308594, -3.0500648754295288, 1.8178718531809521, 1.0419551937631089, -3.7664495229262824, -1.7848007014422647, -4.917298673924404, -0.97849089009903, -3.99282228424845, -1.0065244829283948, -5.969736052920918, 0.2990773785104254, -0.04154415751812665, 7.018128149764383, -1.19706343019383, 1.1036697927137464, -4.020642282451407, 6.952955139989082, -4.073700856422238, -4.127633649273632, 2.0411955210395214, 5.113360195624109, -5.5008896920212775, -6.403684139753644, 0.9084639514835764, 4.224373938887358, -0.9094371593113187, 8.082377451342527, 2.5165658392485097, -2.3039549121895844, -3.3419482528452997, -1.9806410755906063, 1.4561094220098814, 1.0632214653074528, 1.4438381641897016, 9.021979809704545, 3.8034274906105887, 0.5694273479494927, -1.269868271870749, 1.7994195693231807, 1.5132930897823436, -0.5564182914106076, -0.2826510519813719, 5.9697186276197165, -0.12620862917968104, -2.788187721371233, 5.411355319550327, -7.7564845819572765, 5.253206980547182, -3.8849035506819174, 3.3992244623617665, -1.0109860085381437, 7.804320160247053, 1.9002181770050153, -2.2557336418763376, -2.1751811240576653, 0.046148694810959325, -0.1143041534104633, -2.4557213514068708, -4.420537744664188, 2.2142982496939374, 3.9623714246704607, 6.0548159216353525, 4.870570688434679, 2.2508770669840854, -2.158879961675447, 0.029947233336562396, 1.8503613069116809, 3.7058856829614926, 8.940070788480043, 0.4063169659494558, 0.22759680959851655, 9.608098804117724, -0.6086073058822998, 0.529560883265369, -3.193439659247597, -2.5501190983718396, 5.760555009492996, -2.350678446133746, -5.458496303085749, -0.23433311736605206, -7.364249617337576, 2.422758584989902, 3.0910862357338043, 6.114698557960913, 4.950646432081513, -0.9545993653566728, 3.7971687866596646, 2.9197741402106234, 4.113047662963855, 6.790230475657684, 1.3914244307946497, 2.3008971884000604, -4.2544056564789425, 2.0280748107821354, -7.727731443571759, 2.146340140992743, 1.2639289356837642, 1.229626622310788, -5.1372651753355365, -4.550109077078403, 2.3634975623241927, 3.0245071224448594, 4.271562684899772, -9.153043792180421, -2.428219254860521, 7.445141879586407, -1.3617664507737135, 1.4495472308007569, 5.822844262678239, -3.4538020017584268, 3.173201365519703, -2.008935884085552, -9.991105326774429, -1.054627283671876, 1.4805334984482006, 2.901828294014246, -0.9153939692929427, -0.7013459706270001, -0.8187139993640417, 2.2802554502275556, 2.4987601051808155, 3.2236812935494994, 0.28193074489297404, -1.4091985518156294, -4.277901751007981, -3.2213236560547016, -3.4087724366192647, -0.710866396565003, 0.8591967092437707, 4.214135697890138, 1.9469332640651495, 3.1819273303286235, 3.1151262820154817, -1.448920702467278, 0.1556151201398297, 0.9604246926128344, -3.0851072217214335, -1.636687446915553, 3.476169689908289, -4.010613768895405, 3.3627542331780162, 0.5728416199596891, -3.6953635795218314, 3.446931955826871, 5.918758334317491, -0.43680806434134983, 3.222902734375499, 0.37745485965754955, 1.8549961404005277, -0.9102134492622502, -0.2077918570016114, -5.275631213878576, -3.354792249681735, -3.711631066494954, 2.346833183142817, -3.90019157718216, -1.534505890353371, -1.1423543726193905, -2.0576233531287387, -4.9144014405643714, -3.8667125099282353, 1.988255981527706, 5.681758144517202, -0.1987682827477878, -1.8174881555171947, -1.3585123042215619, -4.270091259950371, 2.348642222598951, -1.5514364946718213, 6.694030952788505, -2.682816470427004, -4.744831020718448, 7.884578757420003, -2.034287546643393, -3.291140252568491, -5.1532215671551995, 2.996874702468794, 1.523973019626855, -3.5602465590614925, -1.3714309399300244, -1.602528000826647, -4.796390689853281, 3.3411657044877527, -1.294429256071827, 4.38168905844762, 4.6339436487559, 4.280325698946862, -4.909577998805683, 3.647039224121135, 0.24660358109988798, -3.41473080705668, -0.36538694409253664, -4.7402116791568885, -3.536508532133384, -2.073379466019697, 2.5235292722988207, -3.415760910866084, -4.67928343332732, 1.434518958059838, -2.7519386551337464, 2.0165143422338976, 0.4685821582048782, 1.666513055951684, 3.9694162821451244, 2.936422086689369, 2.7747044292694425, -5.867869971168327, 6.995297691337706, -1.371036659544905, -3.4661826685648407, -2.8489372927657217, 0.1451592854326488, 1.4872633476675097, 3.0374871637462033, -3.592507981122155, -1.0592617092102257, -2.7582215761127356, 0.5898157843032551, 2.1893346385183805, 6.120422701909349, -2.7605368090241167, 0.08802967978552158, 1.4729216329709764, -1.254652941874662, 0.7426280509155189, -5.727241726740244, -0.8369195123513244, -2.3840401692782156, 2.360005538552807, 3.7742799441068136, 6.919863204052534, -0.881053877495215, -2.2350471934867744, -7.990588372488646, -4.316288024302095, 3.0049274182807006, 4.216702416565985, -4.403027437041379, -1.766860995027368, 0.9727117575543366, 7.588685565172403, 3.7429275825410535, 4.872274823289523]
BIASES_LIST = [-1.3840457371945893, 3.6984741164395287, -3.601290355232177, 4.793890314095581, 6.339208827738498, 2.7686885869953617, 1.1002336031168427, -0.0807685241680139, -1.119634719165078, 2.6615177499317215, 2.1238875218545803, -1.371484139741997, -0.0015948303250398312, -2.619549279899153, -5.5074122445075835, 5.270481635121501, 4.817886862096736, 1.4762408583903084, -6.579134550645308, 0.018491768453511973, -5.079183622059275, -2.804106786277521, -4.070965003137742, -6.086381603493082, 3.9214783907101323, 2.6544111068715, -4.031972717254112, 2.9075553206487696, -1.0882904875798287, 2.2847842883012084, -0.34455394281532326, -2.2928867797929486, 7.131641481261502, 1.85137953330328, -1.6923992504562557, 0.4433489612881066]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

