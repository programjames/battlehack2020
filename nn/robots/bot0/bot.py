import random
import math

WEIGHT_LIST = [0.35031932883088923, 4.851018108490381, 0.9918493872426277, -4.028823368507854, -3.163013752655665, -3.605341961704001, 4.2898783268710545, 1.507691206858767, 2.1166895051945547, 0.5689958231695176, 2.186054961489729, 1.5518614250926364, -0.9598926411771324, -0.9736480543715975, 0.23772025151796705, 1.7016798159488618, 2.8808803239291434, -2.6029522021096922, 1.6612180545795132, -0.6487868202000016, -0.8962041359542665, 6.261963324663108, 4.607678514188558, 2.1730945713594565, -3.1346687348636038, 1.645430811047972, -2.1411866419273258, -6.687054434358352, -3.1413818519778918, 0.5371538407205279, 0.6690878603399439, -0.5828591014242928, -4.575387969593049, 1.44151918658928, 1.449379107158939, -2.5677671156751054, 2.3336760746753518, -1.342265864038946, -3.815322839520574, -0.0033249272928023155, 2.6597230437486243, -3.2397178076197846, 0.630442842092185, 1.6602162032036127, -4.397934596599662, 5.120871065445226, -6.172270841203173, 2.0880560159484944, -2.181144835368781, 1.4086887561229675, -3.9759437581673005, -0.3432881349838959, -1.284592360339338, -0.8692698384790497, -4.042233993905872, -0.7910440408386368, 0.1478277244012629, -3.362665044979182, 4.684657749070899, 6.6029146150248055, 0.5593109644134882, -2.641625687382084, -4.269311201763203, -1.725616568189206, 1.251017857639627, -0.8057108246962771, 5.530586762801333, -0.5988771421199461, 1.0190773713387666, 0.3859804233201449, -2.8379478636664066, -6.188182474205623, 2.15774841343677, -5.629565565008734, -0.8104494334477924, -1.4032922525314449, 2.999136358832119, -8.3690660327816, 1.153856533439109, 1.340214495417186, -1.8354505818041233, -2.5282149839508277, -1.6470017920970885, -1.004745483836068, -0.049778153629341015, 3.0166804111937457, -1.9082565229142952, 4.552452432865365, 2.3773028159032528, 0.369667419345719, 3.7308556813478697, 3.126379112623141, -1.3924798427191747, -3.769704301941954, -0.9052320510263504, -1.1391624345985971, -2.3322151939406552, 2.8137741258091356, 0.6612060341667267, -5.056595013203945, 6.927495489667843, -4.317983887296771, -1.1299796726321358, -3.0313845826532786, 6.2982601901425355, 0.4406935751557952, 1.3156338701022197, 3.363915766083217, 5.266869936327973, -1.292234500008685, 5.278511608636486, -2.92009046023802, -0.49206509873923265, -3.186895649688129, 3.2885733908758237, -4.968249904717411, 2.6826871436067607, 0.9012029699766553, 5.586663478648101, -0.21305099526549953, 0.4614151308286518, -1.043822388307957, 3.1265752097868384, -0.8981258945103521, 6.414877599475036, 4.17990791320506, -5.6352454953004525, -6.636053725612751, 3.0180594063836494, -0.9597713478154363, 3.551597008053835, 4.341045027667095, 4.4606303569592765, -4.799678365836172, -4.4231791743585145, -4.053490835695829, 0.3343044534747637, 2.452374550522753, 2.163656230044865, 2.8015541251452136, 0.4874335431464434, 3.0313497521416313, -5.488623328653485, -1.1502607456892255, -2.877462748746513, 3.2568232595415694, -2.680903848194503, 3.7239115369071083, -1.0687508596150148, -4.444531298685995, -0.5750629389043319, -3.83863579197451, -0.7644346036976188, -1.4971598509326893, -7.219796594791916, -4.444678688875598, 1.7848485398305884, -0.8947391785881811, 2.832702174488956, 3.45134373376008, -2.606617962689884, 1.0700163572202337, -6.086736537792509, 3.5914939621603885, -4.040650328894911, 1.319705031872342, -0.038608385530251366, -2.6768284441956904, -0.9295154326485059, -4.209058176047481, -1.7413170693857667, -0.9900090953370178, -1.3785864481629333, -0.9277801569754425, 1.087139258323977, 2.8616292139709287, 5.350442694251725, 3.8503228479603138, -0.4754406890635544, -6.920353771998064, -4.146470888958129, -3.035609859564459, 2.0504474650822946, 3.2248796321346456, 1.8060617871124989, -0.2072382287294392, -2.6992547420106296, -5.056683316880343, -2.917845926550699, -0.13748875033396568, 1.6804345657146706, -4.021529672614861, 3.2450270207507064, 4.624823956596522, 2.5126365763205603, -0.6531008682203882, 2.07267730334206, 2.2743089144974027, 3.61054430327556, 0.23255836749746583, -2.4763532516854716, 0.24810548373343222, 2.940087423952928, 1.1144218523354903, -0.42719285826010356, 0.731110900286805, 0.29367758316444115, 6.228114822687681, 2.5010734392568437, -1.6359341290790703, 1.2967262656392577, -0.4130666671753699, -2.092607554103023, -1.6543505341229507, -0.3200077599501412, -1.8880439510842866, -2.2976125780228225, -1.8912285120857466, 1.3236530177595558, 0.4163015235824892, -3.932736142534732, 1.7638642747267355, 0.4431572332127083, 1.9622592038096842, 4.9413596704407485, -3.6985355155979986, -1.3840989451776284, -2.2681018877927013, -0.04271916414290167, -0.4289776058143052, -5.530377673481665, -2.416247014730698, -4.786314009515127, -0.9506792946674767, 3.125500446071406, 1.4228117417852149, 5.312594366623949, 1.9052838706304387, -2.7481584574117077, -5.306317482846254, -3.607687426064417, -4.230118298953476, -5.198076770039713, 4.807556178306914, 0.24287970093847533, 3.200229985293663, 3.718531562769421, -1.7329233715041237, 2.981325277469024, 7.387255668045512, 1.2624061793671832, -3.9125713835042886, -2.7194661567348497, -4.022787211686991, -2.9167480842293436, 0.8864612351815475, 2.0079667764274243, -0.7817338985463946, -4.274681649476617, -2.798545293778032, -2.3402261116305594, -0.8876761184417101, -2.55874430594027, -4.315071910208335, -4.136702592180086, 2.1687612930950073, -2.2818395735288837, -0.20038580782394255, -4.868801998983424, 0.5237951583348188, -0.27992067805807674, -0.26153345746602974, -4.4638533472978015, -2.32685443384001, 3.1573014826486796, 0.5600946313517929, -3.5074358646301027, 2.6731888934722594, -1.6424159142545731, 0.3096084625174633, 2.825118197058212, -0.874436615482408, -2.664367679470656, 2.669283832262458, 3.5915071979869344, 1.2613836084337455, -1.2979342094733892, -2.1519054777506534, 4.198355670009777, 0.09892039720286894, -3.0743437643501457, -1.893408353783213, 3.6908511330844096, -3.3431680002143773, -0.3935701680844548, -1.2429979267934104, 8.737739355312328, 7.469664030992954, -1.7852182299491344, 4.329590301438378, 1.6481514747834747, -1.6220372695982956, -1.68683851839532, -0.8390803389009778, -3.257440248683314, -3.012590113071092, -3.504135910246838, 1.8026065210289723, 5.3297138371146495, -2.339992736226567, -1.6741725947171442, -2.7783511164462267, -2.9828761309031, 5.429997524357573, 1.0987663744031257, -2.373460116217001, -1.6917205699437992, -1.2169824882829694, 2.4548311659641486, -5.140743880906972, -3.9621096487522864, 0.8030858388424806, -4.970578865787225, 4.601094467412686, 5.029913273257105, 3.1030915423066237, 0.07917442994098156, -0.46073050130888915, -1.9568439184743722, -2.3796553647442096, 2.687328316884302, 1.3917799074050445, -6.500410390907507, -0.5993512410560171, -3.1537227884123427, 0.2680262493765291, -1.212306653801265, 0.6330529837798684, 5.170093969186138, -4.806113906900146, -0.9111953286958607, 5.2622764034305245, 1.6147169969543964, 2.852202272698087, -3.1185821471289024, -2.368560599963568, 2.023535779720495, 0.9672919385512722, -1.98290532780933, 2.253398331831632, 1.343181554031875, -3.852721935254796, -1.127914162747823, 4.284356913490598, 0.0861343041891911, -3.6066770586344976, -0.14396651209262723, -0.7875675328045555, 2.3390961233675833, 1.3823118769327563, -1.1914957616327797, -3.2972561999157937, 4.328620484235962, 1.7334473854276427, 7.730010840899389, 2.1173881544276316, -5.5896137375578245, 3.3429689737655472, 2.149618123252078, 0.955565048083592, -6.08172853239841, -1.1839691265709336, -3.1133666032336764, -2.7174948354829276, -2.2676670102221, 2.760656342850193, 0.823613840174152, -1.4849638546621848, -2.2641915313239798, -5.416329103199508, 1.5380203155337178, 2.644687525141453, -2.417527673958621, 5.016012527986334, 1.5128486263971053, -0.27300684708049383, -4.8290867143577385, -5.3583546665754245, -5.7750166337860245, 0.9972975244388338, 2.203578180837625, -0.9921852042382182, 2.6439762628823904, 0.02387232476770862, 1.6857122571146164, -5.109011520625419, 1.7968821889062925, 6.063774089891939, 2.2575264033996865, -0.21314628203973252, 2.315976093150063, 1.942983848809277, 5.771366178715778, -2.8366177928509577, -1.5429563506266541, 2.3372105393454676, 2.587897956196938, -4.815749847191331, 3.283311304295192, -2.4722869083089414, 0.3430416004266317, -2.56382015483911, 3.3379388438924815, -1.6002950195152952, 0.7675156949391815, -4.423221428797623, 0.6810777543875304, -2.243175630066885, -2.8906340028218005, -0.5285896397807744, -6.657246588763035, -2.0737633981962356, -0.6122512950794683, 5.027882580167757, -1.0633591301087844, -0.4480296287461143, 1.6931451956850365, -3.6479753169225644, -1.3540382971652964, -0.5575419939038477, 4.1814069153879405, -0.8186664411952549, 6.988240615977302, -6.056400177420894, 6.375129940227157, 6.138599682185035, -0.16763215542825172, -0.3612886043349418, 1.2639344883730503, -5.709521634660305, -0.6749566286245553, 0.698569866363526, 3.980834423750818, 0.9630348425862945, 1.566585276997233, -3.6056827202291997, 0.3742935463406485, 6.032542070432554, 1.1009491377096303, 4.427142070023348, 2.380937926962906, 3.262138510969929, 4.857401889804382, -4.066339924869538, 4.30311487257343, -0.2801703807088133, 3.105814994234346, 2.9972282123451137, -3.878906937986293, -0.09584892292357172, -0.15638929311154393, -3.17681117632542, 11.340138304715383, 3.5581853315626706, 0.4972026483574916, -2.16360978817132, 1.2055853776759808, 4.984313865081335, 1.9419803159606377, -0.40172943072876544, 5.186331354422708, 2.306061711092398, -1.6160790239715677, 0.22922562057104767, 1.1757885280835438, -0.06304786778994442, 4.94600758911247, 3.650049502225831, -4.526220604203382, -1.9585567636946224, -3.594572372949324, -4.896888906315908, 0.5446260195899788, -4.607598324974273, 2.2277691448204635, 0.07467163790535114, -5.786638521337393, -0.06982747534881484, 0.06804352638923605, 4.127661655160705, 0.5362765876150493, -3.913467881848323, 0.1804554150026363, -0.43679046922003106, -3.084219109010437, 0.587726349636706, 3.035228049450037, -1.4295356145568756, 2.4241085582400426, 1.7798457890293582, -0.9645175450744325, -1.2851002583019282, 0.22746829124218237, -1.811264780818997, -3.678727285289127, 3.6934972016057808, 1.40018958304127, -0.8197299717388156, 3.1095311065941376, -0.8267060568514344, 2.5337968502311066, 1.0979074068171162, -2.11209566542387, -4.047349697827346, -4.254325452130908, -1.6771242419091499, -5.059227019517798, -2.749789506446123, -4.984002917817473, 0.8753000878528452, -5.279411622323393, 5.633787663358966, -0.17496678836643942, 1.132453941146573, -2.991363966572653, 5.3950879131825245, -2.6986820367213986, -0.42187851282151834, 1.1853653712301968, 3.055813715834338, -4.418321283797745, -6.8359729978035615, 2.0405992723160153, 4.0108626802518526, -3.261256307023133, 7.16213469957315, 0.6441968977887018, -3.2381285536059536, -1.9300336246745076, -3.0379332935835004, 0.9311565796280672, 0.9659183178748636, 2.441738480976139, 3.709229401533693, 2.7722848609363036, -0.16188853698949335, -4.726210980422105, 2.3174747621581444, 1.5698836411934245, 0.4237576774966354, 0.4770210366681009, 2.073461890813385, 0.5302328852917761, -3.8583057295584458, 5.76804777759586, -4.811594293488129, 4.448960037879248, -4.713081979196821, 3.56630279451117, -0.8099264972670601, 6.85339668763435, 0.8853172061658727, -3.045975080350064, -5.667030473068128, 1.7491256921618175, -0.14125186043689408, -0.4419158446807352, -2.5603676992395616, 1.2805266299704519, 1.5547534872172304, 2.146185402954898, 3.7318583950874338, 2.7482018184660193, -2.5031541514938023, 0.46487307467874217, 0.07412893428572609, 3.0487666117065704, 5.5960049375718075, 0.6030887189084395, -0.2977621126149286, 10.33295530928567, -0.4190345207800663, -0.34714446033957425, -1.8317048169927548, -1.4387881095035902, 6.613294608230602, -1.9273402084115654, -4.233845481562577, -1.1483574779340777, -5.840763612874947, 3.5732734740785776, 2.666284992252983, 4.575645787513283, 4.861586884098387, -3.2969141577429406, -0.17913735772759454, -0.011919925151076649, 1.4815592199868313, 7.958418339320019, 2.405096258635745, 2.7974919002896383, -6.762616143537229, 0.8635683953509607, -4.467173672133015, 1.9102926509793834, 2.2758037519797423, -0.3917544676689697, -4.68012387163562, -4.9106928699880354, -0.39328356815088106, 3.1341009532678914, 2.0017852813521553, -6.086148153784099, -2.3943937849526042, 5.071931020917747, 0.19279209829183985, 1.0917774436336303, 3.070948856857468, -2.5566683372681887, -0.5544582603326589, -0.06978112386387725, -10.20140969419449, 0.2738157760669737, 0.3027078342915068, 1.407004020049881, -1.3129234942671395, -0.7812840139186588, -2.3208356785489546, 2.475739803002101, 2.6659121704900146, 4.705654776283901, 0.04957412406462636, 0.4555540296308367, 0.4267136775109597, -4.109567782722583, -4.42172693499432, 1.1739225292977125, 2.059573044103163, 2.822364082176442, 4.074631803278603, 3.5869229800498914, 1.137639463803902, -1.6066796919779764, 1.6971091114126038, -1.3163307550311951, -3.7453344722709327, -1.3851082421923147, 6.531790272624599, -2.798946946962989, 3.36212330520958, -1.4435189033178517, -3.803499468053386, 1.2058562733337714, 4.730035469644549, -2.13455221546441, 3.970202451477655, 1.6785835426239641, -0.17135040315358652, -2.2582867227141654, -1.7206736182495634, -4.258820163282394, -2.994556614089895, -3.980777838993672, 4.96433825217218, -3.491914637883643, -3.4098669087060474, -1.0340210245749732, -1.3711136581882732, -4.113247361190483, -2.634633863740869, 3.2809991494828328, 5.348797066518341, -1.241259555492842, -2.5879256581338757, -1.3734030859584225, -5.213850212550895, 2.722810530258923, -5.605523027469562, 4.951428292467414, -3.1977942438917766, -5.055817209565843, 6.980679919489895, -1.0464051173201387, -0.32120517798383597, -7.387203591914924, 2.3090477418165354, 2.701846592476241, -3.1920298825102846, -1.0602168459271808, -2.8293386757798302, -2.944414131923466, 1.5531676505357601, -0.5374245139782072, 2.744579058079558, 2.354695696114841, 1.9761798600662472, -3.1539819273701477, 4.149733768217306, -0.9289080291395816, -2.2548039400570437, -1.2493294461101583, -4.450840572340102, -3.463686673374961, 0.0033042412728772064, 2.4913172518938653, 0.9195384061712599, -4.486385773942304, 2.2215478778615756, -1.0189371786247574, 4.556199468661112, 0.458341315439184, 0.5586747935301684, 4.430479696997828, 1.844808843086776, 1.4094919227536549, -3.2155865259130394, 8.745709277199628, -1.0216244232738365, -2.460189628192377, 0.7973537871411225, 0.13684463299121652, 0.5460219537220923, 2.3053593573281645, -2.924870515956213, -2.1039161044128076, -2.4541451187506267, 0.13183939662583644, -1.004774845197399, 3.0238729039453807, -0.37749417476753244, -0.6717928030906618, 0.570464717467138, -3.106248387738018, 1.7304385459688558, -2.443679673481302, 2.8131559226045075, -2.971359442665862, 1.4791613388016827, 5.4376518118373465, 7.758772478538374, 1.2453014697885818, -1.772598042148861, -5.994189801946628, -3.658162213172014, 3.2254303767735877, 4.02227319395393, -4.452564871827838, -0.5127546804135455, 0.2995268055796412, 4.469076899095223, 3.9594259272900603, 5.267888730589495]
BIASES_LIST = [-3.0919350192181856, 2.3188992582073773, -3.5017844419726982, 4.324254070901647, 9.231013248095213, 0.8683578349775263, 3.656498682690316, 1.1595438908239881, -1.9146231489502914, 1.2625945863293033, 2.278594267056606, 1.2726291736571445, -1.3810768354335172, -3.445853488182899, -3.20245749557143, 5.343150799184096, 5.215501752305037, 2.7617921069032847, -7.508060186863582, 1.4889351735338447, -3.8149366672439218, -0.6230230931166245, -2.7165657451524994, -3.2212832408624665, 3.41618961751392, 2.8246550206706593, -1.998809608689079, -0.5091342392668745, 2.3224553005721886, 2.3166232723777966, 0.08039569532610669, 1.711632746394511, 2.957941745591908, -0.08534966341632699, -2.1781536474233656, 3.4483663823570234]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

