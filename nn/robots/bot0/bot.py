import random
import math

WEIGHT_LIST = [-8.484154152350026, -2.6691461895930235, 7.309104524458808, -0.5486954748392142, 4.002306951880014, 2.177219928393147, 0.11331292255451342, -6.963238858856432, -9.470202146851324, -1.3284805582837278, -0.15325855773568964, -1.818761089868378, 0.06852254000189861, 2.1516383867985462, 0.7634174663784787, 4.072894465126322, 5.277751612598918, -4.839532692544953, -1.3489532042807495, 0.1537360860887928, 4.10424017188934, -1.355898173559356, -3.562579378878248, 5.5688356457575265, 2.0233723245448214, 4.835214783433363, 0.8323928746168692, 1.5424181800024637, 1.2798347110607948, 4.395221605696671, 4.138191392410154, 5.254933680306262, 1.0454317715433974, 5.384138277699163, -1.9927873145817636, -7.143327576942805, -4.046072130114112, -4.821446140347798, -3.7026602771372663, -1.6517483614982025, 1.9007607124708659, 4.508186475868156, 3.7089844771125233, -2.3330787881945363, -0.5275356855981959, 9.289651767469937, -0.019636427682476476, 1.3377803864725493, 2.9878578179929085, -0.6175613985656603, -0.7043129185371024, -5.85091685909101, 1.3831541589261183, -4.995474804186628, 0.13284049699643097, -6.216606672798619, 7.995270797230905, 0.4868986873481679, 3.867146259626531, -0.5205953978400784, 4.41449336300718, 1.8573301146288772, -4.893846492745375, -3.1822986288035207, 1.2504454768784703, 3.60813891846501, -1.259673532337579, -1.9057453439503553, -1.4469950818871127, 5.875074806351968, -3.097825615268105, -2.0754586849906076, -2.3367536696181745, 5.0550465217830105, -1.5604802068623014, -2.498581984708175, -1.8650676026168478, 0.1685950699490189, -5.539395363218119, 6.204300086144891, -2.9837741463810494, 5.365518284713162, 6.0693071183575125, 3.7410524421402447, -7.493787750706675, -1.836501639592489, -5.949889423255664, -1.666686871166311, -0.98605197882916, 7.769567501673743, 7.293515559228441, 3.6262416833770077, 0.9793103497434317, -2.591020004560908, 2.973449844144933, -1.8879298142106966, 2.552941570408564, 1.0620523047887336, 5.956441587281863, 2.0670702297681793, -1.3636641663282447, -6.508563316320144, 5.95763761652975, 4.409755363708795, 4.443631494947164, 1.846420322653834, 2.6412207407707102, 5.423876294963756, -4.7088716362098815, 3.8475811438317074, -6.558409182891176, -3.269514783651459, 3.503681050630726, -2.7102777548809223, 5.746911132073529, -2.7384686956381086, -9.683182768136474, -1.595396663146293, -4.404261851904409, -2.601664214506512, 3.3721488703124263, 0.610558867526324, 7.615898239702322, -0.29418888045318503, 2.5631246639701994, -0.1795993588406996, -3.146258866493901, -2.716003116081067, 1.0387263824203572, 1.7238233235031104, -5.25660822300806, -9.583816484030908, 1.5932702146054813, 6.000980893866844, -4.714670473845658, -2.040131894735518, 3.831611503314277, -1.0616377509084314, -3.5096431516659146, -0.2648202069604707, 2.1893621519474658, -2.8789617220773436, -6.980806060452186, 6.7705371699661825, 7.285397883441369, -1.5981016307347051, -2.317965263506376, 8.110768852099397, -2.4854748796192196, 2.49200556969857, 1.7041673329477485, -3.736331231026097, -7.016245431413258, 1.0938770425778384, 1.1592429565593612, 0.4853257728258079, -4.00708396217167, -7.147089474503558, -5.485149661701283, -1.859979557025735, -4.929628287410625, -3.957692404215156, -3.5101804536495247, -6.604823834959884, -5.5830992834576065, 6.571459275309905, 2.0906801084825966, -0.05916396800852747, 0.2565807461927013, 0.9505396473736232, 2.7965544574442425, -0.7140808431661545, 1.897857914086504, -2.75463510901204, -3.1060959705316202, 1.8114931216807606, 1.180248633628985, -6.330880033215243, -4.634139491684997, 2.3130665451773464, -8.553351857433334, 8.771528415651861, 3.580586597772181, -5.485904000131017, -4.050260526659532, -0.8005590116576979, 5.300761361621857, -5.250269778547567, -5.072474297158537, 6.971994714637337, -4.82260344188943, -4.970842293178331, 4.6387609011593, 2.7068810088622217, -5.701042281738501, -5.260846213234808, 7.013657685403136, 4.197642156814581, 0.023318112365855626, 7.319323516516744, -5.3435578301391935, -4.189414511273952, 6.245368203832783, 1.0344817873118979, -0.5513365096687768, 2.8346550970453457, 3.535758944231228, -0.43364873002827703, -6.942169267122509, 7.31779855508585, -7.366499679611616, -2.097706486165524, 1.6284343087822004, 6.824965384115934, 6.281193494085753, 5.698766972587595, -0.6936414724512375, -1.8278491147200848, -2.7895894603778597, 0.7448550034022812, -2.248828916366885, -2.6718537823959725, 0.7074623400515767, -1.349569162772171, -3.888067807393559, 6.101024402611184, -1.0648576664137257, -1.5462777155683418, -4.14322366687873, 2.8005466237239505, 2.7984883525310664, 0.6029670043430626, 5.639162165234108, 3.465355943608742, 4.272390938605184, 0.4905170768670437, 5.581112210699695, -5.664698029302106, -2.8404740641718753, -5.1993590337900395, -6.1710068329462, 7.2935144532000775, -7.00445467494991, 1.6697777358543917, 0.5159172008776844, -3.2581753480003903, 0.1712411162696411, 4.255413138814956, -4.188406437941382, -7.848012317643664, 1.9147755517379474, 1.7146257436448242, -4.7488632054689175, 6.220463535240004, -1.4184918899576968, 2.118237912418129, -0.865957363060412, -4.446806904485679, 6.426657909108363, -4.181172544289057, 5.740806656644413, -3.9615514506998624, 2.690623736601099, -1.3879833302426272, -4.859537119338929, 4.536297094480872, -2.551885099913763, 0.7696717054088806, -8.41141291618444, 6.6506483227022315, 3.449928218187838, -9.599912053435043, 1.7601398492585618, -6.561777686446076, -0.43490281505766076, 0.12178689670047, 5.4355173779167245, -4.424502009542926, -0.7846820293780316, 2.3745821043855626, -1.2736069263169316, 4.266168821333189, -5.980714986714518, 2.423926025362379, 3.1988663047255232, 1.8233546369771725, 2.0611010504140346, -5.944218445134053, 10.698799656070376, 8.986583352367788, 0.7096568352319479, -3.9302702569884893, 5.929652760544517, -0.4271720637013295, -1.1525749091669666, -6.2676009597112285, -1.423499776874263, 0.5043617525739212, 4.841838199487264, 2.4586268309347212, -1.4035453530045772, -0.2164805611941039, 4.8953841360670625, 0.15274695578653913, -1.7816486488820389, -7.333282710516889, 1.7177588998816526, -3.749890566180124, 1.477000572533971, 4.1502210425213715, -2.497488971117509, -2.425331079052083, -7.865405239206052, -3.6921421033609314, 7.71493595070118, 5.7450046025761585, -3.261949606693155, 4.271500201524033, 1.1247804831409618, 3.346245784434539, -3.31688332459525, 2.4963083808708144, -2.888328429490775, 5.657709944004505, 1.6117064943327786, -0.4291135842580737, 0.6275506105295683, 3.832102140515766, -8.052783169330274, -0.7223542591414973, -3.9045955163554553, -6.944542826857714, -0.6721738548302194, -3.893862590106428, 2.732057581463537, 5.00000655480759, -1.20583398400986, -6.851756622667425, 4.9950432795721555, 3.5075336676436186, -2.4308346693795277, -5.58052827898135, -4.506165538022163, -3.4314387973756224, -1.7618711560055904, 6.982149600384043, -3.5480878798014306, -7.027372419829393, 1.7949298059574619, 8.913787599671867, 8.990440687842986, -8.663640850032737, -6.877773796876894, 2.501560127933414, 8.020349830274728, -2.86354184700954, 2.3300152943091486, 7.253532353017289, 6.281369080173672, -2.235479142006774, 7.269760322051368, -4.337313280759785, -1.136234723883827, 1.7854202809744963, -0.9641216376733376, 2.5314505110027303, -5.319634901248575, -5.81688369339512, -2.0163696528280335, 2.331962476591988, 7.865687284517396, 4.1903174867139965, -0.13112327385984562, 3.9376448001711086, -0.11725503642822066, -2.3983775068951356, -4.745556595568016, -0.9571356082576503, -1.751652184335282, 5.20937889234118, 2.013552993713285, 2.857310895016111, 4.0739506544665165, 3.377584400379892, -3.400591404665086, 2.127676699660091, 6.081683763625685, 3.4923972727731765, 0.5281652877590644, 2.1233437706836686, 0.25695887591530764, -3.5267572417526796, -1.2158544353879743, -3.8371035809219003, 1.319860593416601, 1.2575301901095404, 0.15924734610769103, 1.7736291209097845, 3.167952978060403, -2.615642384214109, -6.046991219410152, 3.0258403112617027, -5.8705339705018185, 6.462358789702775, 0.15381948896201042, 1.4268073838749555, -3.8417541246218643, 0.5338233935334948, 2.6661875367525787, 3.03097419772675, 3.03994913581363, 2.9261372922340545, 3.6480010216976773, 0.20388493233356791, -2.23674996456907, -2.6229242076497563, -3.0698726391498874, -0.15137126639945303, 1.3854272518305204, -0.8691928760850967, 0.6963584195508604, 3.165863538092661, 3.783967196191127, 1.7640178867641279, 1.1076382406797947, -4.781095495405822, 9.168545490993747, -3.283182979307008, 4.832965941182977, 3.896639895911915, -0.24377772054176977, 4.839793675422989, 0.5568566883537621, 2.8572153117779795, 0.5612596183183294, 3.236610279387501, -1.4719319936129334, -1.0297623090980488, -6.301079036175357, -7.9097678028915155, 0.9803453862676301, -4.004367829420821, 1.7067884732230643, 1.458847831561441, 0.820270913365138, 6.803496454850442, 7.343425975803605, 2.7382666688835045, -5.885416046289039, 1.3683747472825785, 5.065287475807239, -3.223444440308287, 2.850843529200773, 1.7938829666745484, 6.0897993237651225, 0.010061719996605323, -4.13013556535434, 6.768275251920061, 0.187542388856773, 3.737263179238941, -2.2210582833357897, -3.5987369632028714, 1.006474095656214, 1.0946512355106606, 3.2867555610789747, -4.3682998841538705, 5.393221014003058, 5.918869056710837, -3.593478137858795, -8.062268618559983, 5.101125724635135, -1.4437381978470274, 7.062630160184016, -0.23526427747756526, 1.4652852501171636, -9.335257568423694, -4.718463907905499, -1.1975237479124874, -1.529680369161115, -0.5359211272805097, -7.040978667052219, -1.0405342261288508, 7.929739907916463, 8.004532821795841, 0.33522708713814453, -1.112217973191361, -1.8107193111087185, 5.444133428195104, -4.262064677048305, -2.2609281793171894, 3.97974786954949, 1.1419288382347133, -3.187728981505959, 5.339126841207467, 2.062045563267931, -1.2060632743489272, -1.5805854029080946, 2.1777631944525844, 3.1697293346077307, 3.3340384548515964, -3.276680233201057, -0.42264401986046474, -2.3948744897613077, 7.308238854216589, 2.870867965766857, -3.3887411457853718, 5.192548136251913, -2.0679893638446947, -0.637220450132343, -1.508720363519634, 2.1821073048873987, 0.24533039551623864, 4.013191030233148, -7.257412374622209, -1.2220535998231659, 0.3056222118454429, -4.202387945806908, -1.9089239136645761, 0.5218513058296983, 2.3724116025609736, 4.241477775330707, 6.010698831918302, 2.291266286772737, -4.633927362623915, -2.6049842044511835, -7.654916204932805, -0.11602681185468239, -4.132001153245655, -1.1094336479560454, -2.978139755128861, 4.14586133170461, -3.1573293066341823, -7.08951147370231, -2.9184982337048986, -3.813308913823805, 0.15801462947627826, 1.7201100126121258, -2.010486644719696, 2.5359986999387054, 0.6210729035278835, 6.8606527647442554, -0.9730895645697144, 4.2481790348131065, -3.704151189529412, 0.06207514912608353, 1.4348474397170001, -7.663422915429115, -8.157969639634008, -8.616683619599488, 5.798970130018679, 4.083539615741087, 2.18723784080419, -0.45206770572367466, 1.5548752756496163, -0.4129995890911159, 1.0110598315647388, -2.701493269665555, 3.9604142374138265, 3.4105115293761115, 2.481147941184376, -4.9974954550214035, 0.039236100973943144, -7.074995902590918, -0.5048537061977639, -0.42110597922104887, -3.466701842928091, -7.807704074077941, -0.7749396254686305, -3.134944047567564, 2.3190658224735228, -5.567207907669307, -0.550594264109417, 0.7148203888116839, 1.9149902700480048, -6.698222774728271, 2.768764029039883, 3.7911871244139492, 6.254051941338259, -6.01576564956132, 2.593797993309995, -1.8526997328995605, -4.864575889006766, 0.6104081000910677, 3.3153381608856405, -1.8045183489360406, -0.5111631257112234, 3.6891041557162345, -0.37135210348144165, -1.1622586559648607, 3.8243894983194506, -4.838231073682384, 1.3861475769329663, -1.0214006994369853, 1.310435231831756, -4.982624883570336, -2.071001408643683, 1.6000809459571546, -0.7842792350612577, 1.2998486964500398, 9.25505109097806, -3.912852322838974, -10.702995476172365, 0.5284088011149346, -1.319239230963717, -1.328171310757489, 5.602647090635094, -4.535977846731612, -2.9150467894487893, -1.7884443206570202, 1.852947152311398, -4.244961937461307, -2.7800823248906283]
BIASES_LIST = [3.9621868803371694, 2.3481989117095345, 7.108055333211496, 2.365224828977964, 1.7224703985264262, -4.069543446887188, -7.0319372840195085, 2.377844276269569, 5.148607810229603, -1.2096235686520873, 5.888353744751086, -6.7278154377214, -1.359821953031328, -2.0184529297513993, -1.047465369144897, -0.8646257762181062, -3.4902867939262827, -1.121613636388826, -0.09093225825451573, -3.7108328311176764, 6.225421091000746, 3.1732484343491585, -3.6517150234447495, 0.5337777252593181, 5.043760977171796, -7.4792247869141075, -1.6323209455324263, -5.797531105655726]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

