import random
import math

WEIGHT_LIST = [-0.3272433176457765, 4.66286848132105, -0.614471117040538, -4.118062323850331, -2.1885580454134477, -4.946555066896062, 2.7079548525604853, 3.3253755482512437, 2.3853916133581556, 1.5053046667090415, 2.7662192407294546, 0.2805159789945999, -0.9908670878190895, -1.3576043514567304, 1.223582480054369, 3.396102538340621, 5.203277630613489, -4.011399090361245, 2.9815102763003365, 0.4453014644653097, -0.16735006275794984, 5.4701994438543995, 4.760680396467616, 3.482866750019882, -1.7552493619950014, 1.9776079889135385, -3.645552470229929, -4.000121641424682, -2.8990735176294855, -0.4545376125194581, 0.21101054128261842, -1.3865045229544066, -2.323726283685003, 1.2951449991718023, 1.8652012271839649, -3.7118278430131006, 2.51566236114785, -2.6048344563060875, -4.154705343345398, -1.3653240342615027, 4.525523726906798, -2.0705540637222883, -0.7971043418546162, 0.8276678355068943, -5.618137678469866, 7.679806256028247, -6.980633765490405, 0.2870599520697352, -1.3129695280399245, 0.21410534718213414, -4.470510968565895, 0.6221721007461305, -2.939980994602606, 1.5448260074410145, -2.504481225840353, -1.0593489012836699, -0.35559022294850895, -3.8898150777098546, 6.2535641253053695, 7.909565459223703, -2.7391419326173017, -3.9795869366449326, -2.781891555558747, -4.075690555900934, 0.5154210897955864, -0.8097887560349054, 5.557573441899706, -1.9778959066598345, 3.4108107611795138, -0.1290838752799096, -2.4363304353777506, -5.910558558275479, 1.721249476054922, -5.902666786208994, -1.7809569406140893, -2.9884023107741506, 2.741501138327907, -7.77367619464932, -0.1402147028434657, 1.1046142858738834, -1.8844583121801008, -1.207787693052142, -1.3517388220222846, 0.042412053823411844, 1.1475623988044328, 3.550191901398721, -1.7426818033179277, 3.136164554093371, 2.9566360458850403, -1.1344245387054976, 2.8212646206092535, 2.787708967692844, -4.616784213815745, -1.2608089510824003, -0.6823915295241599, -1.51833674472937, -1.2368289491532996, 2.637265376691274, -1.55252573723309, -4.958635802630368, 6.469148248169135, -4.086840385861008, -0.32951380173674694, -2.062313371934411, 4.908068554131919, 1.6077494899133349, 0.24312932889500605, 4.468173878890349, 3.941442260731625, 0.4690376472699156, 6.344394058689191, -1.6677325172279365, -1.6256680083457609, -5.371656552313309, 3.540066916768291, -6.213586806773538, 3.658411242728885, 0.8711353210451207, 2.8116646243633405, -0.6038820044044599, 0.5493437429378902, -1.4116879232724036, 2.413871958994977, 2.1856326846816883, 7.523392554977963, 5.195812056729828, -5.030719177647075, -6.704347821731204, 4.101789161644909, -1.1361284187781415, 3.183801704153373, 2.8249917003691314, 4.764143751953619, -4.263153970284025, -5.330723512532803, -5.3908907942774915, 2.606006646216427, 1.9564745399928074, 2.620426410840757, 3.7124192838119727, 2.7966515499368, 4.344058714991915, -5.848375389014167, 0.01900401915258998, -3.663570240734848, 3.1306399347164566, -3.127839534963531, 3.1420387584813403, -1.5984020734130908, -5.5705502020945055, -0.893736705919238, -4.982156557755966, -3.903541139575761, -1.1549258902825292, -5.972202864316958, -7.200233932687391, 5.017361918640051, 1.8820028526941668, 3.7904087405030307, 3.1633216493718272, 0.15502429926103578, 1.4807709216204934, -6.714889585667253, 4.799197019425528, -2.1594951058744516, 0.2055309534571348, 1.9423471353195958, -3.7975905788150577, 1.6797056364625358, -2.4030076639665428, -3.3384753472176723, 0.23814611175857547, 0.5331868899127961, -1.5493284413693191, 1.792518034582368, 2.9470692456003817, 7.867242490236412, 2.6300538703634206, 0.5467312280878511, -8.848121864808311, -2.408414957600284, -1.744325179271794, 0.9257537158761435, 2.4184201477069442, 3.2928674717700313, 1.1231292475894303, -1.7239203473565887, -4.152520932795321, -2.9453782172442056, -1.2522013786590558, 2.5089356219544388, -3.6595553515494452, 3.774297695726222, 5.127247835153042, 1.2436798035093113, -0.16490433300677398, 2.2891681225139227, 3.4297510239837203, 3.431407753983521, 0.6450638972092606, -2.1117068978396354, 0.44951180578307826, 3.7349632330520777, 0.6067353616816238, 0.4173271691851821, 1.6900821533814874, 0.5176816388772849, 7.277583914207495, 0.19485416513337683, -3.563942922255454, -0.05276863663910436, -0.37688542576528494, -1.675828200250093, 0.1334309890724963, 0.8024227582547767, -1.7119990207908826, 0.22338651055844672, -3.413805987400451, 0.43598461409785516, 0.10494433621721999, -2.892827152270713, 3.096805797030381, -0.9045299472436115, 2.41894534720221, 3.9915742397255647, -3.8690209311428965, -1.9864163335327703, -2.216404998858571, -1.868530460823927, -0.2893779547132227, -6.799414963277664, -0.62975950465714, -4.706769961802664, -2.955745520377638, 3.358674019887797, 0.14266579034981053, 6.747216588001099, 0.7737917187936971, -0.45080662578223385, -5.868130773389661, -2.6107323879994686, -4.380590908914483, -6.064804593910495, 5.5451646113090876, -1.8677764902051246, 3.355044025907757, 0.8147702275142001, -1.7118344343884782, 1.2905922341888285, 8.410671661219709, 0.8722464511481269, -1.8744150124422578, -3.942746263096855, -3.6883829366114824, -4.079993866150286, 2.0739586181616163, 1.6459258440007574, 0.1958039306497601, -3.618941675408216, -2.705557343176843, -4.9079192950090516, -1.2455162883148172, -4.0834274303378475, -4.2112633970108355, -2.2744541796630013, 1.6708503074293768, -1.7955040502844688, -2.2188473279139744, -5.717452133365285, -0.86878956376532, -1.4852961208036162, 2.1312861672646655, -3.3465905183727886, -3.18078118925607, 0.8794448814061973, -0.3151545985892483, -2.5199615692481485, 4.0340900417498045, -1.266077215787465, -1.1855849600461354, 1.4745989590175514, -2.0599919640852353, -4.610633227480042, 3.5913086258563593, 5.432851320261773, 1.332553847722675, -2.7269098163244125, -1.204176861794552, 3.7511825552464932, 1.2875849687177725, -4.163652877217997, -2.863642523644055, 3.8427735736861273, -3.4294303471755523, -1.4146400858488697, -2.0840062849397043, 9.79626401715076, 7.111280787970861, -0.9012781707945208, 3.7200645703574295, 3.2293196069555883, 0.885362966831265, -3.6008528497860395, -0.6825562366981863, -2.7179688532599102, -4.607815488072861, -4.391422695381142, 3.2123272152921203, 2.9117595380439125, -2.0928733351414825, 0.8754549895947044, -2.749610856264919, -3.3311668154176757, 2.9402336768250867, 2.027677538077363, -2.9353232337407986, -3.121120462449895, -3.0800785516914155, 2.730018383252707, -6.009463863960699, -4.027690830422492, 1.7331607592605236, -6.563674865827806, 6.5284160287882305, 4.701360391868439, 4.769346605057392, -0.8389176591758641, 1.6333143186968435, -1.3485363870744673, -4.168379563206914, 2.43559671608966, 1.4338886700276077, -6.325053256370967, 1.084645158932454, -4.305164859225718, -0.4054371283513015, -4.092765608541062, -0.42609959205799086, 6.234981176758139, -6.7225931482522405, -0.8550281647030051, 2.796827088905857, 1.6261257048090174, 4.3797600660802996, -5.760787952942786, -3.5091214716940833, 2.8472941699158874, 2.5119593722332776, -3.0408408042112014, 1.9087828354080494, 2.9439753595123284, -3.4612790429159386, -2.1204872701505346, 1.2365316994231748, 0.6823428537090743, -1.9284628825234824, -1.3637694686331474, -0.8351945905959548, 3.826567636229516, 2.787228875145677, -0.7886885107202459, -3.3001288499656427, 3.405614332143201, 4.680538505898892, 6.130785564726174, 1.3496735072888675, -4.201511163582723, 3.803335268190547, 4.130091677651877, -0.08970079468532166, -5.9916952774894625, -2.4576339289857905, -4.782735599592507, -1.231246776843174, -1.7015716772983882, 3.322680411362014, 2.538537563057157, 1.2434812111114573, -3.9700342113945157, -4.822891722855836, 0.5889763691216725, 3.1709266179905216, -1.0130515400963707, 2.4410001860710184, 0.7271508020437185, -1.1019616575293874, -6.058609181102334, -7.002485336997089, -8.256574563868089, 3.7656038826618605, 1.7695958466664985, -0.990909010808758, 2.702108614418031, 1.0554247127788852, 1.2238121711491137, -3.1675536586426443, 1.1306096438593372, 3.981333575679847, 1.57026078169933, -0.8949037597873841, 0.6713403492286583, 6.052916903442918, 3.2729698195747687, -1.5136452979795265, -0.8878840735630568, 3.858801787295336, 1.2101326116311073, -2.574352749911342, 2.764282349897341, -4.402839693123177, -1.2784312186765634, -1.362657091683473, 3.699898731194562, -4.583996734489088, 2.591064354044262, -5.051697653914758, 2.3534770448151345, -2.6856282566376874, -1.7149324868377478, -1.5075961849400366, -5.932108180322894, -1.5279320963534992, -0.4295083052860851, 5.852224487622687, -5.07320122916243, -0.9798574697296634, 3.635264681346749, -4.007698247132332, 0.5132693817548206, -3.353289738395061, 5.041346397955101, -0.36348876823233167, 4.599316889548376, -4.57067072207313, 5.043854619542883, 5.234406347920816, -1.7019847152639465, 2.064914049482657, 0.6316472046759771, -6.226117453200199, -0.3754463682281448, -0.09536953671620396, 3.770841125228891, -2.1860166860236014, 0.5436309990926729, -4.526748668057739, 0.8821364338298143, 5.633399124949824, 0.8908089976402596, 2.4238644005801264, 0.2516358479478762, 4.388887080936428, 4.061721228519877, -6.190721493510288, 3.1509298727939026, -0.351613355325884, 3.7196252188078596, 4.942585749499105, -1.2383681318720436, 0.024050094562935387, 0.46719316848358505, -4.076318531569493, 9.572331051563184, 3.2227461205428316, -0.712992364555223, -1.1409321458547377, 1.9479750143627665, 3.2770873607303637, 2.1723245621290728, 2.571126359521883, 4.530718586092891, 1.5498466157758921, -1.097849668944487, -0.31065488121093476, 0.6068767314594701, -1.1600035308290613, 3.053053103956379, 2.7277998034984026, -4.54989533302208, -2.523401661117452, -3.2670961250820656, -4.256254687527752, 0.5529599124728393, -4.115660708978875, 4.3737163456227215, -0.6247509570553194, -6.011758044822835, 1.4851633925107035, 0.5692623740913669, 6.401747211857343, 0.3841930829618514, -2.829089590130298, 0.6286105730559086, -0.554650637066259, -3.3753304211938655, 0.618009779666207, 3.2139652653174435, 0.521994803399144, -0.4053824237747399, 1.12220891756226, -0.23395160492663858, -0.005423387951636327, 0.07945937314119256, -4.1259036995873695, -2.4877807224160065, 5.107031530212234, 3.0120253492948654, -0.6666156784858266, 4.351892195935477, -1.6821555597898956, 2.368396764861651, 0.14479158938476067, -3.5597479479457945, -2.8998943349894115, -4.863859526006496, -3.5438279142592517, -3.389630774213869, -2.2749581936381853, -4.92851110039998, 1.8706897964887537, -1.8742085726706779, 4.349673595700985, 0.21295631666277903, 0.6776249360848663, -1.140243121940398, 6.18697226642191, -2.3371088012459547, -2.619744977689499, -0.04861424351799404, 4.9079722063933815, -7.300693287540985, -8.240279778867855, 1.8091285728987865, 1.198965532018681, -2.1348836518307133, 8.78985919597232, 0.7795205280125563, -3.536038983112218, -2.4532923157122646, -3.6108073130459566, 2.198243451475652, 1.7099895659904187, 0.2295570407138945, 6.56801590938516, 0.0768538716603977, -1.4999561027447323, -2.1448029408646274, 2.4703329138501, 3.3680874403698216, -0.6463132736164162, -0.7596964082131108, 3.4292204499095886, 1.6240976554941309, -0.9804912048101195, 6.092510614505127, -6.337460619054272, 6.232817271534227, -3.837339332708229, 3.0234344413985816, -0.7316198755852561, 7.457988453026859, 1.1152641225799091, -2.264783862335352, -4.747018457790961, 0.13436540024564803, 1.6939610580168658, -1.7571150639366053, -3.685214182431765, 2.7658992128995807, 2.5084990845529944, 3.2238505180880255, 2.733148552036294, 2.1433130399540143, -1.7588055574500963, 0.653856149729205, 1.678352581677904, 3.7201810529355006, 7.383364276312797, 0.19261743017864807, 1.1423760733418704, 8.069848570163565, -0.4928730089446035, 0.9466255795742957, -2.34696203151884, -3.7523555733020504, 5.828740023473252, -3.6535718346755504, -5.538250064861638, -0.8676832884249366, -5.8410829047840505, 3.2197565436700195, 0.9440597715945915, 5.962980647159909, 6.587811114323607, -2.2776315639971356, 1.9859934303154598, 1.8043004678905898, 2.7023288243231587, 6.677815858025831, 1.4543641392742606, 2.4797975028373043, -7.442123254612609, 0.7896381430416259, -6.076423311339781, 4.460972264636182, 2.1283052075994906, 1.6248298987978282, -5.378981775143639, -4.613429749521745, -0.01390279006463535, 2.8847614573234712, 2.2947525761894996, -5.694471229338882, -2.6863789513756817, 6.533794143151947, 0.5427101177551936, 0.3946495129793628, 2.877864675780546, -3.638052538591756, 0.32035706042515244, 2.41310615918694, -8.70993176724437, 0.07466049304071376, 3.4751510434451767, 2.186191226018333, -0.6650567663891613, -2.217397150413004, 0.9634072298332901, 2.283338354553165, 3.5488115364721553, 2.4933753027814602, -0.4974995975854397, 2.7472525253327946, -2.3825990428105808, -3.2774964324135025, -5.946080935036468, 0.6772630679798559, -1.079090966822573, 6.414010772028196, 3.360364509045886, 3.3249794945196403, 3.098764911989309, -0.1702668184076963, -0.9054908047913497, -1.3110512501891145, -2.6170942751304267, -1.0462714529753223, 5.4157167354965985, -2.8103830649061976, 3.947990795079776, -0.2879556337061817, -3.4652615227332966, 2.3382899908421324, 4.519484456290401, 0.6347885154350317, 2.5262156105969282, 0.9745696356457281, 0.1524900176395998, 0.6418145913720041, -1.268837836119769, -6.09142413296223, -1.603643441501503, -5.200878170878607, 5.2263963285936175, -4.260179531357666, -0.9648313963939308, 0.5053748225048487, -0.7626248584783684, -4.153835865013952, -4.148435857280578, 2.8205416347862258, 4.65467787706255, -1.2198727942844108, -0.7537832216870854, -3.9171865671167785, -6.237580771115697, 2.866670615343172, -4.436300400536602, 3.5922995609009076, -1.8525535399264024, -3.7425723446205152, 5.388264874697187, -1.7977996330919905, -3.416081486380356, -5.200558283469328, 3.0829558401862185, 2.0250106165863464, -1.5663901622222498, -1.8989899482578259, -2.20336454905037, -3.3719859843146764, 0.880960573306522, -0.10603101021460781, 3.0402274269481877, 3.4583257409230157, 2.980315550742244, -6.167778306505371, 6.743319438679141, 0.5432448615283796, -2.0576719980372555, -3.2435292585620736, -4.979176185138298, -4.719438764333365, 0.06874701711420395, 2.0719969036028507, 0.2524698153964775, -3.26581187234482, 2.82333818719051, -2.217470496984109, 4.583193558005622, 1.0091464414879279, -1.5205942782334638, 4.108318439903419, 2.6176741892639277, 2.43406945336939, -4.579902212388257, 6.797654342557707, -0.13341078688927221, -2.3884388744586813, -0.517314818988176, 1.4000269431877221, 1.2367714188470513, 4.418136233168148, -3.1516221731332164, -2.090195920378019, -1.621273907438516, 1.3093525900536336, 0.2563953635794092, 4.244308962234907, -1.1992552258222218, -1.5278862451140147, 1.1207724104636858, -0.8579180302479925, 0.14839309466117712, -3.89147935848893, 2.153095099529298, -2.8065154766540696, 2.146491642185566, 5.562030776288078, 8.389200308163502, 0.7091223936688351, -2.9527474206692297, -7.235902057401088, -5.084900766774142, 1.2925163912583884, 2.845912891283971, -6.177175825001616, 0.3438902557970773, -0.5310549534969995, 6.041662615348707, 5.269520412148804, 4.1852675694910255]
BIASES_LIST = [-2.2065983685794697, 3.490724598055942, -4.618940881904688, 4.623006686927128, 5.258061655059357, 1.640514316407347, 3.1935886624538554, 0.3107592935347212, -4.128586677648967, 1.4804697125326856, 3.936208880827868, -2.4734471205153756, -0.45040688010942453, -2.5041836951551395, -5.146582543903477, 5.434015102022675, 5.354347381803846, 1.5173890239733119, -5.049120778595303, -0.7748312972962845, -2.724175262948811, -0.6048973214991114, -2.262731839312435, -4.86541091441656, 4.507964606365224, 1.8445006197684517, -3.6173215501056957, 1.4927922801592604, 2.0704337064513285, 3.3110378914039336, -1.6999373357384995, -0.8701966132073496, 5.458860794683997, -1.1874376841287209, 0.6175159848788749, 3.2631944021786223]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

