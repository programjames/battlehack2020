import random
import math

WEIGHT_LIST = [0.5558139560168689, 4.909274212228132, -2.3190942363597387, -3.546043632643309, -2.3179239598721435, -5.286661145133371, 2.876761605959658, 1.826940230402563, 0.8032473607873762, -1.1030217434189935, 2.5986336739025195, -0.010453106401017858, -0.907956039187313, -0.7575330968021433, 0.24018527395310577, 4.9363116138581145, 4.677419092821376, -2.9828798077180045, 2.8274578262663375, 1.8302978788680562, -0.37479211066352236, 4.351722601336996, 4.929674386046919, 5.41341663109678, -2.112882125098339, 1.6130475727840752, -2.185500513725827, -4.36040076095934, -4.909209430002033, 1.3791709352656691, 1.3634011781603796, -1.1242818750697607, -3.393727519615735, 5.2609452101198535, 0.9981305426820036, -2.5019099426803804, 4.1561861857375595, -3.2783752512290514, -3.7517886664180136, -1.0287810951027587, 3.8264142850073566, -1.8568676527798464, 0.4386157604566027, 0.16458636794882633, -3.260529047772464, 5.724599322857376, -7.880397625618534, -1.0399407625591113, -4.615007480845619, 0.879527766370385, -3.8434875919754834, 0.676311913696727, -3.576447851046414, 1.8914541936713698, -2.2531168962074974, -1.586319974244427, -0.4145126625572197, -1.9773791791831432, 4.895598604352307, 9.883247295633865, -2.1901621226790566, -4.491678050222242, -4.320312550977777, -3.5172024128326043, 0.7270060835545624, 0.19636787556427224, 5.360848616485345, -2.1960372272914848, 1.2295053828162341, -0.6884613824205296, 0.44665446218324606, -10.347937265066557, 0.4904809572868994, -3.687483411996259, 0.04455726752271646, -0.9644753731945448, 3.393761092717773, -9.795837660810179, -0.0656763524172964, -0.5665132757992981, -2.4136784474491355, -1.1063858989740005, -3.2534764536405283, -1.2123170665849186, 1.0202824988515944, 4.809937634562419, -1.8352674774602737, 3.99505373918449, 1.367091201784765, -0.6865665242231822, 1.0011827716514194, 3.786019404638066, -1.2493474879296405, -1.0655673617861328, -1.5779645147239885, 0.5339962644313091, -1.749678800886449, -1.1330420627518012, -0.6253240171890937, -3.6894591572646416, 4.125723768705287, -4.825904554724259, -2.3279274028316754, -3.611119936073287, 4.934164381767261, 0.7446875480566914, 2.7002451557436378, 2.685941605464135, 4.964160402217254, 1.8892853925681194, 4.390207262800829, 0.6016749390236826, -0.5301740868897297, -4.313158712916793, 4.462595771645665, -1.7113217664467206, 2.5501739632408125, -2.772414768183524, 4.5609425104848045, 0.5765070953773888, 0.6309036490374657, -0.15826321777953495, 3.5980130790338865, 2.6152757085470038, 7.0093441435477235, 2.441984609711085, -5.36162352765163, -5.635851653042695, 2.5548289171283485, 0.05734372311337225, 3.6293442398618936, 3.8427831895770916, 6.4977623229349195, -5.746640240279742, -5.196378762799042, -5.160250114039693, 5.245606174043116, 3.5140737531744026, 3.565489410296724, 4.551285239853406, 2.0756513901082214, 3.4850548155012153, -5.226261927289115, -1.0546059175221936, -3.683862830864192, 2.517841660430923, -3.9479882483923667, 2.4831940887308077, 0.4658202980683611, -2.4811742190104247, -0.42445144923523653, -5.120733537589845, -2.4218814795184724, -0.002290113061641451, -4.15679477560656, -8.681630091431867, -0.21857208323624222, -1.8164488748990957, 5.459530812597693, 3.800059564619211, -0.9480146669470666, 3.8395064369307073, -4.557884784816383, 4.488499719874068, -1.1253706019832024, 0.3665917704399715, 2.113659874075016, -1.6862331792448548, 3.372485681785832, -2.6019672843049473, -3.4508985162984986, -2.428552405271485, 2.065365893622607, -3.285744629030599, 1.8381751498525876, 0.1932732810005322, 7.302244470247227, 0.1355856188531254, -1.2326859343142178, -5.374894774423247, -3.22468140358163, -1.8800323190646036, 2.1510240257727573, 3.6580163724790653, 5.121387432742977, 1.1317673432454116, -2.632639343318724, -6.111237774627445, -2.505864854569914, -2.133197760137814, 0.08611281991734045, -4.2911063927871, 4.5817408580903995, 3.250743669502786, 1.9160482442189686, -0.4280513533547531, 0.7561128961603318, -0.5180275311044418, 1.6935179490423071, 1.770297778629477, 0.13113923979901754, 0.7055275406987797, 3.0366718452484864, 2.422358070398283, 2.2473172155892, -1.3500858880276865, 1.0317246001703257, 10.578966787731954, 0.5772363467391421, -1.1201342032434238, 0.6064864986477743, 0.7492993101021772, -2.937196588019685, 1.3039771783348968, -0.659473701597665, -1.7562812953412945, -1.6131666761790675, 0.3400590367711204, 1.2949617742011086, -0.7544525850887114, -3.9205766857015973, 4.081613996297996, -1.5722298815711404, -0.954102428842414, 4.250482649521115, -3.5247197555564242, -5.02745828639761, -3.3251267105264652, 0.15919288640662094, 1.7437945921502962, -5.344181759459534, -1.7021649331680995, -4.684970345123047, -1.6443251324411559, 5.2729121387446405, 2.4060424248690224, 4.276303000034392, -1.173512718852939, -3.620795722335477, -5.9371285535539595, -2.5671353368834278, -2.5931732485893324, -3.59354364157534, 4.865393204132611, -2.6019182746644094, 1.213099308989567, 2.5943306499948524, 0.21946692026441048, -0.07456173047445494, 7.124256714879829, -1.543929751625625, -2.1127793637048224, -2.300671451380632, -4.269561596646885, -4.849611026468442, 1.020441239085563, -0.4178272947922802, -0.35028539003770653, -5.810177835494555, -2.5110005328436817, -2.730074595272537, -4.576332368126767, -1.8294581645688037, -5.9022102759967785, -3.065563693885148, 2.6912822817795425, -2.3668951519216566, 0.5958236706427539, -3.7574030945537533, -0.548332766690237, -1.657887947793007, 0.1640307988569945, -2.8999540924745566, -5.621540592575824, 1.520863208669985, 2.029265244746819, 0.20191342838018797, 0.9980160953935701, -0.7778903647207319, 0.36522707104833146, 3.9497904801481973, -1.0343984682335616, -3.901095976641836, 3.749190267169487, 6.157151006058262, -0.07819377008271167, -3.382697045031151, -1.8246788990159715, 2.638701688835489, 1.6987866247252579, -2.974089263319932, -2.694409503590144, 2.54883502440325, -3.5691235481409755, -2.256478931212803, 2.358377919155485, 8.831614115802337, 5.942195855862148, 1.7976003501547508, 2.050177263468032, 4.558815480137133, -1.875467042821351, -5.848889991100917, -1.7727531279286797, -2.377005037733158, -6.866241373025452, -2.882255816311501, 2.293826686599433, 5.061524154858427, -1.4313408397962561, 0.6769586451881402, -3.9149347311581177, -3.599139719332484, 3.2605153486208045, 1.844087401833631, -1.7791306705618668, -5.648200619240179, -2.406697370467554, 1.2886042566976008, -5.595145563804505, -5.315974870012829, 1.2731317004340679, -6.800832868325557, 6.404395063255037, 3.43199317463147, 4.603410877141499, 1.9947084607027097, 0.27567979148601374, -1.26807527918853, -5.561615948315332, 3.9633405100046106, -0.3340150080223428, -7.427804725286527, -0.09609870932608292, -5.035664602095358, -0.5064966034856224, -1.6799966314935095, -3.452027823488698, 6.515850032639747, -6.779896959316616, -3.2377021111588373, 2.6622528542629564, 1.4742165150189113, 4.181393958424144, -5.693547981553152, -4.634038176351159, 1.708144815194377, 4.800658644137376, -4.851865910977843, 4.6483556878047, 3.255846873312098, -4.025752065703623, -3.4034652403785692, 2.3127508360396543, 2.332903616138576, -3.3890116825791874, 0.03397012301172623, -0.010062858423245526, 2.820717819786165, 3.2425979409959327, -2.2436309259767167, -2.82473345528725, 4.920565416047854, 6.050904655984508, 5.28817138029489, 0.11743634056117928, -5.844866950117225, 4.260406591936557, 2.601165379967482, 0.8496895711220349, -3.2250133260707794, -4.711636362055349, -3.664147830262361, -0.8922922690234164, 0.33703682326731216, 2.070495046027925, 3.9183645763866934, 0.684225173656278, -5.652523193328389, -5.257605826164485, 0.42585016931029107, 3.4252843473751318, -0.876291817201245, 3.170113681893466, 0.12103449588042746, -2.871783993988277, -7.23218224649226, -7.881517546173623, -4.597243124759279, 2.4654899243749417, 5.607198802695178, -1.7005230090096126, 4.706590935502605, 0.5114837349410501, 1.441784764327057, -1.2954977230455471, 0.3450881938692056, 1.1808811795794876, 2.263262212950603, -1.5014420328178337, 4.292702568036159, 5.555463714972941, 2.715286864418671, -3.452462377568259, -1.7124772881943597, 4.540532694823427, 0.7006318160532833, -2.1457437678844897, 3.8666205191354517, -5.549119203811199, -0.30170163144958684, 0.7874445693656442, 0.9052834530611719, -3.2827768921050806, 0.9615778023047301, -5.68669457162997, 4.131767642224705, -1.5777850275086336, -0.7103280302617413, -0.9933616864537548, -7.399015184646777, -1.8369232416733758, 0.7559989556142581, 5.221158416261272, -4.349844067792488, -1.1464581852695273, 4.085202930515507, -2.7416889540840392, 0.9148545451425543, -1.9377177052456978, 4.390249885713516, 2.787735490630281, 2.991886984526816, -5.913378139956318, 4.9320564073562245, 6.181310977457531, -0.735500048171133, 0.8112539995086819, 1.5799417193825183, -4.762554276168977, -1.6153384190998952, 0.6514847641924564, 2.0157797711722676, -1.831544126042234, -0.3764460631263445, -4.325852165362771, 0.7142900052252944, 7.98693176400223, 1.8061726744038298, 2.929665362230782, 2.4148530568689535, 4.522283272827525, 4.939460572898487, -4.366119727101986, 4.689018308272128, 0.006034817902764863, 3.62877358660248, 2.558268721055097, -0.38051449377766583, 2.517082771494222, -0.41777664337082976, -5.913263597970625, 7.696993763292464, 3.6811238611948944, -2.0457515274714613, 2.0664763646291147, 1.4983706982621228, 3.1953020344256102, 1.3737066274188554, 3.04556700060549, 5.180108479126525, 1.6557380003031577, -2.3229974727498948, -0.10534216225952278, 2.49505145840308, 1.3481786456257392, 1.5699062816280196, 6.845734287851467, -4.2755381661940035, -2.455479913574464, -1.194323685032634, -5.078615464529171, 0.5690305944670926, -4.346057741135447, 2.698846585745639, 0.404023392438785, -4.407642755969919, -0.8160121822281808, 0.4773867609433706, 6.265332114150792, -3.281422704154663, -2.876709240699079, -0.6953715214645688, -0.246681472191328, -4.865240183114876, 1.3606870913838205, 2.6048618925203413, 1.8352913006008653, -0.37146678356577567, 2.723401375472084, -0.28934777164619974, 0.11657156101749896, 1.545133139882311, -4.743701922220107, -1.655363779427503, 3.607636557672011, 2.8672870824465, 0.4940911720100463, 4.2546940906245245, -3.0560969305074663, 1.8215025199464887, 1.0516848379704915, -3.77719098608206, -1.791087255031024, -4.9071217126484905, -0.9693378464664022, -3.9916133671361904, -1.0059454302655353, -5.972558679357996, 0.2960377344253795, -0.04330198342384215, 7.005637907295395, -1.1871021916782607, 1.1108547555714379, -4.022725957778495, 6.958062175112462, -4.077162878813881, -4.12835776170949, 2.0467043867609154, 5.106252864619113, -5.500954230788271, -6.405845865534172, 0.913300265323374, 4.222283164619587, -0.9028556970499537, 8.072433828117505, 2.527360179297933, -2.2967774686964293, -3.3326274537824196, -1.9943223946404252, 1.4624132568665038, 1.0631830966217453, 1.437588614238802, 9.023288843487215, 3.8034429829641274, 0.5661971179305001, -1.2705581281092382, 1.8065174816567011, 1.5005813553951148, -0.5535613098805128, -0.2845510099786519, 5.974425353628811, -0.1196720132848917, -2.789248831292194, 5.405918468806874, -7.761929194952781, 5.253390518539972, -3.8853060035728304, 3.4019098147235893, -1.0089544120418346, 7.807949482761193, 1.8977514899326988, -2.2567123325234326, -2.185718555685462, 0.03228243849653939, -0.1218971707267137, -2.4591102938457783, -4.421615133752217, 2.213185681893947, 3.9632020885688877, 6.041293661144785, 4.880299751659642, 2.247237470470281, -2.1544430850082397, 0.030622130524392107, 1.8502922760548597, 3.703553342503501, 8.939900537535378, 0.39261968316374085, 0.23085668910977797, 9.609676603494291, -0.6127306742821823, 0.5382320210074166, -3.186590423109737, -2.5526402863187525, 5.771535566720506, -2.348988827630585, -5.44128190491413, -0.2382642027416002, -7.366839370063944, 2.421261983206416, 3.082634462898281, 6.109067192655645, 4.946089137352958, -0.9534321000070248, 3.804671770194511, 2.916475472621664, 4.112561122474034, 6.789805842491843, 1.3797916259845806, 2.3009844557326864, -4.251855904076376, 2.01814803760229, -7.717937704239576, 2.162241852766029, 1.2658586342984692, 1.2178386902239748, -5.144375318668084, -4.544742223252647, 2.3582224313649145, 3.03431575709909, 4.268242386056551, -9.136859026165741, -2.419214627662395, 7.440572069470133, -1.3580048393453628, 1.4411279978733622, 5.829489868842062, -3.46862060742269, 3.1600498333024554, -2.010839729673551, -9.992912793131941, -1.051923699766154, 1.4726492980433266, 2.9066422056356798, -0.9075981304627427, -0.7063629529935107, -0.8065069988152549, 2.2752011050633723, 2.4872824277490175, 3.228850078063395, 0.28402477240074875, -1.4133198738654127, -4.293624139174701, -3.2273019656859154, -3.4234646310422776, -0.7073420099615616, 0.8654760582607612, 4.224847475520722, 1.955024649609714, 3.181573823160664, 3.1116572279474632, -1.4414393915359862, 0.1657484598605013, 0.9650281489309434, -3.082071807049547, -1.6471341728863087, 3.477414488345918, -4.017188603516322, 3.3595656880701683, 0.5739950827214194, -3.687431426162167, 3.4503810496785725, 5.925101811717675, -0.44089772877701605, 3.223432148382273, 0.38463481134506144, 1.85062799575475, -0.915629776197436, -0.2003957351373361, -5.25906857114835, -3.3576287364080284, -3.7096221393808846, 2.3415722262740246, -3.897367892466239, -1.5416014212304257, -1.1379817787016822, -2.0598614462171474, -4.908331984101203, -3.8657311027424694, 1.9861148859933908, 5.67734367468118, -0.20653779600274755, -1.828691312555722, -1.3588990015178362, -4.281243685055709, 2.342629250503139, -1.5540681464296235, 6.6879790515540956, -2.6738593902016956, -4.740752876993459, 7.891752280104697, -2.044822688432157, -3.2766252095496737, -5.156631640392831, 2.9965913310439616, 1.5195470394544235, -3.5535072644700927, -1.362911371588096, -1.591028507414537, -4.804908941639974, 3.330769847758369, -1.308118338492106, 4.3837782081541645, 4.628267167255076, 4.292091925404547, -4.913324208314906, 3.646193336163607, 0.2353615603897272, -3.3957831654273245, -0.3607119687739474, -4.741959061146911, -3.5374331608692673, -2.0689595548858493, 2.5208642066878246, -3.4080095632939673, -4.678888204820176, 1.4359612714108083, -2.756379987195064, 2.0100310567496074, 0.4742666374844149, 1.6744593765561588, 3.9688331380697206, 2.9325856549351577, 2.7943737416908094, -5.865949482916953, 6.988003968620876, -1.3588869694375698, -3.469112414578834, -2.8441428225825716, 0.14986995630891772, 1.491560797504947, 3.030733328914053, -3.591585454760872, -1.0555434718439702, -2.7595595560993726, 0.5834723729470997, 2.18376585194411, 6.122165139558807, -2.755225078679235, 0.08566249919421069, 1.4762658779537197, -1.2526767686038307, 0.7346201617029157, -5.735055126756279, -0.8396255991426312, -2.3809929300789205, 2.3589267254256248, 3.769827241643869, 6.928877866292916, -0.871438253537224, -2.2293782934291193, -7.983751065044507, -4.330815278422713, 2.99376635047854, 4.221676019498457, -4.416776546630341, -1.7773993066993667, 0.9734527406126068, 7.597890255348238, 3.752652483935551, 4.880268452863032]
BIASES_LIST = [-1.383846990618418, 3.7040348271920402, -3.618031464770872, 4.798150457746198, 6.333712058513415, 2.773975324715471, 1.1039298496094747, -0.08574812247795953, -1.1046072918894851, 2.6597763134986305, 2.1217059206574898, -1.3717110172732032, -0.0037904501588649367, -2.624851619942619, -5.502829106100716, 5.266136017936417, 4.823158536912096, 1.4782825219982598, -6.5675646843594695, 0.025031405912679498, -5.075300424532774, -2.803389702663547, -4.062350924763156, -6.094321209731403, 3.9230129450034474, 2.653881672090345, -4.027463493348514, 2.918394570906921, -1.0791271865392824, 2.3035531714899173, -0.3418229807054361, -2.2898143502075725, 7.119843563811943, 1.8559885742852902, -1.683282219395051, 0.4431940024804884]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

