import random
import math

WEIGHT_LIST = [-0.08308995565458477, 3.3528892429606483, 0.717996328717958, -3.6605120739010424, -2.56428175789143, -4.524481637202028, 2.0735533523406975, 1.946217683886542, 3.1600556607089896, 1.526783087289779, 3.401546960010685, 1.2809757325766795, -0.6176188832227155, -2.4787863092744318, 0.20981198557144598, 2.5545059028292427, 4.854165408788641, -3.3196397528771664, 4.024171802021437, 1.3351230949827109, 0.5297072086854884, 5.099071177350946, 4.531130820032049, 2.288876002607244, -1.207363478523246, 1.9826293031947095, -4.110908260917585, -4.73834687465283, -2.7773209386830358, 0.680372574196052, -0.048026283816436366, -0.7221980288044513, -3.352426463550099, 1.518280361091957, 1.636241312217647, -2.425766801023517, 3.4922944667696942, -3.954692031674468, -3.3691165750579266, -1.4571790506852258, 4.514784915733157, -1.6174471795648802, 0.31774794349977675, 1.2053871045572677, -5.559324896811232, 6.784098911557047, -6.208683103069136, 0.41258001481021433, -2.4040352568457948, 0.9612918741781304, -4.055792735161998, 0.6782212682706481, -3.8240283315355907, 1.9156804408802541, -1.9678576023653693, -0.09496201193083942, -0.9402626461291288, -4.435547096395658, 7.465273351451872, 8.009756945976708, -1.6578246797966383, -3.579218582844546, -3.8528535393216456, -2.9167082750938245, 0.8600585765345619, 0.7032148145179147, 5.912405818884571, -2.1296767792236873, 3.9142758541670064, 0.14615111523123758, -1.1474671517978379, -5.887634072630561, 2.4109613351497687, -6.0106318163463195, -1.4711796928496907, -2.0706610357634547, 2.771555105246674, -8.23946058494156, 0.377794009276045, 0.06670149540650394, -0.8010522462049636, -0.4942729595159453, -1.5827458077652348, -0.06352552776398435, 0.874553321217393, 3.2678607403219218, -0.3863515947545164, 3.0732243652405096, 1.2606809360853846, 0.24611868873192266, 4.150833727762787, 1.4991421876117794, -2.9580443029814107, -1.8468272647039103, 0.5550548661256731, -0.5779400702899222, -2.071218843066843, 3.20152520489456, -1.8459093144823315, -4.29113663177359, 6.802813632011932, -4.773189499878259, 0.5718096045882226, -4.0148596655369495, 5.189080004129331, -0.30239116255845344, 0.3978669752406234, 5.177265019977049, 4.031305380747238, -1.4308140167166927, 6.187871940033746, -1.2296596807185554, -1.093335922934328, -5.5334095281135065, 3.082402519449504, -5.201279455858242, 4.701508836612391, -0.20260058482815102, 3.333205002166343, -1.653428963247658, 1.098144846090697, -2.9063643218023847, 3.133727724302531, 1.3410179935152367, 6.259027276914254, 5.411753577393428, -4.338321516124665, -6.287039412813797, 4.457344940344566, -0.4277892522581068, 2.2370109129491063, 3.5227176628195975, 4.018852701740713, -3.081008683962965, -4.422876158265838, -4.882966667304103, 1.8092606038589247, 1.8115760654197777, 2.9684353335454774, 3.713858142608551, 3.1131235147849745, 4.00983293690768, -6.881884819723531, -1.6636402402485317, -3.8221270069822264, 2.3815664285758418, -2.3577634041888462, 3.0160932867762273, -0.7613435175834082, -5.124759209262411, -0.05155141838136834, -3.9526473270480356, -3.6814948436751993, -0.7833544045146308, -5.165127033860578, -7.202177987546277, 3.988688582011126, 0.7185377161243391, 2.798611173543196, 2.2043066813147396, -0.4521009507218672, 2.349664794294959, -6.83494142780831, 3.4164054386258087, -1.9203455580037305, 1.5581885517035245, 0.9025546634569359, -2.4168677283385303, 1.6104615777161992, -3.8050508363048534, -3.1706969621707, 0.19431568170391023, -0.4084213994349086, -0.030053945319002517, 1.4506004397581007, 4.13908273092511, 7.406676121391895, 0.7854533885665183, 0.9932413145343397, -7.225144154891193, -2.802770449369167, -1.148233660575578, 0.5346007762463456, 4.192001598079619, 3.2817023942645918, 0.609073775639865, -1.3249701676813646, -4.984382451622626, -3.0758515636913235, -1.5159976217640312, 2.3029256342652986, -4.622540147547719, 4.171244968949701, 5.086275487323234, 0.893630467729307, -0.7442931739783705, 2.231591148605228, 4.147516019993492, 2.7711927586669254, 0.7403381767902839, -2.529058146761993, -0.5765946829679811, 3.2299972174316345, 0.9814004064607795, 0.34762505581729686, 1.9230583718553613, -0.06335693514577667, 6.25675220211807, 1.5082410849704746, -2.546842620849394, 1.2358072540587495, 0.11263457963536982, -2.8201172136982895, -1.5018088822072662, 1.3936283791906403, -0.5954724905118072, -2.049320465773694, -2.2286048820768913, 2.3309037604495595, -0.12684706378134258, -3.7174720773471925, 2.379770480534792, -1.2172696703360963, 1.5832348710623627, 3.4937181646989206, -2.913609852755476, -2.5295186048711535, -2.01146518093533, -0.8879161939717023, -0.8004404609803268, -6.1168167056845, -0.3951039639685394, -3.8455454879678115, -3.4272520316274786, 2.604306223982819, 0.3926360708911347, 5.081098223182191, -0.1906893712955804, -2.256352154659889, -4.6846803544352715, -2.149160766105536, -4.816720928333498, -4.757644077094078, 3.8265747716986267, -0.7746369999975804, 2.2804993209500353, 2.711890053455485, -1.0379867844005752, 1.9126846608330177, 7.934079444815598, 0.28783482765656765, -2.4796915010669274, -2.8598596873023103, -5.539324425389881, -4.762709577659557, 2.4929497460345234, 1.140202895512323, 0.048822889955683735, -3.7442245566066603, -2.84182314877045, -3.349640264479814, -2.0849778760851074, -3.5931032895116637, -4.196690375434972, -3.1489205633230934, 1.326248938155798, -1.7883675946251298, -1.8955007198630558, -4.72061784487644, -0.8879929386935287, -1.930234737576813, 0.7456203573184503, -2.247783965953727, -3.3760561076472735, 1.8026888066277813, -0.24450842866883338, -2.4674315827115514, 3.7254703790296624, -1.8498136841087593, -0.6215962275309137, 2.0905228245743253, -2.0499666437954343, -4.363290038810296, 3.28688893043464, 5.946177030695756, 0.1356382087906256, -3.5386526122143898, -1.3516427613112236, 2.5142721668970314, 1.2272797631058197, -4.952486579812813, -3.0727882086488503, 4.155654084710811, -2.8153602197281553, -2.218261533511548, -1.4164945368199315, 8.183698448847297, 6.203319587053965, -1.1230173479941972, 4.598493269189975, 3.4542842943030827, 0.1847390556218791, -2.1410501658937813, -1.1413678619530803, -3.22032084245172, -4.579744462838588, -3.8143812190653126, 2.203576134330279, 4.012679760348183, -1.8630935049121031, 1.5570613439759544, -3.008883798550108, -2.6181630402835, 3.768864975487502, 1.193701725938023, -1.3958220034760351, -3.1046065523382405, -2.6994183350310403, 2.155305733221362, -5.012796233184476, -3.2514404265249475, 2.0459991333742624, -6.0885115844915765, 5.949741130523706, 5.357857033023807, 3.4666119219634677, 0.3292204151527087, 0.5377969099565598, -1.000332159066595, -3.9020352524050135, 2.897640485905704, -0.10402991315873655, -6.825492755176683, 1.443826397267499, -3.758770215681494, -1.057970432246811, -2.190252240606432, -1.1656356617875403, 6.033026082591626, -5.47636172058993, -0.03196391183448066, 3.049983481899452, 1.6705832093514372, 3.4521725285795846, -5.730264783206296, -3.2451897292431706, 3.0972609014781343, 2.8640245707524032, -4.033299874898554, 2.3828211563604285, 1.9935703357135894, -3.3694781838068826, -1.1503502616626753, 2.700090177252087, 0.5347667950853641, -3.416052438359629, -0.928976536449595, -1.7157604077253412, 3.6754252121902287, 1.8261581432363911, -0.6658430507335851, -1.8886665400723863, 4.202398402958286, 4.379307395822277, 8.155560834720063, 0.20584799815616028, -4.03727568441479, 4.011522178727958, 3.3485876360694427, -0.3079137296389387, -4.73139557535932, -2.095357966289831, -4.73249683164263, -1.0121331343839366, -2.983814665200412, 1.6356825850508439, 1.0609215754191261, 1.1851844554165272, -2.289501651932866, -4.176551668190596, 0.9968753560990555, 3.9480064592968622, -1.6463381015979726, 4.456576562129148, 0.6937704845301282, 0.6628735629187461, -4.5634003279764395, -5.326986640135378, -6.871584034845652, 2.103492897273887, 1.6759466935692302, -1.5767293416502466, 3.0660578090775585, 0.9727035866903035, 2.080812072166116, -3.083682745493051, 1.5243781083375754, 4.214691251359246, 1.8962249164637583, -1.9343804857310731, 0.8419155610965092, 4.530191607713814, 4.163433258298365, -1.308179102944091, -0.14270749276961947, 3.2135096746002674, 2.563362778379115, -2.36924161981132, 3.7415189354438096, -4.637355402519805, -0.5133512871037545, -2.5375101874621566, 2.788730758175155, -4.524308290675417, 2.037339438909992, -5.834310239021887, 2.543761941364698, -2.283232292669531, -1.5713000679255489, -1.402767574546445, -6.562160299010404, -2.1636565520582614, 0.13557989159973238, 4.838279393215953, -3.5655452574128104, -1.973207747979298, 3.261950417514705, -3.7499157206728695, 1.876346595017575, -2.0845062041850757, 3.5436821773218803, 1.001194249359577, 5.667888087998393, -4.317773343171056, 4.803291898688094, 6.338778571654206, -1.2534645480795157, 0.48720148783343875, 1.4013748572405964, -5.995301922721401, -1.3304165673602033, 0.19114609525341186, 1.8893844739807943, -1.0949501266972008, 1.1353455673103898, -3.3706166052311275, 0.7207500252728616, 5.325058784070819, 1.7103115031999634, 2.4120277460221744, 1.2771916202745137, 3.8553701819178547, 3.113747446291093, -5.935145329650893, 3.573540704838229, 0.4233877422859078, 3.9804568457296563, 4.43848748644334, -2.996462009935011, 0.1636421319405572, -0.47315239445104385, -3.646873112422169, 9.947291485298035, 2.258154044535488, -1.0741172011783005, -1.8348266989816862, 2.1545528232382836, 4.814651476788896, 3.188759532219997, 1.6919365445645047, 4.158136723391138, 1.4761951409826382, -1.0534908256002533, 0.2273180875899694, 0.24495445527518833, -0.30640544006764325, 2.942360004676947, 2.6981032425952893, -4.314028814589594, -1.3362124572986713, -2.6354043680214887, -3.8939917287549335, 0.39221030763230225, -4.047912065595367, 3.0673912397217276, -0.08279442539407889, -5.19075133090955, 0.5850410403624247, 1.222770935175034, 5.356592590838886, 1.2401152372509294, -2.0905227452080832, 0.7417315892728016, 0.38059938048250874, -3.85455798483359, -0.06844188152275588, 4.620548493430343, 0.6245591222262261, -0.10177877953703873, 1.574622175857427, -0.14074387930010357, 0.0988223234996255, -0.06968510283222984, -3.416465770805227, -2.6189123647993195, 5.593876249931842, 2.590534703022411, -1.7037037637615997, 3.0107274149998933, -0.8603907628981193, 4.2079729627654725, 0.9544258592805572, -2.8376350084278275, -3.1658535370496175, -5.821854394788276, -2.4326814498508798, -5.395933546179588, -2.717994827350477, -3.7671911433687306, 2.3007698895147546, -2.518667216570286, 5.453789061486386, 0.3091934082923746, -0.1272964682889367, -2.276547037987724, 6.3285356954532554, -3.2170850247143026, -2.0971079767407756, 0.28772622658882163, 5.285673715203577, -6.314289354530545, -6.066880323059673, 0.9330988615330629, 3.233708897432578, -2.325772015102879, 8.465185983253122, 0.12324302237889428, -4.077386118511619, -0.9940813301878342, -3.96463760949887, 2.057538672644197, 0.43796588193842845, 1.5754425559773368, 5.640086897314902, 1.2027350347599817, 0.3560552873724938, -2.911484912215429, 2.311036164023707, 1.5477490552924769, -1.0206402702063937, 0.2693224845340141, 3.7753525179754925, 1.7225573301704307, -1.5281291953900937, 6.155360173298026, -6.460231262886657, 6.2099316025008875, -3.73171255835072, 2.9303832337798132, -0.5825499615571477, 6.090834046662053, -0.6616495616430433, -2.2861749243198632, -3.1773654250026695, 0.8137591728056219, 0.5123486607681644, -0.9877911690952814, -2.620125263829914, 2.895662828014613, 1.1363130558061925, 3.066134931550234, 1.8282055103132357, 2.4321662805382593, -1.322449683337984, 1.6624026843098543, 0.11622131896501431, 3.310075254635276, 6.675814526388939, -1.473601337577657, -0.3794334244689377, 9.583291398500137, -0.8789917142608281, -0.5562053176169496, -1.5327712274312963, -4.281374899686871, 5.93452574299681, -3.0790727493687804, -4.311869193616564, -0.9804770607511798, -6.979588071154769, 3.2628498864877153, 0.9532316021994331, 7.056799631662036, 6.543476308201269, -2.667893614897406, 0.6359455014350366, 1.3015592979046637, 2.064224545455813, 7.325363538626462, 1.0748479191793332, 2.077305703672686, -7.156408255733307, 1.0376842956622734, -5.211519556141354, 3.8454517650068256, 1.203102628728269, 1.4251604627240333, -3.694709526154281, -5.366928569458148, 0.11176295841555839, 2.3994997609161315, 1.404514459232498, -5.716129006136364, -2.2598666052428484, 6.880444741460097, -0.03941288026733514, -0.2387383375487958, 3.6428678772263563, -2.697564544065026, 1.0441826692087588, 1.666519184803537, -10.26833665443965, 0.5029333432894096, 3.319432935290858, 1.291586785779375, -2.0971422227954357, -1.4930144290810696, 1.362608103904213, 2.5861329388249867, 2.7459094144789424, 2.02552204673613, 0.47538044887988784, 1.5023086114875355, -1.2713128584791216, -3.9797537756358388, -7.149157754857871, 1.5408666110450162, 0.15059961485760764, 4.733236978348031, 2.656520148999702, 2.3408197356515075, 2.795154999673363, -1.606106046530202, 0.77700756989621, -1.3025705223806785, -3.563524754497855, -0.9211742768869136, 4.999948479785477, -2.1515702813020665, 4.592038212593445, -0.386388197712883, -5.163270876199473, 2.4488435616495523, 3.1382321900921673, -0.3015448432510003, 2.6596895288544604, 0.021126479278905652, 0.6084587761000158, -1.0849109353883353, -1.0292998594423795, -4.2166730131259325, -2.94027439900771, -5.30818149350717, 5.124600732233766, -5.992498090671497, -2.4830428191051963, 0.9972502783668302, -0.7730884990134457, -4.392342804892016, -3.7213039643584738, 3.640827395218036, 4.460557473757729, -1.2478886920867625, -2.270883390821801, -4.105506401194348, -4.834688681689357, 1.516009064792791, -3.5612913123289003, 3.241510895551973, -2.515063447343194, -4.138403445170198, 6.304016824017096, -1.2589412602014987, -2.3447578551062724, -5.998597437697114, 3.222309026190275, 1.9487764963052308, -2.99625206631156, -0.9860192040918008, -3.035702605104768, -3.5959211433846274, 0.7046194210571888, -0.15163786443559046, 2.2848881144274555, 2.863191021175309, 3.3103418636277295, -4.217979867149701, 5.3022146086056585, 0.47320981784668703, -2.0213054414647242, -2.3442967192246327, -5.212937052050729, -3.8698940549755045, -0.5394516969239529, 3.2205558745470952, 0.006455979704490966, -2.978747675846913, 2.5089848090165696, -1.5583216169921605, 4.968208760620332, 0.7584064186037729, -0.06591167006186116, 4.039445740434468, 2.7771280780784435, 0.8749598355116079, -3.922514600763251, 7.374221721582423, -0.6531569123780555, -3.194549613966381, -0.031436766856284826, 1.9738737780081115, 0.1585339711454392, 2.722052777312558, -2.664842533478898, -1.0465213375732891, -1.3732540695461461, 1.5908270672096165, -1.7477472042276738, 3.2154214057714663, -1.3467929197264286, -0.3460541414072833, 0.6540791091508924, -0.3370472411805888, 0.11231036298667796, -3.2542226315252742, 3.7276125964965328, -2.577203048714807, 1.490825528120892, 4.86951953530273, 7.777847830295116, -0.06400866341486011, -3.653454705617401, -7.725478390166092, -4.254159247050804, 2.683624780512196, 3.199034496313664, -6.972811282639535, -0.8234680283868849, 0.8579572876061681, 4.672670509210656, 4.0185383691596135, 4.882378079015986]
BIASES_LIST = [-1.955039730427185, 2.855253156219094, -3.752307156811909, 3.9332914943172135, 5.408904680509251, 0.9249796906836503, 3.5468597974670164, 0.3879139853549425, -4.476766813832817, 1.5585185312531706, 3.3630716933591467, -1.7121452671432658, -1.0361769099477316, -3.0416869699984876, -5.4065759720676425, 4.817548931805279, 4.822800378458704, 1.6141724861934001, -5.165828726731539, -0.4870271150962526, -4.210669947949356, -0.19847254399708847, -3.254230073842983, -4.61226271876483, 3.579707996859285, 3.3229872030824747, -2.8691547775470116, 1.130352057596029, 2.7470441535992673, 2.1715250962179073, -1.1716014652691922, 0.5069419293191828, 5.081915903064636, -1.484398173553635, -0.10333079972680159, 3.2464149085787852]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

