import random
import math

WEIGHT_LIST = [0.5649327926460015, 4.904981015659691, -2.318297314112673, -3.5560907053681956, -2.326933529229714, -5.2921440420109045, 2.863688154437309, 1.8334343697959812, 0.8057883427930431, -1.1096241167968224, 2.595275695221386, -0.02202303866072252, -0.9083965298987158, -0.7573132303584738, 0.2310163292611022, 4.929791714835383, 4.683811340515574, -2.9740161759099473, 2.8401392528438953, 1.827056056179317, -0.36818646892447915, 4.339168859716696, 4.926723550462819, 5.414178761395134, -2.1077371379876992, 1.605110649920252, -2.197791975781688, -4.364204896050087, -4.906446801159925, 1.391682366375786, 1.366722722965889, -1.1158170958129272, -3.3959020905103188, 5.253012371770982, 0.994005692079863, -2.4896833456313905, 4.147028199885112, -3.298451383327206, -3.7526418108233655, -1.0294542737852546, 3.8387778132915082, -1.8791759174040765, 0.4226337166229671, 0.17560466759789378, -3.2729693776175433, 5.729355557044127, -7.873353082976163, -1.0373145624228484, -4.604569159017686, 0.8818843224631832, -3.8446502910450597, 0.6725027626544562, -3.5927242663834984, 1.8913104297092171, -2.2484750954656048, -1.5889878207884331, -0.40020368275258833, -1.9810946636204934, 4.905554167696579, 9.867680441827876, -2.18462078698899, -4.498966255904715, -4.313031339794192, -3.519978112065249, 0.733536594751484, 0.19920381509594165, 5.355278153933812, -2.2034014558614805, 1.2246546669496414, -0.6840821261130797, 0.4440752904829805, -10.35404651824019, 0.4850872153140884, -3.6987711889386836, 0.0403383658131661, -0.9664852952509795, 3.379353282436558, -9.797637458061851, -0.07392421495247928, -0.5681400709157335, -2.4171342824914652, -1.101180584567995, -3.260811414981129, -1.2144456322708717, 1.0225896430948136, 4.793152121670976, -1.836608305766465, 3.9935621649261255, 1.36409243388461, -0.6811275979599566, 0.9959683462319262, 3.784280059262371, -1.2395070458312696, -1.0790860472500792, -1.5755534637605515, 0.5407060615162314, -1.7533321376020774, -1.1325897172906423, -0.63231465671381, -3.6904249981263755, 4.116729228042135, -4.8120175811604815, -2.332545273439848, -3.606718966186956, 4.938306999548931, 0.7489209506936921, 2.69881773029047, 2.6933691343237185, 4.951251294680485, 1.8774243997931293, 4.393043865951347, 0.6103995671188563, -0.538991140551786, -4.3198422789152895, 4.45640744176849, -1.7179367736593592, 2.5531932829751445, -2.768294669027973, 4.552753098258617, 0.5664617272200705, 0.631784623890597, -0.16788499611714422, 3.5969456678441927, 2.6086351699970534, 7.012093275937625, 2.4541530875963447, -5.373819186624052, -5.639148088808507, 2.550847963849688, 0.05640523459609434, 3.616198925002561, 3.846388607908363, 6.503590409687981, -5.7377739880457845, -5.19400952660903, -5.160931767643179, 5.251604980916037, 3.4928257089874255, 3.5586049693312383, 4.554119731302726, 2.079048453479578, 3.486552691742264, -5.232513512539101, -1.056172759671175, -3.691655252837867, 2.5079577186297617, -3.942537042567079, 2.4843956649230767, 0.4691818915299954, -2.4848779135278054, -0.4221486212963335, -5.100338138080701, -2.4192750990023586, 0.0013449866371098435, -4.143097552230386, -8.69083999580703, -0.22230690735961045, -1.8166430199518209, 5.446697176976759, 3.808765316864098, -0.9526054544327691, 3.842681334100504, -4.553270385423541, 4.48753584214477, -1.1174297495888863, 0.3687040076499592, 2.1049961049119332, -1.6996843660343424, 3.3691577777385295, -2.6052031474515887, -3.4442516950978406, -2.422267251564921, 2.075691524322751, -3.2897433649783347, 1.8361207586001793, 0.1998760184176145, 7.308488541173201, 0.13034468664888813, -1.2379028275010537, -5.3653900626657185, -3.2254904462001597, -1.8765471014849033, 2.1480531237441283, 3.6556637243744503, 5.111377233555034, 1.1404106857447744, -2.6240530636039385, -6.098586849044958, -2.507445545806511, -2.132827297576299, 0.08359211166428997, -4.286117675064232, 4.584426204850326, 3.2501453786572405, 1.9189810555447695, -0.42389173133349795, 0.7559644175760853, -0.5300507918160094, 1.686195463103409, 1.7602140899873244, 0.13039533235220235, 0.7067828691467526, 3.038651097738494, 2.430519693080982, 2.250798105602041, -1.3341066575965679, 1.0304818246243235, 10.5746507865131, 0.5790175723296209, -1.1338647812826872, 0.6139282005136503, 0.7551786147047408, -2.9392951062570587, 1.2990915251099584, -0.6607002284253265, -1.756788548919928, -1.6090721806494923, 0.3338269015489758, 1.3070057345027142, -0.753929733172199, -3.9202994605565857, 4.077025506803964, -1.5739558181046298, -0.9597931550718202, 4.24344357754652, -3.535872140705607, -5.03047659617906, -3.321195815616215, 0.1479334979773506, 1.7532372836736587, -5.340751415275999, -1.7085945138445644, -4.678671992774367, -1.6440863526929266, 5.266496220220195, 2.398947022187643, 4.260200022569798, -1.1689793396042902, -3.6271978525102067, -5.941718159949797, -2.571028903340462, -2.5943203414547082, -3.58666900484808, 4.849826849902917, -2.5959332506951838, 1.2151321926953877, 2.600394354271815, 0.2080742034499855, -0.09123936904361296, 7.12127786629362, -1.5298693227597304, -2.114374870657546, -2.293848447650253, -4.271415201761087, -4.866301325007728, 1.0119079985640291, -0.42001961028831086, -0.351117438999806, -5.8149158944088555, -2.4998797887370516, -2.729713950161446, -4.569995706625564, -1.8373356802890453, -5.897004765895417, -3.069624636326722, 2.7018328791805404, -2.3789131281086364, 0.6027899392925673, -3.7559039538582093, -0.5490507026120255, -1.6599887138027873, 0.17674385953923477, -2.888178769343325, -5.612328283411816, 1.5240325752057233, 2.025966155469814, 0.19809068031104307, 0.9959441552006376, -0.7731455299114556, 0.37785739587666817, 3.9591661815836074, -1.0324863782241152, -3.9113627600114387, 3.739235893299194, 6.163319205135729, -0.07892420947211841, -3.3736210164731775, -1.8219283410004197, 2.645026306984401, 1.7024951730319968, -2.9875783020114097, -2.6881798115751803, 2.555479397732333, -3.5789520386389024, -2.255948331417581, 2.369531683273772, 8.828290887748178, 5.939711645927931, 1.8020084699318784, 2.0598308570717596, 4.565462240939464, -1.8813203326639063, -5.849545341023442, -1.7746927881617685, -2.3721689661716243, -6.869801081109783, -2.8750386169251696, 2.295144427262139, 5.058544904734881, -1.4259477166222037, 0.6770248008291003, -3.911476180463903, -3.5968697906637543, 3.272812638743722, 1.8550492740763111, -1.7824690080169223, -5.652602887376645, -2.4061927246731583, 1.3015826121977103, -5.599648515529898, -5.3140110069164, 1.2781082260059018, -6.78974061276899, 6.395775966152234, 3.444240584406744, 4.599813051019397, 1.9901088856388014, 0.2873878002176843, -1.2700584043968886, -5.549609513523031, 3.9532045155867115, -0.34694109212772484, -7.434836043086121, -0.09566890367490931, -5.026341718421693, -0.4941760451614263, -1.6787252486108042, -3.468689678998642, 6.507005606916978, -6.771437439833821, -3.234730740479174, 2.664277873627016, 1.47632773427314, 4.184084337890994, -5.705007862991837, -4.625849030755306, 1.6963905604691338, 4.796928862053075, -4.851177855445863, 4.649518010020942, 3.2523050859379232, -4.0175712370935885, -3.391374209760773, 2.3109500516277612, 2.3449119168905574, -3.395060590808286, 0.03663141189989187, -0.007817069421356354, 2.814337809259158, 3.241917044385152, -2.243430284089987, -2.821366476239097, 4.917877875591177, 6.04724074575218, 5.290382567557338, 0.11061964684502554, -5.845742390758894, 4.265078684600289, 2.6015200754292764, 0.8471599944473558, -3.2182299837147816, -4.701672682508978, -3.662216557495417, -0.8797783598666925, 0.3452623148351522, 2.0745975681794624, 3.9187772338774365, 0.683966727717699, -5.645560431724225, -5.255698144783447, 0.4121520315245369, 3.4160754088547525, -0.8695410644946249, 3.1597932519494916, 0.13103169485173555, -2.8755783958657206, -7.237769701729165, -7.884009535496975, -4.601245261275891, 2.470899829761642, 5.607344370960429, -1.7124179595728442, 4.707258447645908, 0.5088748975151751, 1.439189736355359, -1.2910211754334084, 0.34235360397954645, 1.1802819247111227, 2.264295009775616, -1.495586356256577, 4.287784597352361, 5.542517055867339, 2.7240507520525705, -3.450661920727476, -1.7207075124421323, 4.556274302343862, 0.7045959471675327, -2.1434800161047805, 3.865135024918298, -5.549936608702069, -0.2916326959691654, 0.771494891114629, 0.9021868453473383, -3.28426202047244, 0.976476339890463, -5.687605209192904, 4.138517119958671, -1.5756613168847982, -0.7087032816582394, -0.9882782250365082, -7.405096242629981, -1.8492562887427009, 0.7593829936626874, 5.22328451812031, -4.342871821808506, -1.1371337938884034, 4.082022800133338, -2.7462710104085373, 0.9266222612864252, -1.9385712933320418, 4.392658544965268, 2.788404793771237, 2.9939166199909204, -5.901542982600441, 4.932570092445549, 6.193306064527059, -0.7370284003518143, 0.7995177784650295, 1.5834097463281471, -4.752366654013049, -1.6179882805350432, 0.6611583839799804, 2.013243067339619, -1.8248172712194775, -0.37416543421857534, -4.3255545846475405, 0.7098532606983978, 7.986455049817093, 1.8084071759547558, 2.938341344411463, 2.409909118790559, 4.522542480616303, 4.938882627144274, -4.352949392302013, 4.689127941076353, 0.0021810772927426877, 3.6304725870601744, 2.556061467809443, -0.3829212641172791, 2.5171191035772456, -0.42734343839096217, -5.916695858834682, 7.698007212627574, 3.6815864393332793, -2.0363910176143, 2.0780137715441866, 1.4928151106411425, 3.1895145094398423, 1.3686712329790602, 3.050097142726944, 5.183448665822532, 1.661751427712974, -2.328346525884461, -0.10665237455332148, 2.4900547374560036, 1.3483855048263207, 1.5843379885319477, 6.8539981194263, -4.265239710592392, -2.4640050241755738, -1.1978456894366964, -5.0983456159892855, 0.5604945267367228, -4.354141072427567, 2.695274381945442, 0.40689545111988695, -4.406433192124104, -0.8239104094989355, 0.48073871866767687, 6.261973356064537, -3.2770029325734478, -2.8698429811306867, -0.6889773795502718, -0.2324528529017683, -4.859746403709695, 1.3587855080106641, 2.605210574534569, 1.8397067839756707, -0.36851045475465655, 2.7269886468038758, -0.2988901875762846, 0.11980196152700895, 1.5451882706123372, -4.744430698204427, -1.6543966868585431, 3.619840839562232, 2.8721327308018014, 0.5000643591099665, 4.2640045339194454, -3.056841949325116, 1.8137494236777048, 1.043046175226322, -3.7746859397559263, -1.786049258925007, -4.916582683816414, -0.9832121400893095, -3.9889489132581786, -1.0004136120418392, -5.973989236770199, 0.29251222300445323, -0.04872145522684525, 7.020268487552045, -1.1938254691766128, 1.1147831487941877, -4.0176994680829194, 6.956410688728076, -4.071441145117894, -4.127910746510068, 2.041536935696872, 5.1161853379345, -5.494918662465343, -6.403675303304515, 0.9065338626693453, 4.233197923762215, -0.9131122067269235, 8.075217015204307, 2.5147818081712123, -2.2989980718979326, -3.339712698204061, -1.9891825064296995, 1.457159762916789, 1.061218653956804, 1.4436598027356085, 9.0169975068799, 3.810960294936277, 0.5699023918664416, -1.2646746124826642, 1.8063463083678342, 1.5138244331256492, -0.5449052991535592, -0.27984427769278664, 5.968065171529234, -0.11761826869618454, -2.792095110287006, 5.411083529692509, -7.7523486074632295, 5.255058893838389, -3.8951751148702054, 3.4006272834274895, -1.0063400220413268, 7.801079642749006, 1.8898968592177017, -2.25597887720437, -2.180076896003933, 0.0489091024882262, -0.11048908438393772, -2.4607881801371696, -4.414493182392638, 2.2085636468593783, 3.959358642600598, 6.053100373154099, 4.883129747002643, 2.2538912167966383, -2.160510507889426, 0.039567939206795986, 1.846351164174225, 3.7072203382601945, 8.938930877479875, 0.40776968280971276, 0.23158193452141815, 9.61471243790544, -0.6067483568933532, 0.5323978722353713, -3.1990087164160115, -2.549132347921805, 5.759016871023933, -2.3528602928752256, -5.451994965909411, -0.23526281665254212, -7.358756737453066, 2.4292898744339246, 3.103978867387811, 6.110929385476034, 4.9545637496795205, -0.9500541034012964, 3.803594052941307, 2.923379000696798, 4.110597082027013, 6.796612893468366, 1.3911616163399605, 2.308955273897693, -4.255354941280117, 2.0231602081449, -7.732887577797727, 2.146975086141841, 1.2618601275086054, 1.2235768573388786, -5.142805042946265, -4.553941582576824, 2.3615276025676937, 3.0351456246373303, 4.264944029040297, -9.150453466683368, -2.4279614620603693, 7.449164054261643, -1.3671030244756224, 1.4533065606547517, 5.82488148226622, -3.4564866584386325, 3.167887133908153, -2.0127236029161844, -9.990061859335848, -1.0594925474162196, 1.4823116138870007, 2.8907883209565144, -0.9141843396558615, -0.7028451310864929, -0.8161366357361342, 2.29025524439936, 2.4918495119972497, 3.2226776101239243, 0.2852379723210241, -1.4197275646756293, -4.273604434365956, -3.22388452743954, -3.4141412813893313, -0.7148698245335763, 0.8630193530272618, 4.222974536351147, 1.9451036559052726, 3.178399936376078, 3.1094493365698246, -1.4359351435406582, 0.15362723558998298, 0.9648483943799169, -3.0849520625906055, -1.6403690297993354, 3.480566959291321, -4.013234592908435, 3.3605615934030584, 0.5667833831629084, -3.692370749826134, 3.4364419398420205, 5.921421852424618, -0.4375777984731798, 3.221348274482994, 0.3757418749000643, 1.850175747608448, -0.903460402217596, -0.21579877100485118, -5.26761821581369, -3.361064589823867, -3.706717003399807, 2.3429944892318404, -3.9038411786137894, -1.5332190713332263, -1.1486212721177564, -2.0578935070487434, -4.907999090399188, -3.865714126039094, 1.9879020847684004, 5.682764012002239, -0.19807347065907951, -1.8280040848896504, -1.3549032495649493, -4.2748181632519, 2.347103202311942, -1.556924936683252, 6.68668914282251, -2.6894604524392327, -4.754326442743025, 7.880367213304404, -2.045032729216211, -3.2863677844234753, -5.147832519016934, 2.988479681158933, 1.525417262973778, -3.560525418950121, -1.364580251481024, -1.6078616537234696, -4.797509209426753, 3.3414732427494616, -1.298545662181205, 4.382503432262686, 4.6278056996958306, 4.280831686013447, -4.9167434171255024, 3.6494754275888974, 0.23774631857034462, -3.4024436948629218, -0.3612864915998208, -4.744534215360048, -3.5347024176796307, -2.0746345162154927, 2.5245820369419234, -3.412997807084475, -4.673770867531916, 1.4317698524556222, -2.7609750075375374, 2.0150305956484216, 0.47087744470284587, 1.6661298418569501, 3.969655202418088, 2.931299554839956, 2.7826933821080058, -5.871378625322199, 6.983174492779062, -1.365041821052758, -3.473593135951839, -2.8565787702337677, 0.14111161852122198, 1.4837959925305546, 3.0426503875822792, -3.5918854783629466, -1.0602479567336158, -2.754582179566771, 0.593305827961843, 2.191203087386505, 6.126917906657074, -2.754145789693648, 0.09156780900836874, 1.4760378366525133, -1.2454323615216885, 0.7329554003401266, -5.730154529707161, -0.8318333451633947, -2.3753641465387627, 2.3589224700124976, 3.760924193056907, 6.924409577422751, -0.8812908186535865, -2.2319966367723008, -7.98417107494762, -4.308369086596393, 2.9991410818844977, 4.2162596059058295, -4.417499913201628, -1.770941004713722, 0.9592312832408069, 7.590741636365722, 3.745277504143392, 4.867974893149323]
BIASES_LIST = [-1.3837222074676618, 3.7089669982586, -3.6023279151069425, 4.795251185806999, 6.338252083159914, 2.769576734820845, 1.1059415142494184, -0.076771444311702, -1.1174381492696968, 2.6589834895012925, 2.120216516745467, -1.3693161696758887, -0.001934494339627578, -2.62048501734567, -5.509713161787243, 5.272103414134796, 4.813609554413026, 1.4619693626044155, -6.5744288403393885, 0.019892724982476344, -5.082550118642089, -2.8033897469089792, -4.077379291023532, -6.085823489567085, 3.923221888055877, 2.646848261945437, -4.0235990777549695, 2.916327787515345, -1.0786281572607666, 2.2858234504738113, -0.34197729826364137, -2.2983509250106313, 7.128362385017811, 1.8481695486942868, -1.6845893008576456, 0.4438820801632605]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

