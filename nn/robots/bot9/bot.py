import random
import math

WEIGHT_LIST = [-8.248068330184676, -2.448725953145908, 7.11800391094847, -0.7192565541916176, 3.9574322528496357, 2.034153823826984, 0.27186316648866454, -7.047587919438096, -9.029120521504693, -1.5436268249124825, 0.03305606834662955, -1.9324723311764909, 0.06348718620474109, 1.9613857573069495, 1.2521369790288022, 4.1596834139038155, 5.459361676687835, -4.917889486580376, -0.48297412191773464, -0.232936528173533, 4.26208092096153, -1.2567106229959575, -3.4470286123553917, 5.202728862432635, 1.826439360446951, 4.647994213497172, 0.4057353477325781, 1.4013136904622432, 1.1576826673251626, 4.200665693996619, 4.252126956376277, 5.093447588755439, 1.0808200452028467, 5.592611795745044, -2.3978846760947032, -7.10555457734669, -4.202367131111764, -4.86763492520924, -3.981753401456521, -1.2596019519611938, 1.9681249492092272, 4.918877337340431, 4.172776635739646, -2.1809221353036827, -1.214837262152541, 8.960022934911574, -0.11480972980049894, 1.1761951390394672, 3.1877090114867346, -0.31430698833195325, -1.1426807334589784, -6.050323522688021, 1.4383987776545069, -4.801873252243611, 0.3877588075129568, -5.88503550765356, 7.656751256346826, 0.7545440529910934, 3.9950012469851175, -0.862294641175138, 4.83706621035297, 1.9854245200885003, -5.253052802698841, -3.1434233434433074, 1.0860348896334422, 3.548404053161412, -1.276949532585169, -1.9762397235072138, -1.1884918541064409, 5.849069813283466, -3.117557658873505, -2.6545877595154037, -2.484979634512962, 4.457755392436204, -1.497967377866552, -2.4411377621985584, -1.6718852036919618, -0.2379878888783463, -5.446661087078529, 6.1332916097549, -2.9531833376088117, 4.857037238970985, 6.384198320768125, 4.042527835267885, -7.473837685813323, -2.0805391850905575, -5.688001687057719, -1.9017142658816377, -0.3981210731326099, 7.678649700468183, 7.846943253933017, 3.3831450224182, 1.161480709418141, -2.368118433845303, 2.563990441108118, -1.7782805324841107, 2.7774508055908775, 0.9464624225589693, 5.800829603944944, 2.416119270460288, -1.7557544892874453, -6.508874853853074, 6.064376381829771, 4.647675978573298, 4.529385640791872, 2.2869684845357336, 2.8916961956507024, 5.3747372071952375, -4.797962983414049, 3.774253713358775, -6.492480201322166, -2.9895805091855014, 3.4596988268710183, -2.67436965011426, 6.109264933268195, -1.921787479090405, -9.805347076902214, -1.845135194315941, -4.8047457161308005, -2.565723463886358, 3.5515999123370925, 0.6199505427557948, 7.607840773380854, 0.03939458436812909, 2.2425380930622953, -0.3279866000305636, -2.5848068763749557, -2.888284436081756, 1.0923302805682484, 1.5276868680848434, -4.9596025165769975, -9.720035493155363, 1.8500195739568968, 6.140801901062016, -4.497956053958044, -1.8078839994259797, 4.065839139939481, -0.9740878185099724, -4.016697855855423, -0.102067651910009, 2.2136549817221813, -2.91223268724515, -6.545049139300951, 7.0813746031401665, 7.823557686676334, -1.4134582595969372, -2.390805491847887, 8.086861886241143, -2.695033245390472, 2.1280602278910035, 1.9929324942158595, -4.200819945355197, -7.217259600326027, 0.973780948742454, 1.575950851038104, 0.7674727938089863, -4.101572118728928, -7.221060214551842, -5.833407625643591, -1.2822124359259282, -4.879476459793518, -3.875883477222999, -3.1046795070099877, -6.114713575724501, -5.19324290434094, 7.080259664067667, 2.6537680724393367, -0.7047370230435266, 0.25913064366498667, 1.1540503670272544, 2.883692972989744, 0.08921537590131762, 2.301035295855375, -3.250234733838145, -4.116583946121383, 2.3498899337018737, 1.1417851124824783, -6.262182810693028, -4.82816997358807, 2.1328843043970647, -7.82411623942509, 9.154146713507359, 3.714579362015459, -5.110843832470382, -4.240991797525074, -0.4706833873386468, 5.017529942598499, -5.602721125754431, -4.961060186261335, 6.821534022905215, -5.474729591104152, -4.880581796190118, 4.821051529342447, 2.3407467902067007, -5.681243703550124, -5.080159646045772, 7.060874006582051, 4.124745685117442, -0.3612599264522479, 6.832346559265659, -5.218194612993171, -4.497728916272669, 6.514082097883886, 0.6815361066034988, -0.36064422852523886, 2.430795182406473, 3.2432716982807723, -0.48970909673582397, -7.259698061690827, 7.375240372959085, -7.057419588120509, -1.822064285486876, 1.2803385020746103, 7.210151966581413, 5.95987356918631, 5.846027833784876, -0.8416034857097416, -1.5007846673196057, -2.679275571257283, 0.5902551431846668, -2.1144432380451748, -2.027218709851622, 0.4157191944214204, -1.6798699044441632, -4.3366002028734405, 6.061658290530459, -1.084357080520276, -1.5079958425093962, -4.109722967443526, 2.779651909925816, 2.6216964793024786, 0.5578967498035701, 5.936283578141755, 3.5905655254340023, 4.350617826488495, 0.45552932710190713, 5.340100534289532, -5.873896853680213, -2.702720314364071, -5.054296564131618, -6.321494430173524, 7.41754651868254, -6.976502281991157, 1.5346587314184899, -0.28361888354132536, -3.163456235765854, -0.10906706862363647, 3.772628828073277, -4.705695304646754, -7.0711146606079085, 1.8308883972419907, 2.115634657146526, -5.066311824202412, 6.410250496277492, -1.8248178050240962, 2.0233942546971617, -0.5275837951222804, -3.9974982775408936, 6.720251339603589, -4.038573461238233, 5.750870821151055, -4.290134874609805, 2.9161529938058615, -1.4660908586509385, -5.3206270562333176, 4.260184398793976, -2.9057106404339996, 0.003035935641891613, -8.158495058196216, 6.721929168982089, 3.2648164727848914, -9.603680614593433, 2.073586370853262, -6.657686780173828, -0.5825941793308302, 0.35674790510234616, 5.391179997810912, -4.478358311351476, -0.7685139665390313, 2.938717787977931, -1.0059075386361647, 4.1087580032644455, -5.616401669808389, 2.939402042442778, 3.2227590333068012, 1.793613191819491, 2.295688040411323, -5.9800666223259356, 10.270955834865065, 8.88893993223933, 0.45560558558711167, -3.4437489362908664, 6.2227704159710715, -1.0293646904908793, -1.0251329284506911, -6.1836302940483705, -1.4644268602223616, 0.6809287719441035, 4.834764060011861, 2.723314375454145, -1.5719277489168901, 0.39742959488829616, 4.71964779209645, 0.5077758748376329, -2.077370625236424, -7.308887418324036, 2.3018495636404994, -4.039035783333712, 1.3367130841347972, 3.7397157364583786, -2.066688520286474, -2.3036449910815016, -7.754543246602598, -3.443984028696859, 7.822007516488612, 5.364083215411468, -3.3660600702420727, 4.2688032965344425, 1.1189833696344356, 3.2414217648354655, -2.8601848313995206, 2.5816798892886728, -3.363585090885488, 5.657002727372941, 1.6072599470647182, -0.192865375526102, 0.9304499463667937, 3.45950768747195, -7.617757119459811, -0.3421302573896088, -3.527967594843009, -6.638231728887661, -0.3201772238675674, -3.6863645059495744, 2.6077953223390553, 4.920066620430186, -1.7882684133471285, -6.642748726717117, 5.229647895001659, 3.1836473050934035, -2.2888536162073625, -5.61076875562327, -4.491791453218258, -3.8859181244238346, -1.7025048386696071, 7.113540281581473, -3.6962046347032986, -7.9403294927243, 2.0455062219827163, 8.833416435634744, 9.310842407109332, -8.787012093307071, -6.663375995860258, 2.54697621780099, 8.365328820574826, -2.747455928732074, 2.4186102573946537, 7.547036549305454, 6.412066580572911, -1.5199456173294803, 7.283263298432635, -4.324917763410403, -1.2345916297272472, 1.732366903638722, -0.5464158042283873, 2.898216897116198, -5.135278696988082, -5.6655977000533415, -2.022622453882767, 2.0856555612491348, 7.854949790518268, 3.923894597105241, 0.21303939733630073, 3.977605465282569, -0.23049965030125344, -2.3606005362772673, -4.9600303087343045, -0.6414073589715437, -1.7280593906973307, 5.480415277975575, 1.9947240937866604, 2.9813884112540223, 3.973708647762962, 3.498385987600312, -3.328958469730655, 1.8430875709155208, 6.379606856557872, 3.7213099613657357, 0.8621527352632019, 2.2711943874908864, 0.3314506194501992, -3.3427144628302115, -1.0786367909224337, -3.338370277191196, 1.0403801271943223, 1.4622123687258566, 0.07526131725928947, 1.4133129819233654, 3.234281140589555, -2.5675429141013977, -6.233906014969854, 2.829604143201541, -5.7035634318618005, 6.136658984811889, 0.18801667082184748, 1.1718852599463359, -3.37158698781913, 0.5543103075559559, 2.1447393751458823, 2.4052286726387804, 3.1987802369716203, 2.8837780275775704, 3.5748935228497087, 0.04384907907872593, -1.7207249913640503, -2.268379939329676, -2.54646608399458, 0.17272507419148342, 1.222496621330521, -1.18051448495237, 0.683230889152872, 3.009283682651503, 4.054703306766492, 2.2550396151123464, 1.5005514466435548, -4.436455253399137, 8.997314030667315, -3.438306315769449, 5.1540697015690515, 3.9969511192000042, -0.6380916251061487, 4.842852531939984, 0.6344015787117137, 3.506017007087615, 0.23345878682197096, 3.077311152629626, -1.5514959562170354, -1.4045970902645273, -6.34417787352982, -7.965294367882112, 0.7122078261665896, -3.64727041759138, 1.4074371967053987, 1.3060988597961198, 0.33766641555764604, 6.921526115523677, 7.761058985749645, 3.2322417725017076, -5.670841471403138, 1.247300773458936, 5.107858519484457, -3.3734629344661005, 2.8333269150156934, 2.1354333910705656, 5.6753036613124035, -0.5329077740935755, -4.407469466398959, 6.616590907662942, -0.09741781870485386, 4.042302244770832, -3.095859108830814, -3.7692739955695465, 0.7956012075262748, 1.025910106824662, 2.8062648554476204, -4.407331818377395, 5.178950580255376, 5.395620516220455, -3.8498452436278603, -7.849017775352814, 5.684145925365953, -1.9569191630212537, 7.156282680352248, 0.24915835228077732, 1.5396348745591006, -9.399369964022986, -4.3154654360250735, -1.035215646003357, -1.3421650251715018, -0.8954104439824389, -7.033069352460863, -0.8626655906331351, 7.87848540510601, 8.218795791699606, 0.6346090066484991, -1.1107299193610394, -1.6980320510523603, 5.304546099380453, -4.509459107598531, -2.3298733057293246, 4.713662046171617, 0.6628209012478363, -3.3368117984326546, 4.810288421958916, 1.5417923442147712, -0.7704411449241129, -1.021050702065964, 1.950479461454354, 3.2081420008270674, 3.5064760378734627, -3.3722022889413474, -0.713190658432105, -2.1968539465197323, 7.286235688428195, 2.699316964227374, -3.1311645179852423, 4.933186633880748, -1.7664356365551248, -0.0014578457271622047, -1.7314570227013566, 2.2083172651982967, 0.002549026700856688, 3.471294932458577, -7.0877042217976385, -1.320556535163899, 0.32938503021353654, -3.6578813556341188, -1.5665671549196893, 0.6292383602156293, 2.5975862181128146, 3.8376276210296774, 6.267513473815456, 2.5265697704536922, -4.7742686623345545, -2.6431322330122327, -7.262267860676694, -0.09155506704169436, -4.428885244043889, -1.8242126551835351, -3.1161855560344556, 3.7733197542014083, -3.596959003064325, -6.681944218634446, -2.9110212215148143, -3.9300751463821624, 0.0027888111670457683, 1.9422985538397288, -1.44151718311139, 2.4670782639353397, 0.7218601908294795, 6.494145852081692, -1.0779285104326755, 4.525948859408307, -3.7520060548703573, -0.04851416450027199, 1.4802975266171832, -7.856084851580998, -8.656740643453434, -8.608289170798335, 5.898851383999707, 4.483456459005543, 2.112716246433991, -0.2840235879979464, 1.2753506426089756, -0.3336455358933784, 0.8852861070401634, -2.963179924273214, 3.6167779167495593, 4.028773088201011, 2.9018088769651738, -5.479315533491991, 0.2450827010757315, -7.081278046143515, -0.49166286883662574, -0.22567439866278127, -3.0318437428165006, -8.137077955319576, -1.0311186079834878, -3.1898649765459344, 2.0030939936973464, -5.098406462190115, -0.8679162938288347, 0.8541176484390849, 1.5587228785800826, -7.183112349553545, 3.289407379296422, 4.2520626431841055, 6.339158130042183, -5.919608572915393, 2.6385147918649863, -2.1669064099274546, -4.735617013340595, 0.9310691498217489, 3.51399407916948, -1.9734940635626546, 0.02980481305848498, 3.5362374851287846, -0.45786212945606775, -1.4432552265731913, 3.6201081324795386, -4.991741515749887, 1.6238483865499023, -0.5483241244528891, 1.1018417566455463, -5.267895040830222, -2.755290412280863, 1.9706983419468487, -0.8415529026135136, 1.2556761389829836, 9.472430884422685, -3.719523050051428, -10.179883135610565, 0.5008128110012302, -1.3139910200098401, -1.0631039324578357, 5.383884284458782, -4.404546578849505, -2.736396856985186, -1.6902701905451023, 1.7667527556662281, -4.024373732630556, -2.768803840135271]
BIASES_LIST = [4.104645291911822, 2.0534651434632147, 7.3158560651219755, 1.9754486473621755, 1.3200282723758892, -3.9877073005536614, -6.629794634135712, 2.570293274980512, 5.498212928438483, -1.300945415681846, 5.5701484651836575, -6.89564907109231, -1.5461455667509236, -2.495733807407829, -1.199154887741993, -1.1847748103877735, -3.503922782320647, -1.4769491565802582, 0.09981717625805264, -3.898976102123519, 5.951129752896433, 3.395848977115268, -3.558058060844298, 0.3900070521502063, 5.2249237287331685, -7.674715004699393, -1.6647847136971594, -5.828888436289508]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

