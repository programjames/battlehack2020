import random
import math

WEIGHT_LIST = [0.5590079174730056, 4.913172357607752, -2.3169107496623487, -3.544870047779694, -2.3231601527389683, -5.286092541447389, 2.8766239509483977, 1.8290940290409874, 0.8047898466245771, -1.1052864539637852, 2.601379215427424, -0.015622309336728356, -0.9021241392864217, -0.7542481636580461, 0.23320532356622695, 4.93909270553403, 4.677452896811278, -2.974981709784297, 2.8284341373366555, 1.8269547506631996, -0.3738216270108221, 4.356333711400207, 4.925292333461455, 5.415261588681959, -2.119738698989633, 1.617200649203276, -2.1833024629760636, -4.35797835894999, -4.9112601020417825, 1.3864966024400884, 1.3641821539108694, -1.120216447654077, -3.393493312052376, 5.262554782531564, 1.0020360904436276, -2.4987965942851726, 4.158743821325723, -3.2788183954836474, -3.7556273361941974, -1.0360629186155292, 3.8304625928361555, -1.862936990035245, 0.432391787640594, 0.16458180541786335, -3.2594793079355004, 5.7229318133420195, -7.88292112989233, -1.0343028269341825, -4.615581846540952, 0.8811138648492327, -3.8440239675256787, 0.6740425462724384, -3.580473417236785, 1.8918766433659158, -2.2474514349777395, -1.5836812114363366, -0.41059168901793397, -1.9740154412764968, 4.891173618482198, 9.880400323996206, -2.192064127124155, -4.490099210130539, -4.320102742567165, -3.5215746733436757, 0.7259778939973468, 0.1954334576842649, 5.35953051022465, -2.1931041092658456, 1.2330124734936814, -0.6883062548600866, 0.4440565801145136, -10.345729520896427, 0.4892634539307377, -3.691307740472042, 0.0455588055210108, -0.9612530443818147, 3.3938765436309155, -9.799954637449902, -0.06949327262544537, -0.5687757612147811, -2.4188305723159984, -1.1091990431537455, -3.2544033860132138, -1.2174157085129615, 1.0133013451237987, 4.808764211619295, -1.8395728596110166, 3.9908030804254313, 1.3664141520547637, -0.6911299268058178, 0.999844484031588, 3.7867718615858963, -1.2506031949076357, -1.0601953768331174, -1.5837081822941654, 0.5311170289421066, -1.7474083196643477, -1.1299243566685666, -0.6301955714491634, -3.6883263534123016, 4.121928461965724, -4.823468710904558, -2.328186709213646, -3.6153173287537674, 4.93491736947542, 0.7471578229881153, 2.6983351643114264, 2.681201165109338, 4.9617001854462535, 1.8857402458769505, 4.387501987364362, 0.6041557399931878, -0.5274136240446732, -4.3126845555736715, 4.460850335239424, -1.7095029907451598, 2.549321621929891, -2.7643848393904396, 4.5633057192424875, 0.5760593056359422, 0.6283988662820892, -0.16294153117904037, 3.5933112271598153, 2.6134110109454878, 7.008857860241355, 2.440548287063854, -5.36209018477782, -5.635340882981818, 2.55775611962408, 0.062008798391533074, 3.628639749222102, 3.847855130682138, 6.50054804859939, -5.7465863952989835, -5.1923193197534365, -5.159933361254031, 5.250471647441845, 3.515142967772852, 3.565061326919155, 4.553833182894726, 2.0733782442741826, 3.4771197605465547, -5.225458961372374, -1.0573923934138594, -3.6808794092385577, 2.5110625257765196, -3.94993554451196, 2.487843565448647, 0.46736142306598666, -2.480263751496625, -0.42225039550250787, -5.121720263527288, -2.4189795687095894, 0.0029189821514834487, -4.153835429606557, -8.68583258166553, -0.22158206532152713, -1.8164542689848244, 5.459206179229404, 3.805007119015975, -0.9490170882400895, 3.840401759167999, -4.559067554182676, 4.486964017627692, -1.1223196873516303, 0.36034916287580326, 2.105787717770055, -1.6904033689176825, 3.3712992350155813, -2.603832837808181, -3.4555820878166728, -2.4227365077933327, 2.066400230045532, -3.29080047728712, 1.8340400351763306, 0.19510856476192523, 7.299806271211117, 0.1371840927427888, -1.237932848194052, -5.377083956102061, -3.225894214803099, -1.8772508913809136, 2.151012572582984, 3.6500672057598047, 5.121664060678071, 1.1354800439023938, -2.631559238882854, -6.109492828334086, -2.509639205737388, -2.1360622409908294, 0.08558029848316971, -4.289950609653733, 4.588282509806335, 3.2488570834033736, 1.9137956022760938, -0.429931078701335, 0.752804468414357, -0.5179856174387817, 1.6951456369301972, 1.7720481592413688, 0.12803304266364982, 0.7054340119408975, 3.034959214459762, 2.4259366523330566, 2.2503681802500295, -1.3511853550944986, 1.038872505512558, 10.577108158074344, 0.5748257008054162, -1.1207235076863706, 0.6025306918586905, 0.753272116853801, -2.939325926359787, 1.3033760779798589, -0.6536656511688648, -1.759739072608352, -1.6107625513298238, 0.33663162604329083, 1.29434360389852, -0.7539390587288767, -3.92720180088503, 4.0807672358131555, -1.576249243029593, -0.9550293725401623, 4.254043354491122, -3.5192953160220095, -5.032084113531011, -3.3236864373851565, 0.15496964515007555, 1.7435084065591708, -5.339352229341947, -1.6982828840164792, -4.684871403604232, -1.642744365348776, 5.275321190302138, 2.4098850353942307, 4.275884052841118, -1.1667337189267133, -3.622536484177868, -5.931833264955796, -2.5695593043124485, -2.593905908956676, -3.5970954623713673, 4.864113331121448, -2.6031342977659873, 1.2117493460003133, 2.593041864923543, 0.2220916624505393, -0.07334688057478592, 7.125062474215067, -1.5424788328069925, -2.115775000467384, -2.302901677370115, -4.269348570618085, -4.8509338576304994, 1.0209432330453936, -0.41551624333284803, -0.3518228850277596, -5.810717109794219, -2.516956634218553, -2.7278163425938717, -4.5798975898081915, -1.8295410356381792, -5.896535407127778, -3.067713981694567, 2.6883046576548626, -2.3708692075560447, 0.5940395264580828, -3.756310891815465, -0.5473314249798111, -1.6606974106151506, 0.16108036391312272, -2.898891553525854, -5.615390264889383, 1.5220249469811178, 2.025902635468574, 0.20283536284596823, 0.99636945110444, -0.7820989902873645, 0.3643962035626223, 3.943718661755138, -1.0312404196358043, -3.8991232087775094, 3.746050977811182, 6.1618302309270145, -0.08045618605603935, -3.381434164674459, -1.8213615187962493, 2.6404905418402063, 1.7038391194178066, -2.976917638282393, -2.6966331034269655, 2.546695534679492, -3.566364464531892, -2.255701881780379, 2.3630931229146857, 8.831334931266543, 5.947669674471918, 1.794223883476549, 2.0507118826402184, 4.559104676225795, -1.8725894996783836, -5.850249392848551, -1.7744586523792618, -2.3724461448433254, -6.864869883017437, -2.8895705431946705, 2.294368918610294, 5.065925825190881, -1.4255935797512789, 0.675898371756755, -3.9159605302283227, -3.6009924688769117, 3.260698855126658, 1.849330860142161, -1.7770154658942192, -5.648959631554057, -2.4023796528562746, 1.287357751433387, -5.597845521573765, -5.32014092459987, 1.2734004395118002, -6.798818217006453, 6.4050586170265875, 3.431412714634975, 4.606006580526662, 2.0006241443130537, 0.28137448193136794, -1.2697540130893465, -5.5639854179649015, 3.965529492327782, -0.33311181813188145, -7.424563668503626, -0.10029580454171848, -5.033469517149422, -0.5105566708331133, -1.6782022165750148, -3.45540202713399, 6.514549699954355, -6.778440144976898, -3.239390238793714, 2.658570274943637, 1.4796630213717064, 4.18341419436902, -5.6969855955125, -4.632739739556178, 1.7085295665498081, 4.796449847291463, -4.848759135830006, 4.654123184578468, 3.2578241230432794, -4.021564933501002, -3.406693946774457, 2.3149863653610114, 2.332230784824335, -3.3871892611612395, 0.03380391883448748, -0.0120061280932264, 2.8235928034986317, 3.2426527316250913, -2.2423862759684545, -2.8229543052754433, 4.918297842346661, 6.055531480587156, 5.290754573094331, 0.11265700908426132, -5.841016017160496, 4.2640447776942905, 2.6016151773735934, 0.8516947170464234, -3.2289310640820674, -4.71237961529633, -3.66523685550999, -0.8889174239303639, 0.336635297655847, 2.0731033991384367, 3.9128189378921223, 0.6842891248388662, -5.649681595713222, -5.260314785012166, 0.4263732980974549, 3.425028177883642, -0.8777537447744574, 3.168675460334106, 0.12582922893258935, -2.8720952889556095, -7.232738168099244, -7.881703329496778, -4.598637248129582, 2.4659310218666537, 5.606347480095345, -1.6989079018640327, 4.706554206590032, 0.50767987924796, 1.4429114202590878, -1.2969545073160544, 0.3435412866143506, 1.1805019821647948, 2.2572380338545095, -1.502748434289171, 4.291384147466075, 5.55497708802142, 2.7121950424180863, -3.453064969690254, -1.717632661051779, 4.537688275808533, 0.697909120512463, -2.148108305246575, 3.8648075957578056, -5.5496121523839, -0.3026149625768694, 0.7827679777399212, 0.907892761269283, -3.282783153751892, 0.9657606079571629, -5.68276167654788, 4.133287820612794, -1.5759761049587624, -0.7104751129986677, -0.9964376519075893, -7.397575064273299, -1.8356497040521786, 0.7547266197942323, 5.223314633808702, -4.348923925485435, -1.1476625604822026, 4.081106086075746, -2.748550974421421, 0.9134907452019801, -1.9426430406521962, 4.3878779491754925, 2.792077967890857, 2.991411142849393, -5.913544513849638, 4.932309022050454, 6.181800452678622, -0.7312484238127582, 0.8080023926906267, 1.5797040393971824, -4.765033406279575, -1.6195224780355584, 0.6496895794874644, 2.0105666530171047, -1.8352555993563096, -0.37125207619826994, -4.321813922278666, 0.7163533614180413, 7.985418921906841, 1.8092455065527706, 2.9310257342467545, 2.410077913026616, 4.520574724799349, 4.937178398834634, -4.365265453006947, 4.689237983795064, 0.0039055625422394075, 3.6235636119513175, 2.554306174944188, -0.3830469774591696, 2.5153431206127075, -0.41730668681185523, -5.915657210454543, 7.6965624743671714, 3.686732173727116, -2.046262493850247, 2.0669188565606147, 1.4955197554598234, 3.1927116720462494, 1.3679135667456948, 3.0470430002330966, 5.176183106291211, 1.6593530921303934, -2.324419766202632, -0.1051888682538484, 2.4935095919356236, 1.3466767607642993, 1.5718708238260888, 6.843451325694457, -4.273989513138933, -2.461807167786193, -1.19692243988645, -5.077694715098214, 0.567041822960908, -4.3506367265944315, 2.6958772742693426, 0.4001507999502941, -4.409047675166465, -0.8142326825426179, 0.4777385124625741, 6.265844026819522, -3.2862265862521634, -2.8834806350347963, -0.6945732339301456, -0.24253082790117036, -4.8646734238668, 1.3605617970160528, 2.60549483804151, 1.8341016381180102, -0.37297613319972595, 2.7255959869056903, -0.28507106423436196, 0.11738482360637263, 1.5482946337236336, -4.745436349496101, -1.651737085593775, 3.6059746029998427, 2.870471810733142, 0.4895315084944452, 4.254748742325175, -3.056529903770454, 1.8202569601013496, 1.0488053901373622, -3.7712679668592735, -1.796269508199504, -4.906193033281147, -0.9704327551948265, -3.9925097871391686, -1.0008730487160078, -5.974243962656432, 0.29964525960592503, -0.048850636409290674, 7.010447230388867, -1.1853071908461492, 1.10871408397708, -4.018851604502951, 6.954752163757402, -4.0770769337773585, -4.131056221560009, 2.0437316463507074, 5.107994036988791, -5.505905940267902, -6.407635278842236, 0.9174841679034209, 4.223560854156742, -0.9018925512229984, 8.074984533282578, 2.529195054668726, -2.297800087028091, -3.333261016528102, -1.9955675887316908, 1.4621624578086954, 1.064170681261252, 1.4395305206991809, 9.020772327681831, 3.803182872062532, 0.5722546133263736, -1.2696106751773188, 1.8035444902967934, 1.500111479245778, -0.5487499433689301, -0.2851435192160314, 5.9809366254897185, -0.1221298158402362, -2.7882709785764352, 5.405233363567282, -7.76510879331886, 5.249374348026187, -3.8879840450677543, 3.4020346611447185, -1.0073084402487131, 7.806351633900051, 1.8984259191610349, -2.2544193367847027, -2.1876367691683436, 0.03063662282031578, -0.12185932213066032, -2.459357992345522, -4.4196458619015155, 2.2097220638375665, 3.9572881256026973, 6.0438495536258765, 4.8755643587691555, 2.2506173476005835, -2.151957218835369, 0.028224594424641838, 1.8463125421730042, 3.704569042274177, 8.940816060277799, 0.39588725342041753, 0.2258777821688236, 9.611058202430433, -0.6148881671141903, 0.5358219060371657, -3.1841129875176986, -2.5530615680054463, 5.766012964570133, -2.351833320541401, -5.445916199645267, -0.23449509497253582, -7.3656585272831405, 2.4208723791898867, 3.0768676299957645, 6.108913369972951, 4.9445942748653975, -0.9557092650306365, 3.8031482362688673, 2.9158680268227, 4.111226913654908, 6.784996250220327, 1.3796025382275816, 2.3049962640419754, -4.253919526923013, 2.0134712597771443, -7.722453615631632, 2.159058992264975, 1.2680422791267763, 1.2138606355532342, -5.139639423221561, -4.53895346581981, 2.362056741626975, 3.0313087301318444, 4.273410056257348, -9.13852520496668, -2.417194558879166, 7.446055835878757, -1.3612876308910278, 1.4439899252708186, 5.828027509143493, -3.4693802643423712, 3.1560953120847803, -2.0108888236498528, -9.98760207336347, -1.0561809068448171, 1.4709712503212131, 2.902902737098028, -0.9024630931970977, -0.7038373708524084, -0.8084957854025542, 2.273621265446653, 2.487760662899787, 3.2307796288098243, 0.28631160134828754, -1.4140416292285796, -4.29305215025278, -3.228269973479602, -3.427735409267286, -0.712178523119114, 0.859893469830707, 4.226773431943614, 1.9493746906619123, 3.181030589846425, 3.107694711664277, -1.445364222771702, 0.16435532851531057, 0.9618765197709472, -3.0855819445811994, -1.645443817121734, 3.477687044841459, -4.021722232706295, 3.3559561198877117, 0.5706026122523772, -3.684749654245822, 3.447704669304651, 5.929810186047492, -0.4394815527632327, 3.223769440105677, 0.3865042747015694, 1.8476989487641247, -0.913455932972517, -0.19641346426948406, -5.260278910582924, -3.3600805832859364, -3.712215126892422, 2.338397225229061, -3.8978870972044977, -1.5394504991824447, -1.1404477491150413, -2.060077410011561, -4.909455655355454, -3.8695497708237596, 1.9890791379948691, 5.67451402058142, -0.20462309336888387, -1.8290425039773963, -1.3548664205523469, -4.282428488807795, 2.347264255127594, -1.5487056594937318, 6.690017590875114, -2.675712184118034, -4.747045512962556, 7.88618734059192, -2.045950635738457, -3.2778370437228834, -5.158018510841759, 2.996883634527885, 1.5135753917837471, -3.5574755124552198, -1.3586124687642578, -1.5939063647784169, -4.8109049539729165, 3.327625311406389, -1.3083229031546462, 4.380820513847484, 4.628805129518736, 4.2906817647553375, -4.906623251214563, 3.642751992089737, 0.23785326680856944, -3.39718172643761, -0.3613492983968909, -4.746224145076302, -3.5411145578931498, -2.0672636025771123, 2.5198523236744945, -3.4105215046294193, -4.6764571856339625, 1.4350090792081303, -2.7581358972727426, 2.0112345699089595, 0.4717567656596634, 1.6747554786625127, 3.9671485172292593, 2.9351763832007114, 2.7953896172200423, -5.862178822529035, 6.988831941309863, -1.359870042589832, -3.471488830648429, -2.84587346093405, 0.14543718999461175, 1.4889250106260787, 3.0311967245948734, -3.594744460414179, -1.057993694812279, -2.763899938819576, 0.583756505753217, 2.186063792652743, 6.125098979392905, -2.7527488509469586, 0.09285803289256041, 1.4773166631988408, -1.249775205650888, 0.7365627131076501, -5.7370986085543905, -0.8350202913896424, -2.3794962517585563, 2.3552673773426647, 3.773097799332742, 6.926405920010126, -0.8660299824212468, -2.228631072956943, -7.9848259010865865, -4.328681157395052, 2.994463479668079, 4.223317248156384, -4.417966397620267, -1.7829452321342034, 0.9760313098812862, 7.595746402653114, 3.752975783573831, 4.876012209846165]
BIASES_LIST = [-1.3872417305898037, 3.7027740868496943, -3.622752975107637, 4.795627898138655, 6.331807995779282, 2.7726095581676877, 1.0997599197994103, -0.07969197341274022, -1.1065459615957451, 2.661081269672392, 2.122760892706988, -1.365356442466341, -0.004814210788388746, -2.6181134723007977, -5.498199075803722, 5.262412325550451, 4.820606233634991, 1.4809171769019678, -6.566902357248443, 0.020885673300712535, -5.077893229404762, -2.801432283751975, -4.061952326366718, -6.1008087070837265, 3.919881453427201, 2.6540257114946653, -4.030817544488304, 2.9183497090676114, -1.0816622691572138, 2.3058818649631942, -0.3424604143772456, -2.289280314870754, 7.119209529033098, 1.8491143447270293, -1.6784987611477302, 0.4464277116474566]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

