import random
import math

WEIGHT_LIST = [-2.7960264178998457, 6.107247281865369, 7.282109118118665, 1.693635673555189, -3.430801529679295, -9.989499323243097, 3.49545890329429, 3.8616671121586066, 8.789582167922742, -2.5292158581401676, 3.343474797324511, -7.509626881956672, -1.1891364269292364, -4.319138631650226, -7.471414695911596, -9.720025234506595, -5.646300554898649, -0.6317042371053194, -5.557325018641501, -7.93565394779622, 7.54354279720441, 2.930377738301928, -5.707464789155892, 9.38078052377504, -9.765497256899451, 1.8812713787536914, 2.238542588624025, -9.279976470430567, -9.082268997211976, 6.069080748338756, -8.515453732016347, 2.7926910761491115, 3.045387631428614, -4.706953232813049, 6.559993125437007, 7.080617356516882, 2.949555441224369, -7.739735849674972, -4.413936548068589, -1.656782231834546, 0.358467132808169, -5.28435327912409, -3.2365461950491303, -5.054854487767835, -8.936330715957757, -0.639830288085177, -6.269954993148916, -4.941876193429047, 4.645267992337756, 7.770673590557639, -1.8074916482037615, 2.2086540290013623, -4.669240088538553, 1.9618915872946463, -8.071309881046895, 6.401680198133555, 3.5915360589045733, -1.3129806614579227, -2.155307953358127, -2.093005077943417, 7.279272961676281, -0.15020193731549547, -7.642052662245864, 0.7347241356135736, -7.041549559603137, 1.3467130148531847, -8.286698635688094, 4.0143559245243665, 4.407203316969765, -5.498702251333089, -2.85070761776449, 3.7529830021822708, 1.4004329710420684, -5.945194494332318, 4.6864982272373705, -0.4146344057589282, -2.8976447666056053, 6.162891619886302, -5.553452032550998, 7.331481607659406, 7.1337257583360625, 6.160492364555719, 6.1692189870514476, 9.63167003891872, -4.587877048271154, -7.24630096533696, 8.873913778533389, 6.375045312914974, 4.539143153421566, -8.774719811743779, -1.6264852452268936, 1.2693035761112288, 2.3526431692870258, 2.1082364571099177, 0.2180465978187911, -7.184447595975736, -2.8532240174657524, 7.949894922770742, -0.47984168195421617, -1.237940104949601, -6.592137031247612, -2.0283510557454836, 6.88287981542198, -7.152043601718687, 6.596657494227415, -1.1277273714672802, -8.94146327024214, 3.1870400158635235, -2.5265598633514497, 8.204663600509509, -1.394042187783736, 5.9521461571961005, -5.022850993581953, -0.15675412284192802, -6.579608031116944, -0.5010523674006606, -5.186305985072783, -1.5402219657859781, -5.46567293361888, 1.561093172322396, -2.683588309019445, 2.4634206092348077, -2.19255874978201, 7.154549694957627, 8.683176276515631, 1.6993351483225432, 0.9751858747044384, -7.942851831166802, -5.237897004951575, -3.7997417151241457, -7.70044462029273, 6.149137412385915, 1.3998116137316146, 5.018681704258924, -7.47824073421707, -4.41091679020452, 3.866080531805663, 5.482052449839474, -9.113972311448483, 2.3537611546936006, -1.4778116812189737, -5.884734501511046, 0.8772543020055714, -6.697368058680581, 2.7139982418475768, -7.150972186454818, 4.914125265729343, -6.589138227750341, -6.712984425160846, 7.719613627862845, 8.028887126512306, -8.702525561767104, -4.071555612272332, -3.0081758520428226, -6.199839998987809, -3.209977479116639, 1.037517265339222, -3.416243433271582, -1.9368428880617543, 0.5591400689367383, -3.928272176025313, 6.68311973091479, 0.9094771515858788, 9.289158850955246, 9.688689483866831, -6.819439865100303, 2.4111790653308756, -7.4729830742383445, 8.376891695663964, 4.549342809574025, -4.6471206886987115, 5.176580499592152, 3.187658772424486, 5.80463943764723, 4.282029209029723, 0.9564762026567291, -9.81912229990807, -6.551910490245043, -6.305370176528338, 0.588648747229918, -1.2884479117535292, -2.9385217578607765, 3.3695576822769606, -4.759312992362368, -7.535034383644064, -8.073079768153557, -2.366468701335968, -9.293985364358683, -6.71444507730135, -3.1223977944955905, 9.170566236337386, -6.967388690511478, -7.098981703860825, 5.442841570298869, -2.9102474398943183, -0.703631809679079, -9.483465570162918, -7.439204852336287, 0.5600608412298076, -9.629657085457923, -4.813762408538249, -2.7959492429101935, -2.444662718698442, 0.3530988003613711, -9.40248624334447, 5.540162121256847, 3.092566732158062, -6.856315519675311, -6.075470685112547, 3.0249063521210786, -2.4754929295663475, 4.301969057239159, -3.6029048428080834, -6.669448168145349, 5.770539569683704, -7.152608490526731, -3.2027456035226276, -1.519912738169607, -2.2940451646715543, -9.218186506690815, -0.9381953806856593, 1.4681704481462248, 8.009976910133343, -4.755068224956435, 1.42037357888608, -4.796573977516736, -9.469570686364605, 2.7655577649298575, -3.333498509972208, 8.351165580780478, 8.872572529594269, 9.790731317319828, 0.45992495203980965, 3.862389835985198, 0.6816235463118918, 7.493918782421993, 2.5521902815933046, 6.468858239671857, 4.077124689636772, 7.306421596823686, 7.072287532479024, 3.7094808549912788, 9.064438788071115, -3.530112273418906, 0.17579344060540336, 7.429351705744487, -3.27797483743697, 2.374480984563876, 8.106761865495734, -1.095955540789074, -9.423128880160153, 2.265705625768197, 2.039852412994561, -8.13265492699202, -5.0409852758489055, -2.3092471094505225, 6.460731348020396, -9.076131296512077, 3.15686559307553, 8.178980551948335, 9.301252303703677, 0.9894532219874144, 8.20359366180848, -9.06968447084541, -9.620854190049027, -7.119695106484267, 3.354770001571678, -8.61429482962826, 1.2751298884303957, -9.830496949761184, -8.89492554250367, 5.6435135750072725, -4.3098483618675925, 7.124199859260813, -4.774212001986524, 6.223056836134205, -3.477182276664097, -8.494168714537665, -7.237165447726035, 9.904985892805339, -8.988821533181879, 4.080783068216643, 3.222016317048098, -6.503288496458262, -2.0524719051918483, 9.710015323756313, -3.602830648965818, -0.8542873981804675, 5.569554373991066, -3.286442397909319, 6.654366812285865, 9.060391935809996, -1.3288261946242415, -0.014222329237572495, -8.34772945158262, 8.789855313677826, 1.62862686895968, 4.939562022330893, 4.44899573391014, -2.1649811807925197, 4.69475963845991, 2.595075434714671, 5.361524616940809, -1.086540591779226, -3.0487658363554537, 0.9018938730079498, -8.681363901121294, -5.908134076334878, 3.7582703478154222, -5.663102907371089, 2.3664333446647223, 8.995622537984175, 6.574459766905278, 6.209348248877198, 5.13256014334339, 9.362804454601125, -8.585260167460135, -5.167523988906773, 8.175400562169479, 2.8917088951905185, 3.9603939767064293, -6.063161462999112, -4.015598435579557, -6.116337454770733, 0.13959988017716185, 0.9976937976752236, -2.106800813825531, -4.466060863860126, 8.285635704221686, -5.4832995773256155, 0.7924933127339386, 3.296173907470571, -2.636663809080244, 6.052080965158776, -2.7866003520150446, 8.316868057551662, -5.236538293138344, 3.911114846292193, 3.2580984892697273, 4.281148575552237, -0.3796665495510627, -5.922632656208718, -1.1791257491569045, -6.479253662099389, -3.652778205809768, 6.333824746994885, -0.49953086011907644, -6.967348140445591, -7.99094138746179, 9.942702008208911, -7.1986156822149105, -8.997273306006194, -4.706872346457027, -8.88040334935843, -2.7774562872661352, 4.756482923147798, 8.205719967534122, 0.36043498575784483, -2.672056197632646, -0.07265036057983565, -9.010782187677517, 8.007748939204397, 6.576918620763731, 3.8401939157605938, -2.5620710658761014, 9.192498010984337, -6.131446659181332, -2.907245390182533, 9.475608864027002, -3.4862618713412097, 5.450043506697957, -6.44943184775983, 2.326067886595114, 9.721904848254002, -0.499379977867104, -2.613769410686178, -7.313542698839228, -0.4622677443160157, -5.805936352424881, 8.92760415817509, -7.7498342226303985, 7.799336885266975, 9.776081560413836, 6.9386947128749945, -5.684876684223415, 7.851574894767708, 4.404271236155031, 3.4234742284915995, 7.656362947601551, -6.08440777286908, 9.971583157457328, -8.146567495708858, 7.164628349026355, 9.365471625980714, 9.041613492671424, 2.7937516081079234, -9.092808895521785, 0.1980115371105473, -5.9219018133639185, 9.236772496348568, -8.646292628616434, -1.172911735798131, -5.869897701377402, 2.191947947737468, -8.766781499557952, 9.836537962410773, 7.002515666931455, 4.473710811934197, -6.168258544836176, -7.803515485731996, 5.153246323170395, -6.293604859039894, 6.475231460414452, 2.6113010641305117, 3.270799677979504, -0.5543942202904795, 2.0834673525488423, 2.2655656326404188, -8.749667001227039, -1.3534207858666214, 2.4754584311509156, 3.86274395748025, 0.5692525015670373, 0.5648578103632218, 3.095465900885266, 4.888673237720052, 7.11488946065165, -1.4248362439328144, -4.341906151846581, 5.298484785536592, -1.9976770395354482, -6.953393755490325, 8.256630422283294, 5.069097633765498, -4.045264517768549, -3.2638535944569913, -8.658199735080155, 3.4124735406200877, 6.617951424176642, -0.020107008148693595, 9.100415671514348, 4.850022093932328, -6.67531327060318, 2.2411904249634915, 8.430255741054197, 8.863637833743525, 1.7067552944076585, -7.482050346224181, -5.476402727206056, 6.859146634131029, 8.839541328044863, -4.337835009560001, -3.3423233844957494, -0.1918511698377312, 1.8983955959029704, 1.7463308408027363, -0.06928496300115938, 0.5323323964377362, 9.126644779821365, -3.2849638107391037, -2.692937437124689, -1.2518599124413363, -3.4470761553278795, 8.155679750571242, 8.483277662522429, -7.644905544584586, -2.4933674119400457, 0.7852838279098684, 7.59321156944193, -1.5158461363589808, 8.501214039871009, -7.887648536042513, 8.211821712640162, 3.141260591743343, 9.744893703488248, -8.28452968525928, 6.674468551780365, 9.437066401132903, 8.698083295248725, -9.68868636253313, -2.054653744913912, -3.494004537090185, -2.429744085651606, 6.67202869157504, 9.013929550287745, 6.845065661198262, -9.36421180844966, 8.82804936404768, -3.0936564528870143, 2.164499521911834, 2.7157179081470737, -4.052269838169211, -4.925370879289412, 0.3663283263686594, -9.536124834902004, 4.12685981400929, 1.237740278231378, -0.20780506860963222, 8.951701640936534, -6.52638362400856, 4.058600902695478, -8.218038157053535, 7.782241441244786, -9.86158934576348, -7.516213335781297, 7.178309581077791, -4.825187046782807, 4.120904870347317, -2.9553989661308666, -8.73850426249854, -7.760919351479507, 2.857209843303771, -5.4774230639598205, 8.813414577027128, 8.626181663727401, 9.837654037944038, 8.243447681982378, -4.878351203363418, 1.853436353600273, 8.686657182735637, -2.7473264141402627, 9.328043608632203, -1.817575112207157, 2.0111887872056506, 6.0548611344244065, -6.655728194958139, 6.9164944494272795, -7.699431292326202, 7.46137857955577, -0.18961597531911423, 5.397158295581487, 0.5223493289963788, 9.09922490079548, -3.081042564188225, 1.2914716456897892, -1.315639100041432, -3.3217443613404036, 5.977395368455095, -4.03425817874523, 0.3701721460059737, -0.8568934704680302, -5.087303343979701, -3.4287346618390817, 0.8903719403372286, 1.675289766930046, 8.590036103301316, 7.497548558464796, 4.616038592473453, 0.10106214279363002, -0.8222207435589652, -6.9234074619029995, -7.067411369961083, -5.261765796173989, 9.367158707417154, 2.176720209914656, -4.691545420345349, -8.85361427358055, 6.732890617120322, 1.3259313245795816, -0.3190825309570027, 9.744768304140162, -0.9565550336068256, -7.111529764103572, -7.139273370698211, -3.942276109159568, -9.563713190718833, 4.203358468666142, 8.31205530419076, 2.2721106792294155, -6.534729408153675, -2.240505947170819, 3.8714307289754757, -3.7713879016016705, -1.9227637061393672, 5.255915390538814, -4.859632563079897, -1.8760208190538101, -6.0529933560592575, -5.7382662789705075, 0.029754573709654508, -8.699752603740672, -5.787080101012627, 3.5817661465247213, 4.374333269027231, 6.240848992133628, 1.7081176931119018, 2.3590883651469756, 9.546954594745756, -7.636209898306925, 9.108458968462948, 0.8536679061683152, -0.13994090296500872, 3.0526256251104797, -0.8756784415069383, -1.0396738025121657, 3.552435731587396, 6.920239718162875, 8.530136477766352, -2.9255684928976766, -7.730593863954605, -3.531270218109233, 6.340278834238148, -1.3842286821377403, -5.7018796742596045, 0.1712162664331789, 4.879373283661465, 4.413014305672522, 8.228366471279518, -9.241459206595458, 7.894239598920301, 0.8068511364977304, -2.9343049469527083]
BIASES_LIST = [-8.344031735443595, 2.9516400864710928, -2.0371702006961794, -0.6350636162111165, -2.4832854680458354, -2.5032842375899333, 9.742584938005084, 5.69498469769303, -1.0875901979161426, 5.795339210535651, -5.592232414686189, -8.750582669527013, 5.985588108495294, -6.530659498044004, -4.111294058120645, 9.03963828697691, -3.0734128193897003, 2.0001599162100625, 7.254318546721649, 8.299516644657537, -4.874358966706247, -1.2359597033316732, -2.6550095227031223, -6.372820283463055, 9.663877550989785, -3.1090718278923957, 8.149706982662256, -9.011713117028926]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

