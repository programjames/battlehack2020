import random
import math

WEIGHT_LIST = [-4.72744634908736, 1.8556437564860708, -0.6494686270048255, -2.1027611936090773, 6.389379916222136, -6.1594689104623175, 8.706401043788688, -4.6452881620936, -2.1340706993128356, -8.65686812028984, -6.655914716453195, 8.117712982893345, -1.129556274859258, -6.127377462745618, -5.84964273352057, -3.6622402064265476, -5.518575649701085, -8.254308161081836, -2.754512996964788, 7.9452711039212005, 9.73681064653649, -8.529587643038361, -8.051870079336334, 1.7625350700701947, -1.1426746708657358, 4.745975449887235, 2.5385580183449896, 2.673506690707125, -7.719872006013375, 6.020391872353731, 6.223757014853231, -7.2918899216607596, 4.589425065487674, 4.150154560179068, 9.654675377804153, 4.997496394824152, 8.92964772325044, -3.3137065805483523, -9.465354915546552, -7.045525078757007, -6.7280989585976725, 4.723912173880031, -9.631012788938332, -0.8045691449876031, -3.515669923365081, 8.635431404382281, -1.6878180468736623, -6.176911046364761, 0.8986151391080011, 5.964717323678965, 0.01776376631669585, 9.453697417960708, 3.1700815545045486, 6.523698662035301, 4.533649584009696, 4.202809017309491, -6.766228541981921, -1.2902002681170117, -8.942008601507007, 6.452153569859426, -3.7351318477717, 5.179598737085696, -6.7231566762598005, 1.5287311401024528, -6.376646951781641, -1.5565151451677082, -0.05399351132315111, 8.447805218905305, -7.786932286806019, 2.130444003474574, 9.272650541805785, -8.832011809862676, -6.801112927143702, -7.952985306841747, 1.6236705468243358, 0.17500127673835308, -3.8656436566126917, -9.539214887185874, -2.6383238242600715, 7.439127840296226, 1.3283600842118517, 8.13997865960459, 2.750315044828543, -8.568406612839865, -0.7995932958798573, 4.19722780129473, 5.339421639808432, 0.10519042478590102, -7.25940021232298, 4.0298279189196595, 7.346129810514121, 3.3179530305744898, 5.915086246087345, 3.4022735181202446, 6.764072662178606, -3.7459616980314365, 9.920180581461988, -6.308986366762605, 4.663605944709868, -0.4343077466699068, -9.251472299394678, 2.127042302893365, 2.6011270946108045, -4.605239965576899, -5.531445914385658, 5.0743595610595875, 2.998745201610756, 8.62940801102059, 2.097467980927801, 5.268024240822529, -1.077742481511958, 4.384018769190112, 0.19338256468532045, 3.6240710064860675, 4.616142555095932, -2.3840099001292936, 8.131080668725485, -9.019748366303533, -8.4195931582531, 1.361284827136446, -5.974754024212547, -2.802196900961005, -7.567143728468091, -4.825423631278179, 1.0600708574525939, -3.310375542139279, 3.7437232665092637, 2.6446095420227493, 6.988666016073537, -6.598036844262474, 0.015744520473839785, -4.794545060429016, 1.1074234566927856, 4.120914864978129, -1.0597892537899547, -9.875420431755055, 4.027809307180167, -0.4744361975693767, -6.597031822027615, 7.112136143816393, -5.50071999088628, -8.850030170609209, 0.46649731637934977, -9.172305203307435, -3.8242073928837232, -9.03607560355347, 0.31472597551752557, 9.744145091978368, 6.653585417996954, 8.677098990122836, -6.912988871297749, -2.830788709195531, 7.632825565722065, -4.731092910628421, -0.09473283405843702, -0.25260864312622466, -6.107697121458093, 2.498001664762734, 3.623068896557376, 2.9874616702423964, 1.5725438061978672, -7.830363458116693, -3.828220255355075, -0.7401832242959188, 6.558276975827695, 3.928081493876814, 0.9274368214854185, -6.169084180534905, 8.18284062221148, -3.255332988610162, 9.969082483982557, 6.744862700151419, 1.053095340876693, 1.682052981573488, 0.8857319949775473, 3.7679898991916723, -8.490195101971544, -2.1383178950358577, 5.593428425936192, 3.701101701083388, 9.645430874767051, -3.113119011081671, 4.8802710939558285, 2.348556933029265, -6.12639184825281, 8.865657084510495, -9.622919920390668, 6.546015644492197, -7.275883511366907, 6.6884204385010975, -5.95887426795249, -8.912188242971322, 7.683728235821153, 6.102270383471186, -5.188163876677702, 2.7095054933790212, -8.878345252063692, 0.21979179089211698, 3.1101921750224832, 9.337162992542062, 3.324408857395319, -2.343787266028386, 8.29596861213831, 7.589585286706438, 9.654207652935341, -0.28239985387271105, -8.889996894294125, 2.835607293170927, 2.2501674282655593, 6.245442658859584, -4.497988216983762, 9.347986149437855, 3.9681291210071716, -3.1590569818465326, -3.8421888715561225, 5.2696681101067355, -8.3179528835283, -1.7831084037488676, 8.801474681647626, 4.56289857887975, -5.07225988031405, 8.278691218414057, 8.908647920549559, 8.171954205670712, -8.645727724737286, -5.628054136485416, -7.584792764529642, 8.009550953086098, -3.6555581394444587, 4.643016670583931, 0.057057887593092715, -6.043832942162162, 0.4739022494650147, 1.989017571104025, -0.6593687639735908, 0.987804455872217, 2.9591500350344084, 4.207846393917567, -2.4451912063030212, 9.47982416403486, -7.718190443680788, 9.28300459320997, 7.023132139373253, -1.3792918109662171, 3.594680639677561, 2.245896598744128, -6.3497498922296565, 2.957923211589735, -6.696949910183374, 3.825451629927926, 9.064302902830928, -5.453661966335037, -6.581046169732878, -8.45651331225591, 4.007533643707774, -4.980512751117878, -7.051213591159189, -1.1342004929319955, -4.008228988811215, 6.365351479527217, 5.663195529079005, -6.007519162983188, -8.2461222189797, -6.591413136357216, 6.310096160207589, -0.8566448042322712, 0.7133277491320165, -7.2066381965824995, 2.560544226488087, 4.7958590755757875, -4.993321572316529, 9.485317129181745, 8.823237946357366, -6.735752655343868, -3.4622070539593075, -8.368855406520105, -9.911514255522638, -2.5356984625973844, -3.1192432197292526, -3.3655132045910863, -7.793172868430107, 1.0522246686492043, -2.6607450456655757, -9.483899550357748, 0.7602137929608066, 1.900617364119837, 9.059309660378581, -7.274059297892328, -0.31414217027786684, 0.41787672794005815, -2.033714878695889, -7.625958068107224, -9.59676180360207, -1.645619909725962, 1.782792921964866, 9.370064278362417, -1.8115069130057897, 8.526986641428948, 2.391386491079409, 5.950357210979629, -9.733610311202609, 0.6426754680510882, -3.9869773012800014, -0.18498581605332198, 2.522765373605985, 9.874980847520632, -2.6746259743738277, 3.148683984611429, -2.1943612164605693, -0.6541313271159677, -0.8832786428331083, 6.27643553712015, -2.3761695282429596, -4.083674287933117, 8.8677118785984, 6.441725465109577, -9.481127285305192, 9.848827244649744, 1.1155871405654771, -3.9298106486287, 0.6537452713538183, -5.3586089880407055, -8.609306063319897, -7.224926357361838, 0.18805650419326092, 9.170935357477607, 0.6328482144264864, -6.529964042974421, 9.11992394286073, -0.34538559652752276, 3.919856244553584, 4.71046719461631, 1.0538867739687774, -5.816314119467146, 6.114322253253754, -9.829766974234374, -3.7959765312422844, 0.9413844225046795, -5.792763795875535, 6.240033802012324, 2.3240306672662427, -5.359012294987737, 9.8754255935993, 3.5793107866622424, -5.37554666049134, -0.1456226927598685, 1.3704318505927802, -5.126368276863711, -2.93040504195681, -3.2073811459397694, -6.735220916657283, 9.649470402313366, 7.207176142163995, 1.6176250420512854, 8.949810205646752, -5.611868786649314, 1.02008860217955, 1.0576308931607752, 9.535574152845431, 4.997353725911633, 8.37419550638053, 9.99150998502235, -5.1175344474402, 6.224171631423385, -8.352936724275796, 5.692925544569821, -2.358660267069319, -3.5677864225133167, -6.169396414006441, -7.348773283647381, -0.7706788274011664, 5.522044656460681, 4.92765114382863, -9.655452510070745, -2.112417620176239, 3.033995590699025, -3.693391391830323, 3.9455659861711965, -6.104454795355205, -8.191941701357601, -1.9285468879972605, 0.10689683147801077, 6.592301129636677, -1.2624040101564038, 5.755918047449601, -7.6859352854629375, -4.35986133102138, 5.674110593018739, -0.8063939059011993, -3.1973025356825406, 4.681237239504142, 3.782593398603211, -7.633921400911589, -2.1795723581095494, 3.5641772725643595, -4.826299873059783, 3.8938066882533207, -0.21528606481700407, 2.246413158017152, -8.407229360178034, 2.0851201024379957, -6.535963856326825, -0.2847936601248584, 0.1153162759779427, -4.862477349453796, -3.623366241998025, 4.8865877083868945, -0.8468257695756414, 6.838121641512561, 5.946209530881724, 0.09788796966253699, 1.253488113876145, 6.599435434145228, -1.9843729018610503, 2.780818989798334, 1.1120976857951739, -3.299177490874956, -2.0211394947848955, -5.5526570660903385, -0.2577608014277022, -7.6383392517919635, 7.07503336314053, -0.1017080191875337, 2.0387222359002806, -8.523164295461552, 3.642448895242836, 2.2498250852549937, 5.812850342684637, -3.354634029763666, 3.194705405045063, -4.9145282574753395, 5.006333039700355, -8.739564074932208, 8.36615999719892, 3.175635688709219, 0.8221041417184658, -4.525011304354312, -3.732098494617871, 6.345840105748238, -2.6166768481082814, -7.596035217850017, -3.1144340803182473, -5.156704229017901, -0.31616197508261656, 0.6964183865897091, -2.0812383939277224, 0.6658487261737083, 9.630141635229506, 3.447189435597446, -6.1749251571975705, 8.913169274860891, -4.265904930103604, -3.64352731362509, -4.977929427605822, 3.3264935079943054, -2.2432885355628907, -7.7419255420493265, -6.370542245011171, -9.300547875392999, -8.933507840323466, -2.856730927997453, 5.749701391197892, -7.002146285283031, -9.780573486147077, 1.0532297062390015, -0.7934986131178512, -9.91172907631582, -5.001075540977755, -5.7422257238805425, 3.3776165205086155, -5.326336212332277, -5.412967156765629, -7.54470952088165, -6.951596012609505, 8.892659601832552, -3.3023859243972193, -3.5297905389098876, -2.52282431448627, 9.431896960485822, 4.364374704275228, 8.691016827824495, 6.520399137650809, 7.776668442377776, -7.0138880011417415, -6.761755016713904, -0.947186026675638, 9.26162501058781, -1.91136714554084, -4.518042154270912, -2.3789508595634334, 3.846739986010732, -6.445796900139536, 6.525254239008646, 9.772106096054337, -4.648005451449828, 2.467360045058655, -2.4791901714025766, 1.713636226663768, -8.976930132740176, 7.458130540793498, -9.622352612658284, -3.886732259784271, 9.013331012785706, -8.88406700907958, -1.6001414297172154, 4.578373005642231, -9.61852888186326, -9.874611695640315, -4.3606677895601305, 4.681583631959532, 0.3247861864110213, 1.8138548728742556, 7.270536153836961, -0.4794462616441919, -5.209963743969879, -9.537449440070702, -8.866638575399433, -7.9773602825941765, -8.523825735628527, -2.6772503512842594, -2.4617925892072385, 0.33838837837243396, 5.389465169857562, -5.512593317035095, 0.8193565186640495, -4.661391078680996, -0.2403100258410955, 7.918764441963521, -5.169033441239932, 9.186066490211097, 1.4477657381143487, -8.341578608076535, -7.536912137813532, -5.616255492607463, 3.6200275698239377, -2.9872140136507808, 6.707446342849785, 2.201975566001714, 3.2551823354351193, 8.313730149190778, 9.219648546435415, -8.03516841709689, -1.7112308816736217, -4.662922455154748, -9.640631264382789, -0.1651826713227127, -5.6614431225529565, 5.165439983573464, 0.5769390059827124, 3.1120485201387673, -5.531445149415369, -6.36935690705249, 8.515085669973004, -1.9538487532032907, 6.104375290717321, -9.363039616465837, -7.043623535862629, -7.024295692741111, -1.9127438235104037, -6.069434120134181, 2.656468838501782, -8.123911645001021, 6.643915142884133, 2.8166332720481986, 3.0628895336810906, 7.880550131962465, 6.638267608764103, -6.239621566646541, 1.4019706344877854, 4.446041441497728, 6.190651389548854, -1.571772670187105, 2.0120345763545338, 7.250825449269385, 4.293311373338211, -9.016676507719225, -4.903729779686728, -5.765690467948015, -1.907837137874182, 3.379221085099646, -8.044585944438573, -1.5637585166956196, 4.741082782524522, -0.43738291566175214, 8.778582474827303, -0.9333553406687862, 3.3323795214789023, 1.203908291354022, 6.828003337545951, -3.3319295624154304, -3.1615686013339612, 8.440819437577431, -1.9861400698651472, 0.6547106406943843, -7.798498032482184, -4.8831842966669115, -2.0706441220219123, -3.5984051763430003, 2.6769111915915627, 7.12019846520921, -7.381665043826937, -1.4799076128423732, -5.369145343872008, 2.187974580786138, 6.376293514431275, 4.343071018340183, -9.374485053933316, 9.607596490307447, 3.369307271875602, -2.2806670326290206, 3.6469312340750903, 5.70144546816595, 5.156317517256861, 6.6825900501519655, -4.858845416526094, 1.3023479107744844, 1.463343167863247, 2.65130658625667, -9.076013156786438, 8.274743249707967, -9.529786013360983, -8.62542430397658, 4.088564177537828, 8.776060008930106, -4.921430629863841, 5.588648739973701, 1.1178216430697567, -1.952406239115481, 6.925958980557379, 2.294977990046874, -8.19526962951022, 9.667997571712643, -7.492393507774402, -8.747541331021363, 7.200589341162804, 3.1544740301103538, 0.9712202295909567, 3.7344940396419304, -6.0443422971955325, -6.331375843240323, 1.569499335963469, -0.16133685410526866, 8.402740254755784, 1.0263953450981926, 4.53722479269695, 8.743298445664578, -5.952731482404941, -3.2272779871204937, 1.6417069036027794, -6.620255772275301, -1.3045033822574137, 3.940217064746978, -1.1590292802553819, -4.855559673314531, -9.56983548118416, -5.516833498207063, 6.673660053857876, 6.867276013700824, 2.5123542248707196, -0.7034259387420683, 4.753498244465488, -1.450905862277228, -2.2350643394880354, 0.6900214072850623, -5.693289602183831, 2.1693746220797756, -1.2269213659071703, -9.013481090216803, -5.6331833063362735, 0.08352303758088198, -7.636024311443115, -5.732692995065662, 3.673411182546374, -4.897189303116532, -8.760287342113656, -1.1561375594781271, 4.711227812267715, 6.487529306801278, 7.617627352117232, 8.238479962013049, 6.2022148808611774, 2.637460326703833, -5.110017775953162, 9.934562342336449, 6.699481054710908, 4.389309260784287, -4.935173385444029, 6.557282011508942, 1.2152779182213003, -9.6272039251991, 1.30631080706201, -1.928742074367122, -5.899189544117265, 8.529932550980323, 4.507864864487509, 8.67894891218636, -8.997628678116662, 8.397077725665135, 0.6728864637806087, 1.2550387513954675, 4.297033120271735, 6.276957116618313, -7.472592094529498, -8.491163267790762, -1.7557544795558222, -4.1872393328408775, 9.335614100018308, -7.7332522905132635, -4.851158191654137, 0.8468174836805282, 0.620497838068717, -9.019221621857486, 0.20130036249769212, -6.446933891023569, 7.326265961343289, -5.160635932654203, 5.416933201331984, 1.2024018130676737, -9.653804155065949, -2.3095452570403996, -5.863225800835544, 5.106334296219487, 8.441678989941028, -5.692212552455331, 6.507886855248557, -6.2212495808784185, -1.9425890886200836, 6.57240564843093, -7.627922735246175, 0.651075441979188, -3.2080498689679615, 8.983807350679076, -4.594920908543503, 1.489454784521877, -9.367381423822145, 8.807200922864016, 8.611097569470232, 6.5870185974380355, -9.722040760425113, -2.7226992599164257, 8.161123966840961, 1.1540918657644212, 5.597353397571842, 5.138866208018607, 2.7509519687883888, 7.173224153946233, 0.7194715018837883, -6.0204109199890965, 9.689321308205635, -4.491880081033037, -0.7917987621666747, -4.082979775795355]
BIASES_LIST = [-9.615506614574114, 5.397186813009059, 6.811597600864207, 3.2676846845042498, -1.9717182386786476, -8.427828560672223, -6.146998576911646, -9.65526899052447, -2.1389899459483397, 4.8863674615968336, -4.71146766282009, 4.213067405611673, 7.307254885964785, -8.177930757227525, -0.45788046912904434, 0.9527934464620422, 0.832692564071948, 8.82256530115724, -6.911721119668961, -8.027187953451044, 3.0875538740811805, -6.6008998308165445, -9.668907316665603, -5.947986054479153, -0.6953787033372816, 0.6939081349538014, 6.627149028044467, 2.6041979200461167, 2.4358505570683793, 6.593097741767544, -2.5497788383931947, 9.213915688250534, -4.971060126108354, -9.821249855240513, -8.122393479678877, -8.296547905699649]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

