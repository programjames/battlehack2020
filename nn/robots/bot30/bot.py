import random
import math

WEIGHT_LIST = [9.509151919018425, -0.8803881578814199, 0.9408856232275404, 4.187091315804929, -9.65132610289255, -1.454612176003467, -9.720985375948693, -8.71342988738839, 4.882518057079338, 2.977283962655843, -9.89633591244651, -9.985578767391525, -5.1021931473105875, -1.826713365890999, -9.099187225846405, 4.2650461066598755, 8.698561806585744, 9.797821868136548, 2.2129207237114272, -3.3572716688978943, -9.545957098565179, -0.4012716422568037, 6.349548850978309, 4.395002395025287, 5.731975674092038, 5.559211168570922, 2.3524587098749628, -4.626265836939673, 0.08094395711439262, -9.346464082772608, 7.270878322607032, -4.911662486568586, -4.377900465817652, -3.4020448026970174, -8.639709277649853, 2.762400088913296, 4.428986262425681, 2.7749679319409672, -7.321591606543636, 2.3375810907849033, -9.840023926528382, -1.8958070632737538, -7.2064345385781925, 0.32371535814693786, -1.9970639595638051, 4.847352702876213, 1.0207989427443849, -3.210039726514589, -7.238516294432964, 4.308149089831971, 5.338875345403608, -9.92612915362068, 3.651719975449275, -3.1305094991519127, -9.458349830367133, -9.678010547130002, -5.535768163702444, -2.315907433982547, 0.8924942175051065, -0.47233866582357287, 2.1600189002757055, 0.5771332283482309, -8.802707490923034, -3.223026094811086, -7.217615636268009, 4.041583529338036, -7.173662550251006, -2.7685700539833613, -4.115019468836674, 1.1630501092401886, -4.816056218955033, 5.531358358292737, -2.9785535773061245, -9.78755343674063, -8.813271793384725, 8.78232494542798, -6.011562806979674, 3.1260906108525592, 7.86250568596741, 4.970088344653993, 8.995427353667719, -6.260229668762333, -7.431029532242439, -4.002539301630028, -0.9257422174235117, -3.7910664649979893, 1.3627192124153709, -1.679460674335873, 9.962041971449857, -3.490141555231494, 8.066207358321577, 4.157068736696743, -3.027661952383176, 0.9427359624707776, 8.21727814267754, 5.82499989334991, 2.368774950666433, 6.673234102966937, -4.927863088044675, 4.9535069935641936, -6.266983884215023, 5.097578873708786, -4.1868105674945095, -5.496159772289204, -6.652310661182545, -9.790174418603446, -0.6106082062447733, -1.0685040866289377, 3.5651669972639066, 1.267936052142817, 3.4808288922580815, -2.3691958991728734, -6.694699810018974, -5.692610773344089, -1.0388371611693152, 1.821879627274349, 4.056745161985342, 7.285677304577355, 5.46630019023717, -4.599852268115403, -3.1923910305189533, 6.737067484738532, -6.5759498512190095, 9.230176176455053, -0.8870548926625315, 2.0676041372027285, -4.338185515451956, -3.9283391386345468, 5.40038149150025, 0.13277847233190876, 2.308910217115283, -2.054843274366542, 8.069185669496665, -5.519314160797144, -7.773590847964265, -0.5233469984020562, 9.319824211352511, 3.547206062374869, -4.1709268219120705, 4.274697514114152, -4.55831624544942, 3.285292558375417, -5.252357298474899, 9.741757573942042, 3.577022465502113, -5.071835202043471, -5.16877286806541, -4.441839009153594, -3.00715804897356, 8.161021957691354, -3.189441863997276, -7.921574436690939, 7.390323512372753, 8.95829019907151, 1.7210052204189896, -3.2543859616774924, 6.800978272774888, 5.850789275403919, 2.1835805163065025, -9.956497590146949, -8.131114706771633, -3.1347606318874917, -0.8319129253307693, 3.2815122929254965, -6.788413751650917, 6.504407858138499, -5.254431956039065, 2.326895665772108, -6.10194391860897, 7.663813508283571, -9.818541495392868, -4.387308861519131, -8.538910483419468, -9.171854808228009, 4.911639508519194, 2.200414371982493, 5.563045934182965, -9.377442984932117, 8.956452357574111, -2.1335165152889353, 9.908907610266787, -9.00256877700237, -9.497375041196168, 0.40792567149346937, 8.604045692950098, 7.0124124598177, 7.48270777916661, -0.008780296740237503, -1.3092823212302527, 5.382715613970067, -0.620929636005922, 2.9755428247477553, 5.809463664626849, -7.974132790624521, 8.36038643943198, -9.85189620252841, 7.350268199261553, -4.004141439686069, 8.284962854642703, 2.614082485238697, 4.579268528294671, 6.042820590732983, -3.2078411165892877, 5.867201798970923, -6.499729840417794, -6.5957581934935945, 6.245919069993839, -2.4950903191836638, -3.631088979812038, -8.10453079239769, -2.847814986435653, -6.9977856495938155, -7.544170729388336, -5.618118271663368, -6.6763260992156725, -8.173382484830768, 7.046399817366499, 5.211537853914489, 0.03237141598548199, 7.778984805679514, 0.5298326571747225, 4.843849492093861, -3.3053909609459, 2.7176826458489227, -9.214477925955505, -6.730688961651619, 2.81162262497479, 0.31805745455133483, -9.261323699012449, 4.26893270063178, -2.588639435909732, 3.554888207175498, -6.845215442624342, 6.501737224751402, 0.9239143525401516, 2.4282786956938818, 3.221919808016189, 1.1283607694169628, 3.365321695107923, 6.123857247356582, -6.354284659636766, -9.157172856547904, -9.79196533791628, 5.867639146555746, -6.1945863812456565, 0.15173457125051648, -3.628730898962374, 9.396518776366946, -4.512543972251592, -3.6834737366243004, -9.726299226606265, -9.009724910842944, -7.14257743298745, -2.1064220053926785, 3.2446051673233143, -0.39096042414905163, 1.788328947642393, 4.778539282711737, 8.634199732182275, -6.6732193094531445, 4.668094324211465, 6.534321967873794, 2.829806348642993, 1.8265062749905283, -3.735869424289742, 7.784831830635884, 4.869886336874863, -2.1598346353564546, 3.898959796241126, -7.823167873598704, -7.936651051052815, -8.42594289624265, -2.055099784563428, -9.475295325250894, -7.229566612599911, -5.041546707498852, -6.867208114010824, 9.851471459215112, 1.524791721155692, 8.59577409995368, -4.452521321640075, -8.286704409842597, -6.168077541484487, -1.6699100225850838, -4.887729809462959, -9.428203364122226, 7.8529905744961965, -4.733647501712744, -3.964553830641866, -3.205684264721018, 8.469968632086648, -9.770530064440264, 6.487927424349412, -6.6310324349044425, -2.611140577120892, 2.6500218035203353, 8.219903622584294, 3.7689578111054107, -6.489126806690861, -2.402016950403338, -3.5892454153324334, -5.807679877631779, -8.185035379313677, -5.75185351597391, -5.0882093956774765, 4.695414357290744, 2.3667728997627293, -8.187094086227297, -1.5201988013287675, -3.6224794209060907, 8.346696148052423, -1.7523145215773628, -1.809974225430409, -9.371028890888475, 4.221735114826311, -9.447961453548249, 2.085596225749768, -3.4281313311942956, -0.826239546728134, -1.5878336350122204, 9.591242266311667, 7.342721157724377, -6.746705824169221, 3.641491456470975, -8.396230987539628, -1.1943626000389997, -7.525125843020284, 4.575153185551489, 6.73875256520034, -9.313736489533763, 8.597335466215426, -0.9814428109681224, -6.770247442979082, 0.859544167684378, -0.08175699384817747, -8.125429316234587, 0.11553542437660447, -5.444927725437283, 5.646501975959669, 7.04881713001053, -9.837292566700643, -5.236234766888009, 2.359560486816136, -2.049138047891619, 9.012818899265564, 0.23670417154520074, -0.758746928903193, 8.199482761420132, -6.297455004378474, -0.11440929336573369, 7.690137586752023, -5.540777295054744, -4.715470807362507, -7.265634983345151, -4.376365459674765, -9.43002816525307, 2.909343356742218, -4.715118958691333, 5.417457622690369, -6.8892311198714395, 2.348946310267424, -2.6949156253149553, 1.5313210944794768, 0.47030499172862505, 4.219546034779464, 3.8472445659145027, 6.696759975210696, -1.3055790973401198, 1.3296725192792724, -9.025424925326856, 4.173845112475332, 9.277812385564129, -7.043290205435899, 9.755024015175536, -5.422644443827367, -6.59249374637816, -0.09733009983344765, 7.2571595367142585, -9.7868833182505, -3.7670842351572276, 6.347035418055313, 4.888807643587867, 3.527669024282037, -0.9166314775029143, 4.3157680980894355, 2.3745810118695907, 8.278590331977917, -8.561605589267883, -5.696437585908988, 4.2685703033100975, -5.9902670212274, 1.182632572702131, 8.53587696280998, -2.9247658194098314, 5.152080686649867, 1.2373619104048288, 6.725694517229279, 0.5392667304291425, 0.24514676762706422, -3.0582069782938115, -3.5214504195927283, 5.8230021256180144, 8.09871702471159, 4.687026783230095, -3.8184867995942717, -8.814407651240446, 8.414824973581435, -2.892162345348533, 4.071342996402079, -6.953559427563731, 1.8738812383860264, -3.254580331201482, 7.40978383789167, 0.3635367138993395, 3.7868680525279963, -1.6692977253886117, -0.004991842201206964, 3.325751371991611, -4.6500141841487075, 2.1108698690300685, -0.5619760205550168, 9.495218423177832, 4.8104124355327045, 7.7062421212690815, 8.710282568371852, 7.600037544195796, 5.3720574320779875, -1.802803250844974, 2.4593231536141165, 8.302743723798717, 2.4605573836502774, 5.616525955998323, 1.9382211944230203, -1.7440075695568389, 4.401055372105846, -3.816657859752617, 7.9185016292348465, -9.537105698833033, -3.238244535559418, -0.930661514991634, 6.689191432935189, -9.341171852143404, 2.017738587484182, -9.346023308473372, -0.9323089824821693, -4.493557527341929, -9.178218768297345, 8.885377080406201, -2.30600678389846, 7.316153850447126, -5.122799678375014, -7.44168873014077, -5.158410032244049, 9.082294963271572, -8.276966820709738, 9.955999208851996, 0.1099377936281094, 6.038884679889168, 2.461100605469362, 9.213492944634986, -2.9657316690318547, 4.450053064003011, -0.9393157199252435, -2.133316826027465, -6.37806291540862, -6.235751074870657, 9.907695381053042, -9.690637627057313, -1.5042816441560056, -9.556024649566714, 8.084937600845436, 1.8760236822722547, -4.787647815482583, -1.6092173164489303, 0.8904105770213171, 8.098369500278885, 8.355251850487424, -1.690745613674716, 3.625907850716672, 0.050294632691157304, -6.33734040021777, -1.5655622031029424, -4.405870457726944, 9.608724631591926, 0.75935371086263, 0.7018767579159668, -2.235724493892959, 8.54312614773169, 2.4447543863035968, -9.723629277495323, 1.9594330679358123, -7.8151607245304255, 2.6461444943608132, 0.2956663837379008, 4.514672936503519, -8.258316628297933, 4.337126076580356, 3.4348217290224152, 9.536261843047704, 5.567469911134422, -6.590677994064896, -0.7907791299988087, -7.614059552399455, -7.6397133740458, 1.3038658143483577, -6.01460037117703, -0.9857236422324238, 7.982931580042653, 3.4160972996245516, 6.481092668322649, -7.300552385912827, -4.571902982010812, -1.7187114643580763, -5.551390441981545, 5.491242112724352, -8.798926827464753, 5.865359878245208, -2.8163683170890756, -6.092241009839721, -5.297571423891103, -7.109826304287486, -5.782460959856737, -1.6385096879695773, -1.8055968358919916, 0.7578916961873521, 7.974267888947757, -6.193137913743339, 7.396490774145196, 7.869829646298246, 7.757784427548728, -3.0376595747711344, 0.5587419701742284, -6.675313491347961, 2.0249163361674487, 4.233321905064663, 1.4924872699938732, -4.948322749658923, 5.597446328550626, -0.9102891793672754, -8.737271775296627, -2.5487275610114235, 4.862988901281149, -3.764940632001135, 2.137095110339505, -7.924327454435902, -7.736536930173859, -4.429823863011871, -1.0706402226347418, 2.551193801371239, -9.219353506096015, -1.3699705876155033, 0.28946189839461667, 8.048755519775025, -4.472329063428071, -5.4331199893124715, -3.0465494548896004, -6.901879821847572, -7.239367476897214, -8.874210744553046, 0.5144087880590913, 0.3929557818205982, -1.4756472085127985, -2.0036270510314846, -8.562254202192669, -8.07936041261462, 4.504796817496322, -4.827891622231444, 2.1028706871811487, -2.3263292743691917, -4.224336483586228, 5.263539250649549, 2.414289964382947, -6.636376367821293, 3.6933696450673796, 3.334457274626759, -7.9676512967655055, -7.52116748916732, -6.637934780381061, 2.9631968323654263, 9.49410596619434, -5.3033836005680035, 2.5501596548028704, 1.5921176067748313, 1.6472018159890354, 3.7454478801822653, -3.9999830085264376, -0.46475947726633393, 4.1909158861441735, 6.9552971524904095, -9.549627889774648, 1.8513291095740474, -0.4919668507294297, -7.761924070990977, -5.839192259571673, -6.977248595571098, 4.7261549515213055, 7.728351337996251, -7.995836344494098, 0.15121387315795154, 3.995226214551046, -4.305532424516736, 3.789286931310601, -6.860099763928382, -4.949493878847928, 4.006249767076021, 8.826454911121424, 9.575614491679048, -7.394632033528962, -8.451464197732827, -0.8725679743842498, 3.6313442883585427, 7.528172468550576, 4.311647521888279, -1.34018244649398, 1.6664834224679677, -4.64940843399061, -9.35669901531589, -7.232967199833869, 5.873025911844563, 2.14020967290198, 6.373214149551586, -3.814163163686393, 9.452606448980529, 9.460743447595195, 4.179472792281761, -6.398730113659086, -2.6256960349691845, -6.593474070048925, -1.6911982627262283, -4.462786423094538, 4.170615487280244, -4.514808743738423, 5.128084055077375, 0.7322996074879065, 0.9134107015226789, 1.1897026255380325, -6.544021699675547, 8.702446618753573, -4.811849468307883, -4.923979655087891, 2.4067094625415724, 5.637600298980123, -5.006338048943748, -6.256913520891263, -3.769177695174175, -2.412147802659992, -2.8049476833651843, 4.323072375791867, -3.3501325559747492, 2.057099866813502, -5.244210249821817, -7.33369212086817, 2.6292103709677956, -3.5499239882668494, 3.807036002724134, 0.1271577987274206, 7.759006175762192, 9.99552893279262, -5.697720594975824, -8.027962949128176, -4.989729848164915, 2.8019873038457206, -2.4943603746701353, 6.695740119184638, -2.84707951886306, -6.451103764102932, 3.341724837462049, -9.17203219191197, 8.867362373050426, -0.5495591532429813, -5.383917978845513, -1.7089998145066154, 1.722673594620744, 1.669123110680161, -4.9437293244923435, -0.39496503787902704, 0.26135758679465937, 0.3191731650205849, -6.833618895500435, 2.3187487279857333, -3.6839477599128774, 4.676471876677153, 0.5762571811585779, 2.4765273315549443, -0.5244156446867709, -6.786535211166981, 4.422520626601125, -4.823533226583338, -8.441379785885552, -8.583493415733205, 8.945106945737852, 7.816018653413142, -2.735309497016491, -1.7225595169211232, 6.626905346191897, -4.132385408430115, 1.3022361568857743, -8.518850286254096, 0.5086203999020888, -4.999227377132303, 5.571055159141977, -4.93760532718122, 6.764608867749896, -8.844671683059378, 5.802446289563164, -0.7028464505985106, -6.474776841962628, 8.066560746628252, 4.831489789127799, 3.8655631048191665, -6.765870630637005, 1.3921273299056818, 4.900132506279434, -1.2791646142499253, -0.5817050757242193, -1.268190468401265, -5.712267237653881, 3.3544672242112803, 8.77241447030704, 6.667077417445636, 9.930010757389041, -7.702758106234273, -9.09734180496146, -3.903317647669131, 8.012016317626578, 9.15294126035715, 3.9938322849295727, -3.9075274969009754, 2.796970331660191, 8.984612953307924, -6.019286903122496, 6.032367547402885, 2.2917385121288714, -4.965560057784595, -9.561702641954433, 9.408104206475283, 0.060266446636509485, -3.724237355716708, -8.517618912850724, 4.004315249000523, -4.358970888802853, 9.931338199030552, -1.7686463309260976, 5.297415429605053, 8.492340782769862, 3.844527860339685, 8.713380063424548, -2.261097946934947, -6.657532394563617, 1.9673004949394741, 5.755988917424615, -7.895084477546346]
BIASES_LIST = [-9.828436806138072, -1.9188283454108817, 6.939051199816781, 8.307198130546304, 7.828429524172375, -3.8719964475205293, 1.9350909146535837, -6.4194917728587, -5.868430074316651, 4.832995994199907, 4.095844803153959, -4.9803599329520125, 5.880353030885017, -2.309814315405956, 0.7840641523476393, 7.6408768056099845, -2.926457923621644, -3.688584937666331, -8.442966916517648, -1.3030824688603264, 9.749105594481719, -5.0306900085540125, -1.8817859805679724, 7.825538799146031, -7.024165713114698, -3.849750741245048, 1.3563083599174917, 0.8748548786334496, 0.6428838549487814, 9.21009867911631, -9.51425109402046, 7.399961815812514, -4.00207316910032, 8.658431423841325, 3.3375255695946358, -5.407038561154991]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

