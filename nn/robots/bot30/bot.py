import random
import math

WEIGHT_LIST = [0.6265841755460464, -8.756778583036002, -0.27614561945793525, -0.8842326843481718, -8.079525317526052, -6.358735362221742, 4.128925924879724, 3.1530873641980257, 2.5477277531472957, -0.45009688525018454, -9.900689869046744, 4.5516500702112594, -1.725990096964999, -5.440420559703525, -8.951257970824887, 7.543764990596095, 5.815069500407031, 2.7057471273798495, 5.889582042232917, 5.967886188326068, -1.4582992701228559, 2.048100644177058, 3.8503305453117225, -5.333491011812185, -7.294607814826975, 7.768271301986818, -6.62871402392772, -2.1296985889589077, -2.3339660835674074, 9.41368623556184, 9.927898220552628, -7.243367960989991, -0.18012483517760103, 9.772723834319425, -4.800963763888402, -4.852149979671716, 1.1551317194624602, 0.22266597997822757, 1.9829185018701185, -4.680100481353806, -1.7124833117737808, 7.646204102582811, -1.6216555004952298, 1.4721185975498425, 2.046056934546172, -8.066134319570013, -7.769227631371638, -9.858138821264355, 1.3940308410469804, 8.43896024517921, -6.669552366341744, 9.079373443400357, 5.774052046029192, -5.761547068296369, 8.432941331376625, 2.6973795568591576, 1.9923670582351978, -6.657927303429407, 0.4997885497963672, -2.822523920754465, -3.1038266782377484, 2.3907908250362357, -6.34307715539893, -1.2788230979876936, 1.039167022307872, -1.2668788402581903, 2.9745516709056794, -7.325856022452905, -6.651247073417792, 8.39196569449092, -3.2899260901295646, -6.871451446017787, 0.8587751894054829, 7.890124039953761, 9.634973221269128, -1.4952292982560689, -8.986174893164279, -6.198084103340391, -3.9734059134070554, 7.505238805617779, 9.561523319995185, -1.760563424125115, -2.5223696938402007, -3.689472126399309, -4.9749039349308415, 8.88314519608836, -8.21212817632501, 0.43480218160911477, -0.1860009272350993, -1.997131553574846, -4.680821790735729, -1.5207642132224475, 4.4351112493045175, -0.8061557617798503, -1.276275015488281, -0.9556597101143698, -2.564104266842735, 4.732440292762998, 2.9581282225211147, -2.188686874991019, -4.978134052039243, 6.267709480359493, 0.6676418672872764, -4.778690084945216, 2.7633352330360985, -7.45762378733998, 5.246645048915147, -9.841509081556406, -2.9453770818529286, -2.181145196225782, -7.780347968681793, 3.555956175654016, -0.23598984425265712, -3.7553623866786694, -3.1594867476144595, 8.670712995028055, -8.488739508304642, -3.366477454139323, -5.798522700819648, 8.217942652352633, -8.112409302208142, 9.525528836303934, 3.2291568286882537, -7.585833454927686, 7.049549115491345, -7.826134854590297, 3.9057533144973693, 7.7431996029125045, 8.300087656430641, -6.299065069987959, -6.396383510412393, 0.6671355403903867, -1.362617704560309, -9.769949600239272, 0.5098006602907894, 3.500293321306483, 8.91684157913491, -1.3047311301931472, -1.2499924476777124, -5.3827174212257, -7.368005355911011, -9.826656172345189, -7.980388243398875, -0.9189989543503678, 4.344797055719017, -4.014175935122757, 7.680256999224145, 0.005162738349028473, -5.3414532256582525, 6.4473441362294395, 3.127407886594195, -4.657120489758004, -2.56632341859037, 8.620154241611196, 0.030461622237593744, 6.99410028063167, 7.9493357507222555, 3.1789265950408705, 4.968100707682364, -3.3526580553921352, -8.25717323427211, -2.509788861882811, 4.589036683346965, 0.7628377890724636, 1.1715131578800424, -1.8711138387667638, 3.7105429364372142, -1.2185328731337624, 3.805378904171926, 4.41704480771107, -2.7642913803877533, -6.4708513598256445, 8.857732553767434, 2.17364500320382, -0.3938187161315483, -9.862870796488028, 5.5102840086479254, -6.477265907771839, 6.719131216911897, -3.0957397838703855, 5.413524260499383, 4.795465887868593, 6.797166798153636, -8.078387016316563, 6.478033288212547, -6.206946250826135, -1.583399016065222, 4.00566937601473, -0.34360354819304817, 0.1441295994034757, 9.618632982393091, 2.1110961326280613, 6.494586027258748, 0.5651063116887567, -5.638180711846912, 8.371347032246504, 9.902205902239306, -5.218267562313752, -7.970448782561905, 8.5977656810072, -4.8569499792807065, -2.1123682900254863, 0.7740351701077586, 8.263213839296487, 2.622693376108904, 0.5419245934012267, -5.967396788725894, -2.810898946817324, 8.630305240505514, -5.892074780511054, -2.9968224531274785, -2.479454597700408, -5.286801328276591, -5.845095764556067, 7.563482682874632, -9.09544965126618, 8.704707134179444, -5.51020905433629, 9.230904356957229, 1.1445446666483896, 0.10660335920869812, -6.700054590359777, -6.051938313450986, 2.8632034036204033, 1.719959999540512, -7.318693167998882, -2.7528778170424983, 4.128233494454669, -2.1314953549801157, 8.480732762719732, -7.8025097989408465, 0.35814893164506323, -0.7282487182844637, -9.449644584271372, 2.6667292495204986, -5.8718839311360105, -5.993754523321866, -8.415194268161823, 5.144794423699871, 2.484147022799201, 2.8452845904516995, -8.050813958913698, -4.812644683363141, 5.715635495356997, -7.945617581497125, 0.7504654629305456, 3.963255493986546, 7.5537759882377955, -6.928909548004134, -3.279654466066246, -3.4152819732653406, 9.915139385750706, 4.255731136932091, -8.736587264081233, 5.107431326320068, -9.727136048746917, 6.919367251976478, -8.261455977132918, 9.946080311000532, -6.838885747757695, 0.052169544389265354, -2.449751666780755, 5.835893498921283, 0.03299134025674633, -5.851855576352632, 9.66722801968017, -1.2486492955599573, 6.7394296929498125, 2.7343336962005242, -1.9486951155875758, -1.4979678280783464, -1.1058102068632785, -5.544071525912644, -0.12016683462549693, 6.0459532903517825, -1.7481156771372337, -6.66638344593204, 6.226709276101921, -5.738956298046512, -4.889396797752981, -8.182816149162198, 3.432899979019016, -5.769521101795458, 9.226211921237692, 0.11922932148535637, -5.928024205057576, -4.022430550566865, 4.444253363003519, 5.330609490555043, -3.1170256494157123, 4.375404729379916, 3.2944875463652483, -1.9470976928163601, 7.710724629754356, 3.673794362398148, -7.294539511303513, -2.369978328357723, 7.609384991799502, -4.005851412260495, 4.314671139630605, 5.162306942267518, 5.795832916929468, 1.1380150983550692, 2.375141493271734, -1.0590491946892637, -1.3823459733827281, 0.6471180077098708, 6.425113782751264, -5.353801731172705, 4.958467813277512, -1.5322936189987342, 2.537963503631996, 5.455923846911714, -2.0706760575203216, 8.485304637960244, 9.980888425070606, 8.026323468144248, 0.3363999295227913, -5.554184186863265, 4.606337946011589, -6.756292260852201, 5.253512077504741, 9.87485361568217, -8.33328363112017, -2.676995082900291, -8.949215944626555, 2.256147604113032, 9.250156336813362, 4.254000734795822, 4.200773998544289, 8.442707341944303, 3.4762854708005886, -5.4201590237076775, -7.11123834595667, -5.005608193244592, -7.813952544599929, -3.678089842175467, 8.987472145122378, -1.9743035775891986, 5.1234390483158965, 8.219907441012161, -1.6232636138172793, 8.629616352123179, 2.5852799884664357, -0.4299209764767493, 9.480438641566693, 7.478178578487061, -1.250538853283425, 9.723939046822686, 3.0019515298306274, 7.702394906141652, -8.535287079023648, -6.085263475510347, -2.888050063353676, 2.212228123651352, 4.479442355271939, 9.02756386094715, 3.895058627180827, 6.880828254879585, -0.5552017619779814, -9.57747883432378, 1.8236918107154914, -8.891287091364251, -0.5405624628351298, -6.286421712978054, 7.935852515861008, -1.9143230037020267, 4.031812526464488, 9.898260085942624, 0.0013439562377488556, -4.832554842228602, -9.083341963049454, 2.068298609199509, -8.654396036630992, -0.8096429707171815, 3.573055488554431, -8.223558136938557, 2.1838995457857813, -5.857555437626432, -0.12550758246885074, -0.7500290987349985, 5.552997929405631, 7.497144887377786, -2.225454153869202, 9.830619517614092, -2.347187966089419, -4.243912954844924, -5.760475841755303, -4.853674402530026, 9.54218599138935, -4.559438591045824, -3.8207645824391285, 5.932894236896445, 4.592665089128943, 3.5861346190082006, 4.011440679329684, -3.1996428472702476, 2.430165071817738, 4.790953719652457, 9.814720896508948, 5.929655794292, 0.1251221618667131, 9.245192080900335, -2.9394418016315482, 2.7027098360772186, 4.248849873071126, -0.4697452271232532, 9.903659867008056, 1.7082699500673382, -7.212917587952326, 6.058353793863386, -4.818923883471243, -1.387995082891159, 5.116056140689526, 1.2577544297976733, 7.064562409668397, 3.627231171833987, -5.573760283199604, -2.0809621634074755, -7.678535982375109, 0.11140047688795818, 9.962795929236886, 6.753223021354874, -4.992812569424423, -2.848649877665956, -2.4993128295477813, -4.268550601912229, -3.3507142676599138, 3.6025843147165393, -2.2390009010782226, 3.907267851822663, -3.8027854096209257, 8.958219836188931, 7.394068260122811, 9.167400198591139, 9.552577830124719, 8.922216825369233, -1.721114082721467, 8.18362599341603, 3.6923948663707193, -7.713736235490551, -8.716249677568717, -4.622458706772548, 1.5343605191758272, 2.4966134446979176, -7.077188082500207, 1.2585994584027116, -7.481658948960932, 1.918586114641041, -4.144112338985257, 9.646885548490168, -1.2902689916844867, -5.734372177600524, -3.3520892342887816, -4.445616258638594, 6.863772869928624, 6.709344435854089, -9.195082394350235, 1.5462351130984189, -4.832292147848689, -1.8589409250818338, -0.010553896002534202, -6.692256174154474, 9.703599478651302, -6.7581965631233505, -0.34051788778549863, 6.739269614894287, 6.075462659449638, 8.36269083729438, -0.7879739434776063, -7.601769060290195, -8.642758569363938, -9.560120297400907, 8.3412158401322, -5.540489903669457, -5.821646152014697, -4.312434535168972, -3.630641445229557, -8.400955594634706, 7.600183157580378, 1.9182364224049913, -9.575612603007428, -2.602978183931686, -7.856010793792024, -3.0228758312373465, -8.933715563335717, -4.298736802283565, 2.851523867052748, -7.624510385488545, 5.298115917467619, 9.705499358063598, 2.7114707313999062, 6.133435398341561, -2.5342697515756507, 6.437676104710487, 9.036117748692561, 8.611986372050243, 7.876154851523612, 7.562838090837179, 0.8575808066788237, 7.412959092818845, -7.5237852719435905, -4.995765600157709, -8.984898785344026, -9.038090746068603, -6.610000176230358, 8.763424038973945, 9.514665588768842, -5.442288978072316, 0.005236268219251272, -9.685251147400438, 1.491521233904347, -5.651566525880803, -1.5611113681092998, 9.798095929453346, 9.628866343108633, -1.6299386768672548, -2.284951807482356, 9.537244076186905, -1.3519191855856114, 9.118044897763959, 9.754599246537488, 8.230944465890456, -5.124707240013557, -4.30216784415153, 8.635244947549094, 2.7736498268451157, 9.263988182957345, 0.38321080093360926, -8.923120049529714, 3.0761002864961995, 6.367775604876545, -2.6493838291857337, 1.4148544821758158, 4.8951508575030385, 9.294086044183008, 9.439923307381271, 5.871169565254402, -0.05872491092956622, -6.580236682658301, 5.896401808679961, 7.583521459719055, 7.396865027389566, -6.674576901594298, -6.129551359041974, -2.520622050099906, -4.108841214395078, -1.6476912941077266, 3.702935363953019, -1.036467898612221, 9.53610121686419, -3.392641383929078, 2.079220147570842, -2.5061036687547418, 8.284572478264675, -2.9328352571975014, -7.743629835360329, 0.5169359195087342, 2.593735679694621, -5.737224717237628, -8.483268394176813, 1.1093433468830067, 1.9036093005856376, -1.570390757264697, -3.612773966256926, 0.43207928878033997, -0.944448113505004, -6.6136372076892735, -8.858876391959607, 4.7770134019650445, 2.67131898887925, 4.9358436661738825, -4.1552700593833825, -2.280599303738038, -4.50659502390641, -6.832963395553284, 6.1533260762212905, -5.415445331056834, -9.793857781767413, -0.6134440051535073, -5.982226092125849, 5.500512499460168, -6.114556949884018, -8.550696828707597, 4.966763538240572, 2.993179100942168, 6.547907693391988, -3.7653043085833886, 3.7293976756087126, 6.724124184688407, -8.416571862010676, -7.32205148401051, 6.20097548291923, -9.660291381708578, 7.1642387417848035, -4.686384419524088, 3.379590883613769, 5.602702294951662, -5.264544684689043, -9.92451745667588, 5.414710143801564, 3.8721307630725033, 9.143348991566675, -3.6421123724822912, -5.690225453098934, -2.7576243157176155, 2.1343744694991518, -9.281195897374428, -1.1445441571475605, 5.299875600914131, -5.308747152811961, 4.804254685227411, -2.3425343663861087, 0.02138470727904007, 7.3133676444413, -5.678278792051006, -1.9791165821225114, -0.17457287011117195, 9.381200888820555, -5.948932933140059, -8.537046821031158, 4.665657242811891, 0.29388242820469657, -4.771881461668313, -1.615616107858811, 5.5236470258895825, -9.21954649423781, -9.237756985824744, 8.416409123432413, -7.421216042050114, 3.849388394309196, 6.151391501583799, 0.9801136690202839, -9.87099419645828, 1.8503492418076473, 2.607927147112468, 2.645774668442195, -8.390777465777301, -9.469798181320442, -5.884810888854193, -2.3525564066947684, -6.144489703607839, -2.327535925232773, 3.2580970976803094, 7.404660776459448, 7.350693807588009, -7.335225428017096, -7.856559105556142, 8.048328843165045, 3.2472816881076394, 9.07384923815383, 9.6166223049335, 0.10635932905658763, -5.782408633718261, -2.098526519063835, -2.7816213167389314, -5.29610536462701, 7.777723570222999, 7.419028995829041, -9.784812558326447, 0.33701511905634796, 5.173820059183365, -1.8718550526469215, -9.647363056225037, -9.799791801236015, -3.8214394460750523, -7.507056788758626, -6.460947333502, 2.5201692405297393, -7.703617496021346, 2.637531648953839, -8.918085369819318, -4.029975790155598, -7.351350285911106, -1.1489515938678903, -8.421349812117832, -0.6238756687751561, -3.311051567816616, 1.454720649132426, -5.241177719296919, -1.8015772980062152, 1.861972909729996, 2.208374753668812, -7.601696077613703, 6.645717119039173, -3.175027486211281, 6.56740346635992, 1.8690876185148575, 7.367674909291651, -3.6442499854354926, -0.24112704944329266, 4.322283076083446, -2.8729139103952956, 9.498522975726434, -2.6383612406143486, 4.003830073164956, 7.346502361937716, 0.19098883005536926, -8.463978870864924, -1.4551885149429022, -5.985318422057626, 5.7312478646998635, 3.041033710987854, -7.725825511363751, 8.323397758480219, -1.3468839345498331, -5.691081494591681, 6.927027410753308, 6.255835749297475, 7.773179532815941, 2.391578806516673, 2.127726158049752, -5.5514609474866035, -2.0785465793496494, -5.489545137526721, -5.858845244121094, -8.061302694702084, 3.2155947356143937, 1.9131959818342743, 2.830175908883758, 9.978186010835607, -5.687769427334617, -0.27056097874153373, 7.332677583825738, 1.4051274554738384, -1.5744225853148457, 8.267847134335614, 1.8923806865633033, -9.077559238763403, -0.8470266498165131, -6.999583559391809, 7.299004938346322, 2.7281259530106503, 4.656896697868138, -8.200722268645958, 6.202281506330955, 6.224943351363272, 4.025684777928539, 9.858458492460649, 7.04696869251762, 2.5944679985679855, 6.38914637630748, 6.344590577523832, -8.836636904063095, 6.795297157941363, 8.333474676467276, 2.5006399743850665, 8.085471484636045, 6.742502745558774, 6.117858393076496, -6.684189852077685, 1.7386387494440534]
BIASES_LIST = [3.1181807549902096, 1.9671359908392638, -0.5742524774253877, -9.2632640237424, 3.324937252207656, -8.056010290492324, 5.92255871285621, -8.930808774295302, -1.4355526601576312, -2.9811491816132385, -6.447518982905396, -0.28849290494251534, -3.8449644438044084, -0.5889398216647734, 4.277480798721001, -6.284207920474296, 2.1822234788269803, 0.1315024479435838, -1.6516757208379147, 2.2667257832801297, -7.270643348080965, 6.77219918465876, -1.8528923965410797, 5.674344921098015, 2.9507129587174514, -3.186138136473553, 4.961323394051988, 3.4308469883903285, -0.12952439754190337, -5.268005230180841, 6.179308446274703, -1.0183422902311676, 8.350986920688577, -0.47887108951316826, 8.312638648635392, -1.9123117328447687]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

