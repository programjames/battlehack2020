import random
import math

WEIGHT_LIST = [-1.8409823660818976, -0.31286622896166705, 9.249247952244083, -6.779369466822085, -9.852301910420586, -2.5984178048579327, -4.617185858055899, 5.005912840472789, 1.4913613229401097, -4.619413608672094, -8.555529500242628, 4.987734919106375, 1.647716730946735, -2.855850526570169, 4.110472716264901, 6.2550699307993405, -2.869293121489614, -5.000456245503928, -4.895537322652162, -4.957220272005147, 6.97380152014723, -6.307521352999328, -6.21001435832095, 5.689855540892639, -0.006426063261532278, 3.322643270182999, -1.3046530817575945, 9.053809992910963, -3.909512485494, -9.481268167614424, -4.564862685374584, -5.041953144931883, -2.948133224926086, 9.774884281548175, -7.431492433478894, -9.672470836286138, -9.809733917600365, -1.190858983611399, 7.306250241329995, -1.6272693412661248, 9.012412978718327, -8.11712436217778, -9.701734035730185, 9.033272624072296, 1.4844064242190278, -0.6535954149633838, 8.596706192334313, -9.376315855794346, -8.28836398549762, 4.335608999536557, -6.047170543323286, -5.935562688019531, -3.5237477498704433, -1.544904794863191, -0.11503079618416301, 5.065596595783939, -6.8997720868320656, -0.44562752634634784, 9.637285962448491, 4.212309860492486, 3.443759496259844, 1.5250838592159255, -7.88172498883585, -8.194397197386124, -6.428977874910289, -8.25890221490151, -3.3632674163757255, 9.654515840336117, -0.0061799040655241555, -5.048964600669656, -3.0334498831143364, -6.465678878417664, -8.68359895163029, -9.122131599670523, 0.3574283499418929, -9.2443369362304, 9.60216248178897, -0.513331314959995, 5.660683934590807, 9.326804270754923, -7.6800950357043085, 5.385684710589537, -4.392154176452925, 4.167626573648924, -3.5049527511338807, -6.928142881618145, -6.389483230659092, 6.471087229166738, -2.2335367127943524, -5.2463589332392235, -6.150075822066401, -0.9523288938572865, -0.2502776779104732, -9.021246101312483, -7.976157330865545, -1.8194039977421639, -5.482670042835778, 0.44047503945692057, 4.557748597568425, 4.142926187333249, 0.6722314953721575, -3.2511369507474903, -7.798557207790471, 3.3202568718582164, 9.556725485050237, 3.67446945161867, 6.099186591982672, -4.8078845129964805, 3.1674741853495973, -6.357437662773291, 7.790737813712912, 5.348458728677359, -6.0674823433822045, 9.707618252448537, 1.288952602581988, -7.845589005557692, 8.747944464425991, -7.623920128756456, -3.259813834752072, 9.682095225925181, 9.787608955029015, -8.121390067930431, 8.011614435394833, -7.350722591374672, 1.5808611777881154, 6.07595056071731, 9.584379872316429, -3.961270579531586, -7.350498915342207, 1.1275315112663762, -7.9603163701056285, -0.40942290518877833, 2.761494092837962, -5.9534864526420765, 9.804235861807015, 2.743916000565827, -1.3928749444010293, 5.612928950965053, 4.760833671577, -2.8047152324109543, 1.820532515030811, 5.027151490474287, 4.842088411240706, 0.24134853485678676, -4.641367982563889, 7.44558601495638, 9.254579326616959, 9.146594977474766, 7.747320791204558, 3.18615918953013, 1.0750949303834823, 7.060557136932097, 1.766924107262767, 4.733792055113021, 1.91903818380921, 3.9529721004253915, -2.0732719069206844, 4.157747773587646, 7.430842269244028, -7.601507129118086, -7.1609810947301895, -5.5420794274109175, 0.07642508143229243, 6.3161284356808665, 4.537790098757169, 8.04484766971089, -0.36193158959792804, 7.5746326668717785, -8.274902275644031, 7.2874227683740465, 9.660956462244986, 6.795209696855444, -1.6292393532477831, -9.181617038367694, 6.582681619552947, -4.474261261086996, -3.5699101493588508, -6.868075206410622, 2.8491272722802705, -5.056425829848676, 9.185272064959324, 5.3630581358771146, -6.1150340775253165, 1.017236941377437, 0.7169036892139324, -0.2786002123548137, -8.573501142969137, -1.6241242566832792, 9.290374579588075, -1.6071039470556556, -5.313266512601633, -5.726594050726228, -2.4615455716554457, 9.005856457152774, -2.0996215112946537, -4.374469750980272, -4.095248677381997, -6.44986613127692, -3.4266614776007813, 3.9021903985879405, 6.84623279274096, -7.823062432450001, 0.6785142042022603, -1.3860394229062436, 3.987222475681582, 0.4602789122042239, -5.604394687991543, -1.1896221743404496, 1.662940834725097, 6.34406448233959, -7.981343054014363, -2.9603202413578167, 9.668345793147303, -0.07274013061819318, -5.061532224114551, 9.59053139779629, -1.9463816424493263, 9.691899671294323, -9.162584080222317, -3.011113193039108, -5.0156996914307435, 9.75015993897302, 0.2619868635973699, 0.3128135160675267, -1.383882683109798, -9.320483199849258, 6.182095617986324, -6.033995143593575, 8.281235788632603, -5.7329187688109995, 1.4249259025694467, 9.168033544723201, 1.5147518780687967, 1.613175926392426, -2.2660056766815817, 3.8721073882567154, 7.163435265135881, 0.9058344135751497, 9.127701976210684, -7.224050872611237, 7.825496373846963, -7.1569093811381945, -9.962817937817292, 9.80619431648778, 8.315256467505765, -1.659829265801644, 6.62172047156503, 3.5005187152079493, 3.593354949349399, -3.8798146413507357, 6.193091440120767, -7.417913085613903, 9.96592024556896, 7.966934048429394, -3.8746649044374397, 3.5730405758722856, 8.425459443874836, -6.453454898476913, -4.687774150745603, -6.174647840453364, 5.593762748547647, -4.370749599305501, 1.4856077633812923, 3.863992631776295, -8.882042964753612, 7.362393249853092, -2.9813240625049975, -7.193543903539641, -7.807605496990108, 6.571467499216432, -9.670841761232065, -9.376845538062712, 4.881800100435974, -1.7144921793629226, 1.3685155862904494, -6.515839164695862, -1.9498782659038625, 3.2707767329614192, -7.120879758269226, -3.325278648838868, -1.9770767886345233, 0.12693715475286638, -1.9502938602421942, -6.309910960547387, -2.048355528954451, -6.35207926099916, 4.500325950399322, 0.4275703097394157, -2.576046566947829, 3.371105002544466, 4.722615424248307, 1.8848784157501264, 2.68482530010051, -5.815107874322782, 5.032461998178624, 6.2411692552704565, 8.815174026845746, -8.186964172159627, 2.963338385972886, -8.26629451855082, 9.35627122936679, 5.990817444638113, -6.758061656967158, 5.646509568105582, 2.3947362908235252, -7.4169926698645305, -6.571313121921831, -7.218778755622839, 4.170054425038359, 7.23971060890538, 2.16552877002937, -5.298332508789104, 2.4882343101078863, -6.852399306698271, -5.7189669830022964, 7.098957924414272, -8.723331007591238, 0.6260589475768086, 3.5395947031623756, -3.502987202393271, -3.5002272936223022, 2.2242110073920394, 7.571572983643307, -4.586268089820777, -5.980835930224013, -7.445755012844975, 9.571275193772973, 9.531315187540315, 5.143958458931968, -8.516298015430433, 5.570591788768276, -1.2082258305670521, 0.08149446059844223, -2.5744049010558427, 2.8066488183546525, -2.6899344251705255, 6.470386259383211, -7.963173408190531, 9.290382009511607, 1.010330895256164, 0.21738818796424653, 1.5697102620990684, 1.4765162224242765, -5.9597806744593935, 1.8064236114585874, 7.64875180820415, 8.372637504604533, -0.06858331907926285, 9.77320971585128, 3.780776155910994, -6.674897741214318, -7.9391423392549605, 2.868889185799407, 1.5817200683967734, 1.3363577717217705, 7.88452165742704, 7.139706518160594, -4.251376714510695, 4.871394527519204, 8.87535294925804, -9.111924058694491, 6.137029322873232, 5.200336049927621, -2.0649886865476414, 5.661368522721812, -6.096926581581423, -0.8432145835860467, 3.9826270186241644, 4.047156024132514, 9.778349564877956, 2.5957088801424604, -0.5896532309017424, -1.2002901111373792, 5.18071348269884, -3.017301347509953, 1.654802690689598, 9.77416571468735, -3.7080512902557246, -5.581680842865426, 1.3206668528872392, 9.79533581236625, 0.919054801357909, 5.312863676667787, -0.7382049378749684, -2.6329661996034677, -1.3766039113163693, 3.960700305938234, 1.7981518849960203, 0.3694286421816617, -0.7393757653163533, -7.315546947768885, 4.234626966607118, -8.939667544438201, 4.958274550760528, -4.953309054784219, 6.713089214879588, -7.233486893542773, 7.965227066881944, -0.7962764780855416, 9.101143295789694, -3.367203510478296, -8.99095070394942, 8.662410331758338, 4.967371685083579, 5.235655418923082, -7.753779297171651, -9.251176621593427, -0.7399213707932084, -8.105785490355949, -3.01859175815006, 4.9423058132212105, 8.329877232167455, 7.2984950620821145, -2.088984152524378, 3.5807554537424338, -1.3610461428551233, 2.2589809599313355, 8.713553284809407, -3.3719939773982848, 3.0748353885724846, 5.8816849838722725, 8.869225614342014, -4.284257046996416, -8.95738476444456, -4.8629020039970206, 6.391614305894599, 4.377068527619269, -0.7198790045219816, 5.626366935399636, 7.780306276094343, 3.2556749357024373, -6.722029678520627, 1.0493063605751551, -8.023855564775356, -8.009563347043422, 1.1671483159806062, -4.521469315572519, -0.11076647749436574, -8.627539821517601, 0.9268137100369405, -5.856407673694832, 8.060926795702304, -4.730866689254296, -8.676742595602121, -5.794486414337143, -5.697797065162417, -6.23573959266454, -2.95139561809669, 1.3198233755862034, 7.651047228292871, 1.8375645803124492, 9.811693958380722, -3.740440959389046, -8.920215750373918, 1.1881227166856725, -5.366301672647758, 4.186087630113462, 9.894761762379542, 2.4404832309695834, -1.4139582071634607, 9.459209639884907, 4.511943426441416, 1.201876658360998, 7.803758438984406, 7.221015944218227, 2.029346069358329, -6.957527998542588, -1.460431569635281, 1.8480476236825272, 7.344341958281817, -2.2104256020463753, 2.3590115771547193, -9.299064496870361, 2.1040212792197224, 3.761808223636402, -6.62699336003241, -9.727951699746642, 0.48657677827059054, 0.1714008205183326, -3.167447856199203, -1.0041111895158146, -1.215873760798786, 3.316322471698152, -8.289474362698193, 8.191894834623376, 4.593850842204944, 3.242120544733284, -6.860228776106121, -7.654906238317367, 8.404161551229134, -3.3530432447452814, 5.80501379561068, -9.031947635943753, -9.34778482326472, -9.48067740009866, -1.0635895315104449, -5.349863004963435, -4.583613573811656, -2.817965333416357, 7.935557359912263, -8.118888599914463, 2.684852430323339, -1.0396757788154076, -9.091467966184524, 2.289912466834135, -8.600993459798312, -3.361301301545751, -7.457034397618023, 8.061525228461942, 0.4582200306006321, 8.055977217616455, 7.7906567859562195, -5.419017397324799, 1.9604812456806027, -9.000324731988776, -9.91191906439256, -8.839257467889594, 0.9088409582300407, 7.778382405891865, 8.222891097582693, -8.616814718377793, -0.8599759245619829, -4.960299237393282, -5.948468703521987, 5.273917094047329, -8.940695219631058, 6.973119697327302, 2.6587973080272747, 1.8267726210722053, 3.5887285547806975, 4.076626232696858, 0.26814220788020826, 4.326655031916992, -4.3004771669916275, -4.536801276912302, -0.08136897250960295, -2.6198695571357007, 4.48249272775611, -9.263585338080576, 3.2179745689862855, -2.6489561159036974, 3.525776995648073, 0.9491407865258523, -0.5969238431218731, -5.555341461185737, 3.401320089431511, -1.8370585675938695, -7.7965325582584155, 1.6987901465480206, 8.218953740665686, 8.626671228605861, 0.8976057841131571, -1.52587148785695, -8.843134806108363, 5.093832484876943, -2.055520159896405, -3.576424244821272, -1.2524861977082011, 8.011746552554879, 4.113662755465388, 0.27585553688484055, 5.093216098289641, 4.328629084243367, -1.8197017817587646, -9.025554531632691, -0.7302522518941181, 2.997638026986582, 3.6379869598836034, 2.7949806254834346, -9.39046008947046, 0.45664356271373485, -6.788356145858945, 7.80869108042879, -7.117559038958499, -8.051430054783449, -7.141938885523196, 8.960986649106179, -0.9341507022524791, 7.0763423606200035, 0.6834545430534398, 2.6411724416938593, 1.0341908865325316, 0.8184403053720963, 0.7660747783459172, -1.8152578040491392, 4.1517043248810275, -2.1205670815040634, 8.794047047020243, -3.091365163889823, 9.944164315598947, -8.879197895776246, 0.09949534845485708, -0.8655083404045705, 1.3722737221759687, 5.591044878224221, 5.88691046886057, -4.157715178126078, 8.473238667488499, 6.002783932384293, 8.276443765245144, -9.82460823742952, 4.058077388365911, 2.933132398281998, -2.7853127313785, 4.219253102129352, -8.870120983318174, -8.987901727600931, 4.100691692927043, -6.622594142950399, -3.52965071396987, 4.947342879179322, 1.1172636129875464]
BIASES_LIST = [7.797221821853327, -4.817251378805684, -8.13735238391211, -7.465441270750834, 5.990695427596226, -3.891936297860843, -8.650874985917671, 1.4826128588250036, 2.502860604187717, 9.295976550639232, -0.955799995013173, 4.126340350258319, 6.199148748352332, 9.120282063674082, 1.6227495455170722, -4.4310235559384274, -1.1561476211276016, 8.824894198512563, -8.227542049221178, -1.3299858726716565, -8.138377420000381, 0.7470769391818735, -5.31826108016528, 2.696919750281875, -3.7384536598632394, -8.781862462145408, 2.6024397883788524, 7.140903476411463]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

