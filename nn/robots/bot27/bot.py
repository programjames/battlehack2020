import random
import math

WEIGHT_LIST = [-8.703471980701984, -5.420548140832437, 7.918923821439407, -8.266056149693542, 5.396636223786512, -3.030659564080427, 3.8891258247396188, 5.23431652895394, -9.784365378213087, -7.028658626300541, -7.414962929886066, -7.475897530976545, 8.3865489713355, 4.388497728673716, 6.084219511086079, 2.54124402731267, 8.96174771106907, 0.46164239112522587, -6.510358769892848, -8.417831884209948, -0.6511691692811965, 1.2220955274416703, 5.129459707425166, 3.6915682581606983, -0.9810156975503617, 4.6177972100679305, 2.161189368466731, -6.937731361225275, -5.738260660968568, -6.943267674217772, 7.611825462677441, -5.07406637768308, 2.4250165325720303, 7.590861607745147, 2.5568476405443636, 7.241233468341882, -2.25696096181424, -1.5182136764960692, -2.526686437553196, -2.3768966898679817, -2.7402645866392383, 6.081916477315584, -8.622228274284007, -4.181341028957936, -4.560425967324024, -7.976593217674006, -1.471291614557087, -7.473655175023303, -4.32611697404438, -1.0308831744921694, 5.049639346991031, -9.19149682444262, 7.956625405838608, 7.933158751775803, 5.979631746591213, 2.758702642008519, 4.525875142290936, -0.3743382139526812, -4.680685591685572, -4.199864472949848, -6.285819762808973, -6.1158102961187915, 8.87475141481518, -8.812708374676724, 8.287248664298023, 7.963425636751282, 9.258789553146947, -8.03448240830556, 3.940022948484623, 7.966167369114853, 3.186891376140908, -2.2392032896300185, 9.437077363936965, -2.5987171932656388, -9.92613808927614, 0.8879126109608766, -6.090973851992536, -3.279903745382793, -7.0437263425787915, 8.98476776096518, 3.211329649154484, -4.45415733391326, 6.261681827218556, -8.01743288577623, -9.617845601038642, -7.6700784377364535, -8.760058295132362, -0.577435633421528, 8.96251257722172, -6.723960977320185, -0.6101147736632555, 6.988610803295352, 5.538316871201882, -9.418632305208263, 1.350031750388327, 7.989552648109843, -4.0650312964448165, -5.698775701837995, 4.8015968423850115, 9.510345912298376, -4.4440705620607375, 4.826459280736115, 0.7084626016438449, -3.6700913619618936, -0.8345336594028225, 4.224098003786699, -5.948948541022556, 7.427167810388546, -9.682453117880595, 6.8321379123898005, -2.8458484270092406, -3.7562188353933568, 7.703720941837599, -1.726888521717198, 4.173869179972478, -2.985145322240223, -3.1687865103687525, -9.154348288362675, -8.445709687948067, -8.651998929194901, -4.776325240289953, -7.477635743247171, 6.23928288352613, -0.12942717600204823, 2.2064806242444277, -0.4170349862727605, -2.269669374795688, -9.719161720443728, 8.69981344803032, -2.462570358966138, -5.451545500012964, -1.3479636457689033, -8.32532866570158, -6.7833058770522925, 1.083460820774281, -8.443170675389586, -2.8462333589057582, 4.040071270154906, -9.469766841857592, 7.023243308738216, -7.890755351752022, -6.403180125152732, -5.291036636175219, 1.5843580666355699, -7.917217675470891, -6.534232532711062, -3.5747162119896974, -9.776259047390845, -7.648123002482485, 1.4275036678783657, 5.356507085816949, 2.92827389053852, 3.9580559100150747, 6.1783277258118225, -4.841546504073582, 9.798926211791674, -7.739760167454128, 7.262338854818825, -8.015964976718152, -5.752797987979363, 0.6897045057110383, 8.570979900051082, 1.4287311769185997, -1.5373428917490006, -1.1884107777388468, 6.324395918794163, -6.289085180112261, -2.766066064953449, 2.6664691947313095, 6.616315739420411, -8.438807939774296, 6.785404021708658, 0.11681540731179219, -9.452980711298943, 3.5104269711731817, -4.543057349740063, -2.6358449467120266, -5.27837177655411, 7.660842824717761, -4.285201202724029, 2.3357033125256095, -7.252990259298453, 3.0066617386941648, 5.268473631744175, -0.3915210271914642, 3.87223304849638, -8.236477523803023, -2.70856972664554, -7.762073490301944, 9.135249887557041, -3.9724080140813918, -9.083227083831478, -0.9648511334980014, 9.983378561564507, 9.428947306956449, 9.684926092568599, 7.382519873362629, -6.334114214735084, -1.5244871276189293, 5.31973738108702, 5.805320052894253, 7.89693456140898, 2.1946696426028627, -1.9373954145222498, 5.154712758273243, 4.194365471897328, -9.546416043989092, 1.8591830392673518, 1.4764447885465017, -5.243196783584876, 1.821038571673828, 4.371358770180596, -1.4790062481125368, -8.608018599417232, 6.292476666199928, 4.758382938371435, 3.9101751595690555, -9.59327535047519, -9.489578044705272, 1.839034500931323, 7.35926350033353, 0.988521769688921, -1.5796319349806094, -3.4034465037961965, -3.763744935390565, 2.481082444485409, 7.163482011535116, -2.097369306497545, -1.8100289120178132, 1.4822814256189503, 3.9078860948400074, 9.753427425871514, 2.20553468670483, 0.3060746969918924, -4.997109685019037, 2.1851892745366754, 1.0225081393514586, -3.361289634169924, 3.9371468687111104, -3.49814843474197, 2.7954837000335164, -9.224270833112564, -4.044722733367383, -3.877778787160249, 5.271544327986447, 0.3322509058895218, 6.194376054896267, -1.8297479457358925, -3.1546892886032367, 7.370930442637995, -0.5247872123505548, -3.9426249018023274, -0.40738867644402177, -5.212981112236195, 4.566875798097804, -1.3692262733379543, 1.6398450650879468, -6.84116787395646, 1.4861429981923422, 7.70917558600156, -9.854885371090859, 8.11274999804968, 7.21814962754976, -4.5458467438484185, -2.679957180348107, -8.117469561196808, 9.341326390527584, 4.208576473130245, 2.6011418192075126, 3.011262407017586, 3.968362479014507, 4.000575151134607, 9.67750193552358, -4.070862117211183, -3.744612288230627, 1.4208109648453018, 1.7109853184926607, 2.2164290891853806, -1.8710338892096452, -2.2062390374403185, 6.519915799193782, 0.6055252061813121, 6.20195014688877, -4.9597765505825535, -8.032170060118954, -1.7163385303867358, -2.7821146836119803, 7.79211432998023, 2.1289456088295715, -2.5610504577963784, -5.299127132940999, 3.7092256808286823, -4.589380576414246, 9.580334738913294, 1.466777744422867, -5.69672556676797, 0.8688821309342192, -6.915027624901073, -6.559932732841167, 7.438352923853365, -2.27796199894041, -4.1099353955405915, 6.898677229577743, 5.244195180011317, 9.304244927979774, 3.6678885032018442, -7.394121925470785, 0.3440246556751383, -4.841409574061773, 3.4715270497894757, 8.76477981100362, -5.449426784003659, -4.207265714654773, -6.7126606589636095, -1.2792807467227458, -5.900520643865901, -7.810541165005946, 1.0447891742715605, -5.369703928604217, 1.2967791306401217, -2.8618956483301305, -1.53049294655478, 9.792899147169969, 7.477654035089575, -9.234602527280614, 6.078954705767924, 2.737257553619264, -2.6069794224693403, -7.770080185865076, -4.3376865303946, -3.2197711948823855, 6.979938075715715, 9.65474168192754, 6.944244710927993, 6.709969003376482, -0.3531906801123892, 3.739249552841585, 4.8268659251546815, -8.594556742045452, 8.769740447547491, 6.256237548318058, 3.70692183673178, -4.443801835643953, -8.884559690844942, -4.032212379748135, -8.595594056604662, -6.637345089933266, 4.113121559787727, -1.1036830688031216, -3.785074486244815, -3.8544377838432737, -9.335721513549293, -7.80734216510846, 7.4236003688127035, 8.856318115100159, 4.412617939502185, 5.768747084724684, 6.859763885207837, 4.275361835066562, 5.355341642870492, -9.44907486294975, 2.4848077656177274, -1.4579182859320294, 7.5314422004051735, -8.29302006054274, 6.726612539463609, -6.663591328534304, -3.25734574835397, 5.5463659529684115, -6.194061269239251, -1.272396004708412, -6.517790788002856, -7.13693008667728, 7.283728563710181, -6.236191714679425, 8.414295355420233, 9.534497827109146, -3.9014252069187805, -6.701797233914917, -4.053524403664326, 7.124420071887279, -1.622300220759021, -5.086009822027709, 2.4369684626665578, -1.9978634530665111, -8.782793628868934, 6.651682159640117, -1.5165530904237663, -4.59865219570637, -1.5163821313044519, 5.419474421900961, 4.653044386505647, 0.3524446718677332, -1.7288545835180873, -3.3824167464571815, 7.406616769203133, 6.112052391203104, 9.106413642998518, 6.1598386240763645, 1.7819179407101267, -7.615599017128131, 5.6298036649707335, -0.7961938146568865, -1.0400364104394946, 3.3593626824396594, -1.8687778155790014, 3.0422563454059954, 6.7497409341756445, 8.905881203374342, -2.043614928377804, -4.11690139513259, -5.477601426051537, -4.561532205395129, 2.5117297015084112, 0.2819952325362092, 0.7685446299400596, -1.742148865174844, 9.439642755523952, 0.6907254982307105, 2.4445370155549746, 7.130133822324559, 1.8355945604358617, -0.2744811342187585, -1.738970493274639, 7.8428656795430065, -8.066323531266049, 7.767314145673595, 1.6444573864526628, -4.75012496655026, 4.169152562168929, -6.84469368619081, 5.303116289645882, -8.127222163764397, 6.067267620443783, -3.9027015148954796, -5.050210605524564, 3.3413015149833925, 7.165514768805746, 6.402722375484359, -1.1776645135321289, 9.58235592042195, 5.240964001825699, 4.867664228358368, -6.213031694496456, -7.218076815395191, -5.265426751404714, -3.4200481859824894, -7.822436013019754, 9.632003516290784, 4.011457550041866, 5.045276745770405, 3.52534604052045, 6.201065510189398, -3.0897512342173155, 5.594407305957294, -0.7550476143586629, -9.702712100247503, -4.439202988176383, -2.2750384620805626, -7.577962660255048, 3.6433119096679043, 5.36266994254736, 9.510905850761251, -3.649386786663438, 1.2935109855934215, -3.061242859174742, 7.720225164177368, -5.874782957780694, 8.206810458514486, -3.2685555252924807, -2.511332028321835, 1.2998386967236026, 0.840102670986365, 0.921360752698968, -4.151188682360503, -1.1054950295244375, -6.708403378096808, 5.128314743940001, -3.00769654598086, 5.316693193806133, -3.985036496365808, -8.21319197524347, -7.203066196876811, 6.671251515239341, -0.2628921081651754, -3.8177045639662577, -4.624250609909133, -5.516828553834506, 0.25962498569983694, -2.93455746254047, 8.547652234051103, -7.095672844225868, -8.81023388092224, 4.897793454790644, -0.09170953268241888, -8.391399835560474, -8.664374449297075, -7.808767061208446, -3.6444221030383472, 5.8008498439791225, 1.7264670629712136, -8.009794441982024, -4.988234404857337, -4.122414328652216, 6.631998233973043, 1.791833016591811, -2.700662827394309, 9.46645897071339, 5.313675702184746, -1.1950774890634754, -2.813695287249594, -1.1606670775437031, 2.0627715332608183, -5.86423690108163, -9.521545789033963, 3.9786521465236113, -1.8905592215003804, -7.90859066070894, -3.3022995358867213, 8.142437997069983, 0.15646338124930104, 3.0852468032792597, 9.661203833765047, -5.104898121595558, 3.4013375560635986, 1.3674064478885466, -4.589598919189641, 2.269902418416441, -5.679543858166081, -7.858398291991091, -8.59796584300325, 3.64151046142511, 5.488217325226653, -3.3659247122459384, -0.36903447546981205, 9.054675353106663, 6.077517628589689, 4.277212057695213, 7.784828549118025, 3.4883045893278926, -6.30291378248665, 4.312965258592875, -4.2454775842801284, -6.4656304773219375, -3.978408558420698, 3.867362623910056, -0.4286642487425141, 4.88598966352566, -4.184028555793202, 6.091141931996404, 4.634672485882884, -1.8558767478680238, 2.673617165890132, 2.3528622085065987, 6.919175047824492, -0.5295566897147843, -1.0576782423644246, 2.7368266526655045, -0.412378109895041, 9.329550090694937, 5.587748855866035, 4.819488463438324, -1.687442212677439, 9.602070072108539, 4.974602272228143, -5.578688762940054, -2.8744266021477793, -5.799530764624472, -5.832399921619675, -9.348567066466043, 9.30631366982724, 6.163632663297076, 2.6370195899071085, -2.775058559387082, 8.684754779702452, 2.498078188419191, 1.5241925098939149, 3.5764465855983563, 3.618480446842627, -4.667590411055247, -8.818051190407626, 3.925788394575285, 2.0165956664287688, 6.458202087969934, 9.284178813894531, 6.376072600266262, 1.2539399800807018, 7.336289420273381, 6.640829294496619, -3.435356826164398, 8.530605706155246, -7.489892849705551, -0.5642933421485719, -9.79794493473726, 7.3906651663776906, -4.852914551417302, 8.041808871954427, -6.866532936906844, -9.304416520581011, -2.7994903743960675, -9.6984192965155, 1.2881445254730135, -1.8878742392133816, 6.126955059336112, -4.347417352862362, 0.037644440718649363, -0.8722679676994076, -1.662117985566237, -8.346279888662737, 0.048190982011778516, -6.937570454473249, -9.9354300299703, 7.165311175705384, -1.9077033023132746, 0.9951386017108597, -2.357336403604135, 6.485806006048673, 0.4687844384738433, 3.236070178475913, -2.575077646058322, 4.1879728141040395, -4.570954914213276, 0.3929939455722735, -3.6501307305126662, -1.9362816325809256, 0.7856564798257359, 0.3638573731451, -0.07496657555770625, 5.3122391299044445, -7.564482606642033, 3.9919308301070515, -2.6202614571743776, -2.4621887669633953, -3.0602068068881882, 3.33051625121624, -5.197613297394714, -0.48136017337090387, -8.334563815947707, -2.262575110841629, -4.900539466025533, -4.987514638282864, 1.7490941812923193, 9.499063230735846, 7.6556823779257215, 2.2139572588780965, 7.901009853764382, -3.9691078047260797, -0.38452571645158073, -0.6691115765132771, 7.758268884595257, -3.876063680573445, -9.088482991948435, 5.351936721144188, 1.3668574639512165, 8.75627764292836, -6.035278732549392, 2.6858618827149243, -5.527869179425791, 2.4579968413696722, 8.012392587622152, -9.132500485931999, 9.396878802938783, 7.799382895510789, -6.659163965341703, -6.044295267798856, 9.4284200180917, 4.4978503225033535, -7.948511864062329, -6.607842994174902, 4.101920237439776, 1.2803840692998314, 7.120716662406636, -9.827076149022268, -1.774133672787439, 6.968421839343087, 0.6171241679081021, -1.4984829785723903, -7.444567532678292, 9.301985045380267, -0.7066089493710273, -9.373848638843995, 9.884055202963527, -2.9461814243298567, -1.1648328091887876, -0.666150653178466, 4.34314834542873, -1.724126296597614, 6.377432690188524, -4.691880972842375, 4.177480372222419, -9.547788218466957, 0.028522250664828164, 9.68878870166574, 2.814428946151093, 4.964828637243384, 8.345266951457155, -4.919064081145756, 6.93310497609157, 0.8643897107672043, -4.782115251736776, 6.872043123973299, 4.009806653417243, 6.7103375416135655, 7.372724436154346, 9.468018471573338, -5.5912316517156935, -1.5258454088842583, -7.45017546837402, -8.934712803711983, -5.236226461420268, -3.9043108794911614, 0.012861167295696418, 2.4899262648045983, -2.3485876624635367, -7.753712233641156, -1.5978459381596366, 2.572926939772721, -9.389068383738987, 4.592763759893382, 1.4376614431269203, 6.194260074546147, 8.42800748833265, 0.64083080633125, -2.171109551992556, 5.88564007861758, -4.2432449616095, -3.8563792586172134, -8.4050988676354, -2.4545378013787555, -2.4709929973325124, 9.558364742116147, -0.9041141316302248, 3.491623083810204, -1.6857067772504735, -3.854217835365368, 1.1763752480047351, 2.9538929771820968, 3.7666443144583575, 8.208274320415285, -0.5056581841364167, 0.347746890207306, 0.19063376656646547, -6.621604837871054, 5.943475684527142, -2.36893422051653, -8.516865195937552, 1.9068977628614565, -9.007564452058109, 9.781236902479044, -3.7167117727117382, 2.0350365440698823, -3.2378922798042336]
BIASES_LIST = [1.5591447599933659, -2.120479724508848, -5.156308862877461, -2.815587769724255, 7.657841768302916, 1.2779391455052025, -6.239423321735094, 5.898755493089851, -1.9861714712811889, 7.210500600514287, 4.1523459435076795, -2.5775592552974125, 6.712047170453442, -2.9841115852575584, 2.2265928459083266, -0.34616147488102555, 0.7215353825315098, -7.121224184832123, 7.245128201103352, 0.8255781817833796, 1.0597671156000938, -3.758845536927371, -6.071242497511347, 5.989018874895947, -5.965698674778386, 3.039219759987077, -9.863672896016293, 7.407205519202812, 8.93649106563539, 5.608166041975721, -8.447443606419355, 8.333898684694358, -9.148812154217058, 7.1928099664066885, -6.966514247797225, -0.04481015120820153]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

