import random
import math

WEIGHT_LIST = [-9.93948485973611, -1.608751428641499, -1.2645576774221645, -6.2211842640672295, 3.3459758046043415, -6.56149586378548, -3.488198593197045, -6.342005389425713, 5.079507924624313, -9.162391839366705, -6.076777014333949, -7.799959627148086, -7.664978736534205, 9.353318480108111, 3.1800244870670635, 8.469213328163203, 5.213545005179689, 0.20646847730481, -0.4181942007448036, -0.1886296359071249, 7.47724663809969, -7.918938095950539, -9.487423596601971, -0.17683689122172375, -8.551328592277844, -0.12600750795746585, -8.765424519766247, 1.386200040343926, 9.01006438998673, 2.9450650039490647, -2.005671972522838, 8.94381657287142, 9.526628921019913, 3.676776308150405, -9.98919019103176, 8.223496754635235, 6.882580472920139, -3.0427097010397723, 8.654745159677347, -3.4614125951750063, 2.6000362262675463, 8.700291322877842, -5.791445202512742, 9.440160385986005, 9.955506255756099, -9.294562837053252, 0.5081669052395288, -7.565903053382527, 6.180960306988119, -9.928027251557081, 3.539409197743433, 1.0276805086211667, 8.108826152029316, -4.976383198429977, 3.843942452633158, -2.7641247852707735, -3.2679243216812104, -9.798777816729515, -4.775212860973217, 2.063771569699856, -2.151741904726787, -6.777978213676519, 0.21486829445376898, -5.668591892277486, -5.109229814346143, -2.3921856487530064, -6.979752327244901, 5.503802201732867, -2.4690904941019447, -2.083893984022467, -5.604555883522783, 0.4038064674078079, 6.054882447465012, -7.9906365923135265, 6.493522118027705, 8.775743627349396, -1.5495900929063353, -8.707186034011592, -2.5779019402257397, -0.446608193012338, 0.8100841001858505, -6.2699315087048335, 2.585287886588805, -0.8368980921777194, -7.807299386526482, -1.8522641216918512, -4.678619102767838, -8.249486009264523, -4.3922740348312805, -1.7666949969759713, 5.025161807934772, 0.7525099151397363, -3.1065274721680014, -1.4542258067092977, -7.494714497795698, 0.4834285320430176, -9.736596550359351, -4.73305128607274, 1.6189917504860691, -9.907035593584471, -7.808891917605596, -0.7263543059650708, 9.931821918859892, 2.906975454886725, 3.584628571272736, 0.3303340097322689, 7.993549913295034, 4.2208107131213435, 0.4376843795058356, -6.01802827681065, 2.1644255031041304, 2.3942476735089695, -6.734697150494662, 0.7113183781791239, -0.1407224400047511, -7.165136343400622, 8.832524391783952, 2.3639214575502905, -9.333976982682051, 1.622838735751408, 8.442088311887705, 9.054140034596301, -7.544656825781519, 0.34953954304313406, 6.446203501183383, -3.952444480193349, 6.861739918982536, 1.0780033611480562, 3.505861185008465, 8.77173342486103, -8.573685756191319, 1.111119511658277, -7.989264118757077, -4.559047312278768, 2.0512960903382087, -4.445068257668341, -4.066533464123879, -9.730362474325098, 2.251541217484924, -6.057311988785015, 2.5090481058471497, 4.651607645098991, 7.807776570493701, -7.558413277900935, -4.245547846010012, 4.711435217817684, 0.582436928876584, -5.993513414451048, -3.8797051198831305, -0.9596064261482891, 4.618001845514177, -1.1535046653617602, 8.268551351318688, 2.6791151823646118, -7.713616519266607, -7.647698483736036, -9.394405836256114, 2.1331456072749884, 5.866993155085575, -7.096253120877347, 2.3164270304468833, 4.358341616196242, 1.0299623844071437, -2.1945916017260654, -0.5541036762446243, 4.641921633149826, -5.247147263560934, 9.974819935934327, -9.703998550882593, 3.2043487447341725, -3.0793009631614643, -5.659806808642902, 5.179836085389706, -1.3490860322300513, -5.883193668409417, -0.928331268419706, 7.1922123656385, -7.634734566315764, -3.284236447498163, 8.105193658900223, -3.633037845082132, 1.357223118301711, 7.212089638408134, 6.550950798607392, 6.165987685146529, -2.1741371212297755, 5.251005512114125, 8.328755291933184, 3.02726797385931, 9.763247064842126, -6.472613432614791, -4.543569979902711, -0.1687233871340954, 6.886430650404765, 0.6163914607134391, 2.6656364006902358, 6.212413508265829, 9.017843800192455, 8.101073959719404, 3.2715963176503884, 3.613311244392822, -4.341013869609354, -1.3008069457123241, -3.4276373512989604, -9.251563819742941, 8.108660884706179, 6.934916514422607, -0.4263971291171327, -3.0512256498222285, -4.2552222030540605, 1.9687447424956126, -2.591299422379077, -5.922866114066682, -0.3782339226481408, -8.938775558623465, 9.570656664185652, -6.773393919912609, 7.041315545383505, -6.908216023237388, 4.500670690707398, -1.3269990391856155, 5.641299537461414, -4.841566608276131, -4.804236152414665, 5.348414042473188, -5.678462252419154, -1.1327342666491589, -6.449386554795313, -2.915330857339802, -2.2938080978462967, 0.14228154419557626, 8.204438056015618, 1.9903396457188158, -7.483391659392511, -1.9793867916943046, 9.622528369332784, 3.0277655557097205, 0.665948275213367, 8.44360531770118, -8.865076399327796, 4.114793126997334, -1.8256585253033375, -9.925656388804523, 5.500978281579306, -0.08423544160919327, -9.504918626092017, -4.347966874064446, -0.4575294604957474, 9.793854913643774, 1.836265381370378, -2.6512788040264628, 3.527120841309735, 7.188289294671538, -9.662670646641448, -0.5169154869082959, 0.24808108607797585, 7.881488610646809, 8.135678160303033, -1.0420424127413241, -5.204826443514525, 4.759348784495504, -3.2082235675059056, -1.5935758708449903, 4.713852817305037, -0.7191653277884154, -0.9372729195790583, -9.761399326590162, -3.4385093767575885, 8.233758768944185, 6.414630664189545, 4.89742725313074, 4.450632114265318, 6.920904112084578, 2.587514381559169, 1.2633614332515393, 3.637089705352082, -5.8377687078533675, -9.556728282201014, -5.269748789737592, 4.8610702298057475, -0.7799567514879371, 0.9731490975154635, 1.4832329490213585, 5.739906281690297, 9.504795205514736, -2.26092165394173, -0.789296642494044, 3.4938605598476453, 7.459507750467463, 7.963445089582809, 6.570512601953048, 1.2063731897634185, 7.417091477284291, -9.678849377227422, 5.871545939738956, 2.216971326394173, 5.652843912783471, -3.1476211079478773, -7.991173239334666, 1.712053550744459, 5.595984116708017, 0.3338783961292471, 0.11563832111462702, 9.759725806127332, -4.739898364083426, -8.504024190331691, -5.265446673482954, 4.052622623783934, -1.887106743601798, 1.9091632526595497, -0.7791471367614573, -4.847851045113183, -1.9173000168528365, -4.183732475620962, -0.8095618967370832, -0.593620733884455, -2.378048937704036, -0.04664114107015216, -6.8941368020448035, 2.6317330467074314, -2.5275236314739136, 9.422637792763432, 1.9433996570137317, -5.221742995851488, 4.100485436374823, -3.6409140377924327, 9.87306990352279, -5.3682345019536415, -8.720289739111431, 7.956191244633519, 2.0947810126678217, 4.174968969735925, -9.38951424876648, -4.12268520675561, 3.4829662878731344, -7.488324579444646, -1.576074622100478, 4.947208005240771, 4.560565692905016, -4.619785363767665, 6.7238209114619565, 1.6924432569755758, -8.8436494095746, 3.538183488365089, 3.029608838993896, -9.88587267330833, -7.337038138840343, 5.629113570435852, -1.342660625939672, 7.449903585602218, 0.2366525884825279, 4.156907900687202, -2.6388626625333167, 9.028272726297953, 6.440438365351632, -2.373375582825707, -0.3612326496406375, -3.0200895881998324, 0.09260015219250128, 9.984372464101344, -5.366821791716347, -7.662155373983975, -5.41355920206427, 3.1905484937702013, 5.99696112988434, 5.009509879516207, 3.0710336888697434, 1.453847565088184, 1.8524751160609636, -1.6228405923105065, 7.7484215513932, -9.646500608504525, 9.510233070421567, -5.468107521824912, -2.3595284125431126, 1.7727318539505141, 3.852851779175735, 9.215474621218515, -6.597176368943574, -9.598202045691874, -9.774408768505099, 5.97896672380493, 0.7236325611507972, 4.429520440554519, -8.399221996717081, -4.951059729603696, 5.0950161362941415, 2.117839621062581, 1.2383688736781178, 6.051637758995415, -6.823140939992223, 1.6808567321101098, -2.583783142913587, -1.951423487344643, 3.1155737277719204, -8.483818260977845, 5.749295828845742, 0.8680098830496163, -5.278076900491325, -8.522483587189338, -5.7381200389524345, -2.9782001807553264, 7.617129598970482, -1.8402037362003902, -9.902897733244963, -8.237461948395818, 0.23648840854178665, 4.754028525505165, -7.065780445270587, 3.7028029928955863, -6.617062064171346, -0.24290219580025507, 1.4301843918402533, -3.594971439329422, 2.4917611193152425, 4.695196437750241, -3.871683549721676, -4.798717270659294, 1.8795715697546989, 8.256677111552609, -2.8024627748796727, -3.1774119175245197, -4.253522627582653, -2.0437466501629746, -7.777643507821073, -9.09178467589742, -7.852511293358164, -7.2537023022659985, -4.431065097649509, 9.505596695019669, -8.118103409001847, -6.053584868116861, 5.556255993149996, 0.286524320763208, -7.065247550934835, 3.335339000281863, -1.4402668529416154, 6.7591953775052716, 0.5555694704025456, -5.9295542680910485, -3.8940856591890842, 4.173468718661004, 0.9694785389841698, 4.491062241042732, -9.847429077974523, -0.4105910712159382, 7.49379478150394, -4.787773246522653, 1.4587693475836705, 6.322842497568889, 9.267831638611337, 2.604159516817866, 9.458053747360623, 6.6351365567526805, 4.208454245885154, -6.2603013439571225, -6.727061294551156, 3.0326880191748646, 9.26751928755984, -8.694929455854485, -8.874207636863328, 2.1983424718623663, 0.14732720596794202, 6.23694700077764, 8.849254496147026, -7.763024867597242, 1.1500549668697495, -3.457527269124454, -8.41331693754242, -4.888898247111728, -4.367909121659414, -5.709982485999287, -6.569974892229973, 0.327732995057346, -6.333284018597927, -5.7377812305270615, -9.204774421270077, -5.356844006744237, 5.846170299615716, 7.104021006914504, -1.7765451464881892, -1.1072905228874212, 1.9957703486226137, -9.110120788263385, 2.1531903700778763, 5.324876316033482, -4.359449179300505, 1.0528798596921227, -5.309916370861412, -1.8886132246590108, 2.153843256103496, 6.4324809726482215, 8.900422402121674, 3.907530980926632, 4.891815097920162, -7.52652296598979, -4.0622528588886, -3.5147667548820856, -7.714436152056161, 2.900056846777087, 3.10441176837616, -6.967631505752088, 8.217635036075524, 3.5938283742259642, -2.7242784550262167, -4.95217211477873, -7.113417907017594, -1.66748350486667, -1.4710050545535438, -2.649141535054344, -6.283995972605543, 9.7014017197357, 5.852587783259331, -0.5897909643589969, 3.6327743033622077, 4.36314455252684, -7.631187642828243, 2.539599189612227, -5.575095388296414, -5.424077068254984, 6.146184084770457, 3.9763944998587917, 3.6745905525473344, -6.289891494757571, 4.311231327591305, -9.27641806226064, 9.389945243252711, -6.586510851954841, -2.9950432292159874, 6.999434888322419, 5.655065784020293, 5.852522692120354, 6.258047599397653, 0.12807035113620024, 6.0968137057074685, -3.7626969485758295, 8.738551300660188, 4.440125331963641, 6.739704846688191, 7.530864404873622, -8.451581556633037, 9.526092309493528, -6.395967127060215, -6.7023546396307765, -9.870887882535941, -5.573398932592985, 5.831387143982273, -5.259991700351863, -2.8711636831332443, 3.1779546653875848, 6.290648523671315, -3.7211085022148875, 9.524216897989458, 4.346803411382146, 7.096082588440385, 9.39356402311542, -3.1028190238338453, -0.6759633971427732, 5.736424072492346, 3.490127057042315, 3.2176270554649715, 9.78479796643651, -0.6104272190319833, 8.922621340175176, 3.065704935076493, 1.1992899810767277, 6.562155567794225, 7.199312334743617, 1.8138564935015857, -0.981440884343014, -8.283630339510404, -8.277421619928386, -0.9920308624190728, 2.7862974086914605, -7.745207045647852, -4.0902566831459275, 1.4866746113669116, 9.978851953715186, 8.017239965565743, 7.3690188900630424, -4.95625033871627, -6.051601857486539, 0.3920980490740362, -0.8717582844369502, 3.635393787139943, -0.2803745034462004, -5.790484561498155, 3.5530589801872914, 2.865449219962642, 8.974700902748964, -5.991475935902977, -2.843715860315097, -2.5813730264085777, -9.27773113916185, -3.1871458935597508, 3.9728989532677055, 1.5716753053559671, -5.628731051279923, 1.3023215017018792, -6.9442604896676885, 5.29952284637038, -5.3576109524408855, 2.769452724340116, 9.200370032641768, 2.5575775562643095, 5.4741635801004325, 4.727168834806918, 4.424185593494807, 4.9583766869373225, -1.5279874275591219, 5.33937622201498, -2.821866250619647, 2.355614448160768, -0.2246195964225155, -0.9599670062791112, 4.675147189818524, 0.5253257341773683, 0.09711653731997849, -4.781627040382785, -7.727612280497171, -7.600063476732483, -4.0676712219076405, -7.099701746819016, -6.849780889115992, -4.885213122358492, 5.018813438791989, -1.294833887461614, 4.2928737539989825, 7.320918516191352, 3.884396898322933, 9.081653251101685, 7.643243752607937, -1.517479814738678, 3.5298487674422407, -4.027806085673773, -6.484967858595054, -6.866737378210734, 4.163394040658204, -7.108085321885098, 5.463028090569562, 0.5165748132786891, 2.707954292890598, 1.4532785408505617, 5.27654559467922, 5.7562233506786935, 5.106605408973664, -5.432817638090281, 9.49242829113416, 9.00502155168747, -2.7814455339423327, 9.886830028882326, -7.593398760815974, 5.580641205361852, 4.847626179997139, 9.314260905332912, 1.3442329628120735, -6.151866307992115, 4.860658323734237, 9.963644612597417, -4.148792159518912, -9.648001436516386, -0.8479645445789359, 7.706401853017944, 1.9635934530777615, 4.21395805987132, 3.9375339760696644, -2.8733210452788533, -5.248460323731914, 4.939186016548822, -1.6173565882605345, 6.634907771563, -8.195152646266157, 4.743150225366232, 0.4528988300665162, -3.576327544598678, 0.8320748064025913, -2.7744883635576523, -7.935069596556232, 7.654153660360976, -5.354548096873768, 7.551981330448886, -6.164394493607981, -1.8383782184868664, 6.141107766077106, 2.3324249350427557, -6.366370501556449, 3.6381634476871323, -7.469409501359186, -2.20264164567401, 2.4924177527937523, -9.550417289755465, -4.225073291756544, 4.181052570203288, 7.928844425671468, -5.626800961945366, -6.187022231455266, -6.664188876308447, 6.005165981388583, 1.230514606767244, 5.610085142849613, -4.767831854265658, -9.92615230124441, -0.3994529583977009, -9.374303791732235, -8.681485874241003, -8.439465646619318, 2.729347336521254, 6.5881177798158355, -0.7002934598292381, 1.8769685310165372, -2.239780252597992, -7.490628412618383, 3.742876536717681, -5.218974596610253, 9.5669292659129, -2.6447679414113807, -7.775020612378061, -1.5207302109885568, -0.25060208952687013, 7.4191878979552826, 9.861700932224299, 0.8957406240777601, -1.5391626615122593, 9.496157418410416, 9.030474107958398, 6.710539251232479, 6.089186374061196, 2.9431989309694373, -1.2136197137518856, -9.869956074723929, 6.88222154280211, -7.576337358587426, 9.528079927665175, -7.5852084019792105, 6.773160827928166, -2.754829433787651, -9.987652085261479, 6.117360346114257, 8.716830775728134, 6.770878982774516, 9.567703476229674, -3.288993316234068, 0.6856845119166959, -0.5064249080161609, 8.586390439356535, -0.8986083340489142, 1.604325316058521, -2.7897474532333133, 2.768140922491593, -0.3978117677729536, -1.090465544226717, -0.7361921478224946]
BIASES_LIST = [3.222650957255608, -7.271131445316234, -1.3231045052809485, 9.983601471252072, 7.040650574940106, 8.083171378961246, -5.339309237310548, 7.820126468940288, 1.5083487066468244, 9.067970932806674, 7.48278511735235, -1.2342126526569182, -7.051508806028419, 4.155511136978747, 1.4190976132403677, -0.8706462261991899, -1.3389816443074025, 9.165561529803554, 4.147279520014621, -5.404611511536563, -0.731819126026167, -9.430398885680205, -2.231654608102227, 9.48408098263786, -8.067367503797316, 2.9031792003054093, -8.724679364104714, -8.58428890519789, 9.996706000676483, 4.979556888531709, 2.4343547058170607, 5.222862626656395, -7.675851793211741, -5.320257134022299, -4.647017947196643, 8.417242489687268]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

