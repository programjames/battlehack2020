import random
import math

WEIGHT_LIST = [-7.19861983867776, 3.792531465585668, -4.433074134455957, -7.9057242670071854, 7.881583653527144, -5.169093063992922, 9.479456987263632, 5.680919196995646, -5.690954310462811, -1.0253440502966633, 1.1047546957001675, -7.601489628619795, -8.319362917029602, 2.0471877607778737, 6.146047506387028, 8.102019531136651, -9.953353736329271, 1.6271873449929757, 6.6651414957764, -5.149646200015081, 2.6065228074909363, -6.6929880977554435, -7.309453916044271, -4.087174532199636, -6.677733185486283, -7.957658113415698, -0.3596011913278403, -3.4015840183755515, 7.668049642548663, -7.133179980993276, 7.771581269156542, -8.056922251673797, 8.557871752323152, 8.10430925895431, -6.388273673627114, -8.853896495739082, 7.228175893537447, 0.47225759961387404, -9.041434841842097, 7.473872964956346, -6.83647472016514, -0.1858302656868176, 2.0205251268038786, -1.5033616146836266, -8.307080480712411, 2.3328375724287493, -3.455877495110304, -8.15845151471791, 0.7148595575188814, 6.050442334492207, -0.46507586701676473, 8.620636714017902, -1.1319877172879096, -8.126220032638113, -4.039299365692441, -8.27237669073537, -3.8715320916837275, 2.5926130874069777, -1.5607114897978107, 1.1868199912740103, -6.526620081364443, 0.21432587175528894, 6.86484149643919, -5.303212027087714, 3.991487925451981, 7.230499429224771, -0.013111380172031062, -4.594504422632992, 9.639829807012074, -8.021748692615404, -8.278115108818604, -6.225626788560428, -7.02508403014251, 6.285820163148216, 7.371875769547508, 9.945988553059607, 8.473854760645963, -5.621185191305102, -9.749181950164854, -6.954999115398525, 9.741611525900375, 1.2646559140277844, -3.2534813242447864, -3.7090999039908468, 0.2690893191010151, -3.9245442778701545, 5.9188989302951995, -7.799662373684568, -2.435868464596438, -7.819423664013183, -4.832283363939409, 0.06532851653956584, -9.542620522967947, 2.112076216911049, 6.423508570869473, 5.562313226647541, 2.7521831541595496, 0.7164676307307722, -7.957335822974461, -2.7310546237549875, -2.7745174234169507, 4.155753930505782, 4.901840980932626, -9.27073292345832, 3.7167573875880304, 8.894313029105977, 1.6640010012045092, -3.9107318923149386, -0.6181279377553892, -3.3938678126633492, 0.8368627402812567, 5.553161641446216, -0.2149641312228301, 7.888648393671929, -5.7106903368564925, 8.830187571628997, 5.095918316902006, 4.727718109918085, 6.407196549502437, 8.315204442003182, -6.518421020139284, 7.516058548023135, -9.297661936353094, 8.232263830339114, -2.0979921545399005, 2.023798577171563, -0.7102683224032909, 0.40494161495662695, -9.767456504531344, -3.6569988098785, -9.76060308920366, -7.206509123592426, 6.685804387999319, -9.300054302481772, 0.6635568920464081, -0.6103764408184258, 4.916612625423415, 3.6220406864812293, -0.12600676253439502, 8.343473860132345, 6.238380643827867, -6.230086530266481, 5.098980436750008, 4.389670278378091, -4.447988563088973, -6.124053533351981, 1.8178205790123094, 3.358203046736886, -6.096175773495556, 0.9635151386699086, 3.5558498271281387, 1.0307191024349045, 1.3796044309179898, 4.091539291944448, -7.034510014026962, 3.6220347930409886, -3.7999775402744795, -4.337228650372767, 7.734693231764069, 3.827578798671256, -7.242488400398804, -1.7573009685064207, -5.127279481252125, -2.2037693044282447, 0.6178252878858999, 3.0708656016456857, -9.733284637493796, 2.623954157152774, 7.133586501763322, 1.3231671161879213, 9.975393596988027, -4.186711938999331, 8.784904434341001, -0.6428927121736159, 5.201812139339129, -1.540922662413518, -4.104450389395877, 2.282825159611752, -9.013872652002963, 4.767610463816418, -7.665084614789968, 8.156684159011803, -9.988021163156466, 4.3813210045358435, -8.858573920975843, 2.645789991155951, -2.0768984609241903, -3.841459039520945, -3.188456965560345, -3.9049683729460316, -9.518865329146715, 0.9055847735181928, 0.07428606417582984, 2.0226545235765414, 7.937375151506302, -5.099668892651867, -1.8935140581491812, -5.547487138361733, -7.235184064371487, 2.591634841480115, 6.27657922392633, 6.518378098207453, 3.4352897727982956, 2.774919976379584, -0.8534745290633605, -2.044874115332867, 3.584429474947818, -9.024863639363389, 6.92659309940678, -2.841794970643436, 1.2019036516640274, -8.770880835133886, -3.4837389457422336, 6.46410249024186, -4.871063271018013, 3.879841743946722, -9.126975191202684, 8.364437744379558, 8.289640351031327, -8.084032797670284, 9.974721252364525, -1.4842996100163113, 5.916135898703834, -6.173896228294153, 9.563461161861785, 9.59739015087115, 8.13773074252153, -9.91185991585342, -7.2790760110347, -7.109186372283531, -7.508463933042904, -1.385662699331668, 4.91591245745067, -8.937813515118016, -3.480982465716491, -6.90784976789121, 8.13791581430366, 7.9275861525558575, -5.0780511583559935, -2.777967434706861, -8.444665242943419, 6.410569473109771, -2.9224890241386747, -1.891993204579821, -7.902025227734275, -7.9392116040925, -7.34650757985648, 1.3655863624345983, -6.545013734649507, -9.31891233113761, -2.4611583260024545, 2.2863600073380947, -1.929429736166366, 3.567801657157508, -1.1014709601267398, -7.146808523233867, -7.665862178799907, 4.623318743889893, 7.057863437524347, 1.1152729275568607, -4.867982410262792, -1.6952873756401559, 4.224002236133952, 1.9520715119455563, -1.055928230109826, -1.5347538068446465, -8.983611468471292, 2.7979190338286273, 0.831441316328867, 3.285847514294076, -3.213533020940993, -2.0916459798853975, 9.569172293445089, -3.1816831429811954, -3.733931418099507, -7.316381620157175, -3.8134784439898084, 7.87733174210463, 3.0988164980146813, -9.241058313701622, -8.946620594464044, -9.377778711521545, -7.12772422467677, -7.880347618440677, 4.669197549496278, 4.757259587088802, 9.246597278196703, -9.670102535382538, -4.525737974209196, 1.0986046294537655, 6.5028643656412655, -0.4947077773585882, -5.532203022512851, 3.719564129092989, -0.018784625711328218, -6.23147330437037, -5.853531655263344, -6.405587250879683, 4.9287943182715654, 1.6473910908199567, -0.9673072970544716, 2.028296819239756, 3.135506123273613, 1.5977602916147315, 9.81677276537479, 5.407215767386617, 8.282893647152058, 7.41381593549281, -8.929291836503282, 5.530224735456276, 3.0893255481340542, 1.2222938955539462, 8.563206140011893, -1.2131976231284725, -3.0822964531027726, -8.162709401990236, 8.64358858396913, -5.946350979437913, -8.163674655307263, -8.653662963857581, 6.501672473193416, 0.3264707040514736, 5.070096323063183, -8.662671033629419, -5.72593545979508, -1.944329640761035, 5.756759860586149, -3.2428227150366755, -4.498070915118662, 5.914437621928144, 2.616508377498768, -5.442957197345606, 2.391780351426547, -1.1305575044948295, 0.6367932494752253, -0.2219805839573148, 2.7494631584712472, -6.015055825460999, -2.4306908658875255, 4.59697261128918, -0.6436188941453906, 0.2819346897149302, 0.5528825152266847, 1.7963457167196175, 4.676043511079662, -1.0031982455420145, 0.681657877347126, -3.004399249782317, 6.1853761509641245, 3.3727180266433354, -6.338621602719796, -6.540112551487036, 9.662789069338697, -8.362737291783443, 8.271255291138814, 0.7663144406409934, 2.2761007890392353, 6.918908964624176, -9.340070881893718, 4.4791020383656, 6.98228659514913, -0.27147285402309507, -6.516566453120703, -0.9008743831269719, -6.057680087145981, -6.723618515388967, 2.0255744064625922, -7.874715096208185, 0.46658377689799835, -7.2908945480207965, 7.7617798299350085, -4.748142503930404, 4.252404987537918, 7.3444989237859595, 6.387449486400982, 8.514394691884448, -5.502300015577212, -6.775929712230877, 3.159158697055327, -1.372477477881997, -2.9638692442957204, 4.595929581110848, 1.5636677682904505, -7.685728304974098, 1.6921248747091937, 0.6158386922295982, -2.3690630586316423, 6.495396983174071, -2.0833840248068274, -8.797244782368827, 5.4321305039178025, -5.866049769127015, -9.184529222020888, 9.937823245158402, 0.7563471453376067, -8.34509424518306, 1.3858053383062838, -5.263279553877189, -0.7242868392109543, 5.370566389138817, 6.622332548375841, 1.9361885757145298, 5.965758212745589, 4.2120930291272565, -5.417042718301827, -4.179500524867588, 2.181435735341129, -0.199947352926511, -2.566918831006097, 1.1326152331106254, 7.215470245395533, 8.352474308007572, -0.16543987556856266, -5.761398599891308, 0.1185374300166071, -7.443791771464379, 9.690042689792236, 7.416596837502205, 8.760622706346489, 7.576574905167124, -3.9216342790992753, -1.0962877509403395, -6.124780344280005, -7.9830261926738455, -0.4724848601560456, 2.8627493508392483, -6.6213447392007785, 1.2312226866905345, 1.9663513600168727, -8.46920995209814, 6.1692863708094166, 5.444611310690872, -4.252414972068133, -3.803397507177997, 6.81781570005559, -0.3756677964531985, 0.6577896513538466, 8.457560151821049, 9.229839453770147, -4.336798689961546, 2.319804783255222, -7.935954603311894, -5.392715427297288, 5.3062093692502525, -7.835349225893536, 8.376866369237298, 7.490771999687137, -8.539266050395662, -5.4536264439916415, 6.902329031483834, -2.984979234899159, -9.997183475530358, -2.416521504326374, -1.012478701424886, -9.445019865311188, -2.9864661883733223, 8.674144563077583, -8.771809948560206, 8.834235925057175, 6.0651157910297435, -6.840826376195237, 3.7503590854471973, -7.71665522099477, -0.6561123103096413, -5.937220267198522, -8.139335427692235, -9.129176774856074, -6.246771192104646, 7.153301542850922, 6.17426073086796, 9.668275462800896, -3.246440817857776, -7.035603571592686, -9.445222991649306, -1.2027931259149547, -7.781224252345029, 5.437654091897258, 1.1835526334960385, 1.2853314720156916, 7.33804786528729, 2.8959903135030487, 2.2385148034641524, -0.5267606362437647, 3.3538458247547744, 9.247606200118202, -6.24599474347896, -2.822513670970177, 2.569846077218095, -8.908890114666017, -8.802630156786737, 9.760284253784526, 6.693700660097996, -2.5265331199517904, -8.374771903537045, -5.797123338312719, 0.3715877002808927, 3.736992865265199, 3.20616583154521, -8.752376216365658, -4.080509990852999, -8.284254235907099, -5.502168267378808, -6.27099610229557, 9.624592394693185, 3.673985257240595, 2.127737283172344, 2.5815118138535595, 8.212728958740396, 2.3300994452978347, 4.998175905761094, 3.760819755298897, -8.08748587436819, 2.443093067021433, -6.140009414646284, -5.24054311175556, -2.2918102507606797, -5.977757348139949, 5.254340269766264, -0.4139567379841118, 4.272060309979224, 6.0300640017596905, 5.194147542389793, 6.889464585568245, -9.273268260608136, -9.016745147692568, 2.0956597898371303, -6.725274893039677, 8.505023216602982, -3.503261491254377, 7.769486980225725, -3.007451016682971, -8.786045893084813, -5.403282146156019, -3.7550468129680574, 7.475878046895911, 0.40868265081053323, 2.5935360672257612, -1.6363372091442692, -1.6066119921395927, -8.827823166311209, 8.151893308466832, 4.474390013984857, 2.116870379185409, 6.294152203472208, 0.013224593260297013, -8.70746889939187, -2.338289917502303, 6.822123328444331, 4.630174389232549, -4.921899162058154, -8.264978043312684, 0.4150045464037113, -1.907530374686564, 9.896315901916395, -2.061327095000827, 0.04968324974795202, 1.039027527531113, -2.251147231828428, -2.6364104855563912, 8.499348187781596, -4.941201984825501, -7.808252486463241, 9.476876929383263, -5.324905390949004, -7.284915814791995, 8.28250284206145, -8.858487217633716, 0.7441967171202677, -7.169981936070071, 9.154001340334421, 7.927294143679909, 0.21381339900856133, 8.6712408954625, -5.591092365796973, -9.530583670090476, 7.990360245049278, -1.0712039147148626, -2.2370090075601023, -6.43647064939633, -5.375690423279764, -7.6544652382613165, 0.5583184491302617, -4.16385459476361, 3.7268563266215065, -4.888844537882617, -3.315962379675266, -6.199912886570933, 8.554888030510085, -3.492640788906738, -1.8753439009832036, -9.689968836137616, 9.253348008254836, 4.696177400669921, 7.58814016412617, 5.04009765960852, 9.41043857493709, 1.0111432323828584, 7.946839904132613, 2.709168060168455, 3.822109261400225, -8.697502919886386, 7.305009669878263, 8.721547496785224, 4.171232678663534, -2.8169042931802686, -6.398198992688899, -3.5555389016206673, 0.13953008295760938, -9.569435542336358, -2.944310489796189, 0.11457626704918766, 0.6325600341309752, 9.20436634394757, 0.9165101047239474, 1.4304486625839417, 8.889546501112015, -0.2687105911032184, 8.982583841146866, 3.5028701403306215, -9.478625573035783, 9.572536064509794, -3.0641918236860777, 5.3509552699737775, 5.051008310832669, 2.983092635395895, 2.555536758526081, 7.4141346648717885, -9.502052380174264, -4.045772698247574, 3.6937088909654534, -4.0672209281843745, 2.79432696010608, -4.024774861157758, 6.404183225315105, -3.802082438760495, 6.440969109577992, -2.9526702926971122, -1.9097764387108729, -9.683416048083263, 9.799539901563307, -6.311888772751983, 6.867744931881592, 2.2121155148449905, -2.7648532627153433, -9.960070391734543, -0.27125851888532004, -3.157185729307428, -8.831014874793599, -1.7822516330479203, 6.040590825695645, -8.862127189755588, -7.259906149686053, -6.872747497576177, -5.976997204545853, -6.213219581775036, 3.572465987178431, 6.168126417344158, 5.763381609723526, -8.324690816906307, 8.327513567557862, -0.9641195107982838, -9.686532029969722, 5.799625857470099, 2.2532560160854747, 6.262118618998148, -5.816927299875399, 9.484778276250555, 0.43098836086176817, 9.21395207973449, -1.5358502165434942, 7.038556491364741, 2.4798875726494796, -6.102712689292198, 1.5367909059983234, -5.1106166564137006, 7.626301139220246, -4.260286235750734, 8.234310002628057, -1.6237963411660203, -0.45831982079873335, 8.645904892862717, 3.0188299884268925, 1.9370042579861941, -6.3691329212083865, -6.051842267604983, -3.9912364374526472, 9.566167992341523, -4.8098370676868285, 5.128643013191718, -6.221839961758859, -7.148911910926239, -6.7178138747936345, -1.5803281475240247, 4.197133275949941, -4.756647946876054, 0.6408450268473498, 6.306610769207236, 2.683506834216125, 0.3732034303677949, -3.4832098602869532, 4.752324675370012, 7.879075892273452, 5.362070969793976, 8.099937399649939, 6.8310655850022854, -7.2406564461087575, -1.4721753268090048, 9.244578970081928, -2.0607663765587176, -7.375978385135462, -8.334108694065979, 2.5415298215002586, -7.000018202773184, 2.4882205046353185, -9.461142039214838, 4.199845887510092, -6.845886164463155, 6.1251888776962, 9.733540791982097, -8.670167253903946, 8.369006727248134, -6.7813979811901, -7.2720128180664005, 5.559579843868171, -8.227777946055477, -3.7243824608936276, -4.195836009444305, -6.132769911098233, 2.7911182921537385, -3.277403675003665, -4.704322149448135, -8.868256784379291, 5.818135520039458, -0.9541326006727342, -4.135520653401019, 9.077605504203845, -2.376167131972209, 5.038649224643869, -9.09932018465848, 1.4996602160081718, -4.610639277195281, 7.9386797449834425, 6.509494233354044, 2.085762220174722, 0.39881232208632866, 7.173228181819603, -3.527870974018736, -3.248606243855061, 0.2228633134018807, -1.7597343608830869, -8.733683350392813, -8.541311328050782]
BIASES_LIST = [1.4565115000723807, 8.874884889601962, -2.782361512520099, -3.610287593003143, -7.9551525358571435, 9.052149358381708, 5.78833804787733, -4.493879670091352, 0.400834706494944, -6.774202442575654, -1.6334836321004236, 4.013247130695971, 5.1879018895393525, -4.85430281095433, -8.047264263526463, 4.9271821324578635, -1.1771422856202882, 2.450167768196165, -0.4137957493838318, -8.00590866360487, 5.2249818534385, -3.59259674340694, 7.9054124479694785, 7.624999206846336, -1.329963866227292, -7.163294983201933, -0.26110935804650737, 7.062715453485922, -4.551110741992206, 9.442749636185358, -3.8051960471216955, -6.111088247739742, -3.506692224299675, 4.017716269824479, -8.396407657183396, -8.67846099940599]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

