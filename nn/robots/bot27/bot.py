import random
import math

WEIGHT_LIST = [2.370742878193683, -2.9384829523703893, 4.981697223111659, 4.780607663107148, 4.118399990698416, 4.73284598105244, 6.975319780124536, -9.747024898834134, -8.683669892966124, -0.2050445150474438, -6.795444190751363, 5.9321641672855705, -0.34387168446484395, -9.181037200776965, -2.1717953143229334, 0.6295600156534036, 9.120250368574183, 9.990948229078843, 2.4634805962182345, 1.2037865669914627, 7.351673986393589, -9.739068663753265, 3.633376713225953, 4.6311958351314875, -6.158942639807696, -2.4960423469945443, 7.4965970984054415, -2.2847951764374708, 6.9788796884266695, -3.5450898465984437, 2.620742712368404, 3.497652023143294, 1.4718393835458077, -6.3645862263066855, -3.0950355323167855, -3.8143225611130216, -6.346435024376252, -7.2856340713284595, -1.2892491826353094, -5.038085418079172, 4.415785907404706, -5.386063637886453, 7.894776778999944, 8.731602148706699, -6.457750021946731, -6.234693193654131, 5.502199537088689, -8.077214946258897, 0.0730935766408809, -2.903337793281901, -0.18101542880710753, 9.796043138934639, 6.332304254079951, -0.7648234273063785, -2.8973729303267826, 0.19398598988145466, -2.1920635830237494, -1.0702813808500302, -4.385315818369795, -6.674968581106999, 9.494270095518896, -4.5864961326786435, 3.864151903952166, 7.6587597126835725, -7.800700298453814, -8.55712451405653, -9.474010794138753, -6.691310103705296, 4.107045353845159, -8.180788771051743, -2.44595876723829, 3.1059161570964484, -6.056298527512709, -6.574290025758954, 8.030893096264059, 2.94889638765955, 4.297490817461142, -8.526082275074547, 3.543847861183412, 4.604857319922033, -5.0712474450018235, 2.0674564523459065, 8.544340172718915, -6.586687675079763, -4.533385091847566, 1.7779565421947758, -5.824093924351221, -2.9203419740237173, -6.523102019135236, -5.3743325875586745, 9.724432319460089, 3.295801196100454, 8.526022060694341, 2.8600600695445095, -0.9797204224266416, 4.128590125721022, 9.039388645850508, 1.8294582358147693, 5.171859822399991, 4.194210075271876, -0.9443127866083394, -7.983840281777709, -6.332540362249404, -0.07796096874799119, -9.639291774288552, -7.140081395396825, -5.617625999106492, 3.372322920046411, 1.2739167170130816, -4.936197519760728, 1.9007633729015172, -9.566706607512716, -5.130940980377366, 6.926356483905494, -4.408109633837123, 5.237051318282903, 1.3601661828290563, 2.1468660243991255, -4.461578086789848, 8.43809848661785, -8.962830022456751, 7.297577653487082, -9.772107390495497, -6.674052772267767, 4.433902213092441, 4.503517232182251, -2.7454293859797385, -1.5716013745654642, 0.9040942074952696, -5.9970814115093045, 8.022291356950294, 9.766698350281946, 0.9513901997170358, -8.353128264472362, -3.464513970384866, -4.911536584290945, 4.511033621384392, 2.470384358719471, -2.7058314740333085, -7.701148125948816, 0.07365935758298647, -5.095318782158554, 1.413950993048342, -1.6816795553049566, -7.786434696400699, -8.898845015474084, -7.9404900881091045, -4.6976090543286, -8.368693163222463, -0.8826125236296161, 9.699153660767472, -6.161582437769648, 3.556406928777431, 8.755772457720287, -8.317654681755416, 0.6902505245269026, -2.727540825813552, -9.210334371818231, 7.291557098307319, 0.15248491962139354, 6.599722994917702, 3.9409206727590895, 4.0467192645231425, 9.71240777607861, -7.7497215539280395, -0.30176947561700196, -9.769012191489253, 8.492753017247669, -7.067166565524414, -8.677805299011814, -6.775164161663159, -4.394248350141825, 9.298845434825054, 6.902739768258066, 3.8570753809384257, -7.395385485632556, 8.32253154380604, 5.013533221937811, -1.554486244451006, 9.065095909297362, 5.229802471442465, 3.4553561584668344, -6.524589434168789, 0.675019460771642, -0.10787667703319137, 4.623120161305012, 5.371700446539297, 9.591600184723518, -5.649400157034576, 4.430567583940896, 2.3107588669106605, 8.797014512354476, 1.2294319469443096, 1.0617269842981276, 6.4714368914525835, -2.385685626091389, 1.9460361209705805, 7.577827876035165, -1.0712900640498795, -2.671861359949263, 9.177424250155298, -2.6778412405254386, -6.423059043869321, -9.601311409540301, 0.6381369369951813, 8.354051471382554, 6.345839492258506, -5.854358931634945, 4.178171481585942, 7.0701474171841205, -2.704943025399036, 6.2623248513597005, 6.529919212853628, -7.364032693957987, -1.6219564056063476, -8.267051053164106, 3.880337037421075, 8.273795264499324, -6.978179874618693, 8.168916245168237, -4.979427554372629, -7.831197793262648, 7.6162068789662065, 1.956584938000411, 7.227774760274507, 1.788535864990779, -0.9794612809082732, 4.689272996515598, -1.214897409179276, -8.746176269079653, -7.487477070055116, 2.4225559681171696, 3.3161060716336905, -1.84241696808032, 6.377875002130196, 2.998267407551616, 0.3307563712531003, 1.9444145594942839, -3.9354032718555025, 5.874435069947362, -7.902788081024255, 9.25401303444442, 7.296327594986952, 1.6862162638589684, 5.96689383488507, -1.2462789101351301, 1.1899672727154265, -0.46965028880927306, 8.613554297657803, 6.283238054768347, -0.29764114345209336, -9.433794524402101, -0.5898365154751559, -5.404664549287843, 1.1221431421390342, -6.380864850232781, -8.114805616032248, 6.336074778977828, 0.042483806796603574, -9.393729978592063, 4.750562303586204, 0.5862185028257265, -5.859459473766817, 9.833109381322306, 0.11471920619556286, -6.990924078954808, -8.30175086984719, -1.001497915829077, 6.15554240308996, 7.076968286722732, -3.9179418297215456, -7.541366587010392, -8.835105914790603, -6.8283640723225485, -0.3423396466419266, -7.369436846889645, -8.389488091146081, -0.4288664491482912, -9.722234197868595, -2.5022521787689627, 0.06984351657427013, -4.845470209674381, 2.108063922873054, -5.557830566105544, -6.729674815664925, -7.227692357965008, -6.479508690674811, -7.4076303840951185, 1.9434991487175939, -9.894775509695473, 0.18902083936942482, -5.078328418048084, -5.672604130047365, -4.623670945061738, 7.944751440899282, 7.3472393503070705, -1.755511123335765, 3.5078693157668503, 2.336234737778387, -0.4110307310011496, -5.901587279020257, -1.5489127556330047, -1.0130419991684434, 2.9923744921255135, 1.8143857787632456, 3.2549564561439723, -2.988312762090615, -9.16499968918455, 0.7420825444494294, 4.200916488834139, 4.229604514405786, -6.108259841841097, 8.915505554015876, 0.9149175322585883, -5.321825434871186, 2.6482305829065407, 1.1266026507891134, 7.2172360789533165, -9.125974930780139, 5.822763047113291, -3.581427341593657, 5.422248341218225, 7.544721138373415, 3.3942432656233006, -6.304680531082161, -6.997832528425252, -8.856225635803234, 8.317655347654977, 2.9040427507652193, -0.8560059914498801, -4.570818340568632, 9.317796347725618, 8.647170105724015, -6.398585465868432, -8.95980118496831, 1.453449411864856, -2.3053338096255267, -2.4586110085204593, 5.992782718448858, -8.750999901827283, 8.357902204129608, 7.005325129305156, 5.719639196754432, 4.595487163811921, -1.6473859876828882, -1.6177876444592023, -6.072259536427143, -0.9624347585979454, -8.315221273778139, 5.960055787567516, -0.2540976903653469, 7.122252859105714, 8.404808171592347, -6.168273810844118, 1.513236843165739, 3.5179603362900043, -0.0074155699927693774, 6.3499209364596645, 2.4887520996959207, 1.4023049958429308, 5.340219483397718, -3.931573819778764, 9.59280993848628, 1.4941983873678044, 8.131323033047934, -1.9385528391163636, 1.8723035444866465, 2.321361159378746, -9.978990975913057, -4.993808669701101, 5.463522579723897, 8.03371772861989, 3.733282910310802, 9.770436882395487, 2.989066943053478, -1.6201736228694212, 6.339994408591345, 5.796863693003489, 2.445109283955331, -8.193319914382297, 4.6331001051937815, -7.868636942865336, 4.3930216346340085, -4.352202234688027, 6.860288839275832, -7.426094704696393, 8.166576294041306, -1.6896708661796183, -6.9298168443908725, -9.34461914832889, 5.9302035611930375, -0.28953708210495144, -2.8949244570257378, 5.000663474553985, -1.8161952456270036, 8.951685898320022, -5.976646075854239, -2.361145387144341, 9.302206126891939, 5.801633118245839, 4.309996459549568, -0.044865722957736054, -6.295400291112068, 2.0545662764955956, 4.150724390071414, 7.536217247236252, 4.058712954915617, 2.023896614203739, -9.660871848135207, -7.933586213062034, 1.8793031771428321, 7.274721409494475, -6.370416394354055, 4.078608453328378, 0.88965578136375, -4.244312242884282, 9.56641361197438, -6.18721626430024, -1.4519283129344291, 4.677659902320396, -7.438617101272373, 4.127044827130387, 1.9481878494026397, 6.0864764797619415, -9.19518800880211, -4.903894869940872, -7.096699617024931, 5.949373060086101, -3.448436113891617, 8.189590090708869, -9.841272399198592, -4.882977095697418, 5.58292252805491, 3.404459432122348, 5.174804214698998, -0.7431544022433663, -4.625050610345474, -4.218663091368644, 6.011844844265688, 0.9185852136356942, -5.21637809802878, -1.0092113133612628, -7.93900100196497, -6.659937882845055, -0.5777449585683652, -3.7197433926580104, 6.022221829018186, 5.10406921379446, 8.15849160740607, -9.43651952738837, 3.901060017637226, -1.9296022174357539, 3.3130712613225057, 3.3264569635559553, -4.62683281668345, -7.579068957264945, -1.6158280351335215, 0.4331429839826111, 8.122054960765318, -9.858674708976087, -6.954581494131194, -2.7998283809996387, -0.04636044267271977, 2.608835552982626, 9.10924579574229, 3.091552921754346, -4.692992792686159, -1.7449450364034007, 0.9614063141046696, -4.497382702984661, -7.478786629537599, -6.679613634354656, 1.314184216752551, 3.2507261583627294, 7.257064850256484, -2.6439054264797868, 2.5206863981711276, 6.558237949812117, -5.245775886652324, -5.7701935095928825, 1.1992904427132736, -0.4361473698091167, -7.240451908778784, -6.346957902024981, 4.530163363208235, -5.251025988386456, 4.062331136812784, 0.1104675889187341, 9.55808365270562, -0.22037492807999115, 8.81528438471737, 3.814963552166148, 6.957492686008095, -4.637954586051938, 8.782217294443374, -6.808268692161414, 9.854977214684116, 6.862766524401241, -1.1636287241496905, 5.42431492071297, -5.331948260243411, -8.342028586923051, -9.204910858228066, -7.787799902189862, 2.5170565038736203, 2.5631652513287193, 6.78319496174295, 7.871225923774276, 8.469037074545504, 4.732732089991403, 2.514917984569653, 3.173226765088737, 2.621819970473659, 3.2083737915705264, 0.6219014814299406, -5.594641544347372, -6.209724051637345, -7.555173657136621, -3.333691464919724, 8.122184188309003, 6.015702175133825, -0.16484750878447585, -9.672246910282066, 0.9945899582457081, -4.2635442404950545, -2.564866098100101, 9.802406257685533, -7.495035416774241, 4.809195511832403, 8.474609731712174, -1.8894568270183, -3.7420190609722015, 5.147901986197301, 7.229972333211229, 9.429962879974461, -5.247314890047328, 3.2741098935089425, 5.758782593617823, -4.0180727750700935, -8.767179407812371, 8.05995431593617, 0.9836838188782799, -1.4814380569880683, -5.153379064100594, -2.765011099191206, 2.949664223349046, -4.069708961130132, 8.174104106864633, 8.89169788224287, 9.21859870072064, 7.399101216688713, 1.2358202274606, 9.899701212290072, 1.8179090298700942, -6.593003224306884, 0.0130274870577054, 3.5236295378808933, -4.051357582757296, 0.8848479897630099, 8.22543327909472, -4.47835446387129, 7.137224474069196, 3.9388400525744593, -2.510985245733468, 3.407974432052841, 1.215004064447406, -1.5937483318471344, 7.182095140556065, -3.3346439631376024, -6.708966055989776, 0.4950366388732057, -6.315765303883564, -5.5584897313804476, -0.18696086410741586, -3.8670064331375364, -7.141456955060937, -3.917553119266948, 8.664347515943764, -7.1465459431840594, -5.903980477459953, -4.907358153781079, -2.8612321787929957, -4.48516937089188, 0.271846990067246, 8.937594897957275, -8.053334666273518, 3.256606595023541, -9.452431603018852, -4.614030843608566, 8.513559860776173, 9.681689367501008, 7.4488688727160906, -7.753282263797267, -2.495862244429407, -1.2813461631791867, -4.670037353719145, 2.7006385649191085, -9.894917366416426, 7.181840979732723, 5.62285723703312, 2.995006277552477, 9.705364827706504, -1.1205742874093048, 8.05729152249246, -3.5498925526818104, -3.879208909244638, -1.5790788715476367, -1.6845597919396642, 4.274616427577001, -5.900400411956799, 3.7154639152699414, -2.1690758786600206, 5.307217663453084, -2.3290212642986514, 3.147346974800156, 3.1037036035877357, 8.367978664981578, 0.22296129622496252, 4.033009468822453, 7.129183454370217, 2.986053721426302, 9.313631937051689, 8.518166567307933, 3.4976275739991447, 3.6303249089605565, 4.14081796758915, 9.327490141704029, -0.5264105997169555, 3.781797998584434, -4.554133641658218, -3.963340197338818, 3.917878430117794, -0.4785550403065937, -1.0427480800541122, 9.029476301674194, -5.558284819039163, -6.721258936203323, -4.034612842370371, -7.501511658632982, 7.248254478405318, -2.795791856284473, 6.143790672424295, 0.10282254809588309, 6.779556672798368, 7.757050154596762, 1.2452178781348895, -3.1450601213237324, -6.501241316303805, 7.040001149332852, -6.825905848489642, -6.093035593498753, 7.405879063271254, 5.379491144349542, 1.4641784726032103, -2.0886848470413533, 4.188224520738968, -2.461499162485734, 6.9487685063795155, -8.806544698502151, 3.491982112010838, 1.8121730256716155, 2.0683654303529746, -5.711710851231344, 3.166186980809478, 9.43850925835854, 9.45369913187173, 9.298618765721535, 2.6552792482157273, 1.952797302781839, -8.165881281377148, 2.0355973739945004, -7.4966449078408, -4.366479295576983, 1.4136151265812664, 7.814248058090108, -3.3801440130524814, -6.826684553499502, 3.239756346309859, -4.618179095645343, -8.04094469045286, 3.6275532667171717, 1.5054968823029373, 0.4349650391305193, -0.3863786650439689, 7.746322240290716, -4.480068400444857, 7.03167084981586, 7.130350450191074, 9.709159154198804, 0.1821212632113589, 5.181606182082845, 2.5210879807109556, 0.4274520749645543, 7.7226986566512785, 8.602697794394913, 7.648524946664338, -7.248631085757962, 0.5226936073550075, 1.0604808970771167, 1.4583732213836313, 0.7090196740268357, -0.30713320377094355, 0.5609144971296782, -8.64409712797311, 5.583855149674768, -0.22316256054410388, 6.629908334439477, -4.43056547063623, -9.54153228558894, -4.721813546399238, 9.098072675704167, 0.5910881695401962, -3.9199972073097573, -7.767253742143662, 1.0180063546998657, -9.256025695503345, -4.432047885978112, -5.6909347459527275, -4.38062168443647, -6.4872038925274005, -6.543388087429793, 1.1711337718601378, 1.6697538658417077, -4.238657863262151, 0.9402071080408074, -6.7611878183660785, -6.145797692678712, -8.842886539319313, -4.782638398878509, 2.380271034764389, -7.308596673214738, 9.882928995397346, 7.157058345213979, 5.3001041201866705, -2.3121877386295857, -3.950081060419828, 8.95675100784349, 8.178332380874394, 1.261888611804702, 7.241477873857342, 4.596108961570355, -2.9759325946560438, -9.489254226982682, 9.093743277154914, 0.6202667884859547, -6.135558725060446, 2.046239879350992, -3.975219816909923, -9.781698842522037, 7.822252911294925, -6.56143807978186, -8.847575980036972]
BIASES_LIST = [4.507944359328462, 8.768108134530475, -7.904615619320319, 2.7014012031837, 7.822583987081963, -7.957489324265863, -4.128939650609915, -0.5814522009421133, 6.559934470195238, -2.875060623466805, 9.624576788128373, 3.2849201854943004, -2.6239905408994417, -8.019856760201613, 5.039922241607957, -3.427007892699403, 1.4358686163286123, 0.5652030054256123, 1.5900994510437965, 7.173373394476677, -5.477918189327536, 4.811252279993692, -1.5764659171456579, 4.074085359987642, 5.404870472271682, 8.949502648245328, -4.469445020317517, 1.7592091642629608, -6.869525607070086, 7.794284334355275, -1.4498440698701245, 2.4203083053106305, -0.8473323703967068, -9.292128138588186, -2.689018475827618, -7.745691444688894]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

