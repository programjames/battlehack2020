import random
import math

WEIGHT_LIST = [-8.24836126189985, -2.6831311694476128, 7.310630119602165, -0.7876648664652224, 3.971018191393219, 2.2217775357971394, 0.006044662981316534, -7.116275957035886, -9.143734416172377, -1.4283619042731068, 0.07341399218649175, -1.7727077838293055, -0.06942090049812158, 2.2066493838531938, 0.7749021884955332, 4.1780981412799045, 5.412296329105239, -5.031192366225381, -1.2893128369613667, -0.1759385776092594, 3.9470616934986595, -1.2302992096458683, -3.433515087464511, 5.440483366660787, 1.8348977937303177, 4.552950806355881, 0.5917328279444551, 1.4798802668445596, 1.249736896767534, 4.229270959724105, 4.303328266392524, 5.346065764704175, 1.0001613550467185, 5.808277134931538, -1.922029900742552, -7.261809419814293, -4.076761570145919, -4.966116210606011, -3.8792119573823935, -1.7085303495334863, 1.9074497536837538, 4.275170320923833, 4.0460737908628355, -2.2462958991475226, -0.8657084006032092, 9.263411963714285, -0.18298576831806418, 1.2853539707768527, 3.0068425978753406, -0.24326380727721822, -0.6818309173347861, -6.171263148079859, 1.025890730408748, -4.931346060626503, 0.6419162470825523, -5.860782051076701, 7.981419410697533, 0.5014084649704817, 4.125705315382386, -0.8198078730422345, 4.585202822396976, 2.0563101170387696, -4.837890191517434, -3.500666360224386, 1.3132825455421744, 3.624552021470388, -1.4194578466580041, -1.7883462794704135, -1.2459893398192667, 5.898875997728364, -2.880041970676364, -2.650948913618318, -2.2849478629845064, 4.937075625800201, -1.8311161246200365, -2.5849546026253596, -1.1409963205195024, 0.01651972867107232, -5.12416161507577, 6.347962426297438, -2.928310707356801, 5.122212524196483, 6.354425455454751, 3.9771646560146254, -7.294866616111621, -2.277141757170717, -5.804302139517302, -1.633534110325352, -1.087942960460552, 7.693282724627428, 7.411119910169566, 3.3958278635837753, 1.006838718956454, -2.368485384004626, 2.5828708998133285, -1.7710661118372963, 2.6949478653200214, 1.3402994587845465, 6.040853052112292, 2.021112388601508, -1.4525502171312579, -6.654290046991296, 6.1427711078449505, 4.692435931842833, 4.468224989380146, 2.0211636429001927, 2.4571938607439505, 5.370111531275486, -5.144131550205403, 3.7440669278696843, -6.792834645990971, -3.120593663447015, 3.511861337048225, -2.9339484996363088, 5.5098109042192815, -2.7109797488339806, -10.216582249416629, -1.6230524648193594, -4.625461424106035, -2.5754223174828463, 3.2086574380581303, 0.7127858091825772, 7.181241350756833, 0.4425174459816989, 2.1997825429246323, -0.21344803730072695, -3.1523571352792894, -2.6223537811136, 1.0561520788518968, 1.9235921579295203, -5.228032447558846, -9.545353068763964, 1.708727499485978, 6.700142170143065, -4.468716682131817, -2.409670168742461, 3.5321286428548526, -1.5678748894417136, -3.4723859628755487, -0.2118852248347749, 2.0824201717056736, -2.9640080954979577, -6.977912569727392, 7.290350190569496, 7.5667035616482226, -1.4142840104382028, -2.2724453934785775, 8.112180676912073, -2.318901406350991, 2.4525985436573814, 1.526719695160787, -3.7685005279125843, -7.069234330800023, 1.0728394235451364, 0.9287413512155251, 0.3918060183095918, -4.131090382300937, -7.330545043393221, -5.799551134153012, -1.271108711464187, -5.2441088781912155, -4.405888076786671, -3.6012650472146244, -6.086703251571426, -5.066685343817652, 6.69776206089067, 2.4992126261549155, -0.5678349772677811, 0.23983474449100955, 1.1604288999347023, 3.3142971953974714, -0.3091178690171096, 1.794517397490464, -3.0165403689122825, -3.309807958330236, 2.133256505141118, 1.054959795646752, -6.582352432242052, -4.99086040339242, 2.1642652328526992, -8.63984625442449, 8.706803259659647, 3.4502368515361557, -5.674333454713438, -4.197720848531091, -0.7254250004899252, 5.466058155330241, -5.489175246869344, -4.831881355684919, 6.830971924002387, -5.207556790054048, -5.091137688470267, 4.8395686109624885, 2.297157725057897, -5.969908456522602, -5.593016955475546, 6.9074184652607205, 4.014873580083077, -0.08793949658057737, 7.218633465065046, -5.5236907930068035, -4.802295533376279, 6.298452695482473, 0.9653400743380642, -0.5807780696929838, 2.838131970458582, 3.266789162129553, -0.7037057250554476, -7.21329349442146, 7.19719986260659, -7.132327093475604, -1.9845934549238697, 1.8946018741944788, 7.111780603376782, 6.361354740320141, 5.795438720634738, -0.6142692750414893, -1.4297361168900122, -2.55866034585314, 0.7728118860660786, -2.4972118485136914, -2.5197267434309354, 0.7813481556774797, -1.9722763724037424, -4.4082400190243645, 6.494412534144912, -1.2867431881753548, -1.6524773953546819, -3.759393665543671, 2.832738475496439, 2.464044735088857, 0.7509568618486206, 6.096650774694437, 3.4243552436422418, 3.8033124692749616, 0.4840291915839802, 5.358824682448732, -6.002486395959538, -3.254410997289354, -5.187215082442421, -6.268540921428512, 7.260298394267455, -6.9711181016737145, 1.463118861618594, 0.4418801188277173, -3.137751682698653, 0.12852728270866093, 4.373126941681602, -4.126775174311721, -7.393557947816573, 1.826714002422337, 1.703439232689135, -4.89991057027689, 6.352224038481016, -1.6247285190732579, 2.1404541555676095, -0.8614077807228444, -4.257696668644493, 6.472117187249281, -3.9029575272825303, 5.787237386613815, -3.993957273343094, 2.773060221027506, -1.6657576220760482, -5.139236698091844, 4.635550054604455, -2.734563802644403, 0.6086846142382691, -8.318248313046228, 6.72244233609544, 3.6141954631923316, -9.757989027574, 1.8339209930129954, -6.465465307573858, -0.671319351729385, 0.26466892162011507, 5.68170505510699, -4.776834036449444, -1.100720345812845, 2.8818779843870796, -0.9276968076570413, 4.111383103072377, -5.55082466782085, 2.475027964449934, 3.118813756423067, 1.6058414938253043, 2.5833073412667837, -6.330209134434088, 10.399489361024873, 8.940791390813727, 0.9111656535646544, -3.86623419613705, 6.20047691460748, -0.7993014983634752, -0.7819985716530495, -6.306009460832818, -1.0211201365958553, 0.24275574993899457, 4.561424760679219, 2.4251711793118393, -1.5882511084582467, -0.3361690512784794, 5.033646691403598, 0.1221196402257202, -1.6789568021120527, -6.999570174229799, 1.7137361001115818, -4.003610689497147, 1.3456299845441813, 3.9167505750104428, -2.2467523785140826, -2.2124632133519677, -7.992682443223106, -3.4543247660732637, 7.558507699116509, 5.373718880562296, -3.2034522005384334, 4.23756440564574, 1.0109116200081254, 3.494867048196338, -3.0580808752707833, 2.7871274913302955, -3.092072129667202, 5.981883522447863, 1.3213837183254673, -0.2517687899068723, 0.7433548874160487, 3.3812825749488247, -7.824892814166935, -0.5241552897783808, -3.6464327419806737, -6.641375391680013, -0.7267021715421893, -3.7091599109407896, 2.4385383083793126, 5.070239395512047, -1.8692079150563214, -7.098337456263221, 5.454240010559839, 3.343409754902733, -2.3114795188197346, -5.519499590482452, -4.488797468877972, -3.5943123913650177, -1.7419097325178439, 7.142262188568547, -3.7314953252985403, -7.323428008246399, 1.856547829918393, 8.646129626797551, 9.017550271541896, -8.82603113360909, -6.791692209182336, 2.7594044163595033, 8.17725523193997, -2.8123581927635755, 2.246822443085827, 7.464538387928083, 6.342630872067872, -2.3966900902618806, 7.074835176580827, -4.106714285211482, -1.1001616285008293, 1.4938749477423001, -0.8668080018085951, 2.7315329458258386, -5.63493841551778, -5.876407757032095, -2.0710199719506073, 2.45178107492651, 7.7389316908878625, 4.17925497160659, 0.045170449891656916, 3.768921149743188, 0.0012035783062412375, -2.1691223292316493, -4.903284244625913, -1.1439417011684068, -1.6695070830497727, 4.933611255998221, 1.7868060061801039, 3.001414468014764, 4.212063418680213, 3.5473329032139174, -3.2732091981992792, 1.9922572167245645, 6.316731712881557, 3.0608187097373745, 0.7463214658877737, 1.907171945270329, 0.28769002711109964, -3.426535197596635, -1.3527520540285463, -3.8339498595825865, 1.4477874256913112, 1.4417414335010894, -0.12641083874428108, 1.7416704974017212, 3.105252714446286, -2.4470316688947187, -6.2839926028324244, 2.962856346305437, -5.537143894137149, 6.233149715716644, -0.3234042892110628, 1.7370920390404094, -3.38449126641984, 0.6027956240150871, 2.3106672545164, 2.8381406421659374, 2.8265241330841495, 3.1740214674880165, 3.4319275407620067, 0.02788839172454599, -2.3777716342788855, -2.673691160961926, -3.1503970173902345, -0.26723169154305926, 1.2755174847388286, -1.1314329270323322, 0.9797154841086306, 3.2840738381925307, 3.9819218603187703, 2.0880748947913177, 1.4719584719435774, -4.524938283627479, 9.236046587305962, -3.307692695636544, 4.895852173377348, 4.19962591487028, -0.49594246018373334, 4.860835941517448, 0.3006868226084915, 3.11346694128649, 0.5760168515148911, 3.1718145971995724, -1.5836724367355377, -1.4201404725875986, -6.0512999443308075, -7.786197066079989, 1.0954210759541936, -3.7631499564561057, 1.601693008243616, 1.5355273990201486, 0.9228598684416593, 6.97599025324362, 7.36536154501567, 2.8744981781545844, -5.793051662178678, 1.3004985446106492, 5.127495303548952, -3.6763282522801464, 3.0450440721723826, 1.967383420971574, 5.846741865851157, -0.3260572231221179, -4.341344991509157, 6.589688479934703, 0.07114052885748051, 3.504515218836516, -2.56065819353805, -3.6925424054918228, 1.0920004281662647, 0.7011126053900483, 3.223268526704579, -4.354455151047649, 5.296079942137328, 5.6811131865044775, -3.3782503551151057, -8.054054617717853, 5.320568801892094, -1.5042673587765116, 7.056002349665422, -0.09677545287161832, 1.3553174623986302, -9.191826129912652, -4.354401145939731, -0.7631904866851515, -1.6948706309099066, -0.7049771327838008, -7.080799861297874, -1.15251658309142, 7.825928760224126, 7.937669423252912, 0.37514588371532903, -1.0988505721640314, -1.5220762407676622, 5.458403243371084, -4.065968076075093, -2.2907012222194885, 4.49329804746854, 0.895990745215506, -3.2185576348165066, 5.2359051861476225, 1.5374648220095022, -1.14890759681881, -1.3715048854802023, 2.102813617621426, 3.2583991647804473, 3.7902040364419674, -3.2845062998726005, -0.8012275826103172, -2.6609875381748336, 7.149565481606469, 2.9073452605208807, -3.278072233474555, 5.492384275343068, -1.6045732126548042, -0.145098526724048, -1.31780559731264, 2.1557375793835956, 0.31917427888345423, 3.6929240738388502, -6.992556323435401, -1.6328094085229836, -0.022258106642866704, -3.915365383503271, -2.125209369937497, 0.5276516582377908, 2.3489090512818933, 3.7618230764508165, 6.0662667490885, 2.280834899978741, -4.606578881714083, -2.8277991617949123, -7.939931275214202, -0.28051686259263514, -3.971439182845661, -1.2571069244520252, -2.854131688699618, 3.8917800519539463, -3.529118025119016, -6.818555214052307, -3.002846916048308, -4.007014763513184, -0.29451574843620026, 1.908910251078892, -1.765665408666014, 2.561875023211151, 0.933389530644742, 6.757420750122242, -1.1496531219413872, 4.399895471276528, -3.7509358998246882, -0.024326799614874633, 1.704063145182964, -8.163951818954164, -8.37687987681184, -8.383138902327754, 6.072936372384993, 4.055098095970522, 2.2769383990288796, -0.4681055186584176, 1.347748690871006, -0.44626637981020467, 0.7454546929937349, -2.881211546278239, 3.7784520745744516, 3.9215107619865823, 3.0485310663053338, -5.179876810050049, 0.413804723313474, -6.619442323480855, -0.6190775236222466, -0.5205218541596393, -3.338171004030217, -8.154449242602283, -0.9285780676513862, -3.094183859284494, 2.067306617184582, -5.510099003263727, -0.8053662245330171, 0.5999511676762324, 1.9117335856144928, -7.027829942986895, 3.2460290837897254, 3.8466877870164553, 6.171827432515673, -6.1519693516540785, 2.3679345432896124, -1.8428801722315513, -4.812287642846551, 0.8231234439982373, 3.3569282700228373, -1.9353169628921496, -0.4009314998666116, 3.8694741949136646, -0.49791120975416087, -1.3721852727954258, 3.5450297243793054, -4.835850879529805, 1.3673389357596402, -0.9757074152012974, 0.9870697398869868, -4.909585492926331, -2.548960325485182, 1.6888640395303416, -0.49859011221437083, 1.160892316023865, 8.899522321705016, -3.8406265495598393, -10.260001507440546, 0.5386683736951545, -1.1728793626742817, -1.3376230752830023, 5.341287106372236, -4.496458628891607, -2.763257502204658, -1.7097702034411948, 2.009462239346194, -4.028988837860999, -2.96270957253417]
BIASES_LIST = [3.8720082210678544, 2.2648246496526663, 7.3100441047675115, 2.2360666000093254, 1.2868002285022386, -3.751879370007854, -6.620125733138325, 2.3434685245194586, 5.4212767874689, -1.1734559833814973, 6.130882792794108, -6.718675998307699, -1.6717834539901186, -2.299832460950729, -0.6707496714696106, -1.0512964759335501, -3.3349202437786065, -1.3554100254228454, 0.09814678845604474, -4.024958040857516, 5.9402326811278945, 3.2365558443391995, -3.8005598988693543, 0.4665098497901922, 5.444604886071084, -7.5842476410326904, -1.8053258087912183, -5.715663048653661]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

