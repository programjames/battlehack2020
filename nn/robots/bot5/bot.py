import random
import math

WEIGHT_LIST = [0.7392722498073205, 4.573623372752788, 1.3972227052046993, -3.294716781537107, -2.5954886654955303, -6.270525948302933, 4.189143452256939, 1.8037671034717997, 3.569415172025489, 0.9035610774701031, 1.7280888057040764, 2.820579190594718, -0.8680598640913204, -2.5882367285193344, -0.23596100793186936, 2.181611887910531, 3.944313041609518, -1.8407136463778626, 4.087894591978106, 0.20060408253803308, -0.2436743935611113, 4.812930255423663, 4.456214181697835, 2.10309268806368, -1.8165367239324552, 2.789265746422484, -3.5464850226924423, -4.496853014330862, -3.148756429724236, 0.7321839585021808, 0.5491941480203455, -1.1284794066873565, -5.963030420504234, 0.9192820301203126, 1.2488395487623052, -1.872337176004045, 3.942818617548844, -3.467920334106357, -1.9611161024373087, -0.7149114358016417, 3.0909428304496593, -3.6251114885007456, 0.2673365191794086, 1.308413694935144, -4.5470425790218725, 4.42124132934222, -5.6262986604466825, 0.8089868928488433, -2.4550835110201854, 1.844275395242874, -4.349782702844676, 0.0871485918184618, -2.9580708398515063, 1.4128104936661847, -1.8719499250121414, -1.6509335898378583, -0.9381161017649539, -3.746487022192537, 5.800129304244881, 7.527108922454033, -1.6990179710596212, -4.316553759967176, -4.310387712981509, -1.4911869967085374, 1.04175341262729, 0.6094852786570231, 6.88466494144892, -0.5159299925236406, 3.32855448337037, 1.2893655978901597, -1.927227831543689, -5.266643557777027, 2.3575187116498917, -5.860697692330459, -0.9169335756914399, -2.046608012260063, 2.9089269649534044, -6.919047966457052, 0.7859662045911686, 0.7744729029496431, 0.2008017603372938, -1.6067920601776553, -2.8936033550526963, -1.4384582005427804, -0.09628444951334236, 1.601740245666666, -0.7925008651874228, 3.9344051639794877, 2.0221538546816173, 0.3402700108535024, 4.241183841732596, 3.0537409598135534, -2.6819546731569113, -2.4813569267834863, 0.18311465009494188, -1.3921835036383592, -1.4727917725641575, 4.238816833951235, -0.3992755313790656, -4.4481763482881655, 7.621855661208674, -3.198694042006951, -0.9274938181525507, -3.631768978273035, 6.320693059355465, 0.4266430092124307, 0.6115898122611441, 4.72269232867117, 3.4605721334675525, -1.3061294167122188, 5.939243011416057, -1.9054669043135015, -1.6663806910045498, -5.242672636172838, 3.141596148840656, -4.227626279309776, 3.483892291395092, 0.7465252024501448, 3.9554066980851754, -0.24386857328448808, 0.05097904294695521, -2.5358269871240777, 1.775643785546059, 0.19111726008319807, 6.207764850949552, 3.7898215016224768, -4.261386410026775, -6.342494026090327, 3.848549781450262, -1.827604996585724, 3.2838508258488526, 4.865942984975098, 5.572238226449694, -4.297961292918385, -4.599490704992756, -5.1089553508841385, 1.7817107561562944, 1.7321727298170488, 3.620739032082561, 3.8061589187773883, 1.406864643528019, 3.366010338192777, -6.133052492112675, -1.5086865906632851, -3.1245382948090423, 4.021614399458474, -2.918751277696261, 3.7709077964419926, 0.3236618713014201, -5.358031174406631, -1.2470025973909917, -3.642678073106276, -2.5679424386432785, -0.3517078102402773, -5.477708218066819, -6.5979509913994985, 2.464810931040403, 1.3195334851621245, 2.4649613944827244, 3.7396421655282985, -1.0258378867507347, 1.2934924293142434, -5.997549631734373, 5.000942713517527, -3.261521508711106, 1.1761841986968937, 0.7221964234211489, -1.2300963139527934, 0.07768841177473429, -4.423796585745139, -1.9751256306449676, -2.0090381614324677, -0.16413085151527462, -0.859375928014148, 2.219505904672515, 2.6153476522813808, 5.757985646758582, 2.187841630508977, -0.16521108155684872, -8.046972221571911, -3.0568124498567193, -1.7941539324869995, 1.6934832732184817, 4.254384433900426, 1.7862541801171048, 0.46290077283611786, -1.5572381048424038, -5.129445178343276, -2.0498785878273305, 0.4369356206365067, 2.172403590181334, -3.0136515660158434, 5.129332174873362, 4.049872326957149, 2.8451265570604907, -0.7740931629147527, 1.6998827130364766, 2.5272033314860574, 3.183112641513979, 0.2598386284819627, -2.154077309590842, 0.22607649278989572, 3.7962622894294915, 0.049050861546702684, -1.0101849277692345, 2.9198490164349002, 0.4029171689606734, 6.373176148376233, 2.0593220761718607, -3.1322814949256435, -0.5697398980074894, -1.321991143529735, -2.5428708757187026, -1.907997794016558, 0.48790718675654654, -1.555131609356034, -1.8646721630068241, -2.090674369961725, 3.5756338686027913, -0.5949947454167128, -4.356942888430379, 0.13489268098212248, -1.2396039611889484, 1.078561478438036, 5.3584916425596765, -2.6491590680760924, -2.501360219764953, -2.0698294848411685, 0.06594101277262876, 0.3079208887961533, -6.805941401535483, -0.643426188402384, -3.3880130709644787, -3.0424743983529945, 3.420315798710968, -0.3226442102712457, 4.280339698493118, 0.17676209784701125, -2.3895827678316843, -5.337395993661433, -2.844103424621892, -4.846535086211532, -4.369163876418453, 4.936597509678302, -1.4628385946629856, 3.702134281936063, 2.3143266225879517, -1.3220444303547993, 3.124814318877209, 7.728346925298277, 0.8838264889663818, -3.3287160576211168, -3.115390216256996, -4.235716715349767, -4.131132430677094, 1.5586158736585727, 0.7759844787166454, 1.1408504418015655, -3.686801847969135, -3.124200291394847, -2.9431895337967093, -2.301981948154199, -3.584072603647398, -4.322256872153555, -4.2279992037238845, 1.0679280838216503, -1.1878347770958932, 0.016004846171447706, -3.8700339658745477, 1.086120931103049, -3.059234192538841, 0.9976871278765409, -2.9719770649226045, -2.3239066573694593, 1.9720003705736895, 1.1757556792611972, -3.0205867991026127, 0.9419743498298887, -2.2405070606207103, -0.6229480919044111, 1.9575160687137032, -1.771387141641772, -3.2093902609311575, 4.309258690653899, 6.680227444191283, -0.2589236297720605, -2.1600735039564425, 0.6839730967797146, 2.549652991879408, 2.005452713650296, -4.1006874917623115, -1.531069991549908, 5.247974256443451, -1.817404349808602, -1.7663827649037784, 0.24153528467591157, 7.295317876385498, 6.941380008403366, -2.474162868222292, 3.908524170772835, 1.1637693216917318, 0.11189566439870591, -2.013447240513563, -1.1349943425352673, -4.409794359841024, -4.568242245790938, -3.1143451402086053, 1.859809823146621, 5.249583086717012, -2.329097904731775, 1.2963621695530962, -1.3060361651987378, -3.0626035290501106, 2.848420375955305, -0.1805949863758316, -0.09738111588921372, -2.526546287924275, -3.4652628237451255, 3.1005022121088643, -3.9110722232774666, -3.2764334294833315, 3.175694357702308, -6.092554955159058, 5.191309568929101, 4.857732756615891, 2.455924640004117, 0.2112743798068557, 0.08766355993411357, -1.1536224591938784, -2.282590508892424, 2.8127816876340646, 0.8591476369612636, -8.040877628861478, 0.5265351399216449, -4.401542580707331, -0.2608290066680945, -1.7227113653126112, -1.7258422870243946, 4.920590892905961, -4.7580482384516785, -1.0872993603616603, 3.2991789245040097, 1.8865544101413962, 2.7020437313196037, -3.7804852070041903, -1.5849890480880349, 1.9856786998995628, 1.2860360128156225, -1.8275494488592234, 2.2988567039266794, 2.512642030441482, -5.54347663878744, -1.4713897535110187, 2.007910937762321, -0.1300959107994346, -3.5638003137143386, -0.7668250354072794, -0.024123614861577325, 4.749748571282336, 1.8877468523543417, -1.7005531730115324, -2.658630836022722, 3.575279860975166, 3.08263962549432, 8.06002225585647, 0.5113969696965657, -6.401810156932899, 2.5294766504123833, 2.1254747568391967, -0.02614897465667343, -4.378216652212013, -0.8620619909752969, -4.429648349148959, -0.638457308295985, -3.873771896371916, 1.6749829432167402, 2.140058000183872, 1.0005756962477559, -1.8564177295791704, -4.694662630635417, 2.821600711065024, 3.6828725361190635, -0.7039804696870503, 5.67527529885042, 0.581445329321981, -0.3295986302380073, -4.4002380053259555, -4.453385116809441, -6.219801282829942, 0.18288233098900375, 1.2636952076437482, -1.8240725993628195, 4.436826430300288, 0.5667792918437464, 2.031470335895409, -4.342258869307919, -0.37460094380187525, 4.74029251932151, 1.8974067425726178, -1.1103994713102576, 1.884740403652832, 4.864638839715558, 4.646030823064615, -1.781966834395811, -1.9815507202049316, 4.428525275611707, 1.0882468670296586, -3.3613960963604868, 4.163919467611257, -2.726160346930115, 0.6879836882598278, -2.836075185005191, 2.192277616813758, -2.8963340134853803, 1.6252557118952913, -5.95184695095444, 0.9939156780315022, -3.597372193465855, -1.7769737385810267, -1.2885490459573876, -8.354364788670107, -2.552143991132439, -0.4199689294130411, 5.213184958193811, -2.1070655485095497, -0.8568520005908318, 3.5637821454687186, -3.1865895340801345, 0.8602212892338783, -2.6565912882208296, 3.9317988848987406, 1.2298601058666443, 4.5357808945648, -4.056174084392647, 5.955108241138425, 5.058928923746782, -1.9220042310409484, -0.14640672244706177, 2.101432013244259, -5.246756762806708, -1.873147342534793, 0.05713123918021523, 2.4661151680615845, -1.6449021176933887, 1.575479624360172, -4.686967746946464, 1.2318257700408521, 6.05117503635635, 0.974467248903347, 3.200462468318956, 1.7460084979255113, 4.222026242802495, 3.0917420098322923, -5.1711891785229005, 4.226343813670205, -0.06996053739666963, 4.363844920252249, 4.878563310794604, -3.6993498673986585, 0.9540006025777157, 0.7637602059164994, -4.161646964896392, 10.976892135402602, 2.7607950059529216, -1.3045964852798888, -2.565671426091885, 2.54136560949104, 3.5569011964138895, 2.89865092988904, 1.192768807962084, 4.469033847964251, -0.28604317231521015, -1.5864668806794606, 0.6778778030976886, -0.822327208524253, 0.16902694839247, 5.8704872919798, 3.6690813998908043, -5.625304861363389, -2.038728984802435, -1.7814020554266203, -5.242630514840068, 0.8441954290840252, -4.373755894359741, 3.626595339977981, -2.12674226603815, -4.5560088295042585, -0.4338133605033919, 0.956070784451859, 4.816352366328735, 1.332290842633327, -3.705776683369243, -1.834254697849841, 1.0135614048677626, -4.02910622312228, 0.6123075600412795, 4.0742566114943095, 0.6077200794265767, 1.497898605446542, 1.1895994858325283, 0.05279587940491259, -2.242829673236429, 1.9037892116515858, -1.5123689015006851, -1.760252261866977, 3.509318865921009, 3.02290488672349, -2.5619966824719462, 3.7069392061727093, -2.243976841623586, 2.8846921039479705, 2.3189426264718227, -3.3797030397329886, -2.77250661642795, -5.399172411951778, -2.3077296040260165, -4.954149376992082, -1.2536090949939558, -3.532631875236434, 0.8606324142499078, -2.996830362942577, 4.68856314856118, 1.4093519249466708, 0.39383634654272104, -2.216890972129185, 5.6067959409081745, -2.7835510533932406, -3.0317997233138065, 1.1547461492947901, 3.964634299531773, -4.352020528680245, -5.36338812271759, 1.7691321738816148, 4.400811910811095, -2.9128348596813964, 7.321428875531252, 0.883801428610322, -2.7880397822041454, -1.8255986819895613, -2.777347730038601, 3.006337902413115, 1.6760522502435489, 1.3884765877270295, 6.493097032627451, 1.3333336146734043, -0.8360430361467894, -3.5390883676098355, 1.997997248594821, 1.1604288545197838, 0.34367785705263953, 0.8063090241877846, 4.4043911843823365, 1.535761555471404, -2.1336347693543116, 5.3078866676759215, -5.064794801622099, 5.548330069417642, -3.4245160149651697, 2.8398490151687215, -1.6776160811029899, 5.932724449913971, 0.15408284276615403, -3.406718241768929, -3.714355871435356, 0.8717645996261953, 0.4156617414612933, -1.4471940776356926, -2.221088165851839, 2.525286826774848, -0.08240481920558029, 3.269055251485378, 4.217573021220831, 2.7509385240965427, -0.6984524009722094, 1.9252565875843048, 0.43860222495862766, 2.9248318885488507, 5.678622460259355, -0.7586776599534155, -0.8050370365973416, 8.590503178842908, -0.05946371904548586, 0.0740597322565355, -2.2937350265903307, -2.5327811081900777, 6.646026822481197, -2.5444574573711787, -5.272952504401819, -2.0338490633600976, -7.846235480280904, 3.700248571454538, 2.9561049774125907, 5.383020961017328, 4.678842901386652, -3.1197586025992887, -0.15849702273631883, 1.5768515027002317, 1.3343319400523095, 7.599669174341061, -0.30843168998688897, 1.7586931690971213, -7.302564240426696, 1.4423013300401553, -5.2889548476128745, 2.734869202037792, 1.5610452140702713, -0.2947369193156062, -3.203491192839266, -4.094548077600862, -0.34421908884097385, 2.741277612058422, 1.5068202798523052, -5.071583933994959, -1.4450384846535163, 4.230494078328979, 1.2365812239223155, 0.556495578196404, 4.0188425562227685, -3.5226442938157128, 0.3969795939414327, 0.7431009377900399, -11.575029102645972, -0.36545078076516346, 2.3944941503489634, 1.8315002467713617, -0.8744850988104642, -1.0284956332947714, 0.3367800555589986, 2.2101627909146657, 2.6177855844230193, 2.420072916436765, -0.11919924711875496, 2.861909879847566, -1.6448645908473958, -2.563356565930664, -5.974128068924609, 0.16184886066722926, 1.2334153053643515, 5.319256095945996, 3.1583831004475575, 2.2620734632622597, 3.3126237359913473, -1.485734557724822, 1.1059868309850707, -1.6663553737518082, -2.537009464595928, -0.8456994128614521, 4.8741770070536745, -3.527387640619607, 4.4854562984667, -2.3956493698752914, -4.2341096565918495, 1.170038625116156, 3.401167559951002, -2.8468291727733526, 3.1232969999996953, 0.16692340394250937, 0.06759673912398245, -0.8534788241974485, -1.0032495930793837, -4.672403211966042, -2.808710245239078, -4.613292489959561, 4.342600958902858, -4.004620135784883, -3.2969195313426125, 1.0650517325956104, -0.33204793805903643, -3.657631402716447, -2.7540128897127962, 5.109604762844218, 4.402682411489059, -0.6330573332217978, -1.7135676885884135, -3.0605197908872226, -5.095156476271189, 2.5395202289373646, -5.381678454266762, 3.8816940855130175, -1.8684129600931618, -4.668711515318817, 7.939511520883494, -1.907880330823769, -2.883604354972079, -5.846751452483274, 1.8541201969749945, 3.723613819089099, -1.391119820808967, -2.7148780635847993, -2.2023439116741512, -3.0477054869044835, 2.5193905230426914, -2.5444278659466866, 1.4664486140268567, 2.427193058837209, 2.5589644466171464, -3.742981194308716, 4.656649968102478, 0.44922735723952645, -1.7804292188946964, -2.657044906422869, -5.722222472132283, -2.776455934115909, -0.27742213540394733, 3.472030656622521, 1.2943754207689557, -3.6960906932533693, 2.699904489527545, -1.438094710987256, 4.681244113465858, -0.45333276382377463, 0.21513405269047392, 3.552107743239568, 2.8418495952489233, 2.0242698117620233, -4.054547365441223, 8.400638838877013, -1.8909011648664844, -0.8660864303777858, -1.0166071528435534, 0.47239517102321105, 0.13927978767140137, 3.660456148141405, -3.723096539290921, -1.1287367249808031, -1.3317813350449912, 0.7629050512106752, -1.231791308025015, 4.674525153814733, -0.4200518050282449, -0.7818505161958695, 0.049318764047692865, -1.6258209259757481, 2.2382014979194302, -3.2880485923824603, 4.348219154293977, -2.3021807957670832, 2.5515786923290253, 5.391530266218313, 7.241430629983389, 0.8327903940537618, -3.5016462989272523, -6.638857379526178, -3.5491275915399325, 2.644502966421934, 3.005573102546233, -6.892369657142543, -1.5616525175181843, 0.5312728588940674, 5.992971676008173, 5.309639199693275, 5.7666307523359945]
BIASES_LIST = [-1.3519588033322767, 3.9349473171537976, -4.918243895775377, 5.330247591107031, 7.0614081226437335, 1.1460824478139884, 3.0833009599735695, -0.3512867819435752, -4.2273141414325694, 1.451610530255901, 3.0574180209465025, 0.4532176987331398, -0.3280539320699416, -3.9565453359475717, -3.5532250549459303, 5.529216447294359, 3.1641813924730284, 2.348123020886627, -6.463149228944111, -0.16267443732771536, -2.8793115195050802, -1.1686188259915458, -2.3742806128790472, -2.6174853138548384, 3.5463001186767986, 2.726445047450034, -2.808120201131855, 0.7851722692404588, 1.4818152492902588, 2.914257775192111, -1.615852357245115, 0.7530729965067633, 4.475504157987033, -2.0805566710935066, -0.5347065352503968, 2.1551585669073625]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

