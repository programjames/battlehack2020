import random
import math

WEIGHT_LIST = [-0.819729016439954, 3.852023068943563, 1.0034857549801695, -4.040403452461612, -2.4107412011423524, -4.100595235416855, 4.317338427006272, 1.4516323725732452, 2.4043065551766594, 0.25872434660902455, 2.241410154129103, 1.173561814192237, -1.2783138321163714, -1.672770405094255, 0.09201017847599258, 2.0755945275116106, 4.073407005400226, -3.1905920235624095, 3.2088103687084084, -0.03702399688195612, -1.255925433206776, 6.188218148758624, 4.530829858944446, 2.618031775653556, -1.402284213435223, 0.522219119761201, -3.974628824687482, -5.672105728938563, -2.7925644037303092, -0.05647934224659068, 1.471843855641108, -1.492956361322113, -3.9980328764741637, 1.6341965877464597, 1.3276371840906496, -2.2465875982567898, 2.4354227727415454, -3.7159509544250504, -2.7732060517895496, -0.8660813581750628, 4.007120533273454, -2.377816119974842, -0.23970541923427613, -0.3522109646393692, -5.373897695914352, 6.290256926259425, -6.58438157754812, 1.4995191786576036, -1.6676997649625362, 0.2838751206988459, -2.8066584626610926, 0.9548245615063364, -3.891214625968462, -0.2963804985444862, -2.8477969081154133, -1.2812060751440675, 0.14636001279717448, -4.431569610796572, 5.556472265163939, 8.163969462011394, -0.331344879627122, -3.824532891794593, -4.25889234095003, -3.295595015953742, 0.4853895668049, 0.96266607899677, 4.587512331745039, -2.0664255614544365, 2.2333384942456465, 0.06272775690257704, -0.7988060200770211, -6.293965905513962, 1.6852105413548744, -5.40174554320045, -1.9600983612189353, -1.1375626120423725, 3.440407758815865, -8.320430298863768, 0.041141155047604405, 2.462902054404582, -1.8985030148591304, -1.3301636405009647, -0.8795627216840844, -1.3289681085582667, 0.5390126844833691, 3.721196162725625, -2.562977099686761, 3.4971788290999557, 1.7367770406930938, -1.0367187267012872, 3.1116408202605186, 1.8602046838549722, -3.2789969331549766, -3.5581025773926616, -0.5283514374190044, 0.10638995377308702, -1.5603888021367478, 3.5022596976084523, -1.2303569743982297, -4.279594835882563, 7.171275792321291, -5.0674543983530524, -0.3504346013171882, -2.429417210301784, 5.10502809969876, 0.9432382052037511, -0.3819077144900682, 4.596621126175117, 3.2237738077495948, 0.7566430123902923, 4.982141909381342, -2.505558376967509, -0.41233258967091857, -4.288558873196479, 3.7381271452204086, -5.752547013686613, 3.6056978748205024, 1.264761915289749, 4.401914493437204, 0.19525002241402767, 0.4318356691769174, -2.757226152366193, 3.49685538379497, -0.056245218492906535, 6.445973481734629, 5.702208390654753, -6.699049010324762, -8.001480067505481, 3.09236362934693, -1.5069881473822129, 3.813067709282092, 3.788625180529772, 3.440550294726381, -4.328474758950922, -3.677989038596751, -5.6667457414418525, 2.2281683919592563, 3.2365100276108976, 3.1503062878497685, 3.1929216689963926, 0.6325454719570038, 4.145371848291012, -6.089669401139302, -0.946751683665082, -3.802269051632295, 3.6995222425687135, -4.039164226660644, 2.748724093150523, -1.2893854312606456, -4.322608180487254, 0.7655498853968519, -3.132562181337285, -3.078233743317643, -1.9946677312255414, -6.260421803380646, -5.596740204191599, 2.881055321047185, -0.36946186872401265, 2.481562313198645, 3.537214689148609, -1.323686112298733, 1.3167272975973447, -6.608385212471365, 4.389591669095846, -3.255078506295186, 0.15296239058717775, 1.4097234868581596, -2.2934511620151476, 0.31296244458610145, -4.327782407623355, -2.4616431624085635, -0.42696523652249707, 0.32739838150303546, -1.0486915249397608, 2.3117948939099966, 3.5008630611898903, 6.20134109699244, 2.2861108764734817, 0.8109990128880553, -6.671913847649243, -4.952193986547641, -3.0986363391405574, 2.2610838272458675, 3.0271096209367947, 2.0190824635414906, -0.3693514511003344, -2.0631895376437144, -6.228841247164649, -3.108914806011106, -1.7520097039743199, 1.8154658433783082, -3.6798941953161366, 4.477741422591903, 4.683750457439584, 2.8398034535158985, -0.5854808202902884, 2.692659773965837, 3.106466410482307, 4.264827761288644, -0.35439858736434293, -3.1761212630119084, 0.8074163164019574, 2.849906276802271, 1.1579238423155882, 0.339957738992382, 1.885192413132346, 1.1745043044252061, 6.1888292118067945, 2.261135195864428, -1.9094853123831403, 0.00064454644442824, 0.19447421418256128, -3.475917951809438, -0.5396809761563116, 0.36909454597180447, -0.3582354979447713, -0.6253986153094941, -2.208218111688102, 1.2433962474497502, -0.8239402354402855, -3.3125866151561576, 0.6199700123068239, -1.0190094234330729, 1.2343121006603397, 4.0933314726369705, -3.0666322391071326, -2.326598043178336, -2.593601825909057, -0.2002999950454849, -0.6217185365240879, -4.345685306517071, -0.6409748733898384, -4.129064963385769, -1.9703523978037079, 2.589362774438654, 1.8697600638312486, 5.505233037134754, 1.660569908001908, -2.499041310145489, -4.768642213631837, -3.2620898286005273, -4.4799211473575635, -5.966363353870502, 4.461780889395159, -1.2596694770252708, 1.856793997201339, 2.5911617537492297, -0.8611803706492718, 2.025889864897712, 7.68107994850163, 0.10649499117423522, -1.7528253013033395, -2.9304899101697526, -4.835896872063062, -3.7259147839132236, 2.0088592891791435, 1.3773160481072146, -0.7954872380796867, -2.8110002910396923, -2.778737420039053, -3.7061138832544236, -1.892194878141009, -2.3828838250948388, -5.046449493365841, -3.515031147278541, 2.1215009716859665, -0.09818470428056247, -0.16576489693642538, -6.649418513206195, 0.5796117448699274, -1.9528177201111079, 1.3686833560018545, -3.939358959942905, -2.408039855114043, 2.519763317575248, 0.9926634062273068, -1.8309314050825722, 1.920671388284684, -1.217744551023883, -0.28961134248800335, 2.1440993041052927, -2.072946165338533, -2.0034166997665874, 3.289991942381236, 6.252781398736434, 1.36952077752027, -3.548725134406427, -2.1514821019192603, 3.569540025908295, 1.3252836353788338, -4.273700540023333, -1.9652434294034504, 4.214647992106343, -2.4149604827261912, 0.10566051251356479, -1.0580570752714125, 9.009914876907153, 8.22227707916168, -2.938507577452279, 2.949273237389959, 1.7321308004531737, -0.49213302099417144, -3.4509077103259704, -2.6840425789347147, -2.659831677814121, -3.2908979925843913, -2.655359822869073, 0.8973166580842071, 4.850617303636777, -1.2162200367601566, -0.9900146076632913, -3.3499962691453025, -2.002307515175114, 3.766692548590372, 0.9976111451244778, -1.3037481402337476, -3.6065781075151016, -2.6689849285696616, 2.3987584182747153, -5.381470180127341, -4.3267677647686975, 1.780630822229119, -6.942478035674593, 5.563878730504549, 4.164811777214627, 2.9816597385719823, -0.85578709672114, 1.0664068805078286, -1.7887329964356518, -3.5041133781239835, 3.5153507717951804, 0.7358166129435548, -6.635844474454338, 0.3693992498292804, -3.9526634726361904, 0.49657634162313435, -1.7079909949537033, -0.3926053606134824, 5.671264077158579, -6.04362677310224, -1.6723775642181604, 3.4587195397437567, 1.5188794181982668, 3.1943860134943556, -4.173980512330235, -2.1272325772575766, 3.437885047672303, 1.6134691657532043, -0.8912384878058865, 2.2482497242424575, 1.6683882235967542, -3.5017831201036467, -1.3802296131714382, 2.412358094426188, 0.9313164258451005, -2.7873721368981594, 0.12430528890256776, 0.7441575641060121, 3.0575455631480075, 1.0473219959254942, -0.8892000727354589, -3.1231469223554225, 3.9218354308637275, 2.677970004404087, 8.097266876306747, 1.4118840370556263, -5.787807578677121, 3.207642253164966, 2.07698983986798, 0.668170300625766, -6.1687813621867305, -2.695459523807434, -3.2608138199122143, -0.7327235798596172, -2.78072088267009, 2.7008063099212336, 1.585615205132036, -0.8832437239928534, -1.5175662492949513, -4.674363074643788, 1.5139493149784355, 4.1659040261302795, -1.6965186466599358, 5.564422937411081, 1.292175160527227, -2.0967583681330204, -6.576596386617006, -4.68051331375735, -6.807249778948372, 1.7416783352117298, 1.530158708800898, -1.0894438503152024, 3.1968865536315487, 0.4544097881962843, 1.0481932209465619, -3.7981998172190883, 1.4788453664161914, 4.488010298244049, 1.8076633968829423, -2.0074646346235774, 2.1345363955077308, 3.640272949463311, 4.3459441621913415, -2.72016361112473, -1.011002722233048, 3.6871263133477443, 2.612821458798442, -4.280112775447482, 3.232554786432255, -4.490573681363671, 0.2711896807156804, -1.8196411942288364, 3.6709648290072785, -1.8609954695364503, 0.4632877763061569, -4.835851040671126, 0.01442178874864819, -3.349765646267345, -0.9825414524052023, -1.525216500521943, -6.160623657375314, -3.6555238411191384, -1.5346046839264313, 4.973039714966028, -1.5083827634487725, -1.6598693104566276, 4.430285109056954, -3.11637654787209, -0.4596919375560439, -1.3343976635775074, 5.021140617169576, -0.3121564122838514, 7.099940925123663, -4.6419584220077645, 4.9488269618668665, 6.684895501124559, 0.04698917416198567, 1.194350236285021, 1.4030259003340295, -6.550333230794614, 0.7951486244952317, 0.6995982241318612, 2.712907768914348, -0.14953585386158663, 1.042992252901636, -4.070993618970555, 0.30310679256694506, 6.517804983418024, 0.5278409791628966, 3.2849656876978877, 1.5518171331399309, 3.4587551312999167, 5.140449454694679, -4.504550996356876, 4.6817108984171405, -2.0961397630817302, 4.2190458337543655, 3.935910788423496, -3.2640755311576215, 1.2612606841126839, -0.25289787393060215, -3.889265799896018, 9.538165676348068, 2.785499462982102, -0.20406443657154272, -1.877722692190988, 1.252296928432894, 4.862929745205976, 1.1049171286111825, 1.861625748355729, 5.758413308633445, 2.0189891967407165, -0.4544149852301924, -0.03699611572235095, 0.13897452353806372, -0.3588900126580845, 3.5309525105780573, 4.005693420665879, -5.432311228552588, -1.9960948569818295, -1.7772587175558157, -5.724702129122978, -0.4638106509078884, -4.298728768038029, 4.529583191477922, -0.26898145710701626, -6.680723961056671, 0.1812755266979198, 0.9076379324357022, 5.413575769409693, -0.7327660891593789, -2.2389259245760567, 0.34331775255359265, 0.13669684760627288, -3.7179098311009944, 2.0003395577946455, 3.2306663712714005, 0.8963739219646738, -0.3285698443699606, 1.7754609864818307, -1.3645053499853992, -0.8150262408167156, -1.5604167506300395, -3.2027367619107294, -2.9875497354120473, 3.419752630368661, 2.455011317486953, -1.0397331568683232, 3.6031713971817485, -2.0285574609991093, 3.8357535704635985, 1.6110928665420965, -3.611726879514474, -3.574440119623975, -4.6778093567159615, -2.419436610933886, -4.6571670180171925, -0.9902917138095135, -5.416097329342307, 0.1756498955859067, -2.6645887980455782, 4.821204567140832, -0.22507875263250288, 0.8146275345718565, -3.065250385140633, 5.315772908668681, -3.7274412365186764, -1.4874478166887342, 0.34830141999601283, 3.379114845677311, -6.112943907477825, -6.84152101074387, 1.7172318344725133, 2.014650313699984, -3.178408216898081, 7.196086640115249, 1.3914244421643307, -3.1061899403098368, -1.9561819644492269, -5.298670188931862, 1.3528959787264858, 1.954286040475262, 0.9376431484637386, 6.582369777298122, 2.009156648090865, -1.3479126509421044, -3.870175291236407, 1.1705438319301686, 2.943800748089477, 0.03592211635740217, 1.3217606104636745, 3.463724186233791, 0.441272247926888, -2.6152065428137243, 6.2383041913975585, -5.303806869119394, 4.599484370390301, -4.684403515971143, 3.542288685839404, -1.3914307526675636, 6.643925087478158, 0.8291761747115125, -2.481227450892365, -4.4741204203458596, 0.9293584604072529, -0.13228734669372477, -0.8297028971994145, -3.9814280661443977, 2.6462643145875413, 0.13860928730092326, 3.4024320162128667, 4.7229969025110075, 1.6092326384133333, -2.688385470703852, 0.9047643212001579, 0.4187272557730819, 4.180584605027093, 5.846588550411237, -0.07894857337449102, -0.13288616046447332, 9.486565351454875, -0.7333005583854642, -0.5718604289581181, -0.935858981634974, -2.867880597974809, 7.113305498358232, -2.255888428694653, -3.944998728317359, -0.21974291292351222, -7.446499012313711, 3.589551344876009, 2.5720739364225507, 4.717583833030436, 6.0421041352855624, -3.6088421889493794, -0.21320004065642895, 1.4912406808155154, 1.2146446568369704, 8.245172796717034, 1.7276971939142118, 1.8175362159494015, -5.7125445700784425, 0.9078174397033645, -5.996480361552395, 3.5323053677120217, 1.5050395559570928, 1.569374914291533, -5.493930853627746, -4.38150093514714, 0.5566159114935336, 2.4465225113206532, 2.9403534464709393, -5.223402859548129, -2.0050022333574145, 5.059683192173578, 0.6213784934370286, 0.10197350221671209, 2.8867254854356217, -2.784032023005759, 0.6226512970993994, 1.1227033922194303, -9.736977261118842, 0.6519164329529743, 1.754838512726412, 2.4866054225031333, -1.2520480417491124, -1.8511749579851948, 0.00700901570713186, 2.2154837695558696, 2.1693010794402743, 4.638483582652835, -1.0667794155402892, 1.5689828278214835, -0.5879291813951506, -2.871959724105068, -4.6016403464758415, 0.4111387583937287, 1.6020164742428058, 5.4515401616056645, 2.9358992464881672, 3.347998120537694, 2.7916063950217813, -1.1074145466035858, 1.5146495342438646, -1.2669000722312413, -2.2201579960538282, 0.46574949837543733, 5.1619287976171755, -3.051965684451999, 3.3766995644941327, -1.4508902090166393, -3.888807031971554, 3.1739572965616, 4.767033157992233, 0.008036062986370052, 3.1019125883889904, 1.8745130701409112, 0.4895780527106619, -1.6040278831627062, -0.977172381353304, -3.3765335488492596, -3.0463763661878582, -3.7633480362407488, 5.0501747871405485, -5.536749955930537, -3.4971381965164356, -1.3626214278720787, -0.16174441458272282, -3.0262808396452234, -2.8129626795385168, 4.573704569068658, 4.847807505450405, -2.271571293801143, -1.638249244130018, -2.836108453604182, -4.997468717275591, 3.967871296180486, -4.492187173145863, 4.933655041541366, -2.7165040148594164, -4.919149584432005, 6.968280584165556, -1.6055335809280809, -2.9859169071082983, -6.993116290759607, 1.5843483176747233, 2.527615764421903, -2.9102463176383653, -1.4055270768814057, -3.1091248935321687, -4.695613042966269, 1.887450689680537, -1.2743510211610591, 2.725622126875776, 1.9991187019549908, 1.8449695059031606, -5.1952222482370205, 5.538831560625141, -0.8175776584698523, -2.6254970683235355, -1.5076860546741389, -6.512779656183245, -2.7750119531234088, -0.3411494769788276, 3.365045762319081, 0.47008944506086126, -4.2789567377772935, 1.4502643692365078, -1.2917388793425508, 4.234974014118343, 1.5841938829917872, -1.2411590578110994, 4.262766162106512, 2.5345051886881818, 1.688453818643922, -2.7427684301382382, 8.648270536788928, -1.2150020406817625, -1.375297698432036, 0.10693942222198238, 0.21271012345758478, 1.7013322180334423, 1.908771469687443, -1.8371187604032144, -2.2128095388987132, -0.9504190317035706, 1.6858408713068038, -0.6913328518034785, 5.152569580063094, -0.07569299206568258, -2.0386990336497623, 2.1210026196404805, -2.026598239292246, 0.7006305619394235, -4.095533440803521, 2.4234843718361225, -3.011465587382224, 1.6212566860975777, 6.401915736460064, 7.191273084023045, 1.4995302103583232, -1.748103773483325, -6.463402899742136, -5.244315793674535, 1.9988668956242353, 4.934741433639321, -6.501240295417037, -1.3626268045593142, -1.3527890485494938, 5.124789736463833, 4.167935709393813, 4.7420391537344875]
BIASES_LIST = [-1.556232422095864, 1.8615661438152116, -2.7214995552391086, 4.416912187890967, 8.277905066326031, 0.7118117929967953, 2.900209656445197, 1.3028443420168703, -4.352623938873963, 1.6497926546396644, 3.062213057287435, -1.3430757604620152, -0.8446966813184172, -2.061499189670739, -4.149166456214097, 5.560561996481932, 4.663931935470658, 2.138076792701824, -5.7955325111795295, -0.4162834441473279, -2.221297239621542, -0.11234634010356181, -2.4892542797200576, -3.7294018978261, 3.5819055363267562, 2.3274537322794284, -1.9456596111389048, -0.1974722623322357, 2.938981118245513, 2.489639640660148, -0.8359451579502184, -0.2862814037473027, 3.071108858272055, -0.304782107324009, -0.2076599614549789, 2.041560652592075]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

