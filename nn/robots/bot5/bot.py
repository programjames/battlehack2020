import random
import math

WEIGHT_LIST = [0.5672121543044194, 4.896220867675019, -2.322991460038721, -3.548188722665442, -2.323478565866305, -5.28853363898835, 2.8709200174400986, 1.8313134405647857, 0.807883308189171, -1.1003446543410587, 2.59358486867828, -0.012996049449708636, -0.905766150074077, -0.7658195302443985, 0.23852811030286625, 4.938890072359446, 4.68670878999713, -2.9724194685623706, 2.8402224788121555, 1.8310914047252231, -0.37467294174182786, 4.346775344199414, 4.932577048895918, 5.418250095178933, -2.1134707415819545, 1.6044413489137097, -2.188597623177587, -4.360300888682245, -4.90819565260023, 1.3857581631707854, 1.3689366957391877, -1.119700016391906, -3.4067588923447474, 5.249025945558922, 0.9917082500519082, -2.500937095505132, 4.149990730098468, -3.2928878015548877, -3.7503426045193975, -1.022086393438511, 3.8240278576418354, -1.866885516445537, 0.42427459143724144, 0.1682255228436336, -3.2633622863313905, 5.715903515099577, -7.872514194057853, -1.0328246824056266, -4.608220585430381, 0.8695976483315709, -3.8510829107963174, 0.6673131503444947, -3.592553455437078, 1.8894949700302288, -2.2372975154401984, -1.6028702680912401, -0.4076328231143639, -1.973085611944034, 4.894778442441708, 9.870329301703885, -2.1873491496834117, -4.497332610544807, -4.309746529790304, -3.5257601322748076, 0.7307864931154926, 0.19721126173050518, 5.3586756782384235, -2.195750142123664, 1.2335738779908125, -0.6794125278063881, 0.447430973793174, -10.341893785089614, 0.48822368765244634, -3.699651439456991, 0.038710464087437654, -0.9701305729190426, 3.395525639638927, -9.783247252971046, -0.06104583128398996, -0.5698648225439427, -2.4073626308122438, -1.104040085116956, -3.2510967823702206, -1.2091131123848857, 1.0202975670807783, 4.801815292821778, -1.8361464827577212, 3.9865341820525106, 1.3738204547228325, -0.6845657920602692, 1.0027452076882686, 3.7851815953264274, -1.2406259899778034, -1.0672279291556441, -1.5762112629564937, 0.5326283426520768, -1.7565053248111075, -1.1372832964649697, -0.6350385121936293, -3.69536507267588, 4.13253605847157, -4.8145910183998595, -2.338119424438542, -3.613720701109457, 4.934708264629693, 0.7430179857447443, 2.7068116670623663, 2.688436151056106, 4.959096445843394, 1.8825078751083906, 4.383867874989638, 0.6074292320689009, -0.5398407901982847, -4.320329132721881, 4.463951949397268, -1.7123368830812618, 2.549646430032193, -2.7687349558133225, 4.563534900916418, 0.5707232110473953, 0.6200421040662909, -0.15715355398129907, 3.596405182050895, 2.609423092587915, 7.012213021256744, 2.450211069366081, -5.36785125978427, -5.63881434608395, 2.5569536225718785, 0.060185337278948814, 3.6163470585796045, 3.849705852090858, 6.510174571588981, -5.743349409823948, -5.1891485944689695, -5.159905791435764, 5.25356840706616, 3.503541193233963, 3.5668989120368026, 4.551949435951152, 2.0786945546389735, 3.481657234770252, -5.2289089721687905, -1.052874216837702, -3.681074269680425, 2.5034045380557166, -3.946015162041027, 2.481101689039274, 0.4639217053849247, -2.48473113407995, -0.43377893483765784, -5.111742840418597, -2.410444688346056, 0.010349182176328223, -4.1391500208666825, -8.679062633170815, -0.21712856932586494, -1.8272200603191477, 5.457848851156912, 3.794681895416976, -0.9510001178937975, 3.8432402306579805, -4.555933616387795, 4.476977788245245, -1.1216849593650529, 0.3685666581516904, 2.1055343768567507, -1.699568892307409, 3.3619797048075126, -2.610710062879908, -3.460991718991941, -2.426879161041526, 2.0718375161953713, -3.2817449683269055, 1.8376574832973458, 0.19296000503603267, 7.311826236555024, 0.13998831797737454, -1.2409907378830303, -5.366986819024849, -3.2251877051023863, -1.887458889444015, 2.147087996794175, 3.650956713804494, 5.112410317302642, 1.1341846153824346, -2.626828127399882, -6.103345868016152, -2.5082355644675207, -2.1311458988617695, 0.08669037373760383, -4.28719521853433, 4.581780804057978, 3.2552560894439253, 1.9113544736648176, -0.42707705032115506, 0.7573714683684276, -0.5319106656470777, 1.6932530948947566, 1.7689765849461547, 0.1302363585154451, 0.7084783618690826, 3.0291710967632413, 2.4321296850655436, 2.242481548285555, -1.344396802085986, 1.0393769957732542, 10.567472788319984, 0.5895578310852354, -1.1319560265193154, 0.6023190376325972, 0.7537457771316983, -2.9468684314991287, 1.2962646091998133, -0.6561492553402886, -1.7508394540339585, -1.6098398278140134, 0.32746573026439535, 1.2909187131362378, -0.7455207679825856, -3.924252507308442, 4.0805881054086655, -1.571375121607119, -0.9445175547987288, 4.250591955743836, -3.529764761398047, -5.026538833520584, -3.324706498421122, 0.15981881295791706, 1.7567322042109987, -5.341328017437832, -1.7100407365382067, -4.681237230563484, -1.6418943808339654, 5.272598446280665, 2.405718222686328, 4.271978444299331, -1.1689627062404968, -3.6256386156274765, -5.937659506588634, -2.5725975115837443, -2.596365700758588, -3.598787516750684, 4.8543794990967974, -2.6009824084491626, 1.217228819369703, 2.584456819045884, 0.22058160288555098, -0.09310863482281329, 7.128043275800375, -1.5305172818812527, -2.1209074472469522, -2.302466408161822, -4.274183955430345, -4.855177610553282, 1.0080953910390025, -0.4252960165618111, -0.355914213769475, -5.807989873269356, -2.5062757736540147, -2.7325827482638427, -4.575382831847966, -1.8340555422869103, -5.89876849413254, -3.059475485833118, 2.6854672039215384, -2.374724937212119, 0.5962552746355027, -3.7534434657654554, -0.5418189545401573, -1.6619456011022464, 0.16994270627850305, -2.897266234159274, -5.6222753180435125, 1.5152548445737706, 2.03536403805282, 0.2069386079585723, 1.0029612536155876, -0.7835480658673297, 0.3671528670309084, 3.955722520516251, -1.0256026543829782, -3.898256754347741, 3.751038754355442, 6.160491315407965, -0.07402662960809293, -3.372764145893136, -1.8308786360848741, 2.647339980625765, 1.710004428441172, -2.9823861623770687, -2.687597787488059, 2.546598961689486, -3.567127451634684, -2.256394628612346, 2.3630924998724576, 8.844996528678168, 5.949497482433, 1.8013602761651781, 2.0489557793781623, 4.564868122212357, -1.8729706360791762, -5.837765415471551, -1.7700049757691347, -2.372079900645186, -6.8789994992162775, -2.883457806852008, 2.2908875675053024, 5.0663058868402056, -1.4243007692052958, 0.6751721317027629, -3.9114919029198756, -3.605955864822234, 3.2748007952574554, 1.845599916990602, -1.7849768138053683, -5.653180298253443, -2.4070528375697995, 1.2907409990606329, -5.593148860083503, -5.321455178919321, 1.2752270025768824, -6.806370174850072, 6.394777328703801, 3.44152131719098, 4.594957093976564, 1.992729635444743, 0.27753618627574006, -1.2695685476480947, -5.562380220782359, 3.954018809934676, -0.3456475900503031, -7.423749989286562, -0.10090715135553321, -5.0259577407941896, -0.5037606401713579, -1.6719660692726634, -3.4647478151309175, 6.516045223154723, -6.778741047505245, -3.230806504333601, 2.65924336467161, 1.4777061345093463, 4.189754159500949, -5.700526558219645, -4.629733056564751, 1.6935196035727893, 4.79936697287283, -4.847845325739217, 4.648235794998292, 3.2563665872459477, -4.01981211549176, -3.3959236415185914, 2.3218859012391313, 2.342140722234199, -3.394038926112785, 0.034788880763174594, -0.02142672288889639, 2.8123260039212274, 3.246122383658642, -2.254751392610251, -2.817045707440885, 4.92428050898233, 6.047378978226605, 5.281882134847111, 0.11348528574992957, -5.839553431648428, 4.271067198265152, 2.6116467193915773, 0.8604376633389976, -3.2190472377417705, -4.7105744144449195, -3.6553115311107245, -0.8869849601278552, 0.3388120420993827, 2.0698937718644324, 3.9145031092292775, 0.6798355111617796, -5.652292739313695, -5.254883610453511, 0.42218643636474706, 3.420560926443216, -0.8748868038905588, 3.1520697011753405, 0.12828058768084433, -2.8731662532100106, -7.23303540834385, -7.87917531998811, -4.607262074830024, 2.469228583567026, 5.59132247481492, -1.7057833954846102, 4.703937778394693, 0.5078624729492914, 1.4441903253886952, -1.2916291858790816, 0.350428220785929, 1.17795173831903, 2.2556783142927608, -1.49442389534709, 4.289922495924922, 5.5521842633477325, 2.7161879337921286, -3.455525821384784, -1.7225553110097098, 4.551072505327607, 0.7079845172983703, -2.1545020184074084, 3.868231710251495, -5.554856639630041, -0.291844328562112, 0.7935489839912778, 0.9055938041031791, -3.282585629715901, 0.9791410468896948, -5.677042470729828, 4.135040544558917, -1.5711428304349129, -0.7111412282394358, -0.989523195965964, -7.403107649698203, -1.8397186442156825, 0.761248304506334, 5.2224931507885906, -4.337738420526482, -1.1368715645275116, 4.081054091259712, -2.742459536839561, 0.9177104784058924, -1.9271199242728312, 4.389498153615027, 2.7880076641776292, 2.995263883620841, -5.9013179259585264, 4.9427358904589935, 6.193653200988913, -0.7437280122176281, 0.8007954060068886, 1.5770025267421346, -4.7638813681248395, -1.6157222510286042, 0.6524389458865295, 2.017364796465943, -1.8217880187575441, -0.37620615191685786, -4.321581235327566, 0.7141258764407492, 7.99528200137338, 1.8032280501193148, 2.9368162357055962, 2.4139995408805204, 4.51465132227491, 4.9293345215350355, -4.355674572329409, 4.6940813354833955, -0.0024239012047268145, 3.6305545453762935, 2.554883951410506, -0.38203718312465246, 2.520137188244163, -0.42434714963519343, -5.918244873588905, 7.702913361174322, 3.677437249515578, -2.0432993315531873, 2.0659552069462594, 1.4863406095441543, 3.195452278216314, 1.3687065036795978, 3.047033410288092, 5.184025226436024, 1.6661331264114234, -2.3149855829610804, -0.11205658326891385, 2.489183900554134, 1.3467825222463468, 1.5814857756137892, 6.853108574418358, -4.26226604600043, -2.4603153878705366, -1.1936220500399244, -5.094197336560246, 0.5665921889324896, -4.342084639251754, 2.690896515804852, 0.38971182249754616, -4.4015385061120496, -0.8107742800031932, 0.48995909147019906, 6.26290983430973, -3.2749196254405466, -2.872123326097565, -0.6935272798169422, -0.23755338513233412, -4.857638691557595, 1.3655236955975005, 2.6013613819666035, 1.8324418255495127, -0.3627769405236098, 2.725091442944287, -0.2804197925830428, 0.11412478855396224, 1.5483732166514554, -4.737488120591478, -1.6534453831431073, 3.618215491415816, 2.873002955438037, 0.4915334157128998, 4.255436275091478, -3.0478367553664674, 1.8273291541825243, 1.0484123576354252, -3.769649541490686, -1.7870704693414448, -4.9209706650500635, -0.9689784986827429, -3.9912610461724785, -1.008205942003442, -5.966532900990587, 0.3081664098745652, -0.0459894379495744, 7.020316488349703, -1.188157976796112, 1.1055284032072703, -4.01207482983539, 6.960789365708612, -4.078435144691949, -4.129382237642268, 2.048990647487333, 5.113058485845225, -5.5064796337399065, -6.409851178787858, 0.9014644273063559, 4.225094701982598, -0.9065237082253256, 8.074238721427262, 2.519635247277357, -2.30711090307459, -3.3425014898307057, -1.9878401189879824, 1.4678404975080293, 1.0635726721535734, 1.4360478576611857, 9.024497151784045, 3.8094496427102045, 0.5670061282153505, -1.27120796292113, 1.8024610549292337, 1.5159032730046567, -0.5491812211809759, -0.282452371732221, 5.96960660304217, -0.1206569169094631, -2.7894803808131723, 5.406196097371801, -7.75195194073798, 5.260166775668571, -3.8928608872658774, 3.405079979027246, -1.0024745905781403, 7.797663823913582, 1.9013716164788788, -2.2533255668708208, -2.1724110952355042, 0.04348225730760647, -0.12138822819855918, -2.461666596041773, -4.414323921233029, 2.209413452881646, 3.9606160430061244, 6.049504541589888, 4.8768207249031175, 2.2611761063629765, -2.1501042026620985, 0.032544675657252664, 1.8508386120611586, 3.711277623537574, 8.937798413170844, 0.40628506509637907, 0.21869755803492366, 9.606298236970146, -0.6078992296578892, 0.5337058193307371, -3.1901140226336575, -2.5536883088589346, 5.772009131752539, -2.349303407908038, -5.4546940014987415, -0.23454161616513283, -7.365833438448321, 2.412666118217229, 3.090950689290768, 6.118425100624434, 4.945354575043571, -0.9527967751265838, 3.8051450379244693, 2.921273877798007, 4.119029609393509, 6.786442538024521, 1.3906773725707917, 2.3034281177655074, -4.253539278288533, 2.027559088540413, -7.724668329277339, 2.157795220615973, 1.2634061687679148, 1.221559251153593, -5.135449973050208, -4.552086738906531, 2.3551701522584367, 3.021527681798084, 4.276226936784566, -9.145018540958496, -2.4278845912847697, 7.44396202222402, -1.3532663305688903, 1.4413778253697953, 5.826692518587663, -3.456534127482189, 3.166749876113615, -2.014220447962291, -9.994477306858816, -1.0494820640077387, 1.4856632401406986, 2.897196036250402, -0.9169820644887917, -0.6952031092688306, -0.8166276971108789, 2.281322722586062, 2.4986960187707443, 3.221052113445803, 0.2833820034292807, -1.402619825334043, -4.281552418295652, -3.225305789042476, -3.4128465100481207, -0.7046879167289936, 0.8615116897723826, 4.218045840156519, 1.9571232007987844, 3.1876309757009103, 3.1214014643308188, -1.4430717923602958, 0.15736953878129603, 0.9556819398426305, -3.08167388142974, -1.6336935270321535, 3.4716931990668702, -4.011241287415271, 3.359663415089704, 0.5703210374832881, -3.6918670972852423, 3.4389740931111974, 5.922759307345595, -0.4353649798773013, 3.2232026595769514, 0.37535353726846077, 1.848095873606108, -0.9184357185449109, -0.20670370680323816, -5.2658104830492345, -3.3566515156258774, -3.709780489006564, 2.353940420408534, -3.901378635352858, -1.5376352541465703, -1.1374625834704706, -2.0646633527027904, -4.9151515942528405, -3.874562915838154, 1.980509663135232, 5.683733066083141, -0.20486034522014823, -1.8144439476990282, -1.3675274561587538, -4.275863099116209, 2.3445029539365487, -1.5458396714521399, 6.687274903504321, -2.6847166165883825, -4.7403340079635345, 7.885026390403798, -2.032639442736375, -3.2934841643424075, -5.152597209240054, 3.001650254279082, 1.51497926847515, -3.5579654112454215, -1.3670131176359757, -1.6021866122619686, -4.79556976634258, 3.332408166643475, -1.2932782515019408, 4.379440957415657, 4.636554310243618, 4.275984969640913, -4.907536510046165, 3.6462749997684534, 0.23970518233275387, -3.4075072808242104, -0.3666386867854159, -4.744086767140927, -3.5424879782073413, -2.076187831799673, 2.528913151131334, -3.4091212628181577, -4.686791709623048, 1.4279985654361167, -2.7628139897287416, 2.0172648550075407, 0.46576604293559853, 1.664674540487394, 3.9618266068547343, 2.9416907990440015, 2.7848989322810453, -5.860548460608856, 6.995329623751973, -1.3635174700443649, -3.47129010626089, -2.8479171560226866, 0.1416784471130952, 1.4928537177414287, 3.0338901026437655, -3.5924773615585797, -1.0559094836617675, -2.7611491901538225, 0.58421189503286, 2.181878714707477, 6.118653483732518, -2.7612896682800767, 0.08326005789664208, 1.4771936849396523, -1.2585233608540238, 0.7369663027649217, -5.726909707179099, -0.8371529842032065, -2.39421882659882, 2.3617005656205228, 3.7652290423861987, 6.932893015664618, -0.8762730685186453, -2.2272263413079303, -7.984794998295072, -4.311402467298522, 3.0108774604316975, 4.219972151370821, -4.414027612096461, -1.7776778459637084, 0.9668369187986032, 7.589743735353136, 3.7484519343370426, 4.875587913353909]
BIASES_LIST = [-1.3813743715330036, 3.7003556912911058, -3.6028272042175105, 4.783214939323198, 6.341816828279288, 2.769750515260166, 1.102148737039847, -0.08450716867096382, -1.1196440921242692, 2.651055369377069, 2.119792889588637, -1.370990133441474, -0.005922613269581158, -2.6269216773306066, -5.505407859587831, 5.270448280317288, 4.8231753415538305, 1.4820798129309716, -6.569873840607947, 0.022104624303017698, -5.072736887382724, -2.806654937156415, -4.07528883706704, -6.086978333040509, 3.9179287208881983, 2.646903124103332, -4.025708245393298, 2.916836966501694, -1.0829304773421478, 2.289090160274268, -0.33631801272994494, -2.2930492367358806, 7.128870834671126, 1.8513437412350056, -1.6869781176707532, 0.4473687530402012]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

