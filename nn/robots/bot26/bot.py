import random
import math

WEIGHT_LIST = [6.192776057046007, 9.050634731737567, 8.003919338357807, -6.5306518911013995, 2.67212942153963, -1.6631571221754253, -4.222042868897851, -0.6048893238729818, 6.22682990545384, 2.7599778721702517, 4.305514256740484, -8.975912725498404, -4.648798031366416, -3.8899033298443886, -6.176497047383291, 9.923164360782163, 2.877807044236169, -9.835830878437612, -1.0808651078730236, -7.638144908265527, -9.519637071866278, -1.9752060418323953, -3.259959236664569, 5.83975627183608, 9.382153485542602, -1.3935060309973792, 0.25630431341416404, 3.075399376387466, -3.772865263565568, 0.008000022200029377, 9.362861254613176, 6.520371074072042, 2.5705140872509027, -0.6410151030235909, 6.965392957495922, 5.506575955578558, 5.607414386181372, 0.08964519807272353, 4.570296078196845, 6.5727883421601305, -9.760223693737473, 2.7382515341613196, -4.720974372486671, 8.50953526697538, -0.36856504993741446, -7.346887325847833, -2.4167409917999905, -4.261616410242681, -1.3783296341349782, -7.3438025688845325, 8.760071716122589, -8.564706070445753, -2.6156288424324696, -0.14716621883718872, 7.404306099006504, 9.75597737280276, 4.081580449832327, -5.901584826810455, -9.513903637411303, -6.50704803646761, -8.808427346670491, 1.3702639371959986, -2.669159608084099, 7.994778036264201, -5.0156502223851, -7.894753623412347, -4.461034924410249, -9.078632158619357, -2.6400402033224672, -5.765475216839871, -1.2996690264967885, 5.161626951020475, 6.258305379214416, -2.0324916905236297, -9.31116753129836, 5.12185278079955, -5.690027458055853, -9.774841271284185, -4.655129149820061, 9.254352888678262, 5.368569472358651, -2.3133357123773424, -8.058259813492281, 4.395241854340837, 1.691131349687744, -6.092945368056382, -6.1463949701497445, 2.791682942332015, 9.875774993205955, -7.830887106821091, 4.194232103705023, 4.565831617154554, 7.98041931760579, 0.415520811699885, 8.244372761558438, -9.140762884416851, -3.707894353618773, -4.485137995421324, 3.3460924494034128, -3.595748346934837, -8.032108374736875, -7.8017694487816485, 4.500916463829084, -7.549010498343868, -5.545963111260017, 7.284710541856253, 8.797485071093703, -7.384039065105039, 7.185817424766082, 5.229124889533201, -9.817274013783399, -3.2470229781227093, 8.316888325551602, -1.9233687562291184, 9.509523595529657, 7.266559762181316, 0.6266841158035277, 4.916262787699868, -1.6490709192267499, 4.989942120024512, 0.7088127386764747, -8.48890639165339, -8.197547787187602, -9.532662939583181, 5.188104637981416, -6.359989177315592, -3.743135811579778, -2.1257486193526587, 1.0444993161309064, 2.2055980821118677, -5.581565189323355, 4.501410390982928, 0.9170607716796741, -6.7677697310308655, -6.689811080993162, 9.83526076867858, -0.8793582689935384, -2.912135128426341, -6.223478605048016, 0.9052548745055393, 8.641553637556314, 0.8282092307996329, -7.419193129288983, -2.8327161429149728, 5.427629288711053, 1.0586752185949528, 8.577731660503357, 0.745557064942993, 6.486362436035449, 5.070266451927669, 5.155552886736103, -4.416281825977486, -3.05617858538403, -4.645063149325647, -0.44168993758791864, 0.3371391713259069, -6.600923205941729, 8.483758809752118, 6.293107192970428, -9.163028729455007, 9.517013007361864, 3.192386247733232, 0.14572995449720594, -3.277259093829201, -4.780398600341506, -6.126277093847796, 4.432350628472664, 3.6751019687102566, -5.382799977307573, -9.317896666945735, -5.757089495650398, 0.9444344083738958, 5.610280474442588, -2.5478364092355132, 6.492375412461641, -7.379621013306412, 9.534191146129622, -7.383116040566453, -0.18902224167143267, -7.692765078587098, -3.25486818792601, -8.750736700600461, 6.491103302748201, -2.6905328303560605, 7.812343337895779, 5.38359557013913, 5.080118754977343, 5.335636195861488, -0.33290579434652656, -6.844207115567098, 5.0790926603510655, -5.607347760922183, 3.8495773663507986, 7.9648199330446054, -4.442077237469566, 2.322719015004493, 8.77041480543534, 0.182016329266105, -5.389317083328753, -2.040931060448292, 3.662790621506744, 9.09268987844193, -4.022547427720946, 9.836061929163176, -7.225912964469026, 9.414202309225018, 1.4053145290552855, 5.328585083732191, 1.8380009133140085, 5.744994469176955, -4.001298140398804, 6.29234074399945, -9.510659509251742, -4.812515543325981, -4.283177514779572, -1.8093327345606873, -1.5995371534549552, 1.8914686230664675, 5.728477286172218, -6.235965102833307, 2.2807179696694604, -6.798210253662655, -0.5624999571600995, -8.946442323026776, 8.29768118168025, -6.178313443568062, 2.649516345206475, 2.0147794654517384, 1.4723537763458552, -9.157013428262072, -6.3781552822919885, -1.423617704983167, -6.453973009912641, 7.68080817041924, 9.035739543648702, -4.330298953232187, 7.346134895277071, -0.5343400179603108, 5.3712980178620295, 4.043637166413081, -8.518839420207954, 8.897124279553957, -7.734796019032215, 5.593558741826181, 8.680297622668913, 2.4843734855057704, 4.748613844535575, -5.813155399766465, 3.180955829713799, -3.7274217711551705, 1.1092999496450417, -0.6679882634363246, -3.691865876544016, 5.779116260105944, 0.11600816952435089, 8.354920316239458, 8.34829152977533, 8.388087196593968, 2.6464593513055057, -0.5311632866039151, -7.656562058783192, -3.1123110281066735, -8.880297772006456, -4.590337194675131, -3.9432605934884, -1.4793885381564564, -4.091138175175026, 3.4412462675479, 3.151636919047773, -5.209833786375134, 4.182222264643386, -3.6283784544296687, -5.621802813670715, 3.1993725578971244, -3.091372926814824, 2.599510086997004, 6.689693239626699, 8.742301712331717, -9.433058576985863, -3.5366008639306994, 4.378912133733227, 0.47828267680259984, -1.8624244866041053, -5.433216640652199, -4.802860540757128, 4.620790839543661, 0.826668828924376, 4.253630681104511, 3.2159346297581806, -6.501136784973866, 3.2578494192321887, 7.327272494894977, 4.261165631407053, -2.636165202132519, -0.666999993790709, 0.00964623286372479, 0.7857531863212905, 0.2189985517548365, 0.41313289869201064, -1.88059640187622, -5.040564430239202, -6.7048927082232606, 6.064009907032762, -2.5868875991005496, 6.56187317466966, -1.2070054345955477, 7.856357237123696, 3.7776914339411167, 8.318865685090827, -1.5882393239611918, 5.228257471112842, -1.3677969207616503, -0.5132243362623186, -6.514245421779448, 3.7445691614141836, 0.9898127506906658, -6.293195710190891, 3.385733534409553, 5.779579659334939, 8.279511452376497, 8.188284886578153, -4.8099143363905466, -9.370467661610032, 6.906933674873109, 4.1612327350297775, -3.5706030121968464, 6.609195126760522, 5.773771474809726, -2.8427489430402346, 9.357057118537998, -9.863474373442525, 1.0197335058861494, 0.8919705282796926, -1.1948339978942624, 3.0429326435871253, 7.364130211893421, -5.985489364595836, -0.6047736907757013, -0.12178378114308508, -5.75441127697003, 8.170105109125274, 1.4502335603282184, 3.871175414283755, 1.9479811443875548, 7.2598798657710795, -7.920477267186907, 4.4217864959661135, 0.8736073487194354, 9.167637526468258, 9.626546326115214, -6.226012672946995, -4.700199855343328, 4.723709818640586, -4.519881353369433, -9.899800761962096, 1.4320640798243005, -8.744699655018973, 2.0471402396603224, 5.410850312251242, 4.305824546470397, -0.5891953653306263, 4.579965135403704, 9.451734745910368, 4.582055991803454, -7.961854835458302, 1.401007058379939, -8.183136363828329, 0.1618371841201789, -4.6727848100283165, 5.953787462967934, -6.837398095389031, 3.4940605199190333, -5.887080743954556, -7.2741414111776255, -1.1749032387029672, 8.14925483912399, 8.477684331061567, -3.6424578150624036, 3.231467415194926, 7.48852147292088, 3.3624352771703787, 4.6917275456765655, 0.5387125667212622, -4.49940502917203, -8.377611720302689, 5.481866457007776, 7.954415913767573, 6.457850637476149, -1.677181994723945, -0.7850558801523366, 5.266428076967351, -1.2317011555396427, -0.9104067099878819, 1.2193643468933484, -1.9116553789810187, -7.722494062576324, -7.65458921303223, 7.355281057317153, 2.349566107520861, 2.653541913359213, -6.735426823153901, 6.128526889511658, -3.2104979530864703, 1.5431196317784686, 2.297174161552359, -4.944599185821856, 5.074550611586265, 5.120127365356771, -3.2928058290983175, 2.0517007925936053, -0.7875628194061157, 9.41108636619531, -9.806136948065745, 1.1146503592805814, -0.6974329110110631, -6.8795650597686775, -7.45578560001543, 6.310559851165991, 7.025894370944435, 6.605007461144872, 0.21269279639157368, 0.8436174037077322, -1.5393117622958066, 4.875352030024143, -6.007702515921427, 0.8255140510442445, -2.315481546175362, -4.271476352194341, -2.1407641096196013, -7.983129645015568, 0.6665662013563924, -9.841732105659432, -6.296964762978305, 6.101842880793779, -4.103310997798482, -5.89973914889325, -3.694316030325984, -9.90451246237457, 1.1117099008757876, 7.2856206692600445, 2.40292623279635, -5.05760970250231, -8.130511264087623, -7.268067278320711, -8.881513703291793, 3.7252526315359695, -4.6344727464170665, -0.8511105328416448, -0.2718971899722824, -9.211060090095591, -9.19963879096848, -8.890952890940806, -2.167599316303404, -0.1972716436918116, -4.07329307427881, -3.1707519451733983, 2.661916483572133, 3.123849740389499, 1.3406188127775138, 9.292651540785403, -2.997895631576548, -1.625714179777372, 7.370294959697276, 4.829386918077137, 4.421397920631115, 3.3062118637729014, 9.734948849521835, -6.460977312591087, 1.7561946630480723, 0.03346156789395849, -6.629048923985666, -4.753435609210166, -4.204492437600842, 1.8860877753100986, -9.439060561787347, 1.6474523379588017, -9.015871883917008, -6.264237246964168, -0.43497909989601524, -2.211312555979763, -5.184223682037388, -1.4444251546690072, -6.060183299996218, 4.225466912679847, -7.677557931583216, -0.05584260128378027, -7.435841410225901, 6.962289997278049, -2.4086879476187484, 9.188502493936085, 8.256668227424864, 4.803525446442322, -8.51103137614017, -6.749498385911464, -9.870480095139307, -4.6392096932294695, 4.8526162162150115, -3.96901934961825, 1.727578387152107, 9.228323067358566, -7.234337167580394, -2.627965393337237, -4.820748721015688, -3.6378725112428034, -8.145641696279405, -6.104527178952148, 2.1299848537473505, -4.856421616237112, 5.7239024004864305, -7.228163060961419, 2.5993067254180744, 3.3052138945569283, 9.780984535114555, 5.5357972726287485, -2.3507128223565, 5.139028161324919, 7.350697987881141, 9.536811886742726, -2.779531829983224, -8.910504198691811, -6.911984796079118, 0.18115327021990169, 7.452823175335194, 9.42592100957134, 0.06269959454975194, -9.533631352033346, 3.042836440330305, 3.9052171715023682, 1.759818286791738, 6.13356425710937, 6.550385465890852, 5.571472054455915, -1.0595879068228182, 9.533688664706265, -3.3172038375750486, 5.01353502439456, 4.7356126750747976, 3.9127277543743375, 4.92092615024459, 3.638912872169037, -1.941560310203723, -1.9726138764827468, 4.5722606697084345, -7.1811503529764975, -1.5049475062288487, -4.584831878788602, -5.76540152834724, -8.2182943260658, 8.151364423659814, 7.217936468043934, 3.737642842661158, -8.013603862773536, 4.994615475751456, 4.793191072510828, 7.676583030287787, 4.4407292063445745, -7.571053678601936, 2.8886080871674285, -6.171011737886358, 8.144278241483956, -6.997269294139306, 2.526747420504245, -1.8913823419094662, -1.1808464605353581, 4.335247241736532, -9.728077900931698, 1.32571142078244, -3.1937680668244983, 5.220947215288135, -8.33492366824171, -0.9704216516565154, -7.496586926613795, -8.098283247937225, -5.637828564693972, 0.8499337748625173, 1.5876990499567771, 5.4756565266682, -0.4583098210623824, 4.542503158878443, -3.564495042624136, -8.93860694425011, -3.090303582333087, 2.200855490883523, 0.997314354655348, 5.394293401183887, -8.894550048836551, -3.9687709843224317, 5.438199051049535, -7.947480803873804, -7.958903150502712, -0.21213035609226338, 9.4691160272587, 5.616648083487096, -1.16690976694969, 3.0104748364794798, -5.069594858650593, -4.065188365792314, -8.317739057437484, 3.23393193747847, -2.859492000137429, -4.802250843946005, -8.051582853536987, 2.109600061550964, 0.20008471699453523, -7.915064679774579, -1.9706162705574926, -5.532377307528023, -6.3810417083041004, 7.95241011100509, -5.0611288518251225, 7.3233243744937795, -5.394960771659245, -5.3063516113847875, 6.544048764963886, -7.957457441314178, -1.063971378633532, 9.9036289389413, 9.926996901374679, 9.36103544067565, 4.8753723527169335, 2.8657948726515734, -3.504543304459604, 5.879716585626262, 1.7567613235761854, 5.580464935851525, 1.2120428628461326, -1.457345721694594, 3.077440317609561, 7.732823026467152, -9.743337006378738, -9.14552621337506, 2.2173902775280965, 4.093117392246787, 5.1669545759216575, -6.466925557471173, -0.6671141709745232, 6.242198032024348, 4.906946471677662, 0.6212247878663568, 4.338708353127235, -2.556872679721687, -3.859591889057315, -1.9948313380440474, 7.827387358105934, 6.966573669492266, -3.2836161060158675, -0.06879278635794073, 9.241175801730353, -9.781839012971101, 2.8686315874518336, 2.755899662750263, 7.508416576838464, -7.45875776702661, -8.502376736893966, 1.4945677485235258, -5.953913620256877, -8.488822437546427, 3.6155372824207, 9.529508873769988, 2.0637931234213305, -7.2810065222627385, -5.94835700379678, 7.8889989080325655, -2.248291092743173, -1.7782581171835883, 9.773645573734164, 8.968461275753373, 8.648820137625755, 9.44325407661395, -8.419950478420686, -2.644796749044054, -1.832578395895064, 6.180901374549396, 1.2447930267978435, -3.86373089600246, 3.2661237571163966, -7.612606208675244, 4.43923778805398, 8.635408667005734, -0.6268263045035276, -4.426669280266231, 3.4166348087029945, 8.856435164228099, -0.2497782075129269, -5.446906765151686, -3.6284127127052184, -2.8909866197554805, -7.95384176115949, -5.691361076885038, -2.7001682289862616, 0.0037858582364478366, 1.0302813558187225, 7.158419004493425, -9.41573983922831, 5.795433543513752, -0.9030788143599882, -8.09396515164318, -0.42666182399553954, -0.042198263705843786, -9.540321660221323, 5.889327053027614, 9.724242348809373, -4.01379555894062, 8.28973286689611, -8.438068304355753, -3.8945651846455487, -5.149078410096061, 9.532239679670159, -3.387880977432676, 4.204792508205713, 0.02363154139347401, 1.627933085700601, -7.043262783264086, 8.747323641852681, -2.6249781776085257, 5.673834058978084, -7.404799040780119, -4.339121019641743, 9.771073340608815, -4.1117473960364475, -9.172299501063964, -2.8203605481043814, -3.177648707428289, 0.9059184115278782, 0.8264661534744029, -4.966086012913912, 0.7359466302370734, -1.6946704083624269, -6.622051107696761, -8.164152383402513, -1.0664312042663777, 2.395923625431884, 4.785369176427256, 5.834038996719315, -7.110096041339224, 9.754787372442504, -3.310177978388311, -6.707878026465899, 1.8258149216246018, 7.736047033496622, -2.748446572859324, 2.9554759959772348, 4.641896262445478, -0.051622812502071014, 0.5121046502930433, -8.817945215851438, -9.104990976257683, 5.915489834428055, -9.308147171427088, -8.185017309388513, -2.1153464284811463, -3.3273434508490567]
BIASES_LIST = [4.256831050350572, 5.375006345480189, 2.5311359637527993, -0.9041038232992094, -2.5130395483874572, 9.01678561844236, 9.84009930197309, -9.07032442956674, -0.06569548887626553, -2.6424926326423215, -1.2640444366719166, 5.824597937189955, 5.0680560322845345, -7.939026800922189, 1.940090150535866, 7.724634379975775, 0.8179791381007799, 1.2401732680732547, 9.570373158090685, 3.3187954725951947, 8.33344815454167, -4.515801883351713, 9.898925558848283, -9.143303800538195, 4.8573816759712685, 7.947588746639859, -2.6249951054069864, 4.016133617142719, 9.378270464433648, -1.1391176682323838, 6.660847785222167, 6.6980241024592715, 9.423470071232313, -5.905405574639979, 0.1592725618316333, -4.527623797667653]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

