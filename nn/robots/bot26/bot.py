import random
import math

WEIGHT_LIST = [-6.579593015777441, -7.993713030708037, -3.670904617826194, 4.764271223157834, -0.9997029677955851, 0.20991367560717578, -4.982946907099266, 9.308871696060372, 4.3556128786256885, 0.776539434434671, 1.5445365921036611, -1.6550464151741124, 2.289538230320691, -9.447556318072465, 6.0575834607892105, -2.1364141451353946, 2.533540189741842, 0.9597589503705457, -6.407638248838044, -0.41192330790760856, -1.1203452068017903, 0.21680111407947855, -6.283099408453941, -6.263418461633816, 0.5118126538591827, -1.7673594157585661, 3.2660956838711552, 0.08474745084064139, -4.299070839565109, -2.503150544455286, 1.589898864598391, -7.665701894477173, 7.920019552311629, -2.71767538422925, 4.2616330115127425, -9.146655022082923, 8.933310799730478, 8.973900128145374, 9.213906655119718, 7.941173828783722, 9.18808886547551, -1.543165213857396, 2.1486828646625433, -9.09114947745451, -2.4702260795555393, 5.367410500609216, 2.510266552036672, -0.30822523723725403, -0.3846106730587131, -6.565563297726955, 4.593359887474373, -9.459588837459362, -2.4673546852102675, 1.59980645276457, 8.909695761496359, 6.059165437076214, 4.955555922711545, 0.8073627815788207, 9.880541490630545, 3.892809312615169, -0.9165845623198603, -5.008399344369085, -6.672297414131938, 9.251149261079657, 0.8103915731917155, -5.782233661842091, -0.8543854837617104, 9.306130307200977, -3.677799974255109, 2.0572309148619983, -8.235359908744151, 8.788209623149989, 2.1772501045461095, -9.372421180560293, 7.038484583721672, -2.348817528667226, 0.3992418970028986, -0.8894681130784594, 2.955140526129414, -7.0579857178022305, -4.04540380123729, 6.01749038023377, -0.7302109785834041, -9.095774165301494, 0.8459518733293194, 9.141941562514905, -0.05943561566201616, -3.9789348882022857, 6.744549145995592, -7.709021879095612, -9.964570759537272, 8.575245491270877, 7.846339882688913, -3.7111885089071794, -5.127147662827025, -4.236767102877154, -8.843063387575414, -6.273769705764174, -0.5444245336382263, 3.469593474045638, 3.949525220197941, 9.489190559372652, 8.7532236988948, -1.4218051774600617, -1.305540046896816, 9.384589151041837, 2.647736015397781, 7.8241474410190435, 7.838065169647031, -7.503679253847437, -1.2885469913096692, 1.6811509552087518, 2.518687026346649, 9.128689505005866, 1.375609871902185, -0.14296219633114227, 6.618745008921309, -6.545098283930368, -3.8010980673108623, -5.108275441736216, -7.667021098498528, 5.982771073104892, 1.6301714354816923, -0.39938186627354, 9.309210404405949, -4.903078585460818, -5.92798816747353, -0.8962207825187374, -8.604729845028704, -3.329743594921424, -8.341682472873286, -9.552473032413584, 3.7113993434172503, 1.9848436017948359, 5.287756304612671, -7.3586175258022335, 6.992476196685487, -5.274351397953854, -2.8371275237631766, -9.693137429198169, -5.929622466512717, 6.608519527271881, 0.2688197479748222, 4.797879563091193, -7.095784883445024, -9.800926849346837, -8.96751688750305, 2.556777758665735, -7.651352765461523, -0.5243696541946079, -9.582488882875364, 0.4731582726531247, -2.7140251266679787, -4.5846233134629255, 4.431507054114201, 7.517100600383785, -6.7034575540764685, -2.41254501577556, 9.11688939213439, -9.814355261493692, 8.119347410573788, 5.827101289074573, -2.243427503859796, 8.40114821788628, 8.166087089070757, -9.233702713455106, 2.6687456327656616, 7.682930600349927, -3.1582121657215474, 5.521230939677908, -4.80633625596862, 8.303641449988774, 4.785868034383755, 1.6419138093998882, 0.996140400919101, -8.067631809277959, 3.1122550149483157, -5.249232935273005, -2.737816661293497, -9.791244527575984, -0.9449994832451445, -4.305401078590696, 9.532905996425065, 3.263256161037752, -4.48315188241075, 9.20227126488863, -4.5034122705301165, -8.327943160918913, 6.637325315297289, 6.062831119531754, -7.158056746035324, 9.966859630029493, -7.047952945717761, 0.9072931395613111, -5.31964546564156, -8.96779078054866, -5.2533334694281875, -0.3048335336609025, -1.7752731091231375, 2.618121472761816, 9.815507118067185, 5.927951559281247, 2.8819584444337885, 9.981789550453236, -9.47303777340303, -4.389264442959114, -7.669013072827275, -5.83234160497212, -5.323794733755475, -6.678958239189821, 3.1481892204398516, -0.9698286779258343, 3.0846335501645132, -8.095602419818213, -6.31796937969801, 8.593650553485968, 4.040910361936232, 4.542167362600821, -3.212953010662507, 5.722556311494278, 0.39773802667010294, -3.657149835045093, 8.545271518377085, -0.1451984641100097, -1.840983213091004, -3.492612053286148, 4.258175400366433, -2.0450440584486262, 3.8346971568208374, 9.080726557366003, -1.955141289799311, -6.64190821597062, 7.727211274114435, 7.729735505869641, 3.166172627265066, 5.317986483831714, -8.31191971046142, 5.578463306917335, -1.540888046508499, -4.339199105419005, -8.301036178170131, -3.1160912760672277, 7.700063878901226, 3.421733860236893, -1.390181540586644, 1.2595618253266583, 4.42880590182385, 9.884449096954825, -1.1873681228286177, -2.9093094116592466, -9.942853470022987, -8.91690077669908, 1.0121752835584203, 2.8620824873821533, -5.44531384135297, 3.3153690688951727, -0.0027750011321607815, -4.902891052267182, -7.060300697295063, -7.550481353018757, 5.176689326525054, -5.20568081911335, -3.5686686782144488, -4.341629450583602, 6.736310974657314, -6.995430549426671, -9.779512259724045, 4.518459450898858, 8.163482446305558, 3.4051028281294364, 6.8707699585632405, -7.254837132788663, 7.15435125876602, 0.32067709920094956, 7.058431735895972, -2.3494102668427974, -8.206904306530706, -6.523811722893882, -2.3140485772773323, -0.6416546447976259, -2.2209509754851613, 4.288035039946671, -5.176056619121288, -7.366942510684218, -6.872186565430363, -4.638911958215417, 5.633354071029453, -1.0930114138164022, 4.769944248835465, -7.701091107674129, -8.489183599684635, -6.894099597907091, -3.567121956002481, -5.241477819773732, 9.51280893764135, -5.704321266132162, 1.2702858892188367, 4.52968770337251, -3.7584226072010285, 8.871292122006587, -8.785208920421448, 2.7140831731939024, -8.320864432143217, -8.256704384963928, -2.2822784821961006, 9.774229742706247, 3.201567095533761, -6.299491407001396, 4.8552425377656245, -0.043143309636565874, -2.75972850818645, -9.994543829999161, 2.38741211876086, -2.3172497627162914, -7.881355492313979, -4.313749599488633, -3.5860731869782843, 7.29377901390513, 5.936638093010615, -7.106521590932607, 7.101626744465687, -3.945845277018776, 6.897220222883565, 9.863241654741234, -1.120790603372635, -2.641654957854451, -1.7874874281894808, -0.7184176082752778, -1.8203402248225586, -1.0473155698244447, 3.987694394416879, 9.423623825567937, 7.198291071405901, -0.4095437132518054, -2.3362299530011876, 4.033046647929474, -0.8625845893744994, -7.8753512045798875, -6.026892633158303, -9.71799751063819, 5.3027697368430715, 9.720493802563638, -1.4806281262509362, 7.543633984570562, -5.536288253508825, 4.929152562006804, -9.759555662716476, -4.885638196886646, 0.6072883522792552, -0.29471907143643783, -5.251721634550757, 4.787842671703968, -1.882282705500696, -1.4346876968467335, -6.921612935706369, -6.018088386584712, 6.491501376576785, -1.6415815032959138, -9.983411326578722, -9.689629069688987, -0.3608894778023579, 5.151483950493496, 1.7855002907770725, 6.787079146176971, -0.17559013108297705, 7.725500588355612, -2.5031488964384536, -1.9753484282745664, -9.65574904927973, 2.091938674266345, 0.8599154589538323, 6.638768473048128, -8.31717242151629, -3.833203634298094, 7.0498420535897, 4.5074915430085145, -2.6845214303368925, -7.873498068218616, -5.305062498228617, -8.76540836342716, -7.577967453245423, 3.9404921482905397, -1.3764419534559558, -0.9796623911682367, 3.2783215764831937, -6.953895095819595, 3.437379087679709, 7.257694938024649, 4.093208066286362, 8.863142445289093, 1.2315184990762873, 5.5700856755508426, 0.8774139266370966, -5.557548583878029, -5.139123575579731, 1.61934424818452, -1.023412696539518, 8.574983832714466, -0.9447498302966437, -5.187524416207701, -2.017447099135725, 2.263141546120096, 8.437493946431868, 3.8529969926243943, -6.995864437063258, 0.48860175431242503, -0.8417048902539381, 7.011962537322791, -7.081116020623368, -5.718341367767166, -8.505980426129174, 0.4218053646557358, -5.242550012912512, 7.724053110848448, 6.402566466476479, 8.617472240948175, -8.410910967840355, 6.419538093934452, -1.1234284216257748, 0.7912742364284959, -3.681782988408491, 0.3743182548846846, -8.889753626878916, -1.3925716977565479, 9.968996734626835, 5.398794865603591, -1.8494337461509165, -3.3624961182441293, -0.9628647118209361, -9.76742388953257, 0.2399061619009668, 0.9284699556932381, 0.8594451872703246, 0.6897725909968884, 9.221266823244974, 1.471517230831875, 2.4658199981338633, -5.254597423692664, -0.20058645327319624, 2.3671028643237193, -8.536901729028623, -8.715931005761423, 7.965340259680431, 6.080294023613874, 6.374316204512599, -0.7766775993733983, -3.8152880073554325, 1.4260704684011252, 6.7314619258857995, -6.236906899910116, -4.354932986766462, -2.585678006163848, 5.947091867611549, 3.777901062299856, 5.940109785733004, 8.671342108853977, -6.528856932347528, -9.522028910564027, 1.0168268213624838, -3.029686512796335, -2.56555340484387, 1.6766238153219142, 4.921238813209914, 6.7910928328159486, -0.8104849627816986, 3.5328142431306944, 3.484906153445202, 2.133833001181669, -6.087635436321255, 3.708993631758677, -7.092394193061448, -8.281778285640284, -6.901057076083785, 1.058760082493805, 1.8414710132206125, -6.4518157861769465, -1.9563767063425495, 2.2707259044367145, -8.846989174826037, -7.866477971014881, 1.0445922095859608, 9.33945242748836, 4.511999057456816, -0.5238249768562842, 2.9822727388381836, -3.7345848272036015, -7.920811681717472, -9.449309118047914, -1.3208577733715465, -5.822330689923774, 3.229923671745098, -1.0714025369455413, -0.6165462749342829, 8.605938107647045, -9.437976364900354, 8.509483816939522, -6.525831770440174, 9.53157926315777, 8.348245444841368, -3.529922633976323, -4.616455212462183, 2.7988721673295984, 1.6772555706782946, 3.6854117547466014, -0.4960357811040428, 6.365715101074009, 6.200692058311738, 1.5998772573552227, 7.403447418146669, -5.171630333924893, -4.260928766565462, 7.132946185995799, -2.549985559769894, -8.95136903197641, -4.979628683911201, -9.566153745200683, -0.3526951278773751, -6.1796227596758735, -5.582929172807598, -7.345766323362135, 9.941098682046654, 4.344112819518301, 4.961569983768694, 7.714994709214974, -5.893129702846808, -3.12536237784723, 3.1241663193083653, -2.3663047113103826, -0.56278109472788, -5.1505147252463646, 0.6957904238045707, -7.77848859827674, 3.1751109726022797, -5.283694932623448, -5.386875432875488, -3.2864490324115003, 1.5887265322782778, 1.6863262081018089, 9.652061155614174, -6.516789670737511, -7.619450424745484, -5.887706791368492, 4.416852773382763, -4.333295981622642, 1.9829671632623924, -6.538070337718005, 8.690531414293915, -5.482259077024249, -1.16317445994512, 1.697224959124469, -1.9404281494036795, -0.6667603788480481, 2.218073700672999, 8.373171569267107, 8.799326664430403, 0.27575682178001415, 5.45267950526307, -7.152803821234299, 7.845110113609675, 4.840929322737821, 3.747022726545989, -3.8204032181088854, 5.576642507968517, 5.180619281618146, -0.24057796658566666, 7.592812247649604, 1.51497209204984, 9.28460836614179, -1.6353930035155742, -2.072591347312562, -8.635105829515375, -4.413714600336487, 5.269403429610504, -4.716364636520507, -3.0171599517958425, 6.296301178194863, 0.8885718163664684, -6.0053196893890215, -7.408833013178988, 0.795868808318394, -1.4841435312167466, -3.850689565767855, -9.38559342032869, 0.04858245909211689, 1.039082556152982, 7.645221023916918, -8.496267722361132, 0.18500017965878612, 8.336599004779405, 7.685741199812245, 2.586330406556412, -8.490848081606895, -5.631117634254624, 3.5639208030159146, 3.786420783807518, -6.971783841862695, 3.4861352436827673, 9.57148758798116, 8.347342224524287, -8.626065520038901, 1.4892091792951785, -0.13975825798142338, 7.365475531381726, 6.5407458029649455, 8.77184914623357, -8.309535157465513, -3.516872547064298, -1.3127262011105145, 7.206635151462212, -5.0912668279414275, 1.6576856417010113, -7.976786711259196]
BIASES_LIST = [-9.252907357596705, -9.90633712731267, -0.14060856786237608, 0.7627094168750119, 1.6976977532426485, 7.106577562886848, 6.462238325584533, 0.9856941842849114, -9.225060914960192, -8.23151786702786, 9.181355645742638, -3.520428831475555, 1.6652774793177283, 2.7189713878660697, 3.2267250659691022, 1.2790917538358357, 6.59360969011097, 9.79236110245229, -3.2384004695159385, 3.0011057617813837, -9.210478505830304, -6.241696600886886, -7.904858667479012, -2.3277112507064217, 9.452673746592254, 6.345256004906037, 0.07727233352391849, 0.8783712712726945]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

