import random
import math

WEIGHT_LIST = [2.7801145424410727, -4.056238698897756, -3.5051389915282716, -3.6891414192089877, 1.4891662727769912, -8.484680692288705, 9.40526937308071, 8.782933426198472, -0.5975025350339642, -7.199719065188781, -5.250579731190532, -8.596146031239652, 2.640170405292446, -2.6972178327065794, 8.686834304555706, 7.5492851826255745, 9.787630384060922, 4.149215662318916, 4.500698124566831, 8.848429489718995, -7.336136351204092, -3.2939599108090096, -2.652151419892288, -0.33172377677826326, 8.763438499652707, -7.897641891942855, 0.4368895221555569, -2.9063382603511867, -4.2097026694865525, -2.992747139669012, 1.7704608589512212, -3.2857716584630303, 1.070616077774174, -1.0139059404900141, 8.662639722543254, 3.049194063616543, 3.1914589280037617, 6.039640442530892, 1.0103995209549783, 7.299350040843507, -6.4171817478724735, 4.924691000922987, 2.5119320390709188, 6.775661899021149, -1.5388447022851892, 1.258388794151184, -8.272404522418109, -2.0881367589931425, -4.444882917414949, 6.422987124255062, 5.847306063304554, -3.973164185458198, -6.003881491613661, -2.3619736259164226, 2.654547804024965, 8.301948863681034, 8.411497508952579, 9.162638971334882, -6.6225698663839205, 7.8979779582706335, -5.948947291076778, 8.38413878555346, -9.636886646490163, -1.139576787488723, 7.499488644933411, -7.8382694450697326, 4.094830691004489, 7.784806444398331, -7.920088164545689, -5.9224974235320875, 1.9943460237692516, 8.01475722752921, -5.448310967615042, 4.907676241127522, 4.171070775742791, 5.278318852701407, -1.9732772070735738, 9.5908233527649, -6.974230877515135, -7.482714664660806, 0.8921143571083974, -9.33064044836624, -7.365196409859331, -5.285507229111874, 5.4409807622962525, -8.950613013446274, 8.78083866875572, 3.2290019841348823, -7.925411339107731, 5.9853704031154855, 8.49649147817776, -7.465113719052969, -5.868046346768796, 6.801331963006454, -1.1178035462819516, 6.490062776859006, -7.776550380845954, 4.548601704238282, -0.9517735091980164, -5.90971681118474, -7.921235813724119, -9.906450942008311, 3.5542015553661805, -9.749771535039038, 2.3300118740042173, 0.2984887652198758, 7.040712164097233, -1.03107395029485, 5.5727196907179355, 4.24618817769062, -1.174601618259528, 5.580829737833854, -1.307241461444427, 3.376890074600521, 9.986041848310663, 2.2811174181562635, -1.0040845871787596, -7.235969273803702, 7.70406410038197, 0.9754653028921396, 6.879577777272928, -3.7886116557451395, -4.299807715499502, -5.293790911857328, -5.655301215792181, 1.7717494346809044, -8.005576651499226, 4.7986585351273305, -1.0681128276136302, 9.109808486677156, -0.11546357546193065, -4.6940099041250605, -5.588725123960865, 0.6629591267075341, -1.3074630005453525, 2.439775962681697, 1.6467586062945845, -7.514033758560088, 3.6906123752116784, -7.856023734819648, 5.949943805283304, -6.06890562492592, -9.536014990166947, 9.634862550696418, 0.8901469197696432, 9.764760608545519, 2.502327140281446, 0.6903834645982077, -3.9447436639535454, 7.127928651709109, 9.848803056961167, -4.002743466201646, -6.13080422764277, 9.675547056699369, -6.770879453568899, 5.795657749412532, 0.3550876666296876, -7.094322578540597, -2.5458623867789587, 5.431743979897114, -5.2287714274419805, 5.364776555592572, 5.152878742121974, 8.650034969669814, -0.07710851971311783, 4.713843928880742, -9.171224044217908, -9.67456354878813, 1.5982880602670555, -8.416572878658261, -8.055911625635655, -7.233197512183502, 1.1899323084816142, 3.735509673086149, -9.715785201740982, -1.2930357641843049, 9.87959955117709, 9.83859057772521, -5.000119445011464, -6.626143276246448, -8.938375507424944, 4.453126504040231, 5.605468941767684, -3.1945352162698377, 4.3866378142373215, 8.112528484064477, -9.783099231845366, 1.4819364258680636, 6.557475848920927, 9.776337663885982, 3.4500676461994573, -6.229817703453035, 5.745772457271297, 6.417986287971701, -3.210067271211285, -9.428096104919714, 4.882395658163452, 2.1561586326812545, 5.432775679273567, -9.181922055562913, 5.310427782359577, -5.272964365916111, -9.257109789244737, 5.196539308777124, -5.8326142054321295, 6.392667618006595, -5.535286892872979, 9.017031123404216, 9.11053736580935, 9.946244398905538, -5.4968699685854805, 8.79430571750692, -7.516452804192559, 4.522730202233365, -4.122736693521825, 9.257904056923309, 1.719484649670127, 1.6168811788674535, 2.9407923789111923, -9.867020346410682, 1.27870093233809, 5.49118413147103, 1.2228782161083256, 1.8507084480922487, 7.843975929897951, -8.418591879624962, -2.757206542800379, 4.542590012521725, -3.1095845816668426, 6.825750485143832, 0.2661826583692104, -5.27775658774853, 0.23878368270174732, 0.37365935402328176, 6.24582574765423, 7.624905688996947, 2.287822084322782, -5.6645560211526735, 7.493380509764652, -2.3345646704032674, -3.0919298839824094, 2.2588412195158227, -7.800022681346192, 7.8869114003089855, -5.610431818344146, -9.40443284919753, 0.9660031605914181, 4.217492960405444, 6.390863207643104, 2.781205291516928, -2.926485752994507, -5.493907023822593, 4.715797312202508, 1.9211717735075045, -3.823388319767494, -2.636620100505347, -7.9065707208830265, 6.6240091855155505, -2.7646980435769697, -7.749556662089379, 0.3868053682070922, -7.228483249207063, -6.836841934914018, -6.578491383618392, 3.8856815549916757, -7.771900124359692, 7.583366643377264, 2.5084312541163207, -5.13527599451656, 3.9305829206968212, 6.741644771170925, 5.478535483677483, -1.6480948982660095, 5.858528798578632, -1.7503485933284075, 7.8748404246948525, 5.894547799438337, 8.334900227087047, 3.75762552091196, 4.520097213557115, -6.666068980217377, -6.162453202053236, 2.7748769796073063, 7.302897676247039, 5.722172697973235, -9.12124490353053, 9.891835223540319, -9.654195332584756, 2.3298455988596913, -7.457387804032214, -6.770055986030579, -8.033038508638635, 6.661788689541009, 8.263319443998206, -9.504327176051778, -8.367116668388174, -1.5733994279494272, 2.568912885126597, -7.253236090633754, 9.50297859600284, -0.9145991886104738, -5.5241828875179255, 2.559378599798558, -3.6507927843173027, 6.199956656304046, -0.6126458786521898, 4.709390825632116, 5.019967094319872, 1.6434919644283763, -3.5077860735029365, 6.869002401302282, 4.453266264627619, 6.996997071322237, 1.1958999683264455, -9.875371808263322, -8.458378091734724, 6.35764313569139, -4.864121137469315, 0.7474781205661536, 9.812742507324824, -4.026963233508278, 2.4906147962740874, 9.632128010364443, -8.493930954268556, 6.403347735693458, -0.8890875032969809, 3.427412987004459, -1.2619632617712302, -7.048911458944382, -6.724486157976946, -7.3289328170212205, -5.39790006512304, 6.255303361574221, -6.320595641306821, -1.000841044504842, 0.07620329124282677, -9.353585816230204, -0.4384911932834967, -0.09360609987780322, 3.453995815931636, -2.2691601558019308, 6.79073286002162, -5.755857031605531, 6.5700831384179885, 6.890437440122163, 7.37236081943632, -6.222730100115747, -6.581777679080247, 5.914610281565395, 3.317425238025585, 5.551372133546732, 5.276072393605041, -8.513014319357552, 3.1897863268288233, 7.728839822005007, 4.752344887385851, 1.908503120494025, 0.1573643991549325, 9.092550755854734, 8.383211630919035, 2.453133862366599, 5.817409284574778, -9.086553779373661, 6.37211909176343, -2.141478976476165, -0.8689880888104451, 3.180601090527727, 1.5467138516521501, 1.5269313470665367, -0.4618243596121765, 0.8234660663902744, 2.7816408468624925, 1.381579744500712, -6.548788663830245, -4.832104014444161, 4.592825870424406, 0.8775440788418454, 6.1030406975333165, 5.88199957277917, -1.5111057893715198, 1.6617986135002223, -4.572777843173192, -0.3073013785254659, 5.323254591953457, -8.73459215485642, -9.404499258808613, -6.500529762950455, -1.4885411508877073, 5.615649540056175, 4.9106395395215525, -8.039375050628264, 7.328728345391784, -0.9777118286744972, -7.1587536751209235, -3.796485343259686, 1.3477598822599273, -1.241994890225186, 4.716660712063669, -4.126932063544142, -0.7424913309048602, -7.442090427991587, 4.179089821464563, -3.119377515671866, 7.937045398375126, -2.8144765081499674, 1.0548153659738624, -1.3235886076199463, -6.423320510544435, -1.929310291858851, 8.824767655255581, 6.196143432668567, 3.7501105756384376, -9.613232108167654, -9.129028398893471, -1.9531297461716175, -2.5926122862783485, 2.260378006724636, -7.488121773819509, -4.937833113365286, 9.278089733992744, -7.516367143248404, -8.316151489072556, -3.856780837352039, -8.72242120565315, 6.206284233830633, 5.279310913245045, 4.738821046642537, -9.775682601222226, 4.058625754822572, -0.87470615432823, -6.53262620128328, 6.520400556082542, -0.26340439641349356, -1.7693666557120196, 3.4168815215156734, 1.556391791712258, 3.822078898701612, 6.341847968465899, 6.0513860738817336, 7.288936327295314, 2.090137733343118, 2.661147473762714, -8.561362784905665, -7.816917068085624, -4.844044961314664, 4.002970171920513, -2.7030334493163943, 4.654266308592309, 4.3465476976543105, 9.88125518457321, -9.207821625395898, 7.965103418992893, -7.23805905008116, -3.5892499062787175, -4.806500634786612, 9.828555145443584, -7.978144476733666, 3.155252640606898, 0.477595665932677, 5.056850432710451, 5.217048044849053, -7.224156097752816, 9.954495278160667, 6.910782713594429, -4.057657352558746, -9.027029908697665, 1.701884814338495, -3.417111215638058, 7.598852970640056, -4.292318922734967, -7.691843000802949, -4.59045018646256, 9.685162481448316, 3.773879587605986, 2.76382803296263, 2.134382583897068, 7.105567302936073, -7.128848698977057, -8.86112232401187, 0.7686148487863065, 8.392458924787004, 5.547407768085392, 5.9328012627416715, -1.947405116347543, 0.6253441783020826, 1.2599801729959932, -1.8649281257286265, -1.6528768937424942, 2.05332916803237, 0.6736009605752109, -3.2251180176175698, -3.7694219197314194, -6.962797771570896, -5.55681518071639, 2.040558955318607, -0.9962864279963153, -9.43573912873273, -0.6213005869618389, 7.085333884820692, 9.670743021670823, 3.23653187291416, -0.04675051642497152, 6.810439825630809, 8.280282824811867, -9.925021255954467, 4.667479936710674, 8.536480226716574, 2.8884535984947703, 6.854947467230019, -0.9109768798944238, 7.403958510127197, -6.675486093566256, 9.496286301406776, 7.253613015166739, 3.416132754397733, 1.7212892524340777, 9.089392750996591, -4.238758317240996, -5.407761565017005, -4.666700320113229, 0.40651284685121425, 2.329471255590061, -2.6193892928192275, 2.473886479928808, -7.35127495297323, -2.8680601309646754, 8.211120034970179, -7.011545185604273, -8.606371735638952, -0.49990168178103467, 9.255759708209073, 6.780237677845708, -8.831210041841114, -5.621919548679393, -4.294911537701596, 3.6436196497772926, -9.410371139855107, 3.8067840044543857, 9.065030202780878, -3.3375827958959565, -0.16927847503916382, -3.846650646798011, -8.58477895411945, -0.6957965211198207, 4.076517773947796, 1.0818322596553536, 7.909897791995782, -3.9313273249796925, -4.005112908838124, -9.476626471782454, 7.097460042456397, -1.1757030673734477, -8.210858750039101, 1.9114189184913162, 4.572865681976669, -2.542934989191867, 7.448320329886542, -9.50213855171791, -7.953773521371326, 0.13400130736867588, -0.3616481051868803, 4.860278542266055, 0.09792822628289599, -3.782221923400588, -9.185773652794149, 2.4859439698450956, -9.578798203192331, 8.743002971743202, 5.66357338882435, 9.747377816553072, -5.551389691891808, -2.8822287323020586, -7.158774628227373, -2.870475995637607, -9.534321934944721, -8.47408061643563, 7.6927245427508275, 0.31707750037205606, 2.3650922178880425, -7.662615468013261, -2.7731405151402733, 0.42307532055361463, -5.672807206811479, 6.374768007553989, -8.69191819792935, 7.372289076143279, -9.037924289100989, 4.949583963137469, 5.6957916869343315, 1.5823206603186257, 5.881200131233641, -9.31357216374552, 1.2681778127479184, 4.817191686060161, 7.612588780049961, -4.734480459224546, -8.833541027982166, 3.3162582388848367, -7.037010612171411, 0.930373078009012, 3.397681973034846, 1.9040087810502353, -8.31223454008786, -9.495930105018697, -7.845428439134445, 4.379277622212538, -7.25906397524583, 5.240767201308447, -1.267108973701312, -3.8017783892936707, -9.80047137795866, -9.45158943656187, -3.9259458190637853, 3.907937768322064, 6.252353874951854, -4.95211809592734, 8.032360202767595, 3.337189111130767, 8.00214848127495, -1.1746165561035955, 6.756651119523028, -7.166678895402998, -1.1433555734725545, 5.179821281098089, -9.368173064987527, -6.5204307613203465, 8.036036239210166, 4.293621863908065, -4.040844053075365, -1.724497211238372, 6.083061969529034, 4.728911634425387, -4.957530721670684, 8.096937673502609, 3.519273078860701, -7.188261835348535, 3.8038656688109214, 7.330504446931382, 6.02609669768297, -3.502729270707226, -5.7895178510874405, -0.3712239269799955, -3.1570692800725064, 6.881690685875533, -0.1415510396811186, 6.575166621705058, 2.6437294974646868, 3.949551523569381, 2.497635965035494, 5.990854538817292, 5.880765804183232, -6.005226062055764, 7.8878635587316275, 8.903109405985148, -6.25790257434992, -0.9295867092086691, 8.422400529504081, 3.749307632897745, -1.9032780956959492, -5.401651319817984, -5.806700427837994, 8.0961922774075, -9.989035904317252, 4.35301524217984, -7.021761048527844, 3.7686151836453092, -5.75246470198109, 8.800745079962567, 8.847452611856607, -7.980312323816381, 1.8631793949408966, -4.038358057102869, 7.268627564094118, 2.907519778085417, -4.053087984030059, 3.1233280688898297, 4.3259069547877065, 7.0008584005892445, -5.373610267136771, 0.9919352238323658, -0.04457179132296574, 5.0309586797247885, 3.9687251001625885, 8.530733976335572, 7.059161670833841, -6.6457419391542505, 2.2424087781620887, 0.258457180720157, -7.695675623476856, 3.9164063612621103, 6.22186323186661, -7.671407861891439, -7.221153249101762, -8.639873541460997, 1.2428373179912473, 6.977029518884994, 6.34982745900334, 9.674858936692576, -8.418684402489983, -0.7129629053140345, 4.795123876105247, 2.9362379535568017, 8.062305894354726, -7.55313593333547, 9.675253014945298, -6.173176649286496, -8.275540606757168, -8.409015470541444, 6.151686475843647, 6.133208895594247, 0.28335380260131515, 7.2105045756943085, 0.559722789403402, 9.812227090412126, 4.620350298557106, -8.907215326264827, -2.26467379471762, -9.452904973118983, 6.678038564940728, -3.0305604827221, 5.862164133229445, 8.006318596053841, -0.32399759938554773, 3.4785190110666555, -5.582208033757907, -8.759073356163405, -8.952762947887908, 1.765091442290931, 9.53589129302021, 0.4496478381388158, -0.07480194352068104, -3.195641944337291, -0.49586401161975324, -9.501279918781849, -0.890338690619469, -7.990419189264449, 2.9995290023150503, -3.9749945564668288, -0.9597171026388338, -6.319764542826656, -2.3755565325375834, -1.018066934969104, -1.0799766394693826, 9.83536708875414, 4.014073338195967, 1.233115106009052, -2.985078996398487, 9.823131762525957, -1.3000496265917416, -5.8884832267783915, 0.4326421797027322, -7.634501192280618]
BIASES_LIST = [-1.2702210858618592, 3.3934204275509927, -5.619986529068823, -9.79079905604143, 1.319081458920106, 7.45947025467488, 9.920522546098482, -8.446054259245974, -7.149241910928035, 6.950762016879498, -9.030899194592916, 7.727671601302582, -3.2023773114891263, -6.750125087020469, 8.636674027622014, 2.864935525012326, 1.4879242274351014, -6.292254850692885, -1.5506582935628686, 7.030967937126761, -7.206522375938289, -2.8039119313146577, -9.003685316881873, -1.0202217679594394, -8.375836272301626, 9.277256971733529, -8.875670853637228, 1.8405852759313959, -5.8213810642170145, -3.291217171358076, -6.208836994458212, -3.285666987433129, 7.416780189013387, -6.988791849101887, 0.08150012158452746, 8.381521874174773]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

