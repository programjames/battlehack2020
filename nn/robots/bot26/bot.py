import random
import math

WEIGHT_LIST = [-5.183364719699021, -4.473876105898215, -7.541496123758242, 4.342557463471275, -6.915334226265665, 2.2651536924545965, 4.919366253496765, 0.6136667325841785, 7.006424488859647, -8.29092780995926, -0.13834522980532427, -8.887802783236152, -2.9957755594799718, 9.162673651068236, 3.3980645900168795, -6.586248639325527, 6.015509455571863, 2.709124415304265, 7.802010442839517, 3.5348068214369714, 6.398195801838511, 8.13292405910045, 7.397583669775678, 4.8195396937497375, 3.860118605051424, -0.61817662639025, -0.7401663565869363, 7.3827691597718825, -6.342976862488543, -8.21404611197724, -6.964909776551853, -7.409511430698701, -9.029792611536312, -1.6850050845898714, -7.907465714430404, 5.443149452067285, 9.648040026645944, 0.4684145442995469, -6.809715234261127, 8.029672426091217, 9.11205450373589, 3.6320196574577324, -6.5831530955368684, -5.172804917054734, -0.3459752637580209, -7.592861554442683, 5.859489924995662, -6.908344253000262, -6.559790899522843, -6.287181178841412, 7.460368797024088, 2.4370635442101136, 7.065926357774529, -7.9434942936250845, -6.055299996921648, 4.998127656862854, 9.725970757616814, -8.37144766337806, 2.3701770704283582, -0.26782968626292103, 5.025789022228256, 9.91765584431111, -3.0363430819426007, 1.4800583043121467, -5.5769340074065425, 8.626811478593993, -9.738627282153676, 0.8569649247098514, -1.158366147784717, -4.864158353216183, 7.516700346695554, 2.591058538357565, 3.719455881977691, -9.065189023687525, -6.7227232387408975, -9.230090410462646, 4.060391962351691, 3.127412537395518, -7.8351988260496785, -9.463901384376111, 6.185792314463988, -7.770724075864646, -6.514597541312295, 0.7971023133510879, 4.208135825748741, 6.675456367190375, -0.720335498855766, -1.395280055172357, 0.4849634265530973, -2.656696764808628, 3.850435594573792, -0.3411859478291408, -0.612004627931162, 3.028109481057415, -9.423078808404117, -5.9818434426679135, 7.238008666828815, 5.038997067545342, 8.638940595807426, -1.0818414961374305, 1.2132114284778677, 8.541116506059158, -8.520218702537699, -7.4539049657643215, 1.634662059352248, -1.7333775203688067, 6.328129774256091, -7.678335806043053, 0.04601732330779029, 0.9295648949310831, -1.4166706697044447, 9.727406463572382, -7.920065053067084, -7.700301284361492, 7.430599256923735, -4.032477175636114, 0.39587685993821253, -7.0640459785274405, 4.001289648900361, -1.1813874349703717, -9.828287875908632, 7.800261983829181, -8.616877326647405, 4.985800018214038, -3.442025379938329, -8.678495390359789, -4.358113764164373, 2.942683443864331, -0.06989532643039098, -4.3237329554710024, 1.7331860410111055, -2.9284213362982765, -8.399243214080007, 3.809631243386935, -7.608242915608634, -5.723782942814031, 8.79497175942014, -0.6813168703082546, -3.57166447584148, 6.781125865108933, 3.363504944226186, -5.867576368910989, 1.860319114696452, 4.868698582344244, -5.0934791507509996, 2.9489829184307084, -1.4462414413121554, 4.396331728937097, 0.06360581870671922, 3.709849612400406, 2.6444105764701575, -1.7265747208676991, -2.5397377309142914, -9.849141086794077, 2.212110912372502, -2.7306919861167067, 5.882826885413223, 7.5319092401597025, -2.5973020349373215, 2.4487996114823147, 7.924189022228067, 9.961949887596681, 2.5489383430371504, -7.188111578662408, 2.171505721010444, 2.8906163833348586, 8.803494320380558, 2.1384012522520983, -6.529514356362993, 3.1915919249436513, 4.56734206351042, 0.5578619325111216, 4.2394961723392015, 7.410643513219728, -0.14096305532402376, 2.9840598527196924, -1.2889234882155272, -3.6393580784373647, 6.938924798669003, 7.650330534005814, -0.15390548384123193, 3.0600772466557444, -6.091115697915033, -4.079815096659349, 5.199904077833695, -7.830984414744597, -5.292442758503122, 2.4260848115503606, 0.20242319299838663, -8.882817088195619, 6.472196221361234, -4.895556328533546, 9.52635022206038, -6.636207817388565, -7.49862350513804, 7.645150893855607, -6.628377293819843, 8.643162049277361, -5.234965132298108, 3.240456447890857, 4.270181335465363, 7.737933543170598, -6.4056687943411506, -0.7992814685267469, -5.614114891345993, 0.08402145884630663, 6.531569268435721, 6.200038301316862, 1.7532571371367247, -4.41577442037193, -1.3922985434488453, -9.35072713786112, -1.8499983913937346, -7.192530652015041, -5.7658512335530325, -8.461251609167778, -7.423717471150422, -5.089934711290002, -4.270583886881935, 7.910145886494643, -6.0742968025936595, -6.551963117716781, 1.5951994731777788, -4.7217880298842925, 0.4220440660279152, -2.822752686662886, 8.866991100608114, 0.6920091257956997, -9.93378703656715, 0.9783872890886318, 3.936299336429263, -7.9792583218943225, -8.661090333427381, -9.268089315031034, 6.337059404128063, 0.7195521266301359, 9.055435096320235, 7.140749169707327, -8.14130991463529, -2.322717193138719, -1.8470777286657984, 1.6962745859905493, -4.452759191912041, 1.956729294432904, 3.6078105248681975, 6.845981643280304, 8.58641372405853, 3.8818106447700735, -5.641626383788112, -9.745086140051423, -4.2439466682005555, -0.21446809631154018, -9.92798926673245, 0.05203107568341814, -1.5331923813586616, 6.047908401815921, 7.028872337934175, -7.135680221493463, -0.8418799436191211, 5.9615212018552395, 1.2294039103922039, 3.129611365056448, 8.553994022664636, -9.41096819034873, -3.5085420536522394, 0.2809074418971349, 5.822207204313729, 7.325942395439174, -2.2069480947827325, 2.060880715086487, -8.866354068011368, -6.902604745420411, 9.485841261867247, 3.5200581415418384, 3.3020683082302433, -1.533715951337749, -1.2925519222123398, 5.992300314711962, 0.7450724672817621, -9.235142325103379, 7.220081482105993, 6.900895954900147, 5.817704943998049, -0.617236922506315, -9.21337152597841, 0.9700313951929047, -6.920797099034188, 6.924675506990173, 5.651158842201287, -3.0683881044091006, -2.65511967276713, -9.278603946308726, -4.8825324768656735, -6.773182064726544, 4.5083781652961115, 9.795161833831017, -3.6776793825237313, 3.2766055779489545, 3.075037484484188, 3.6831628608835167, 6.882465679364557, 0.6763130274424789, -9.682386835365621, 1.4783862483499597, 7.033203853135635, 8.188406345625662, -5.009965367866263, -1.1520110577277585, 5.584371121955286, 2.1334011759962053, 8.912575313525956, -3.2674720779346806, -7.289481474797284, 6.35322246700709, 9.555262012043709, 5.395349171110473, -3.0199251778952245, 1.076834525243477, -4.4931984222522425, -4.584814036329439, 8.589622954385682, -7.435435448418149, 5.9464870415103, 2.7575580412794523, 2.999795976259696, 5.503601175855229, 5.690053908973782, 6.1996729751436845, 4.157334601771582, -9.416744439965703, -7.501256873457831, 6.110549423555543, 5.236257668511005, -2.0480518266025864, -9.810393120602747, -7.137215739258707, -3.4346313288623964, 8.944674483724167, -8.701327519914761, -4.412826896350646, 8.14266961090209, 6.017618131313981, 0.975623203064286, -4.3644594676231785, 9.13509666928013, -7.6154486333619005, 8.889231771431849, 2.890762979079902, 1.8499508590346618, 8.048568175152035, 4.065898043643557, 8.552724614181631, 7.219048126671105, 0.31909075859784686, -9.782272249565828, 7.224772026445251, -0.8915350949980176, -0.4015374241366061, -1.3000425437126744, 0.7694520899758501, 2.067826030253526, -7.312220248040311, -4.544545419618333, -2.027437122636993, 2.7751087916172494, -2.858501707321306, 3.2452671955169876, 6.438502654868643, 2.402007321323371, -5.548457044060577, -4.537968880821442, -1.1258042458923097, 0.44767435415724677, 1.8137238972988001, -0.45572324028811906, 5.668111645890125, 8.27619820360998, -4.9378157655391846, 7.447765359853044, 9.062941547088222, -5.487130096541941, 6.750655029301782, 3.1333762362084787, -2.716508465984255, -4.720191037826591, 5.911535701159611, 0.3390391944440445, 7.488649526900989, 9.139335554991725, 7.223077513545547, -1.189437196409493, -6.7470518409826425, 0.5782255140168875, 2.466307780729622, -4.318588248307565, -3.1476468474775015, -5.22177968387674, 4.633531687318428, 0.26695916239330764, 5.0801927663248225, -1.9087495765536584, 0.9022640903611272, -4.4142485729449366, 2.6232030541957663, -9.341995867657909, 4.165597091485893, -6.28409133267075, -8.051703990683983, -6.318676053682455, 8.652739404475202, 5.528795203853917, -4.963421673137612, -1.5129872536343, 9.077826306613733, 0.6673246683958016, -8.416001769628252, 9.871362142532277, 7.010382294273114, 6.971632376480642, -4.412406440128094, -1.9378200352128871, 9.235106376355063, 6.649590300098968, -6.418955238188535, 4.133843661195797, 9.678269035630834, -9.035362676928218, 8.186977334211829, -8.43860531980967, -6.762350601072056, 8.028599622196467, 8.734936894809863, -2.4193438761485364, 9.11640756307915, 6.662599402972347, -0.897639564974213, -2.1149925723554697, -2.140656156738423, 3.4843565441854825, -0.9241286860248028, -6.244414793153563, -3.9117083077705095, 9.810580529356713, 7.366807207795119, 7.370622135653562, 0.7550192638510307, -7.298852018712941, -7.264551776475785, -9.468655000612795, -9.89911094078555, -8.944236042956042, -0.835262183471297, 3.547310209974178, -8.473151850781203, 5.425744935173801, 5.807848719597137, 5.018571361266904, -9.606473416201913, 3.3388161568166943, -8.06374117429919, -1.6324045668550333, 8.039121876819515, -3.048300760728093, -7.633629714664394, 8.16335889200004, 6.931858625164395, 7.941567941737276, 2.0268292833201667, 0.27053198236188614, 8.73262512387302, -5.752566285899512, -6.244576385427372, 9.07907593745876, -2.4781029883984758, 1.9031494826429967, -9.927303667986731, 9.06416078096958, 0.41831780808910146, 2.9127563245173516, 0.06122756413927455, -1.6840708965898994, -1.1932815441128408, -7.6324897833237415, 7.713000556277759, 5.384237994744073, 5.083451458908897, 4.474946793863133, 6.173026669216217, -8.06094562498008, -0.9177661698253488, 9.067830306456301, -8.629017963845255, -9.456765482979364, 2.6650301407535224, 6.758563027628309, 2.988261826564056, -4.048156288096778, 6.593284789141727, -2.357895082303026, -4.742824835340633, 7.5727178097076155, 3.4147507476459893, -8.844417872028277, 6.115404147058289, 6.066625577405425, -5.641454459573138, 1.8195488508306816, 9.590624673619953, 2.8021691373395026, 7.657074712172292, 5.912232075355124, 3.7127165608503194, -4.4461749914496185, 0.5034164595384283, 3.671355890143639, 9.93316345574658, 3.8549438161154193, 4.852730977812023, 7.806180450159406, 1.3887416392261738, 0.5009078908370022, 4.480096246010913, 1.7934865828355626, 7.314548174126664, -6.837484108902032, 7.539762249844205, -4.36287136707808, -5.789326638447725, 1.6936097802200845, 7.341811486433841, 8.339465597549722, 3.6852106389631665, -2.789783750189825, -3.2814995680560326, -5.695887483038485, -0.08124228244551546, 4.363080225657889, -1.3369174408805922, 0.30939366026247583, 2.100812206988552, 3.784409864477965, 0.5876496039722223, 2.7793570833726466, -4.963079603525413, -8.573278377648236, -3.338673441467672, -2.984299600870064, 4.230143694767394, 0.6755610760597097, -9.614877099196473, 5.259420463300145, 9.329274823148893, -5.329239961450587, -7.604009174638993, -1.1137386602730999, 4.859780254550685, 4.817963591453919, -3.0218999115506806, -8.956698748438086, 8.970892272098673, -3.6937085013136084, 9.990616366544561, -9.497921791514853, 7.2460856857595175, 2.019593421271047, 1.655980763189035, 7.039404061090263, -7.662101626563813, -5.723508653857518, -8.760693852642289, -1.7558350637712667, 4.368269251147749, -2.2923064550240664, -0.06482167730012378, -2.3763088284369616, -9.416961385169756, -8.279606079804632, -4.547337138009926, -3.722679885100866, 9.311773581477187, 9.248542430393847, -8.150848954753613, 6.555608724197455, -3.0201229295119507, 3.8594700553244152, 2.3408719630108603, -0.13218241809488163, -3.156237356561686, 5.109147684106173, -9.657955405068844, 5.904110866210939, 4.575592981471415, -6.596475986542143, 4.74958755994998, -7.218274487846488, 2.2094949788621, 5.072519598700783, 8.565182828732794, -0.5084961918512416, -3.355302624720391, 2.270782690513153, -5.521245702947432, -4.667185739894329, -0.06398668871223023, -2.2320668118188607, 5.133708704552021, 6.160069247306382, -2.8738565120824555, -6.407030702328564, -2.5468414418712086, -7.26882618747368, -6.316647446581809, -8.752633589266107, 5.064940795486972, -3.6508461046251277, -4.576085101020517, 2.209955629115349, -5.911231508254922, -4.94338690613803, 8.426610378043065, 3.9226409297015508, -1.314194283141548, -3.6145862240780025, -7.59085877387067, -1.796307755322255, 5.117191141193091, 9.711756406958848, -5.512606529075943, -8.342222944367883, -5.215968860830613, -0.3574703833797699, 9.04057260280219, -0.43735440752843147, 9.796252408019658, 3.996989817912377, -9.430189104567138, 8.143468418375775, -8.41847166150532, 3.367453286626919, -3.7573124840403764, 2.1348467963513524, 4.675857259116372, -1.2760090904436723, 7.569965794397284, 0.35785800972487536, 6.840283265564075, 0.6748034252281414, 4.004274556096911, 9.28132158626396, -7.570195003434012, -9.653797787544978, -6.373991543075796, 3.362073728445143, 8.083130593864109, -0.0035773066789417385, 7.1007694197460935, -5.735618413122195, -8.134304031850617, 5.6297158019950935, 9.94441340652443, -2.7141714487975444, -9.720430147870854, 8.225207579366849, -0.7661311301286666, 8.43452864006058, -8.882073094696333, -1.2243030195182047, -9.842728203910674, 7.848995544060969, -5.176878691617388, 2.135282267538802, -6.877255197615799, -0.8098076757849633, -1.362357690002142, 9.985904853712999, -4.213348349319157, -8.622289717890778, 8.181558010145515, 0.1728995760141956, 6.0988737203096335, 8.651584032373961, -8.973212584614627, -6.822126728176361, -2.462287940474299, -8.359647575733561, 0.33312748440200224, 3.4478432550414713, 6.22367573493834, -8.692248816183223, -1.3106248566314562, 8.74486829752496, 5.9291748422512836, -9.565614791693823, 4.619981311068635, 4.571551471853752, 5.855970779134626, 7.404044867945846, 2.7742478218336597, 1.1336751415469077, 0.6914011569726632, -6.876000399648925, -5.26719759629046, 5.731093347759979, 9.814164035932556, 3.1283112847655037, 3.235696790092085, -7.055847487735882, 1.8736510401672017, 6.783433638089779, -2.489105813443196, -1.2176024219960588, -1.4844713420275042, 7.299602855609148, -3.5614087111492303, -8.998209781341473, 4.495431837299291, -4.314711015472811, -1.561099571498339, -0.9670098208596727, 9.512741201387303, -7.723828530826296, 1.223584265649576, -6.379295547736577, 0.32934337280945414, -7.682297766103218, -6.233566193846086, 1.5303210013161035, 9.209900654188253, 3.9310966495418462, -2.0844683968055655, 3.656700155539747, 6.588809390523, 6.040884032663449, -7.133553172430731, -9.034853787589334, 1.4220570119353155, 5.214878670872778, 4.003484277982558, 8.931450229973777, -1.7925794788161085, 3.851370865337689, -4.816538761502047, -9.064814357189846, 7.3158614335669085, -9.610160322925164, -7.641012399337804, -7.277882986961142, -5.305939163468487, 0.12051278905262919, 9.277167755396757, 2.78425284365073, -5.4293446254156645]
BIASES_LIST = [-6.262024610994088, 8.498324380355452, 0.041426124715208346, 6.602579717453388, 4.333868788329786, 4.251792186814001, 2.497244004527733, -9.695010915065211, 0.09013456667171305, 4.097761512270408, -5.6076496414639525, 0.38271861260091633, -6.565185049645155, 5.016631159696379, 9.330083962330143, -8.609596505739736, 4.282943228205255, 5.072578183288549, -8.14971190556534, -1.5337353584242983, -6.88757130837121, 3.357214972975001, 8.722263503637183, -5.338446600946856, -9.60694392197317, 4.63208796795757, 3.5614478801348444, -6.214058140621543, 1.3036885418871726, 9.031664760690237, -9.06556505493465, -3.6875782194547657, -5.331926866780696, 0.8130956474883533, 8.348998026717958, 3.0036123973520077]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

