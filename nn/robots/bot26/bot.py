import random
import math

WEIGHT_LIST = [-6.06182699270728, 8.51601906229676, -4.1027338302252225, 7.285072735082224, -2.308099972565789, 8.212693127698959, -8.228487317818953, 0.07450134027013888, 3.802998604516306, -1.969037484984753, -8.777141742730736, 4.378643519703989, -9.917693669156693, -0.6762730832328394, -6.432526641254723, 5.846087473410723, 2.562616305415773, -4.091764936228608, -3.6328467748263904, -3.905428486551463, 4.645366713374086, 3.8290870138922255, 5.484403570624547, 5.374641721779316, 6.622626162729713, -3.5793703644036867, -5.37364550962433, -3.998103531454074, -1.8634125280177365, -1.5437038052958858, -4.6842728317708975, 9.646989508833318, -8.037629557689908, -7.7788201419806065, 2.7022464241389965, 8.591092786889739, 2.6466797168182588, 4.785652319898151, -6.447351936780454, -1.3169856031547127, 9.12031122151745, -0.5921558474523572, 7.308249734164065, -1.1294065027921274, 1.8890139454344794, -6.177337530235754, 5.813107044524363, 3.57901928586244, 9.924332229529604, -5.655257607201016, -5.155039309070455, 9.378590883531604, -1.4180674268027929, 4.583437220421359, 8.85236826852995, -4.0557539645963825, -1.7626489996366814, 9.111997609810576, 1.1796290211854839, -7.5107146695089, -2.0948671496188576, 1.8191409008205284, -5.180272650201056, -9.457522759340149, 9.400203858508949, -6.0045046615811515, 3.6821746011785255, -6.75853581463969, -0.8768421500381329, 5.583356954082351, 9.910490598390652, 3.9188230362035448, -6.231514687895929, -1.2641361248807996, 9.208676802604629, -5.221004055723317, 5.890449088835851, -0.09200534187706566, 3.0089372173318836, 3.908073326064441, -9.769870939750176, -6.010724724078251, -8.471890518724353, 1.878122614376771, -4.587039506336332, 8.529891091876138, -7.398697428855039, -2.026587138410374, -4.100980868493529, 0.42678693858063177, 4.035095952812277, -9.236539412449522, 9.32430825064899, -6.679722067655984, 1.1731661523007357, -5.815669287818754, -2.4558687699864823, 8.512927038648943, -7.540911011945792, -8.198644314975041, -5.794412633156201, 2.278436748082523, 7.428366803882447, 4.2073271672149986, -7.816210140260564, 7.99820505726942, 7.681221875529687, -7.590770479477021, -8.275916458115663, -3.7080391794919842, -1.0883363553802443, -6.299592970962062, 1.3954029402114454, 5.773577019991745, 5.222862397172792, 6.7698846271443465, -7.942275325745776, 2.2963193534928905, 6.61392834859943, -2.3370432369052114, 7.8803871397227105, 1.5559046740162756, 3.1390910047028697, 4.493766895375771, -0.00548618591718153, -8.213995959097872, -3.3565029814704683, -4.915490614215329, 3.3859459391134354, 2.5487068283918113, 7.84144555530429, -4.786953390937796, -3.832146339246907, -6.552554611543318, -2.913002700771898, 6.538129877729588, -6.154267681247029, -0.01040206988932546, 5.591150650042419, -1.4394248053952943, 1.6895485993858355, -5.0515591944960185, 4.054018793004406, -0.33304503604954583, -5.42625401742026, 5.803218373801283, -5.389589793236363, 7.690792062516451, 1.8848031833752277, 8.058861112790503, 2.836571314565436, -1.414765461674218, -8.081496335251014, 5.561073814194671, -6.396664398115172, -6.389913228512212, 1.0920971044695946, -2.3980605559012513, 5.6819419947749505, 1.2371790613586775, 4.044382885549753, 0.1451053475941393, 4.267307031978227, -5.031261619362633, 8.95028569605969, -2.0773814104982087, 3.774577605736555, 2.4476882701142717, 5.173005874250842, -1.8045372223275642, 8.187239190251109, -8.59444943670251, 3.9033222018593037, 3.7228393128757844, 9.57444318565772, 8.725394018736882, 6.146921379219286, 6.367903126791074, 7.630260508202607, -5.56017736119454, 8.793444412766288, 6.7451912357505215, 3.263502293951664, -1.7186076099128744, -8.64551765281117, 7.156731715442628, 5.375661683942553, 4.807806026554822, -4.623230292411085, 2.8455917290787447, -1.9556440600129488, -3.094725989209463, -6.8072555833980575, 4.8628926001214605, 2.070299574462979, -3.615799235485828, -2.772383805029688, -9.225069192825439, 6.483341132246366, -4.372788446609837, -4.9285637943994764, -8.292897049962278, -2.928455092169619, -9.972508980055393, 7.505405365331214, -4.953435817210581, -6.065448877787219, -5.167415916805805, 8.40096434887786, 2.4911721865288783, -9.667231615077242, -9.29114782307831, -3.6307019516091543, 7.798095662525956, 3.387802229863503, -2.2986767362830207, 4.411362890976244, -6.692433588807479, 0.7636693760550344, -9.312255823645774, 7.805979591104453, 9.267354978046882, 1.59204078205628, -6.014410515120002, -0.4265823932345487, 5.543400196121954, -4.252368721647757, -4.682869151869403, -1.989982253334917, 6.983553150164397, -4.419799266707221, -7.724313666920011, 2.3288156684296517, -9.935446116443014, 2.7357696837943024, -2.8512411747716593, 2.008948475214069, -8.984153332926944, -5.341163720522806, 8.212334003507763, -3.796008343010784, -9.065270567537652, 7.744364387347197, 9.88251270021454, -9.351475075577673, 6.438723915773842, -9.322309692648485, 2.507969708164632, 8.739554416498162, -6.5708454702089325, 3.065267986075945, 8.915682274106253, 2.0711064695816646, 9.535236170580813, -6.7400297604979915, -2.2932630169099504, 1.1654549432837094, 5.864912298281382, 0.9062238149322237, -0.17824990529124918, 1.046319129307724, 9.019201683490213, -5.617257435229288, 5.326201220045149, -2.430097858735561, -7.77197504933455, 0.7619779971546734, -7.301634755197092, 1.2658788029652968, 4.782544526017807, -0.589365691085213, -2.9953857489164886, 2.2764595195625965, -3.799048357922037, -9.602809640041732, 7.288904956769738, -0.5981890869112334, 2.477530004355126, 3.9648861801108275, 9.099268056685222, -4.200266279770175, -4.766394523795501, -5.212621491191061, -8.799548001146384, -0.6106834741572893, 0.7354618732051659, 6.776269206386459, -7.856834588018941, 8.86356605977701, 2.212275107376181, -7.4889996747592935, -7.552832659761846, 4.121098080057479, 9.048694428981076, -9.99848097777707, -3.369033510983983, 9.225159711770438, -7.8581327181365745, -6.355808403719118, 8.994286766320737, -5.055041359142183, -9.3546475359826, -2.5614408190759796, -3.420667949528495, -6.650162841463256, 1.771159303339294, 9.158272738969504, 5.280295161865782, -7.812278867417717, -1.909905625153561, -4.614937755732214, -3.6195614676691275, 1.0889407049394801, 7.991637334024006, 8.83821920627905, 6.19748697946569, -7.5093079599758905, -1.2122802174751808, 1.5212759976392025, -4.209355728156989, 3.49953866903045, 6.298385139975522, -1.9294500938650554, -2.6709577749462676, -6.753914337632656, -9.803455996107306, -8.278693355120225, 9.993326798090859, -9.086703994645745, 5.606283849709769, -2.123841555534682, -9.802503147565309, -6.925659214780295, 2.294117330068783, 7.287275780699819, -7.4579103399572055, -4.730847351148912, -3.6213029370841987, 8.681763541190374, 0.6820472584286996, 4.830630642488497, 6.241440773672835, 0.21662453080664612, -2.805206567708451, 7.929745226075536, -9.563921944860844, -1.9108574776044502, 2.3346103861415557, 5.796049903307498, -1.1803299536033869, -8.03900167968473, -5.799780262301253, 9.245074100457028, -6.169612303746598, 9.638122496821431, -3.1893262325598464, 1.5790072061431708, -8.365554182240267, -6.54080739443512, 4.235137988727116, -0.8816707231499432, -9.297577689317773, -9.870100656540368, 8.696456610865859, 9.619681470130928, 9.565949773282302, 2.8938248961373354, -7.22829292505309, 6.383083566182677, -5.06007212450694, 5.985228089758612, 2.3132799319297384, 3.6208900902153136, -5.362676922734986, 5.922880128919704, -3.4142499503061297, 9.106005900755974, -3.811317188903523, -1.2674203498529462, -8.39956108269859, 0.865619511016968, -2.5368136631255256, -2.48434628006037, 4.651819473927528, 5.025163374811077, 8.6705537431429, 9.784927315863492, 6.143066224207196, 7.701104552041585, 9.354399772635379, 8.911843181572003, 4.072487459634502, 3.7324633615015763, 5.314148265660407, 1.2351503752276436, -2.424093537277658, 9.239109088469398, 5.314474300591705, -9.222062446625458, -6.563720397939581, -3.8460312538339814, -9.192405537636105, 6.235723917080541, -9.349113511140493, -6.419212190241175, -5.758862856892478, -8.785041223014261, -2.784917177327566, -0.4037808537131742, 3.175342997940149, 4.256962160187163, -1.415860938624764, 6.580491984992758, -9.960588475905535, 6.465622202617624, -3.4587531930283832, 1.4885613170438532, 9.321565811840344, 0.06764493670894112, -5.997129519777893, -9.894043300970283, 2.9996788766851914, -5.249232024912834, 4.98644051851193, 3.784108962807638, 4.387520795180858, -8.622311441789705, 9.617555143996952, 1.344647813743446, -2.6109330735379466, 4.307174454403617, -3.7189909090240647, 7.455299205922575, -4.655651753363936, 1.8817550164925567, 0.8568093602402769, -5.651542426707437, -1.8120597788752857, 0.32353036356003884, 1.6872352602006142, 8.885956163001435, -8.036860149029192, -7.593825644620602, 2.9342179199955716, 3.8952207818786437, 9.197597476072005, -2.0301813944852025, 7.742780673363626, -7.448651542412552, 6.359790593618047, 6.477930920556066, -6.0947140580352315, 1.3154835025043958, -9.71290365180111, 4.25335331753111, 2.6080569026347185, 0.8933802481031101, -8.59746322740726, 9.601732091941997, 8.404455620555346, 3.060154929989805, -0.4584372482250654, 2.175771360867296, -8.345664157821256, 8.596544828302662, -7.288106544866963, 1.824140122403275, -6.393928251569143, 1.9419633828886447, -6.20025787033748, -1.4736364846681305, -2.255408958948304, 5.9465498628634705, 9.081981258468872, 9.731131258655694, 5.055761813708237, -3.457157380140938, -6.45110325919415, -2.747906728106706, 3.812632110585392, -9.707635020336504, 0.5125206931183239, 6.330128977705137, -5.285151504458312, 9.91514897394502, 3.204295586380093, -2.4959444170415495, 6.651202842033946, 1.9364323628836964, 8.833675883354228, 9.981421272283832, 5.043508192735093, -8.358422956863485, -7.604436708134914, 6.64290241164948, -4.390879027600263, 9.625885078765247, -5.729988102403123, -9.833151162195279, 1.6871976068039114, 3.7719382958706333, 2.8543462380720097, 4.456672626223659, 0.2618570527319104, -1.2192335561367162, 0.18472940906611868, 6.190974177175164, -3.93021436411781, 5.939030900084445, -7.253831663626884, -6.737756662559253, -5.406712905470339, 8.307114092954002, 7.55051943550782, -1.432494935062918, -0.942799308889402, -6.475353308564163, 3.671645162396903, 2.177719940311299, 5.363294774298666, 0.7636605749950665, 2.6828693402843626, 2.1841620690689005, 9.506009444804462, 1.4670781674408993, -2.005015125043079, 4.847656850094591, 1.7285345558538587, 7.26846654813869, -9.587661934273598, -0.30473021223849095, 2.753380545403271, -7.669262736308939, 5.697289489305177, 6.487807201825689, 6.558128562327134, 4.273192236099119, -9.84883139276689, -5.154780542727114, -5.245663211300968, 6.335645717319409, 3.324721100697154, -9.62882546698115, 4.460054307761061, -4.528173273947711, 0.5718026501214286, -8.817842121649699, 1.4539214278339543, -7.173042064282775, -4.984786722601859, -1.1925033792622397, 8.402658985993735, -8.178101145557262, 7.132777098919128, -9.671286845644262, 3.0707109295822548, 9.500402023124266, -2.129215784068956, -4.422240441490713, 4.504226123577396, 3.5429906249272456, -7.183052716363165, -2.229353203461657, -5.615012759818978, 2.8209899105168628, 3.930372113416354, 6.636090621255207, -6.248433932606641, -3.2284004203376853, -6.50315851915606, -9.630326369913112, -7.998152813422883, -1.1573104214282601, 8.407908572592032, -2.8650097909494683, -5.737936984082317, 8.683969123910785, -3.4898345554621297, 9.521944893725678, -1.2736388774107326, -7.049103430197555, 0.6171007290483299, -5.357029115103964, 5.908493968426193, 3.759608220362203, -8.144080444621268, 8.074237676556287, 0.5050090423266358, -2.9698868155994766, 4.176510462628272, 8.057261839193963, 9.091889670406673, 3.3927143732089977, -3.862872169354505, -5.3545469988647465, -9.523547514832574, -5.459014617220614, -2.9263151990277336, -0.33507473287543554, -0.36809354731238386, 1.2840010162573083, -4.375363033780033, 2.1406091511429803, 7.083990025011705, 6.3538260100008905, -8.717974504739601, 9.669104428428295, 2.2293949954190335, 3.6631333540867157, 5.12863153714018, 7.451375636531289, 8.154864647177547, -4.59134629845499, -3.8591228656068726, 0.3528137400221869, 4.945581372702945, -4.564774932901587, -6.942518723103119, -2.5036717540307585, -5.305882688260752, 7.548757062607542, 4.45402778303996, -4.02866957893923, -4.4774172982701055, 4.787271556638652, -0.7606861142377053, -9.771441872155222, -8.422937592839496, -8.276036354356792, -5.315122813726276, 1.4681023357764857, -2.5157357935095597, 7.275501913311295, 0.24020553654796117, 7.279400321743871, -3.4831708804296753, -2.215455777289179, -1.1521470020740328, 1.1360627126316132, 2.4172813934988753, -2.746051047787315, -1.0832735842624803, -7.325826609913449, -4.196495209263606, -0.6703822410441074, 4.5847267455177825, 2.544344561801193, -8.529148745525795, 3.1890252416832237, 2.311498194640942, -7.087282316790711, 2.1524688984323674, -8.296949285061872, 0.8376251975022733, 3.498328293031088, -4.061123852405075, 1.8495348334621085, -9.48360217824936, 4.245204799764146, 9.450676709145135, 4.444074144806969, -7.190304121380693, -7.289326603109858, 1.162157206784249, 8.1413112367512, 0.5208878244448627, 4.026778657994541, 2.364027500669197, 6.586681590118719, 6.1764178752206575, 9.590971568075418, 8.009801226408257, 7.016715588271438, -8.081366755980524, -9.308674656009618, 7.2070805238318485, -9.658380752915296, 1.3364301958277167, -3.1203289990302396, -3.9174153777957743, -0.4958868256622502, 5.611252837836535, 1.487110003878552, -0.7289992644006364, -3.96257666632091, -0.7679408670330012, -5.818194219857443, 6.3368201837731135, 4.579310600794512, 5.36033078528067, -6.185431416012239, -4.6644652306901335, 0.01664278626906679, 4.648252974895119, 7.144348038905633, 8.68180797182298, 9.84701066128098, 3.9852019630121216, -0.6293150635601101, 4.714144619597256, -2.7380073774132896, 7.313099343995905, 6.436726854768548, 0.39967323904758345, 5.2190863622484525, 6.235523708675139, -4.7057772812459735, 1.2693742046391598, -1.7247217245412632, 0.6474709539635963, -6.461612315563013, -9.817614599455117, -7.169202306364964, -6.057484286762875, -8.698430934462436, 6.20932495325858, 4.755510391408723, -8.322839433718103, -9.788626495554745, 4.351213070901469, 9.794809108324841, -7.056362670226841, 5.30280981903368, -3.9540829325129696, 5.371303746823166, 8.906356577860887, 2.1634548317638913, 3.9388305501058873, 3.6540180073264477, -8.687561604025976, 3.2068510717229533, -3.7710562222143063, -1.8251332193793708, -0.5263417624989231, -5.79181608837406, 5.4071093068663085, 0.9744160705062104, 3.083350692870365, 9.99331333623379, -1.040861600215635, 8.308686761822923, 3.113413943594402, -8.856568567322666, 2.7308650186204826, -3.897305483613329, -3.7060515221388135, 9.226957964623828, -1.2894799088004234, 1.0689386693872756, 9.11278548016038, -3.043201922937193, -8.685863767060942]
BIASES_LIST = [-5.962600571606762, 4.840752198908731, -4.791883957622193, -8.844261807263674, -2.013900855634507, -9.947733547321766, 9.601701463326052, 1.9858645493752576, -7.477601116697277, -0.2855337207997266, -2.7079625571368204, 9.019594634993531, -1.7956520479451505, 8.920742435007558, -6.134349465756401, -5.500153157396877, 6.728080646201377, 8.005335097197595, -0.15578793634139032, -5.247615585788186, 6.3885340640948165, -4.209648465994526, -3.182810030242482, 9.647740175763388, 8.373892606804795, 1.081725335866519, -6.645091287595579, -9.542054999704616, -5.363375253916962, 1.2057933576717836, -5.508034821527588, 5.793633431631983, 3.3027937065294193, 4.049936459058241, -9.2122032408193, 3.506309836411038]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

