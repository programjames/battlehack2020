import random
import math

WEIGHT_LIST = [6.181005274512167, -3.9967435708687304, -2.2830760348597856, -7.291662626649118, -6.699468863209617, -6.072901525026786, -9.10086882686377, -1.7966426395548716, -6.687387470309143, 1.7653829947226463, -9.899886614905869, 7.743678138975646, 6.063402655044719, 5.560498082129502, -5.736904164260411, 3.1694391033892177, 8.421139342438128, -1.7921078920402387, 1.4053675570409947, 1.7353687165447838, -9.938163408798268, -1.6873025644963278, 6.665165418556146, -2.7387150307763726, -9.479434866132507, 1.988952669224295, -5.010068157686134, -5.417519341492296, -7.043885585191722, 5.825986813312255, 6.060235329316903, 4.6779802776446004, -9.961671603488135, -4.990135427615019, 9.440666491970507, -1.291788875026345, 7.179472061446017, -1.8980912994111048, 8.473634074278596, -6.818227771843466, -7.717773070407421, -0.5203869400204191, -4.1757267988789915, 0.7078388444907429, -5.938214960374017, -0.44528596932370235, -8.81957692213115, 0.8027764142202471, -7.572327815167954, 5.655638626060757, -6.273568460488949, -8.299177609027286, 4.29949042569914, -5.070978628786776, 5.16299168330219, -4.079705912870059, 2.924518084033835, 5.746104641941802, -3.1532398688649987, 0.6568452216571767, -1.8258926397923947, 8.963942772381902, 7.781431120770495, 5.370921721776153, -0.012517181645822717, 4.6248221412821415, -6.1853149723778955, -1.409797361414375, -1.2119043652992652, 5.478760439736698, 6.432358725368044, -1.1138564138128935, -5.03993743744247, -1.7232546038794005, -0.8769337099265293, 3.11714347752779, 3.2288754470725767, 7.666186306359801, -2.6701645254980644, -6.456359245227961, 6.692940731517631, -5.297966099802509, -4.621878913159147, 6.5793282647021165, 0.6872295490250053, 7.048622941647373, -2.3957936359772747, -3.7952365334900424, 8.346737415447855, 0.09991982779176922, 7.720285002681802, -7.163452471871836, 3.0721259826289877, -8.465715837661133, -4.656094620950391, 2.718997254182307, -8.496435385795742, 8.117040690626354, 7.069545139387962, 0.5701899856613082, 1.9501424068804631, -0.043795261888346815, -3.9914999813924856, -4.385877560390123, -1.0442495008142654, 8.982554501235185, 5.538900805457587, 5.18699108687021, -9.695437671059281, -9.078748047740513, -1.1093186250639313, -4.165187899650169, -6.5505572551213165, -5.194908926141855, -0.8077126294672894, 7.836993959034864, 9.772611660841235, -0.5002767792746887, 5.5704070829865575, 9.539760648553926, -1.9107496184361406, 4.865015844368589, -4.588605062583557, 4.438326608764376, -3.9064823027934414, -4.804368479200618, 4.70738077866921, -0.13381726665402738, 5.791735668272242, -6.036075670136687, 7.249422826240814, 4.215710344296657, -3.817921409609366, 2.3037873776930944, 6.303764239059685, 8.443007976650168, 3.30635371863508, 2.6958221426134106, -6.502859530222416, -9.336145841269982, -0.4665992808386914, -0.7111368759249714, -2.8520110267281407, -5.683073115182231, 6.224216005649808, 6.394995581141451, 8.609652024747781, 2.3074430820188034, -4.337823882287548, 8.65271241348761, -0.5226746267290672, 0.9808923778417284, 9.267682744926809, 4.915075399419049, 4.289389399929416, -6.5488260649327135, 7.506340751159733, 6.639120156101853, -6.234465654513068, 3.1760486770784073, 7.528118295350172, -0.6122851170602068, 4.204141359393319, 9.91630661242289, 7.871540792964332, -9.125499537227078, 5.944930746530705, 8.939920460345153, -2.3774315803334156, -2.9779461215539804, -6.775893369059749, -0.656171816526463, 5.261461722076522, -9.561433132071729, 1.49746742838661, 9.48826192823378, -9.524320341449894, 8.13932994716405, 8.835555162837515, 0.5543675915324275, -3.637785779695668, 6.68745148891362, -0.794860141253066, 7.38447957035212, -0.7045982208243409, -0.6167820270441311, 3.2659337852196764, 6.998852174925375, -2.1204044241849473, -0.8096885553041133, -9.66101887480675, 1.167288884636875, -9.848906115775959, 2.0078991940928237, -5.479957358199659, 6.688690950001227, -6.8114949334667285, -2.3145870192609275, 0.03919236006617588, 6.155172935028382, 3.364819949662067, -1.5092014310072912, 3.0654918162449825, 6.330754782895621, -3.1446686166067694, -7.0350875480567225, 5.955626809339062, -1.492978784260064, -4.6068623675046005, 9.914160995190638, 3.236691590801522, 7.955134451924419, 9.050179114728568, -4.476595135429884, -6.965768847475788, -2.5879339792606393, 6.481821455372298, 9.241235338950695, -7.952720334303658, 7.6440297195454505, 4.374676922166804, 1.2115795244214649, -6.063449260831328, 4.020288550562032, 4.811630307310228, -3.2314789183998833, 5.391744525843631, -7.455283032347904, 9.945997442449073, -6.72683362134441, 1.9815528970139589, -8.087608572830362, -9.954911517404081, -3.857452709690145, 1.2934502448057437, 6.376439861765732, 5.89514560696329, -7.49783870511199, 0.8664364863584417, -7.894354633194753, 0.48131443509915073, -1.7469668399123517, 2.602109830416911, 5.905433989818192, 6.170170422390594, 3.591747698198244, 7.36675308825415, -6.605891988564427, 9.979097388830613, -6.22715572312837, 2.3500951158430876, 5.169012385713156, -3.870531664692085, 2.92381873334757, -0.6087690048189067, -1.9870444533797205, 9.641652618967818, 9.425305603422402, 8.452741668777431, 1.8651136589148898, -2.650646466590527, -1.942659709612478, -0.24536104739065223, -9.270355292803774, 7.423854752882907, 2.6988143780083433, -1.1973191975074258, -5.502224769119525, -6.167867842561218, 6.98743571633856, -7.189993540989437, -4.969819017853445, 0.4130058606283633, -7.921868548037363, -5.157057320652139, 2.6164456619948613, -3.8735927908823005, 6.360786146104012, -0.33690765800630373, 8.356459644732286, -4.207373627963628, -5.424018194859537, 1.687241563098084, 4.357401907593459, -2.033221927831434, 7.951490106547439, 6.1219173344167395, 4.045697277979539, -5.572888079346585, -6.549455350833437, 7.780295585356658, -3.51336304347615, 0.7631701062684968, 3.900232069490981, -1.734226793074864, 0.6765753506896459, 8.233416160226028, 1.9952618880124522, 0.29104578403689985, 0.0385739342794178, -5.586453520672476, -8.625981183739828, -2.5018251932224516, -3.6569958499070694, 5.044513274875362, 4.91253404741186, 6.648911988191998, -7.362126560291542, -7.435578069898741, -6.735677693770437, -3.930753660570141, 9.497082480961005, 7.775300749018616, 8.557108948669203, -4.419318569307357, 8.40853581994364, 5.343256476906822, 1.7891859440264302, -2.3518039185884287, -2.5995752093464457, -0.1629058104073895, 2.0671094935967087, 8.149344066527252, -2.8597867186228747, 8.532576408849451, 6.786362521547925, -9.691592435055714, -1.604213677396908, 1.4336886970368656, -0.6044196623096294, -2.21854440820878, 5.505365757958472, -8.448615251051395, 1.669955098712343, 7.90901514327717, 1.6811682428543513, 4.120237976174375, -1.0584740657349379, 8.186502436664085, 2.0018644213212244, -0.9892516031747896, 1.7721505539999924, 5.439664920327662, -2.5169706393830182, -1.412250390588044, -2.9196815516287966, -9.695907354824236, -3.433052523030651, 1.7658762589014039, -2.4758268804822237, -0.006000554768345268, -6.117864380093165, -8.904546993237352, 2.799634576037075, 1.9838809220189653, -2.707711680335356, -4.2911494573467035, 9.776163384779554, 9.100980546337237, 4.9953665706658, 0.39644944956903316, -7.608281682110389, 0.843667606753451, -4.3030326159252414, -3.5923895426326036, -9.505060040040902, -5.705084743877189, -2.8622744100056057, 8.314640065224946, 9.574503764551817, 9.669957572429382, 7.817244899093488, 5.338509411015293, -6.779236386339771, 6.833811363367225, -5.574235498280671, -6.488652377712107, 9.825060593716795, -3.9359003674283244, 0.9644025301118013, 0.9968318646471808, -2.4038832417827276, -2.671244685745786, 3.697828894148101, -6.697877561795904, -4.30439863029002, 2.6669369765128508, -5.048409327855539, -5.882486714295818, -4.404767497675972, 6.532377530463307, -4.71839727467051, 0.3581071152474813, 3.9673101564121716, 7.321014530551999, -5.956681730511944, 1.8834289457783306, 3.2478015906988666, 8.57951646269641, -0.4302786763034323, -3.655899376556895, 6.18224428942122, 1.3656098692682264, 6.196523510105656, -3.4500333104199825, 9.371982950620115, 6.16262606205861, -8.017735473960286, 9.949564471068612, 7.857708469755423, 3.31665237930679, -2.253430614047314, 0.2681120916112807, -9.462276923182277, 7.033989181385817, -2.1341705289799684, 2.715862464749325, -8.90187524429467, -9.131508390213368, 5.3593945254338635, -8.507671954203794, 3.7275281778866933, 5.316503122805576, 5.253853498830921, -8.735264308343702, -9.32727204059718, 2.8317024445232484, 7.582315115096662, -0.5174226329313107, -5.682727920857711, -1.261833636571403, -8.301033100165608, -3.8266434515858716, 2.5470895723492646, -2.625643070653809, 5.286059209298148, -4.137923364489993, -9.565950758805698, -2.8217828564409615, -7.4147236610332, -6.39276032374005, -9.144743502017477, 9.22203247617312, -0.7554151790602326, 3.7779023651950627, 4.504282723475125, 1.3002338265808877, 0.2692442758493456, 5.657737053500913, 0.40838152989127785, 7.243607518202463, 1.7814251384081636, 7.024320948968036, 7.32537837994029, -1.7007239947900672, 6.059532282427277, -6.8992529092694515, 2.299270118807023, 5.433286909689464, -4.692001429288868, -2.137166546447336, -8.926833911325602, -2.4344904743914313, 9.122066846465067, -5.364815250149427, -3.575940311874146, -6.573750662155682, 8.52453659030094, -5.264287962151723, 5.4088474922951235, -8.509552050029242, -8.610513919658223, 4.317833139812082, -9.467905058284225, 4.111937652404336, -7.264896254369313, 6.802324403674945, -1.4030819947752793, -8.451665676995596, 7.7237923860452575, 3.607984340465647, 4.4262495104818065, -9.98093064111259, 2.551543684415769, -0.6610414217123441, -8.528113266960055, 0.7735747945193854, -0.024776039655687754, -5.984972189503129, 9.63546069720503, -4.185374613676791, 0.3834541088533534, -4.483259544845051, -1.8723537078074255, -7.8317240398423404, -3.44328432443219, -1.6393756867792764, 7.3912588145682925, -0.305546277403419, -5.893995620987802, 1.2909730879605164, -2.3473346496375136, 0.6914758208505329, 3.634180263204973, 2.603451748518932, -8.234793845892618, -8.54295359281525, 4.6259201844536175, -9.839982382496892, -9.894577588309852, -0.839979517577337, -3.2599307908370623, 4.574626404250491, 3.80532254827661, 6.99368057937037, 4.243991210163621, 0.9836181825109733, 6.183968188556058, 9.394136114715977, -1.3420804586587654, 7.300748883838054, -3.3868539195643983, 6.093636384130473, -9.846489215353722, 6.816116615062569, 1.7881687746098578, 4.2702955862959975, 8.287119277991781, 5.137989183172902, 5.929854465039387, -6.858264121864535, 1.3453605478984834, -8.234589716711875, -5.319894122509929, 8.201865060904531, -2.189082899195114, 3.4734085221443998, -5.991808031650388, -2.5274745667917475, 4.017467099696248, -0.9691233844507892, 8.069539450141956, -5.93145734280051, 4.735436585196936, 4.348630033162939, -5.041423736847904, 1.0514433763794262, 1.0931429413906564, 8.33845537779385, 7.637194190048845, 2.74671600009502, 2.1342808266508335, -6.655386779573204, 8.674661974812775, -1.7096492269808845, 8.280971738311816, 7.045531388565529, -0.20028153340141408, 3.9231950485637324, -3.474968499059921, -3.6358283806529794, -3.6302295348938607, 2.8378083083142247, -2.2001587685150437, 9.146736975313882, 1.705493873645242, 6.882684266959643, 6.31586880399702, -4.9707902633323116, 9.990839314490579, 1.1140286383368725, -6.152535253048537, -3.9885135734370225, 9.371402833063456, -8.754084592813093, 7.357725618267491, 0.7636968690079566, 3.8592081934831928, 4.003414401624374, -3.7055438154215103, 0.133286446713079, -9.359899573625864, -4.127956383007851, -9.661190915965518, 1.6182452551499082, 7.395470307570285, 6.327220306380283, 0.5938687668888587, -5.269159136551192, -5.196507330264608, 3.5176742843815116, 3.5535774502166575, 2.3635080363000895, 0.5660631428790186, 4.3807813322113525, -5.7801932167066195, -6.26829401701187, 0.3735232523909797, -0.8345996282635824, 7.185407179769427, 6.555058408548092, 4.507568950033686, 3.4336522187861114, -1.5717261804653795, 1.5846640456169716, 1.6753377235396982, -2.8683164771221907, -0.08256026913911896, -0.5305581190262476, 5.266200442540551, 4.84703077217625, 0.9614242262015615, -6.377188753848455, 3.3690168050317286, -5.268452637277221, -5.00386208108975, 9.668699951441095, -4.4781826560380384, 9.161018819281189, -3.982323713072031, 2.1304658882597813, -4.028736186374426, -8.64429630478211, 8.801632678874189, 0.854534091454628, -0.007164069911260285, 7.375269266245905, -9.210031197139344, 0.885129757425867, 8.26311936773537, 3.991462936071585, 9.93069009864659, -2.0735916415357742, -1.557827265265841, 1.115660455673403, 5.747468567509236, -2.8387018919869895, -3.853685519659537, -1.657103559625659, -3.634586995544213, -7.181956224871058, -0.4878184902898557, 6.743005503747334, 1.235788066047503, 6.340986106735418, -7.291395099951938, -0.1717525000181741, -8.9156467232059, 9.75519174122067, -5.625622350273522, -3.8100332353186817, 3.82227205133519, -6.761894275050196, -0.9884524063026845, 6.568223311991346, 0.6224096540941559, -6.527607386731571, -5.37791014418834, 6.564264137838066, -2.462477783488442, -1.2901528331323124, 6.161922345047259, -0.5814434258002965, -1.5134826682332303, -9.779756302859724, 2.944957629919573, 4.407514230011007, 7.057165287716451, 4.080209740945669, 9.433541467142199, -1.9761306336795155, -9.040532050214205, -9.580138058329092, 3.3793475725567, 7.375416812421239, -5.93534572039812, -4.742878652993299, -5.996043242690881, -6.84027342665985, 6.1900447769852995, 4.265954266571972, -7.078601336285955, 9.620879282034458, -7.699225721074323, 7.608864089173494, -7.345814066710192, 8.147004214665667, 5.861101552894851, -2.7633003138476813, -0.44409580456904507, -7.094113591087739, 1.2555790005981535, -9.955444578654129, -3.878933009815311, 5.356882690858031, 4.619708187943035, 1.70186386158184, -6.633929573581849, 3.9814649782766303, 8.120473692498443, 1.4803604232379808, -6.7130809683865955, -5.6839490709963725, -7.916442436204576, 7.303973792773792, -0.04665684974294315, -9.012157098213487, 5.290607946081032, 7.957551021572609, -2.4772127334244143, -2.9619725010158415, -3.1142223886522906, 1.52869822610546, -3.5227688110325417, -8.503760358012947, -6.887731568856563, -5.336170060106182, 2.574643119079198, -4.3624513376382, 9.257431553466354, 3.4062908072122973, -3.824577506736655, 2.688903303607626, 8.517757643191143, -1.627424574594654, -7.98166047565301, 1.4845046283961754, -8.883244193484515, 0.5682998666785899, -0.07031410851652709, -9.93362594209248, -8.904676912821506, -1.567532930535581, 9.836425097071558, -3.3082757715485434, -7.240506534414807, -4.381113731384161, 1.367942070687409, -5.37694508434865, 6.351168486265131, 1.9113626858699568, -5.263349151202535, 8.069636758674307, -3.0929267229069275, -4.2110577943696885, 9.68357884999699, 3.449027732764156, 9.210999855714658, -0.4422235021800969, 3.4016343022263023, 3.0387313920742347, -0.6770489761966143]
BIASES_LIST = [5.2226316124575245, -9.17314428663917, 6.0165354375519655, -7.155957550339826, 2.9389723975110904, -9.70639136383818, -9.742349196784533, 1.0817133130715924, -2.30279828791478, 0.841022639145681, -7.594070068152295, 0.4057813733367617, -5.8144517433071226, -7.257609462204724, -1.5100451284375858, -1.230911224946274, 4.459000531894006, -9.328372725657168, -0.5475205006370576, 2.970267681248762, -4.0772027017669865, 1.4898842672861345, 8.718725807683288, 7.285824223690195, -9.92301199863508, 5.621309152522407, 2.0244389683747244, 9.065075408777254, -8.45990014499256, 5.005679084215377, 4.932509732184178, 4.441932953735099, 3.571970514494838, 4.586116337591301, 3.63608022577659, 6.605439481593564]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

