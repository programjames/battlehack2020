import random
import math

WEIGHT_LIST = [-6.494336070367739, -1.910455732664012, 8.125601818387445, 5.963086370653617, -9.484037173231854, 3.1951534822008494, -2.885051537317924, 5.049870110376389, 7.679218909563268, 0.5627832891786149, 8.645777839159365, 5.355239924704128, 2.7131904863053897, 0.06510055320928565, -7.856826720400112, -8.590816123464535, -2.2453349581554027, -7.717321544562436, -7.114299067205958, 6.215231496576422, -8.619204779173579, 5.930127166156094, 0.7601048485185995, 1.1558164520796268, -1.7931443076124953, 1.9080905720127426, -2.338246141936531, 2.684553193676871, -3.3290409890478134, 8.987982649016264, -2.1408739127269776, -3.143188273486233, 3.076518163071512, 8.795967281202405, -3.897175749765303, 8.021430835781, -1.9990035566051176, -5.154499034906421, 7.247362118061581, -9.391019541472222, 5.3993269014587675, -0.05723863674084129, 2.5590522934620434, -9.086000638593712, -5.350257096894662, -4.205807139240885, -2.430364540162328, -6.515858449340104, -9.560584642297968, 6.545139291509958, 0.20866558258687817, 8.566781142884345, 4.254762529109071, -8.284881996051396, -6.322563771523595, 8.385569767802782, 7.448395660173649, -0.9154422594139398, 0.748292341319825, 5.741581869609568, -2.0949822765887767, -8.682966515176586, 2.0248921729089275, -8.540024670568677, 7.735028889360979, 5.63548743182958, 4.449987045316703, -0.6575205885918383, 0.9750993002333423, -9.539087561754386, 0.6592636825017166, -3.6143819005685396, 6.381273168243084, 6.9560747340469575, -7.890981135598134, 4.920988995879458, 3.5364301676452214, 1.3643430234963425, -9.470285992489199, 8.275485044195467, 9.360754387873481, 8.392554105837291, -2.1390182484066127, -9.427819190738674, -1.1542971220439, -8.365965065537464, -9.46826929399668, -5.940815608932355, -1.7902030078491258, -0.5469145328871416, -1.3636267094103864, -9.210010679779295, -0.6362752962778053, -1.9639067107940011, -8.228499896258228, 9.515125737525512, -8.262094631281759, 5.878287135649083, 8.608860186590903, -8.69406237827844, 4.081118839153161, -7.029977072290869, -6.509033090646918, 6.053782256999256, -9.498312838493803, -4.036398596018982, -8.2190586190958, -7.663050130398561, -6.916927443430357, -9.853343808248784, 9.66975759852005, 3.2716487022074876, -1.2864479458774127, 6.8850204780067585, 8.874399003761553, -4.433041765700239, -8.705720196552422, -4.132857791404032, 2.027214543843643, -7.6327127379435655, -0.9562360227609439, -3.0361913529014073, 6.366147347503521, -4.343302844756636, 2.270155790918073, -5.015209078791711, 4.666052877332101, 8.56025505564126, -9.105981815471367, 3.311709213465937, 7.964983018487889, 9.736864478202246, -8.222189174558086, -7.412282786301228, 9.935924619554285, -7.674176779572283, 5.891807897255212, -8.055037089725738, 2.5098586193328103, 5.360086988028554, -1.702862586942226, 3.5153776000941246, 9.140773591296547, -2.544927659682328, -7.076266050040598, -1.943733013849318, -2.7890185302966692, -0.10286635243310016, 3.96515564010852, 0.260018773194556, 8.182719828650626, -3.4764436760048545, 5.43217046224758, -2.1950467226136343, 2.024842796776994, -5.9006732880755886, -0.05955155921116351, 3.729252523710345, 8.982847210628268, -3.220283686352614, 6.472365582128624, 5.423779777106477, -7.271119824248446, -8.863044093725724, 6.634961682059238, -4.573227698883464, 5.910000764146449, -3.6396489621171106, 1.2666117658769167, 2.108816098415973, 4.6697548434503755, -9.975873698176416, 1.0005441174159806, -7.83392857675925, -9.123393009842239, 9.81460710127461, -8.827336288868935, -9.404206948717071, 8.650632160462738, 3.6312854382224913, -6.9856866603299554, 3.602977652327768, 7.011630453814131, -1.72046731323608, 0.7321245732025616, -9.11674056513002, 6.814099482312287, 8.189074796745857, 4.576686956121474, 6.956487924450297, -7.244574264180395, 6.642079729410106, 6.159815997557885, -7.800225142012172, 5.210461733164655, 2.0208871020235026, -3.5628845541534577, -0.3265914319177554, -0.03649961822349823, -9.031281491950761, 0.7824347256852793, 2.7956836858530814, 2.2320878191814977, -6.0530499028142515, 8.423925237883932, 5.836580195734751, 8.846309044155596, 1.121891468793466, -6.0895306346940625, -9.162610720540858, -5.41013897827537, 5.088080696357256, 0.4655386753552371, 6.276093997854513, 3.8557317404145977, 2.7021558425883274, 8.396512822567093, -7.768091852809647, 5.310274956156238, -7.581121879982435, 2.4135175015781645, -6.355162425458083, -1.8352701777473932, 8.924143179354704, 7.292986932695353, -9.0125797082566, -4.441955540089926, 5.551598833833751, -5.145949075838054, 1.0264351872450739, -6.889815256893435, -8.611568568066513, 0.941245079326773, 1.0810764355580282, 2.6027206278460433, 8.501311302287402, -7.053142272521371, -8.823730870610596, -9.357000522531083, -7.1851591018582965, 3.888924910383956, -3.5612062698888174, -6.283723223592639, -3.1821960429507374, -8.439895880620298, 5.812509160648272, 4.645533485332795, 8.58864684176439, -9.648167092825766, -4.112971523161768, 5.646304748537599, 2.701110100914475, -3.869099995246361, -6.139754114959183, 9.077583156163925, -2.513838143028952, 1.7109754694087993, -9.84729811298514, -0.6821372222700806, 9.30059606043731, -0.9232611045906971, 7.319827563666394, -9.420842502566702, -9.257156273946844, -6.883837861168544, 5.167897798261549, 7.897539799601354, 0.1834399923463934, -8.682090567540165, -3.0876877332249535, 6.823748559049559, -5.839575184317514, 8.525412834589083, -3.547559448086071, 7.589406927163015, -0.23803142069374417, -7.280070811866802, 1.2831810403029777, -3.603330212724279, -8.057601807195887, -4.353871226211878, -9.954539502584126, 8.099615542235526, -4.474270047095401, 0.8768168497277191, -9.746102339999823, -6.260278765588632, -1.5947751060960709, 1.5700843744285482, 4.4376120365175336, -0.5985967242675372, 4.6522374450824895, -9.884822403383964, 5.961281801700352, 6.727308007582483, -3.9736307229848418, 9.374970614049122, -6.931113246948881, 4.713976802234148, 3.723042925214095, -5.320177738709444, -6.563190886640429, 6.150561999659029, -2.743725803709525, -9.227320529391523, -4.719721527303848, -0.012214043573132827, 4.231730829000806, 9.236125430610041, 3.5460013199814266, 6.871346062699711, -7.0965579814796715, -7.393515426951305, 0.16834032583109781, 7.89308794019497, -8.587241245138788, 1.6003211915407043, 1.3462555225940527, -8.886464388697812, -6.875597899191808, 0.4252034520428243, 7.447931787277689, 1.7575299205902812, 1.9227805083281027, -0.05291670924435721, 6.405710343399061, 9.608980020134336, 9.123919755482675, 6.295670189848927, -8.482044384048832, 2.214785283704577, -0.12529777091911853, -4.941645828479659, 5.067962419036341, -2.761804236276504, 5.556381744202941, -5.741528091549122, -9.566504603527818, 9.595738699176664, -9.460981966500523, -9.365696786664213, 7.377150855579906, -8.689873141256236, -0.44604716016168666, -5.972530906612623, 9.326686385386168, -7.147411887192794, -8.300171262826982, 5.28494155511283, -0.34977711522665267, -5.210564001690143, -2.8603285509182026, 8.025580913809087, 1.682579565900003, -2.697519634534671, 2.9669022351688863, -6.83817842089149, 2.021002811438656, 9.405426819393533, -2.758295199423686, -5.530990302056509, 5.967870299501623, -0.8159103700817116, -1.1468405764798462, -6.2318904743644215, -9.006607799314345, 0.4552404458553738, 4.06722459858883, 5.881535682209, -8.010817733943664, 0.2541862107843773, -0.7934496124664907, 2.88046850077631, -7.389372518979989, -3.4178637014240394, 6.072838867394694, 5.077651642126222, -9.784150361598709, -9.632669072023788, 1.8484689678699322, 0.7825781045062445, 1.6857648004578412, -5.451458798300772, -5.000335094724604, -3.207599536124741, -0.504675306833251, 6.366833038613638, 5.029097107600016, 6.238526380341529, 9.566396414591274, -5.576037621033145, -6.148326115001009, 5.356498034589956, 5.107833875661941, 2.080557612446439, -0.6603866477589193, 4.043245479921726, 2.7008900721449827, -2.9957608558163233, 5.6364046568471196, -8.74003536393078, -3.506856673156684, 3.4588936297539767, 5.5976007299115, -7.164188985564113, 0.18881122263092642, -7.3822446054755275, -3.2083822175944814, 6.9025262138714325, -6.756241681468769, -5.707682783715882, 4.676553063468493, -9.439671005453555, 0.7068976509202347, 1.8949077759378063, 3.9264271035497664, -9.65244484716391, -2.2730567393592764, 2.572071632875371, 3.4575347333813795, 4.664339710095431, -1.8465820252023128, -4.337456101321369, 4.043556339698364, -9.404037469707667, 6.416382902340402, 4.75372273276729, -3.984803337246854, -8.547479735401913, 6.165610736071379, -6.0622421233542845, 2.3021013109110235, 6.316594184999339, -0.3354720270766425, 1.5184099909361812, -9.316173419822046, -3.826770384684335, 8.165680524340065, 6.243135440276074, -6.8769955750341545, 6.680126138360706, 9.14199641401591, 5.1713489845544025, 4.553954012812277, -2.9887622491147763, -6.063393022847848, -9.19165333901871, 0.9496547622666558, -5.24704529573877, 3.320493921812071, -0.03797293434184468, 6.492319619792752, 7.796110524569549, -6.007761937266829, 3.9754380735164077, 5.377233340473387, 3.8550578522711287, -6.799342739581191, -4.339921706048077, -6.147405581208578, -9.124950266729046, -4.400224375988715, -4.8466697192103485, -4.431983652825098, -5.765314944183855, 5.210558607407542, 6.012269337115072, 3.00417473458751, -2.091288943079248, -4.500410565355586, 4.024405076908808, -4.944202613418129, -4.90705166304592, 3.3058333595609923, -8.594806571764884, -0.964058651465745, 2.162914298406495, 5.918459795707534, -5.807828031753264, 6.389929053769453, 0.6209742472078759, -4.126847567007886, -3.527596422815444, -1.4846579545094318, -8.290186858182288, 8.556999300474324, -6.753501497855156, 7.974862062337753, 4.862332090300148, 3.5908667986403824, -1.8000991622397606, -4.653049089802355, 8.881677220291987, 6.527619075559382, 3.193197140316464, -5.20744473184497, 9.116961038436152, -1.2711080476736996, 1.1448404271301627, -2.4757146685600233, 7.285715834638523, -9.943399928979975, 6.742076975936083, -3.1314217936757993, 3.3274481024380425, 8.329717846658788, -4.545335840438451, -3.5169476672182975, -2.0014867886642973, -0.4431964587705046, 6.636194665226206, 2.7201264880229665, -3.1637236594828266, -9.69591173339714, 4.73197285174513, -2.0024139867677437, -3.692598659047837, 0.8548781107308923, 5.279523880215267, 7.440347085233185, -7.983961175978729, 2.721857064350555, 0.8945238038068855, 0.522413644559439, -3.5972845088500316, 4.519961262165058, 3.1865157261639236, -5.2376635279788575, 2.5361108520396805, 0.3018633297139335, 4.743104577907831, -7.700897134017575, 4.7820229803374374, 7.788517060745303, -5.738505910853533, -1.4875815825614307, -0.8678244160580135, 1.6098403654232385, -6.811898655791806, 3.0582912457227955, -5.6440557238935085, -4.364192941852096, -8.050208061175873, 8.976087757971243, -0.7061300214810302, -8.470956030783814, 7.981681088810422, 2.911028736994796, 7.149761492598049, -1.1927155114441526, 1.5413833636819376, -3.9022316236645445, -6.94396682944598, 6.059568042181564, 9.263614749039291, -9.063767017069992, -7.249270931480504, -4.622956758233004, 6.590661258103086, 8.439510897764805, 8.155999266923274, -3.1530869237485177, 5.850355501514663, -9.113168749714982, 9.223585516196394, -4.23719845732299, 6.093771202724149, 1.5510398879434604, 4.835194835247172, -7.967344627368023, -8.551142814976608, -5.182947241826654, 3.417588218254558, -0.3480219327456382, 4.691096326354193, -2.6212317928921003, -4.119569534651308, 4.298587631166754, -9.122352616358091, -5.181699803619473, -1.236213900889716, -6.956492394116543, -1.3109216201937013, 9.314961666195181, 0.37400465639426983, -7.624855437385126, 9.420065770261953, 0.652811793921547, -8.36367701824068, -6.094370351869394, -1.8125713544161215, 6.260936960494892, 9.606377157759333, -6.337801542955552, -3.9107403658567996, 2.656360366020742, -6.2929859687570815, 4.40235800246554, -5.046195055181483, 7.989818842998158, 6.098234385878079, -9.452924171140861, -5.96538991391702, 5.820875102787506, 3.6611115497548923, 2.704274911636869, 9.710253993088575, 9.95576810251475, 3.023540775895402, -7.36464145977301, 3.6825635432714936, 2.3761862656410067, -1.8918842830011613, -4.157650522004186, -4.797002196021822, -8.088790852404422, -8.45962824071907, 1.1196617607174346, -2.4215326590464104, 9.732783165510753, 7.387831918523528, -6.528763518572842, -0.7667859766880465, 8.468169501203626, 5.459253342020041, 7.514321581152867, 0.4161697704339993, 2.313963618776068, 0.13890010633568828, 9.854601429586868, -5.605914779757349, -7.093306848630716, -3.3450710703814064, 9.304192200902431, 8.80994390536005, 5.901369131349908, 6.54063971574875, 7.644517492383617, -4.220286015477292, -3.4592890551434374, -9.727838175655311, -9.488146176350561, -4.0280332278621955, 1.5011795683746563, 0.010678553805352209, -5.459064340497948, 5.034298207302697, 2.779923945135545, 2.1957849216228347, -4.314632742467799, -6.814674664338181, -3.387291550143649, -3.442320796115103, 7.576393473996326, 6.318397853656922, -5.923811631114136, -4.105012515692501, 6.31896456931177, -5.399690302916714, 4.2710265261066915, -3.703985937333332, -3.823046687375509, 5.331587257262205, 7.142246098544284, -6.128410917414763, -0.3034854237152711, -8.691547432588294, 4.325987283287526, -2.553459623143752, 6.912993557957815, -0.421532655484107, -1.5949697994690446, -7.9244604738614965, 9.055421943967026, 8.356611389681152, -6.744544901886272, 3.883163801175474, -9.907897317750551, -6.988281265311804, 7.202679907379569, 7.301300230867977, -0.7507135709183217, -2.5444369963160263, 3.278972885942542, -9.928886267324753, 2.4606383055118, 0.8220212629103774, 5.667844676558536, 4.597905432046117, 9.725185905561208, 3.9122607484718444, -7.761937048889552, 2.4425399750523304, -2.13746769899549, -1.7860788723989636, 9.770193960826678, -7.52320977169828, -2.3025035114847476, -9.56884909356247, 0.42218901060640235, 1.4382815605193144, 0.39714809829948905, -8.420968426640876, 9.509869278754188, -4.355925995980867, -5.853787822045513, -0.9944763209733871, -0.21863932950258125, 9.611535012965437, 8.496214240158729, -7.4558940699107605, -0.8330159445499508, -3.2988578518480827, -2.4191949638999644, 1.6857100866755488, -0.20268650466471705, 4.848371896317978, -1.0012589273388635, 4.969362724516344, -1.5155117449019855, 8.481674472929804, 8.44811782794843, 8.211085622603857, -1.978044073694626, 0.6007823893889785, 1.1206546802974948, -0.3165236687650612, 2.111112462069279, -4.313122429361574, -2.3910876632061173, -8.329684080485421, -8.14659280390131, -9.458981835022943, -3.49299074240246, -9.357656011460257, -6.123370578941318, 9.969078201304072, -2.8759315187709023, -7.743148602118712, -4.330331361703417, 9.793784333073916, -4.4117117648861885, 3.864166239836333, -9.782201896723333, 1.9776932870527002, 4.466332115488923, -3.574036939483336, -0.7650721112734011, -6.248915239656132, 6.966181564908961, 5.319451356167024, -3.5874603872950512]
BIASES_LIST = [8.9445328883787, 6.350981794776359, -4.1600793182516345, 1.0853483670580424, 9.985406844443226, 5.30888536615193, 6.401832845576319, 2.7669908328167523, -6.825540871753049, 2.120123379356585, -4.462784829095581, -3.7427945416627795, 6.293053626797118, 1.7300958089235685, -6.729692290478015, 7.133612494349485, -1.7981412371665648, -4.947378654893361, -2.900314098156203, 5.678728137838476, -5.7133279430317385, -2.238574316677237, -8.770102224256217, -3.102445759083434, 9.00858438276562, -0.4967823927702639, 9.301645054951628, -5.05898506394225, -1.1020372724241394, -1.0139118754164418, -3.649161819425948, -9.341893939820281, -4.524586693349062, -5.914836151269142, -3.3421897031061505, -7.4341800313695465]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

