import random
import math

WEIGHT_LIST = [-3.407304591340596, 0.5490402508915722, -8.321605332292668, 1.226443064963231, 8.020901015443158, -4.597456563350171, -0.8902291140372434, 5.002138459274168, 6.519034114695138, -7.66293405964513, -1.2303986841445553, 2.6225788349067454, -6.755983377214953, -3.8884152291858154, 2.8105948588178915, -6.629303590182413, -3.542688717803011, 3.3731812134674204, -6.2792190972017075, 1.0848969443252958, 8.403195315589869, 4.8483046722121905, 1.8644882710150483, 4.554867597267085, 6.0634442775257575, 3.0905274868253088, -4.708749362377544, -9.915083921832817, -5.742511965962587, -9.482391208376368, -0.632749275975037, 6.179979136447958, 3.6628846786004825, -3.804410303970201, -3.863485422665434, -8.12672466992934, 8.745969610145995, -1.5377273271060723, 2.459203338787315, -5.915517720997602, -1.0923915244298925, 5.618242587102479, -4.739370838270354, 1.8677921561645228, 4.422577372329924, -4.995984100261984, 7.690499152506444, -3.899089341080595, 1.839475030300937, 5.429304190704158, -0.2534637877615893, -2.371566265831831, -5.306335937484357, -7.7693531133260585, -1.8206956573823785, -9.544454010753443, 0.7460367764400111, 1.5802972935412676, -5.577725700983547, 3.547139483438146, 9.869997914211407, 3.0517591267855853, 2.513910867259554, -4.894658049507832, -9.401206746682494, 2.7090310392687904, -8.37058115783169, 8.004344076256444, 6.0926943116579295, -3.405985413885988, -9.710612403247508, 9.311842497353496, -3.790184199585158, 6.352986991367054, 1.2071674481133385, 4.294167247148364, 7.517827772750106, -9.557366937917804, 3.8228078886353316, -3.357756039439284, -1.7351248920156888, 1.1928666562925834, 3.94580909189715, 3.0607711544993776, 1.3032632474873331, 2.9741710636597922, 8.75628865438999, 2.4065278436135085, -1.187551391723602, -0.8327359385707656, 2.258267800846749, 0.8626202108854581, -0.905493642534287, -4.984439234220854, 1.731041724908554, 3.5858972818655523, -0.043506632307313, -2.2315778228767424, -9.198912719978438, -9.003042003449792, 4.8839524255834625, 7.493758802371765, 7.29851389275062, -1.3349588495574487, -4.6078075316024965, -8.776369485876806, -0.4135060593566493, -3.9215602729766097, 0.05686323667737092, 1.3431888522639213, -1.4748032667485749, -9.431672110914342, 7.323081622230095, -1.4029091693994538, 0.6536809376448733, 9.107401275569973, 8.758285908484329, 2.2389478457404426, -4.537599170526352, -4.656704014650465, -0.7725014465077784, 2.4987571212106907, 2.0532888824594764, 7.125806984730467, 7.81771216772345, -9.900013255643156, -6.8933920812646665, -5.163942862612778, -4.325570710602724, -3.9512147421915884, -4.238511417676751, 6.8710694995698205, -3.4604127173357284, -2.9266698117866223, 8.894396127965642, 8.825026639675443, -0.4926818940641837, 6.507099307638601, 9.93948773808161, -4.065079986006406, 5.386797913125704, 3.0016766080851447, -8.737705760934436, 5.654457187306246, -3.683076867495232, -2.2727261930880367, -0.9874063462605953, -9.316366541129721, -8.64411914442857, -7.531113210647209, 5.847805188878494, -9.615355861392363, 0.14996458742223062, 9.04521794617277, -1.030371962243624, 3.263749987783683, -3.32607315469229, -6.330928830336486, 1.3691053818626227, -9.404838671769323, -3.9653559086849155, -1.7388243929139264, 0.4775997132339391, 5.001296874405256, -5.911303813838396, -2.561376797798676, 0.7932818132037376, -8.643583390597989, 7.89828280159432, 0.9411596048769333, -0.8545695597219485, -8.805871978984863, 0.9200370736680146, 9.287460665785375, -3.020100474011816, -3.4242977774607786, 0.16204948656045204, -1.772673196386247, 7.537994965886824, 6.614402128237288, -5.085045512676752, 4.853017193745522, 9.546833334275139, 4.896818625710939, 9.23357687423701, 3.993183867273956, 4.7682837896528785, -3.4495798936831807, -8.687920273499742, 0.2927262010930658, 3.747257056033323, 6.923606555135187, -4.723296667646963, 2.1650790618913156, -6.75026761393233, -3.7528331544687843, 1.9227736796145258, 8.89912549155035, -8.093999399765273, -7.8126927204924845, 6.144301121793426, -0.04134591888669448, -1.2923678049755782, -2.3880234950818586, 9.002257716734803, -8.343145354712874, 1.7166599165673109, -0.6112891393219329, -3.6640321426446265, 0.14905738444242544, -1.0295674920277431, -1.5074484594136113, -0.47106315938122734, -3.0799334755923313, -7.1572870770027075, 2.7750751953853126, -9.179420384643258, -4.146331525823356, -6.150791279749583, -9.011482963618073, -7.436898103448617, 0.7921427643257388, -7.995627678963038, 8.772453422737165, 8.965237743325293, 2.7669769255754044, -9.688280766196137, 5.40750884206204, -4.228347410780858, -9.06252797476444, 6.564565149676927, -1.1319227729194345, -6.667215086866691, -4.141627358677442, 2.021445445271974, -3.18855815345424, -7.127654086094807, 9.190811886812678, -6.238166562208701, 7.97248679215377, 5.777155832806207, -0.4783406416399849, -1.0137442497213236, -3.971151414007461, -1.2219079974781586, 0.9789399231487845, -0.2524159592623434, 3.4291060091912478, 1.2718710359078393, 1.09376474895347, -3.8695475326293227, 0.7308309032551836, -4.421198830734339, -1.9672498167814076, 2.85198356632816, -4.1976279097769, -5.420296068005481, -1.8727276909210584, -4.723805428823695, 0.5609092006869183, -7.863012557018559, 3.7628742277382266, -6.57215673143674, -5.306386710187169, 2.1896058512861245, -8.526398270220435, -3.1657401217742542, 0.5129093845798884, -5.416661178072304, -2.3910995834656434, -1.5078264349414425, 8.54240943357225, 6.865137268228935, 3.4567833324429227, 5.698363811039243, 9.779519704335044, -9.422232533171137, -9.743691964307386, 6.041232059904825, 5.4331098838265355, 8.976965924922382, 2.8679650860007513, 8.13687439509603, -4.753046055089369, 6.626348233802762, 0.7352698147301489, -2.3166548705034877, -4.4172105697229185, -6.789357722866245, -3.3375920161124117, 6.364782549476185, -2.751616962094337, 1.47047164227188, -3.940508215155358, 5.39077315226757, -6.3315893662482665, -4.698885586991923, -0.7869086981994471, 4.558457301130115, -4.42141580858026, -9.637612808054108, 3.77590688870162, -1.23577687021589, 8.869718976031692, -4.565298164619989, -8.584278043867657, 5.484831147002945, 0.9254725651692155, 2.611936217655849, -9.839373419984321, -5.689206194191867, 9.486202683244969, -8.010306044424574, 0.6460252438804766, 4.074994812199757, 4.9434799603034385, 0.763762096640983, 8.903909476925921, 9.774947839820864, 7.105292682449761, 8.977585781151483, 0.48728744165979165, 9.834469960583888, -6.235703672338648, -0.2039294710515307, 8.377794470716317, 7.171587639253069, 2.267624347909841, -5.807864070690156, 2.7319117760335345, -9.380458171055778, 3.9422055756551337, 6.372175119956619, 7.926692138357051, -3.3332233175603054, 5.026321650762863, 3.1080280080749247, 0.336884512411725, 8.470114895949603, -7.589157946829797, -6.308712101034684, -5.228361533063824, -4.226372561731799, 3.338708934977074, -1.6737008324953457, 6.957409125715991, 3.265811596341477, -2.7519681714063715, -7.885498556594159, -7.873023269439687, 6.710013356247984, -9.928419298722401, -1.0109005350776101, 6.789215269534939, -3.0562536462965078, 3.0718767807732217, 8.463470343615693, 8.067248755157664, -9.068986606807698, -7.717152102404481, 3.650202301772376, 2.6999181353130943, -4.230895992867496, 1.9343459778242416, 8.865470844933075, 0.5565979947136661, -2.685100453543665, 0.8845414996728618, -5.341222783736499, -6.261688298509993, 0.8346919992718345, -5.955934881348098, 4.470840024048044, 3.9518851277258964, -8.047806785448369, 7.555495038611404, 2.4693229700979646, -8.554222811931973, -6.838904552779943, 2.459067432874825, -3.219624418190148, 4.2013771748634845, 8.491202315469156, 9.421714966959176, 9.955606390208157, 5.708529702365917, -6.621325014560129, 3.146771387221552, -3.719053234047502, -3.563046149741183, 7.248800744880718, -8.116954158289333, 8.868833210266565, -8.628000306137885, -9.124327543673, 3.167400527182192, 6.50565996230678, -3.07414862575067, 4.277705645036702, -6.738623784778708, -6.016556791520755, -4.02681346181879, -8.472684211430986, 7.413958067386616, -4.141756811164409, 3.262889621963158, 6.833601174764119, -9.552939878344764, 3.1050251337789057, -8.7072396038958, 2.0337398065050145, 5.768402503668558, -4.108213209280505, 4.725278491368277, -4.9813859826984475, 3.7579215820359693, 5.55318210433893, -6.3710778109893145, 5.045967509784875, -1.5716566254845645, 5.379573798002115, -8.240802101080787, 7.713864741783006, -4.203945110823987, -5.242088834555274, 7.965790040838364, -7.441817471861669, 4.160438573491421, 5.560753409726395, -7.000525652972671, -3.462276264415265, -8.163128922202095, 6.442060503238089, -4.712699273030201, 6.553353639425449, -2.5546340015823077, -6.450431275815854, 6.967166550868683, 0.18282632970501744, 2.6939268523683886, 9.740022705783467, -3.6932028000493915, -7.284381767083195, 3.231680168512238, 8.69497939675378, 4.045767448510409, -5.712766042559392, -2.18874379034399, -0.3334142862929603, -8.44923353947446, 2.1218129129958445, -4.763889588383403, -9.099935382188406, -0.06185018577931345, 9.726063042535607, -3.824880902353054, -8.694309064113593, 8.745541677598816, -9.532825973154624, -4.63294439816379, 8.689082468317231, -2.1818621682650807, -9.576558086743638, -4.458716841726444, -1.5360400525782367, -2.796049108614622, -9.268815830255512, -4.273689466531627, -1.7415853627368634, -3.0687098811929214, 7.954941332930133, 1.2295150606566612, 3.034227062840852, -5.34312635843736, 6.090472859185301, -8.81506713841346, -5.804488549765548, -3.084922497649803, 4.464030014143063, 3.182130448612792, -8.899160958495234, 9.437751431262178, 9.035906534791572, -2.305736916896029, 6.0777197369077065, -5.596379189246621, 2.7565349181178274, -2.488542593515792, 8.538355434115502, 4.7803317384499895, -1.081718060324615, 8.424814540978144, 6.046079930181328, 2.429122338011666, 0.8000365739830695, -9.719825146156385, 8.35331487804499, 5.950558333639428, -3.857447670953711, -7.607766453260605, -8.372179588279373, -3.2064558547041173, 4.679782929156065, 8.097041081004647, 9.09720614998092, -8.841096646853142, -2.906084321340721, 9.488937571156168, 3.961115144616185, -0.5051352949381123, -5.47723144691907, -7.987310692799925, -7.890592837552052, -7.783762881030292, 4.893730492948972, 2.327461296555713, -2.5471915680488593, -4.615804488729058, 6.65776528840766, -4.474615737087959, -8.219153876926173, 7.142710620184179, 0.22532802655515027, -6.520060049889316, 9.544264900336984, 1.5524649456023294, -7.2348869694383815, 9.392559896167498, -3.5766446074856884, 5.580974114702762, 8.995384161954153, -6.884913798331576, 8.799549421594953, 0.9232466590275994, -1.2984703252596912, -9.857409620553133, 7.018186112312016, -5.95177366721723, 3.7117770062398296, -7.8840257639681415, -2.1329065499317164, 3.2264233181614124, 3.473022247819447, -5.726372129137502, 2.125284090082559, 4.480454244277938, 7.757078286262139, 2.12375924172132, 4.010586383215465, 4.497628629443893, 9.07191920249604, -9.766139086861772, -7.83993275659925, 3.295305685263841, 1.1108465635969473, -8.712363669917648, -3.7825307411731117, -1.4604358019284263, 8.863859375553506, 0.698395230318221, 4.31710707900362, -3.06795256495902, 2.4454946462457308, 5.977916925157107, -8.456370944979003, 0.9074611886355921, -1.2737282566741648, -9.824166726764677, 2.946644961489188, 6.709963000279849, -4.162424977971593, -4.698869508115921, -1.7156988496943661, 9.724755557202045, 5.300597754903206, -9.58155418383444, 4.319566364559343, -9.961956445268608, 9.052665665875487, 9.049172417308078, 2.9675498947418237, 9.082738756890887, 0.8661020959718435, 3.8375231190531327, 8.957588785994698, 0.9377263887533633, 9.489825020347283, -4.0328962945765845, -1.3823168406316029, -1.1404741031430614, -3.99538367175746, -9.596109817851865, 4.440725863692052, -8.35941735053316, 6.038130157166194, -6.600982820264914, 5.487602878421265, -4.836035452677447, -8.97497693433007, 4.4517506944645096, 3.8926105126472166, 7.784562855428113, -9.501028010626513, -2.6726801618242284, 0.7441037025339767, 9.782008209678075, -9.245193616504624, -0.1855371586691703, -9.088095874059183, -5.543202932522253, -8.791462171375866, 4.751028494663153]
BIASES_LIST = [4.080666945534956, -5.643317037220392, 0.9971570162691954, -4.581642278706621, -6.811620884560132, 5.718321404437514, 1.4323007478656287, 5.154613469771782, -5.8428972714753336, -6.073544126841684, -9.778991378374492, -8.907929593144859, -5.035407513032178, 6.031572537875224, 0.38113608815284294, 9.393837244395641, 8.727821489907136, -2.383398066496425, -6.783399422734215, 5.974992822141376, 1.5485440585766135, 9.092043754986644, 2.2517065713405664, -1.8657304157101446, 6.131638519972832, -9.036808507380414, -9.640190028068439, -6.814600148644123]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

