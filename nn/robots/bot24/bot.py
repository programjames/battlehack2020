import random
import math

WEIGHT_LIST = [8.332604330641999, -8.690029436676042, -0.3794548801769171, 4.161259858685346, -5.599975416456056, -2.9516720301197585, 3.915183401970527, -5.019494636901081, 2.28235205427006, -9.61287046640168, -0.43992640223325985, 5.875873035902677, -6.25876791159299, -9.010107013639757, 7.37161225525313, 4.714655714312483, 3.2767978827052087, -7.47181027809429, -4.751901688651648, 8.092309555864432, -2.703461465214292, 2.463988615753099, 6.888942483722467, -7.936515888964129, -6.127868575172082, 7.912547804660598, -3.994138312884399, 0.07916522025568362, 6.660900452923567, -7.250578259428457, -5.508266998910032, 6.2830667373839475, 1.554332258522443, -7.932553816376721, 6.7785214084942815, -7.244976238972905, 7.638531647053906, -7.27987361519733, 4.163964498294938, 2.975586087606551, 0.7204616603052028, -5.733147847564277, -7.567526844935177, -7.92804094338222, 6.763114473258799, 3.2451795720965357, -9.388310218099935, 7.388053355676412, 6.380604501896659, -0.7741876517003998, -4.505580950489245, -3.4395417397754997, 5.67567923859227, 7.548674481429508, 3.7232145980826807, -9.105647484097897, -5.574830090859688, -8.549142288311275, 9.555253424498858, -8.568229592809331, 5.546407779493681, -6.336664764763931, 5.9128029802842335, -8.639087050960761, -4.628812741060219, 9.655223620805963, 1.1144689318382177, -9.731405650234164, -0.42836658653160953, 7.852505575940739, -9.12280929046405, -9.22791223321627, -6.85262268112276, -1.6611090700306637, 9.815777153644806, -8.537099836674502, -1.466135881931784, 4.43190906200482, -5.21618421524683, 2.055897228578928, 7.542685882922811, 5.758731752695736, 6.312955617131102, -6.443916768743971, 4.2048123890490565, 5.216594799632528, 3.993463050786845, 3.800440246730485, 1.7216108812341968, 8.904368370379164, 3.566473878022302, 5.932520728515023, 2.563995527476031, -7.85922221111615, 0.2677985548578192, 9.646829382545022, 6.8709879985818, -8.266503614928842, -5.330208465367246, -9.523089812776632, 0.6812562120362493, -2.6099679331945573, -1.453103284063399, 6.011915987450855, -6.962340009264903, 3.7868966716370807, 6.469249565832055, 3.9275767375274047, -1.747929091286096, -7.210261965396598, 7.121833527726341, -8.682845482151105, 4.529083395344614, 4.993692332357025, 4.017725755953535, 1.712259588312147, -8.569197083004255, 2.142008221296912, 0.6505452121766542, 4.0489630914391235, 2.678196816141721, -4.770231430597109, 1.9376059357151014, 0.010476620686359794, -7.8466268086110365, -2.095768572541763, 5.151256781025623, -5.805849960184906, 6.794506975069844, -6.9799033420459455, 7.158296189226544, -1.0863155798534745, -4.343696646025428, -8.82742573218466, 1.7601744763502651, -8.656688003975324, 4.927398379142176, 0.18423070910828443, 4.700745475824151, 2.6154226539616694, 4.316412920050093, -1.7570710375086644, 9.329264601444557, 7.799765918832421, 0.4668735019973944, -7.902371252908513, -0.3584241183873367, -4.448884404443909, 8.517271822401689, -7.176418211616271, -7.890019913642701, -4.075937912887275, 5.87034720463339, -5.5646704144581705, 2.1380346459681547, 1.3028227528388943, 9.157147034001873, 7.345427408494675, -7.343663631326294, 2.7454789554070302, -8.804821264151384, 4.2665747878737275, 1.1333727042522774, -3.8570042787227337, -9.408368567975776, 4.028975959831357, -9.794887267447494, 0.10035824228580559, 1.1700326062392747, -4.213138732080218, 7.094752662086382, 0.695694971454552, 0.13925427785573774, -4.5849361310014425, -6.901080745277541, -9.406051875996486, 0.866023016928164, -0.7582013463784083, -6.901502370071966, 7.206873841967251, 1.712397024405579, -0.397405899134748, -2.426243289293266, -7.866245325227325, 9.534451367665074, -3.3045686489546355, -9.199254678315276, -3.9622136757142634, 7.6227559921426185, 4.34861773883169, 8.16083088571521, 9.222868073346895, 7.337672899146018, 6.615567412854759, -3.896901624213484, 1.8926599835195823, 9.397618969356088, -8.936931211665755, -6.813551127740942, 0.5635687276999342, -7.683447450019997, 7.566271779845696, -3.1522161583670876, -7.563539108719355, -1.5180804959745267, -0.6909931250474894, 1.1459279426918219, 9.850241784190587, 5.053033433035328, 4.0180421007991995, -2.467445569672851, -9.505715511856835, -7.972277041849718, 8.62070698018428, 3.5495045769540177, 3.959510395089902, 9.29122735199007, -6.859491832472386, 2.4883413937419885, -5.763831053772144, 7.547540711392415, 5.804393157639218, -1.8803432259734993, -9.655367140904296, -8.7528336636726, 7.020760284299005, -3.3526907472522876, 2.2617278505492955, -2.5090837043441994, 5.002614498768185, 8.06851780452726, 8.147653773101734, -3.522437054858951, 9.300368525024506, -4.097789296578897, -9.18184108433725, 8.955728699920943, 0.4844230523515982, 8.892161959766426, 7.372572239582631, 9.843286960501107, -1.4057851860838966, 0.14591029465858085, 5.2049518630299225, 9.067501235971793, -5.580380362873885, 6.50487192445275, -5.330048528358271, -1.7622304479714188, -0.25491321107194054, -1.541922275235903, -5.109824532897758, -5.54621190133183, 9.100772785137224, 2.1017675352416845, 6.759591491591756, 0.578842230518342, 6.222747979458859, 5.363751444029726, 0.6464475550510755, -8.855692495378662, 9.166008443957939, -8.64643919856844, -5.154386759523275, -5.056924378497875, -5.929128366684955, -4.56705982456864, -3.8893010504217056, 8.235666952539226, 1.8968342850014324, -1.0214203185029564, 4.546756398056893, -8.887716710316141, -5.531812049270483, -6.286793742658563, 2.687526942601874, 2.38816126625553, 7.640053262053147, 2.6329927655204273, 0.4558985114121974, -7.038168133822314, -6.449295680750559, 2.0403034986689033, 1.1340603109617842, 9.153203742520184, -3.8388376767476906, -3.7371335468980726, 2.845076740039543, -0.6208335141361729, 2.548738779522303, 7.6889000898400965, -6.729078997629719, 7.389097917712114, 3.2831408109793294, -7.093541504458695, -4.25290438370046, 4.287731779502291, 9.984764901750928, 5.818323382176075, -7.413180489346926, -3.9676997500155498, 3.0857887421715784, -1.822638867025276, 0.6531729652472347, -7.675380881548824, 4.113777348999836, -3.832480464600021, 6.44161334120836, 8.151344830323112, -0.8524823486026776, 5.500082570154266, 0.4636954961388291, -7.685398906580334, -3.961858418641187, 7.141105315056958, -9.96092016048837, 0.08983183528520655, -0.5399401530312851, 1.3051953052133651, -0.44225007138360795, -2.064088517562954, 6.0159230187716695, 2.683886259848851, 3.046055276517137, 3.967439107918885, 5.808611533606079, -3.331257950206168, -6.463335771932597, 5.430341801436999, -9.540833967756653, -5.424851234865253, -8.127667063527593, 4.371328761180845, 0.17392587808341275, -4.346719979895369, -2.528774860702634, -3.6294005537863345, 7.215235553882216, -5.587474641249804, 4.8216229080425705, 1.8269327992135374, 4.944864033510099, -5.677463624953423, 1.1886370299104563, 1.1846751111876088, 5.273326594739171, -4.624346228550229, 4.237511840172932, -1.8318704328224822, -9.361189742120867, -5.676783937408308, -2.8409853949168618, -0.8991087706306864, 5.310984136002716, 5.325884342435856, 3.3001059950510108, -7.240939547459777, 5.533824539741438, 2.4805734051532973, -1.794296539853251, 6.124425113802271, -8.48933723444645, -0.30441774073154093, -8.495378031544824, 7.865816873399705, -4.315385401209097, -7.462893077721889, 1.8403159559614615, 8.20875889858726, 9.233997507055797, 7.45105846876125, -2.1438850740773514, 0.44997122986612936, -7.785801019367888, -5.050631078910763, -4.653695062661091, -2.2550966904939234, -2.7975724987463435, 0.2681385947421582, 4.249415134335626, 9.89416472009961, 9.077010667203322, 3.9557653831622357, 2.721686391926344, 7.551137384016926, -8.96626294821723, -5.759944002767911, 7.785662545906607, 0.4542325897193784, -4.9606291757493, -4.216287879081026, -9.715550462932356, 0.5898744082054854, 4.772183986036296, 9.550291216228764, -3.257885824477638, -2.0834887081471853, -0.3344934657761467, -4.113198366468714, -2.762993880372835, -9.213537899615874, -0.15927946792281666, -5.753577027558059, 0.22276368872640617, -8.771849260648176, -7.4120814978278755, 9.074054696197418, 2.2898756403156924, 2.863126451962927, -5.485503131907336, -2.204946030932602, -2.8833437797193984, -5.335069455027344, -4.69696461331079, -1.0002787820913284, -0.905029370927739, 2.6443364793305264, 3.928013390950312, -6.193685603579828, -8.445592975880299, -0.9901470324438328, 6.521472015151929, 8.649945333736376, -0.676979686806817, 2.543616075569039, -3.9172393491999564, 0.27173527931083896, -2.1427766970468953, -6.042155849268931, 1.2030724136789424, 9.035743423410874, 1.552586273215116, -6.3597704481618145, 4.098995247051002, -6.709697380108723, 0.5763655618269787, -6.399694229937555, 4.002276042030585, -7.13692089294115, -2.435623120732049, -8.719181336158247, 0.018735427290589968, 3.279248968527275, -7.246512000542811, -9.619062905258541, -7.718847597047782, -8.507962908630663, -5.444049914398665, -6.603450641182427, 9.300868046626565, -1.1066605363082935, -4.502588243862546, -2.3107697667706546, 0.11592156530235798, -8.447216021469968, -7.384984801929326, -4.624736318580888, 1.5224673964760989, -3.942570807602353, -1.464406453127804, 8.586969871630675, -9.346701031533433, 7.097897131492953, 5.609639936644015, 3.031243176033767, 4.493755391019249, 2.3234377650248206, -2.2878257347843896, 5.528244821959248, 9.27751656907747, -6.505584710246042, 9.426257752630129, 4.02462166505855, 1.1833366891946149, 3.729434961080454, 5.986583870274568, 5.639140631586123, 0.4064427053000408, -5.335671810635166, -6.559597268026658, -8.157997225530176, 0.09991227717151396, -0.9517915135177741, 0.6336309059535044, 5.144981204692957, -9.231442262276275, 1.2724464522316978, 7.510497253822322, -9.437497041991014, -7.441303619206181, -9.836333360577987, -6.006268911613731, 0.8874401234177913, -3.132103920484866, -5.9076505077221135, 4.01439372841403, 7.3390033860077715, -1.075372868799061, -6.978504529703439, 9.641072759865196, -8.878584419095413, -1.3446522270343326, -6.52794367473732, -4.575552503707376, -6.351025084122157, 9.148818086762851, -9.453907705072897, 5.639011433253483, 8.489023776022549, 7.410794636224985, 4.298249027209778, 9.160187716307323, -8.807968259531435, 8.44887585937957, 9.91994862578446, 8.139130341640893, 9.941766999653762, -5.15767479962618, 2.5046831754334757, -6.1472821196964915, 5.425297928901491, 9.66767305276474, 8.913691130876607, -8.523385077020052, 0.3459790037918751, -0.11618619770143468, -0.11196549916003207, 3.9013952109404784, 4.268122738479425, -7.971987111735784, 5.711050607598365, -7.412455436976046, -9.92774183504963, 1.5233632626320457, 4.790799219028157, 9.802051249566357, -5.683584483838935, 6.2181741151770105, 7.9652561385837615, -4.609784529348304, 6.0038246858734325, 3.530968008000583, -9.745298774613156, 2.63857861934431, -8.777108242885138, -9.217247684291973, -6.8505026816174475, 6.0146894600504694, -7.958512475617729, -0.16815063933471563, -8.419245044136993, 6.312354427919342, -0.06453780712012858, -4.0663940750211225, 7.437178268879769, 8.715111827608915, -6.07346165721111, 7.8418905862324735, 6.269712627094197, 0.140212062061412, -5.891954864647562, -6.430778435754476, 6.789988804447255, -8.14840489365964, -9.175258851586293, -6.590234425432902, -8.858964675083044, 6.041329041518296, -6.7304060512594415, -6.549556954262048, -1.2637829312364612, 6.569467950256843, 3.6788600765834882, -1.6716723952461159, 2.0954280700692713, -8.905981521764652, 2.5191581564750205, 5.0836438740136956, 2.2202272602003923, 8.585118721043997, 3.3213501370306595, -7.875242147009514, -7.451006757690792, 1.5927620919621717, 6.049132691121432, 2.43247682065822, -7.533872734657361, -0.8537466046411595, -9.751941386825774, 1.0596641562065798, -2.561686341505281, -1.9140495092481302, 9.362056101600444, -4.380121734179574, -1.6412861755517323, 2.838145104454938, 1.453378253986223, 1.9391328494049418, 0.19056584983933256, 4.030338225856784, -8.47030745157737, -2.471444940791385, -2.4223841038840543, 5.705345867135565, -7.4868251460822215, 8.131507161687214, 2.180784588513575, 3.1627380068842363, 0.8821739374421149, 7.562634535549158, -2.2928912725873722, -7.2231690787427745, -3.2432393839870066, -5.005922569652991, 1.2879812734254248, 9.784200630334972, 8.713598603804616, 8.621284352144151, 0.6801658994190731, 6.823582381857552, 9.22772119124971, -6.366453337415345, 4.143120824805603, -9.2420636055887, 7.185743940120631, -0.7329856865482256, -0.07916983109290854, 6.590638623555222, -8.860434034547113, 3.5139570687711856, -7.431557726421136, -1.5438650960079983, 3.0665855952701015, 0.017275547375497524, 8.0931599638851, -9.828485067278736, -3.3800529144932723, -6.118524210833276, -0.18236876526170853, 5.457439970181026, -6.234684736771281, 4.73855600507002, 1.8896173325022438, 4.196904209193981, -4.803833687818959, 3.7129564398016477, 5.256544208390917, 8.03813034031204, -7.707661501359297, -9.2873093402056, 5.065265952472233, -1.8015925058107491, -3.646957504967549, -4.91182833000525, -3.0171935793485183, -0.600040684572372, -7.729667624055208, 6.711492113203015, 7.489158713444578, -9.244850242865823, -0.07310118243490926, -9.033160464170924, -5.292474901949489, 1.1867265301465046, 1.1779945006767711, -3.849082116219746, 4.1769513700741925, -6.7208145653853375, 8.976471256786386, -8.008399152227952, -7.860046533864306, -7.343229629374517, -7.387095196611937, -4.395185379728728, 0.6894830532782272, -0.3661814223963855, -1.76616210211656, -2.9590613408138804, 2.258584627226064, 0.12265337957806999, -3.112810962692376, 4.86715667430127, 8.470904003307535, 1.7596580681670133, -7.983121145056984, -8.873986253906452, -8.96180848045097, -8.894746278924936, 4.643099211079825, -7.341849587263363, 1.566138663717748, 4.856118975112288, -1.2990445350598119, -7.19281851206085, -4.285899087734862, 9.09696809541893, 8.892022411011101, 9.9240759732137, 6.266204064049859, 9.090979144262288, -7.949937138498216, -2.5839659431641167, -9.543725639198017, 1.8281454044426368, -2.906049009425102, -5.385421863442376, -7.617201971726759, 0.9139742817347205, -9.703994387821789, -7.0300833219264085, 6.275567081877977, 7.526965151832496, 7.268270386566321, 7.151997483321743, 1.9983802715883243, -5.858726621812749, 4.879627600909675, 3.8834471643582695, -0.8546209230038144, 1.420068396092768, -6.48508662019778, 8.80563594776164, -1.7196583033988126, 3.039750502541409, -0.13623211778704203, 4.011915765921071, 9.90711772495423, -0.850261180941942, -8.9078522756526, 3.8489730966404956, 0.5070036765116015, -4.253172975607853, 0.0904951040346127, 5.136228496091942, 5.230760909293746, -2.6396090859653416, -4.741052150839726, -6.75302076870129, 6.931218550220912, 3.457407166058754, -3.2759064127361537, -3.877877507584591, -8.009485616833373, 2.688992569440753, 9.035296032629102, 0.551159950798656, 8.814688196627277, -0.552859536316685, -0.3600980039193509, -7.5551146695613225, -7.847125133562807, -0.8775754924730386]
BIASES_LIST = [6.061911674254048, -0.8366828438871821, 7.196144441792221, 1.0634284325991956, -1.3496542570194734, 4.985911432996078, 1.629360068933881, 0.046903820131236174, -0.5336451683614634, 8.91415302451157, -9.454956697219332, -3.576569138148116, 4.386649643261965, -6.838035223400087, 3.573334387926634, 6.199315565487041, 5.434079673676777, 0.7343671175564417, 8.551545234608955, -3.6879973859885435, 1.7493048968045564, -0.8488041852525452, 4.22183590213983, 9.128344016618847, 5.456491449828311, -1.717317569582658, -3.520523023098665, -1.761925353231394, 1.6133884511984498, 4.612260575086609, -8.059666610488698, -6.741282776410347, 8.23669248021401, -5.779610592116693, 0.11137892475036004, 6.336204231380648]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

