import random
import math

WEIGHT_LIST = [-9.749320180987057, -8.20824341842323, -5.477087583866689, 2.644271455810866, 3.743977999578025, 8.39680732591728, 0.8603422720177356, 2.2121715923590557, -4.491176507088362, 8.029342795971527, 6.336475332686263, 9.776704321427239, 6.160216087181453, 9.118104383522244, 3.7775557482758018, -0.42556545946420066, -4.2515590509689405, 2.074425357775274, -7.0140007659110175, 4.706284918666686, -1.3346975597577586, 7.968680282987034, 1.8001151382996188, -2.1295470058987664, 5.525275658527862, -4.230773323537593, -2.3113118976227742, -6.759356109449291, -9.742636644257024, 1.3626362681579813, 4.124755747337064, 2.4401563757563434, 6.655652446672992, -3.8570440335786866, 3.252751858887512, 0.4449400831388157, -7.262913045674799, -9.101828422799942, 4.544897575209488, -4.792039082169581, 3.8234463526377667, 0.13378378464815555, -6.324897488848977, -0.21328977969307772, -1.218135870807732, -3.9715143668818076, 7.931858886283127, -2.3708469411155235, -6.243107422005778, -2.592443872643657, -9.085724043668513, -0.4989139110942009, 3.9196920490721006, -8.805997420612393, 5.177879464949042, -5.7474949384603775, 5.706946540074018, 5.755701747033806, -1.7727421195089583, -5.8890730064445185, -4.012984622158733, 5.973968071766171, -2.4672157464329008, 9.77747742112826, 2.6036599074476214, 9.70778654678086, 8.002934058583808, -4.870446312722406, -0.33018166647153535, -6.041595298529547, 9.3126578373708, -2.190438775078749, -5.341147492336891, 2.802996638491331, -3.5041876775502594, 5.835213691730068, -6.942245872808481, -1.0307873420701092, -0.9865997758222917, -5.539899362775181, -0.5031071260673325, -0.1171523095899456, -5.918189003758558, 7.2033033491313745, 3.8089849360176515, 1.9661699490729934, -4.3970210148190025, 2.088338658467599, -5.557759990918925, -7.970126299119887, 6.4051193795441606, -5.449070798617692, 0.19382970839088465, -6.98256116380356, -9.5857543323611, -9.940599160952377, 1.7382076505332673, -1.145107360102882, 9.99612400815985, -2.261000307953225, -8.263051795884937, 4.7952483937266805, 6.898836174607709, -3.128589500664658, 5.715536239031794, -3.7925484725199805, 2.2321200046036616, 1.217348507605724, 1.686640597900265, 8.680366290969538, 3.666225970929517, 3.7982176169975226, 1.474826212130223, -9.790842712374596, -8.766920901697596, 6.104211710798353, 8.447182984997884, -0.013423546999630886, -7.588320691605626, -6.363391010467872, 9.392606532595014, 6.629328632762817, -3.377552830288102, -4.534669422529425, 6.721617506032356, -4.601517129466293, 7.8034327056976664, -6.204371057686833, 9.543542684793447, -2.8041661091506054, -1.9723967572024481, 4.622753959445626, 1.749627272141952, 0.3724357753844707, 9.906543920549893, -5.268751659985158, 4.861317167975997, 5.654283330822986, -5.71242649319899, 4.643161923097072, -0.8421106464606947, -2.3806049743446955, 0.29912385332767677, 2.847373808321043, 2.0582556666563647, 8.053703264667021, 2.5187681467433727, -1.7320877156927494, -0.5803557526978338, -2.9964183736072503, -6.36437652309721, -1.8201118732980746, -0.6535919831604087, -9.478751786084224, 5.995715901394494, 7.538691254569439, -8.808411224258187, -6.118991948442282, 5.5963007771430675, 6.6798451296433825, 7.330642079369007, 4.018051453643212, 5.848906536404863, -8.93030691147147, 5.123953679744858, -3.450031805785285, 1.419678169100056, 6.4024033502382665, 6.652414750164372, -8.794986077633975, -3.9562690892061925, 1.5422263749604763, -5.704974241010379, -9.954017146936495, -7.173626939241339, -0.5770456558858861, 0.9601626027127779, 0.19410865860044169, 8.676510358800464, -7.372183177054083, 1.1629907418397138, 4.143290853141078, 4.571299165217477, 8.218463806091727, 6.92930392016698, -3.4111179610547815, -0.3736482504269709, -2.222852623443867, -6.14459936851389, 9.168199973306333, 8.219700994675502, 7.632376151840489, 2.9491593085892465, 9.497113980651008, 2.5259521604358586, 9.177164134670875, 0.7336400179330997, -0.5877233848440966, -3.290493722110699, 6.132334222932997, 2.5935420936783373, 6.45237849610503, -0.5085171568723581, -5.49616602940576, 4.527031879379775, 5.395891743805432, -8.720042006542082, 6.485027636608589, 9.036686399742603, -8.73631506730246, 3.185492516578938, 5.987702505354564, 6.390311036327979, 0.1829503055966608, 3.350251837299245, 8.957735357709733, 0.49953647657085476, -5.72489432678492, 8.506446420973798, -0.09359681894469496, -6.389734950425119, -8.908911607484594, -3.470078720122613, 8.215284411349273, -4.208005951757279, -1.0909697089268668, 8.401474627543443, -5.259836966188962, -7.913787286903908, -4.7708889596239406, 8.706801775375297, -6.427687242001927, -3.063701330945621, -6.338198933041239, 6.387802131537999, -0.45361019389547685, -7.911029533014924, -4.2586552657120595, 2.0058641619437427, 0.3217516733639272, -6.623694403070008, 5.0973007802719685, 3.185620411276158, 4.38458640510431, -4.780761756253524, 0.14702757359351715, -6.716507067380606, -8.026729871631563, -5.277805151620245, -3.1390652723236183, 0.41213944748204945, 9.442290354349392, 6.300713582975199, -1.8351223315821823, 0.024730527753661136, 1.2512997206889303, -0.1160217454068917, -2.9642588675804564, -1.8616277728212154, -9.868680412614113, -8.469131521432969, -2.0828527857044365, -3.883221209855458, 5.288912982339742, 9.809276623323985, -3.629143307726654, 1.2796287059118878, -5.994362199306675, 8.291648322729973, -1.6813321925637137, -0.014440896035942785, -0.07641559817423627, -0.7237573044837156, -9.574808789526907, 1.6379826755063949, 4.041113232211554, 1.4015746070826793, 9.897737648267345, -8.433579653445346, 9.893517767985603, -7.348403146408775, 8.741892791276857, 3.1489285341894657, 5.361454702180202, 2.403706188021296, -0.7174416655060796, -4.817330779582689, -8.683531347802262, -6.18334923986489, -9.394656982004433, 4.194966040385177, -3.6496287851965192, 5.289895894569543, -7.2076950221539455, -5.75955739773798, -5.408051087385751, 5.592490570660731, 8.960132869004475, 4.177927542711563, -6.527938752722546, -8.223598205045251, -6.7993466494402055, -6.757458662375726, -0.7730018355371975, 1.4395463737781533, 0.817266138444694, 2.076679705806434, 4.661124071657239, -3.8824075388406136, -1.9205135113778375, -8.44509101620474, 9.341040398185829, 9.809806999200024, 9.13784505018523, 5.944399511165345, 0.12095855066456096, -9.623146142472008, 9.882278560985164, -7.919492854967427, 7.454204734734141, 6.5587304767354055, -4.86049602418273, 2.678300419737642, -7.134675374334294, -8.284535608886298, -7.26515046267097, 0.43574859748099826, -8.553202914173832, 9.00540277347364, -1.0113924486965544, 1.835042346445464, 1.5790352689607303, 1.7213988092624088, 4.328555339552063, 9.562449910315081, 7.667014434099883, 0.559143673407096, -7.653911965493365, 1.349773112604293, -6.453490697734583, 3.4742123117034733, -6.097112541254221, 1.680295218127874, -2.0261419083708088, -0.02732838200745924, 3.1812952150101914, -7.443783985217132, -0.2742231439737317, 0.25294048833304394, 7.2517512962384565, -8.32634906193019, 7.078920532037763, 0.23732984129937584, -7.336310869786525, -4.956372818293142, -2.613703357728861, 9.294511741206911, -8.7113492538489, 4.8606363106980375, 0.8524250300758247, 3.218565784099834, 8.673090347864939, 8.101093884737821, 6.848216873464995, -3.0889243872415957, -7.491875607371579, -8.968524026708504, 0.7640239733682073, -0.3456061399140644, 3.8261900211715663, 7.111220598312386, -3.87940375757045, -9.447864636206763, -5.795414824007265, -0.79327583354873, -1.2427244000144473, 8.697716344587214, 9.228893173419628, -4.134222611985767, 6.159364813980574, -9.125408795819247, -0.4933995551095798, -7.693489135985201, 8.045570530269543, 8.64909428910735, -2.6949544872290847, -8.284784952411716, -5.561183385175045, 6.000975672070474, -9.157039132446855, -4.381579265093487, 7.904274855302287, 8.219757970730207, 9.324560637115393, -7.902958378124005, 7.030963341613173, 8.22381360333123, 7.604938264276932, 2.074442100933636, 8.163088930530126, -0.8032388925635932, -4.255673835391624, -7.060344587672107, -8.175584306328442, -1.9590136661690494, -0.11432045190507978, -0.020859332357636262, -6.896281521023242, 3.940385409966968, 4.135520101355429, -6.935831833677026, 7.773282902217048, -1.4193107189660452, 7.4670589312593165, 5.0378026835401375, 5.102200594803559, -8.486740665351636, 8.220974170565288, 3.677314858042905, 7.07424596655542, 4.770660505384125, -8.102855085552068, 9.748202961617796, -7.873254179626641, 4.221489086072655, 2.477064676555784, -5.072817206991638, 1.0884719256859725, -2.9718076209695337, -4.261201649568418, -3.483010539953457, -7.361152986532105, -3.894049328470526, 7.443905808050502, 3.679292981053761, 5.669520350176869, 4.085207368188701, -5.510232256182299, -4.525668466241008, 4.586628420969772, 1.200205953899145, 4.6492729343429495, -6.306381146352096, -0.6694065472166173, -5.086865829534844, -5.610239725804762, -9.410442819441858, 3.8962489099516606, 4.423831638297477, -5.716133425100867, -3.1080824307872916, 7.386060349188398, -8.669411889844053, -1.999980279394924, -4.719018414713226, -6.314610159923868, -1.6038625009120082, -5.199344758115407, 1.6656852370921786, -9.35662895023361, -3.1256331062653597, -0.24543010920048047, -4.692913470657388, -6.64416256140874, 4.326217402141456, 3.2123959107686026, 0.7819878252777457, 2.651816913516411, 0.5073037132008729, -2.142725971090183, 3.599335791585755, 7.949750582957606, 9.819637168742627, -6.8152287974920345, -5.370896753059675, -8.608724704952495, -8.614129960490649, -2.812702321937537, -8.235752900424021, 3.621579475658738, 6.592834217609781, 9.628532339327165, -0.8348052204249878, 4.8713373278078915, -2.4346872626296223, 1.7242509696695656, -5.213248302280453, -6.760883928175179, -4.787229786154565, -6.823756832803742, 8.968159045317698, -1.1704712096924812, -7.268763626523684, -1.2372513044194875, 5.562290584178765, 6.929268062170863, -5.232434904323718, -7.158501871779672, -5.178637396795535, -0.7114826919559398, 1.1349732910847052, 5.415387013027008, -1.9218130842036647, -6.909939775055614, 1.077835818469783, -8.41681120262119, 4.6305748209701, 7.403573741464367, 5.136592164884288, -6.526381639330481, 3.340061837946669, -6.856715145543209, -2.350020001997544, -3.1146970434883947, -3.18072666416497, 0.6504072363187792, 9.927906949472003, -2.350186056743584, -8.370280994459351, 8.042655368464064, -7.055038135746734, -8.588137688650265, -6.201086327640526, 7.322499211147409, -4.477730253535226, -8.329597513086629, -3.866472404284071, 7.284299095414184, -1.8761872803016253, 6.486452674296828, 9.612706647860136, 9.832842469507217, 8.126162268280105, -2.4413201385872485, 1.7731879696214374, 9.082221150087513, 3.950469265904271, -3.5963569195140703, -2.2567292272582007, 8.27176945588974, -1.2130249230106411, 9.275451791369314, 4.28251564270324, 0.9468963516561217, -0.848712786433774, -4.702435073965829, 1.321775271412406, -5.70819420178541, -5.700530020330441, 5.626282512703115, -5.360585548018202, -7.57623961300669, 2.317423144703408, -1.5400482793587749, -1.20504416163989, 4.848522710093011, -7.060964446235993, 5.200238620153399, 5.317590712305547, 0.6100384737361537, -1.8789264241559032, 0.5973063212783476, -0.7697532574957968, 6.978580057231859, 1.9119415652228522, -1.1514652296774592, -9.563510454039417, 4.444781818160076, 3.3535595936049045, -9.806874155026087, 3.430453907939926, -3.0670393838326593, -4.03115970157875, 2.7881574184638183, 1.2316406188647342, -2.5955501335354647, 1.866970276656044, 2.811513419159562, -3.0046162578140123, 5.4736026286455175, 9.435802864818804, 7.6929412222204085, -7.534789606580352, -7.998826908495252, 4.634539121299175, 2.1739354406612055, 5.442929739814488, 8.863456906665888, 8.888762658625929, 4.364474079177592, -2.621193062026796, -2.038367672813857, 5.588789130577634, 6.3112572070681985, 6.535498027757182, 2.2787615403534502, 0.8086520157652082, 5.423769804996221, 1.790760844992871, 5.250659360079004, -4.3237227949302675, 6.159429501184206, -2.9961329820007805, -3.4102510411662763, -4.029560121361633, 7.423122157324286, -8.117793207931719, 0.9398767457261137, 7.623262256512099, 3.748610067717733, -2.115617182164387, 4.717417598752032, -6.952737566454033, 3.732622861792601, -4.852194687913272, 5.600612123802222, -7.248633763144088, -2.6618722714188277, 8.882091241396573, -5.14199352212712, 2.1580609874121386, 8.08869556507489, 9.467620030094633, 6.471974001336758, 0.09713213407601984, 4.9273668382354, 9.321964662181689, -5.004052848827916, 9.348227561770038, 7.438761558192194, 2.4848102716042657, -9.599321976806547, 2.0680743685928356, -2.4202043854770316, -1.5562290020861287, -1.6822602290154531, 3.302720362538043, 0.9362277390258527, -4.36807581098809, -1.3404861862602324, -5.111170712182713, -5.42347731536794, 1.2668143017260807, -5.452661030302268, -6.844892539858032, 0.16034862319232168, 1.6327069525769993, 5.75165899567005, -2.651616809110882, -3.6214949128727074, -5.097390342923383, -6.866598716423065, 5.847196373196976, -6.755139563928864, 6.895848601323362, -9.802646753270817, -7.855642706616209, -5.6223545627211235, -0.06199464879026095, 9.223393002923796, 3.5262127752053303, -2.798980258378039, -5.081009913084831, -7.01272375338867, 6.723368623300168, -6.359519507769438, -7.404619456177852, 7.985249271875389, 7.773266321548693, 9.743024628940582, 8.835606202558466, -4.841242204991025, -9.347054671972986, 6.672168214662598, -1.2718034163645076, -1.9895340180451484, 5.715743573656738, -7.971561954622171, 6.264359891889093, -1.6041928819993618, -3.9590828375282268, 1.2494239079278202, -1.5339073406052162, -6.264040538103446, 4.238945129077077, 8.879855415293264, 2.9356271641552567, -0.06216589567496911, -2.306963727847142, 1.0978539473107158, -5.61835636995617, -2.3469258691496897, 0.46861712390557386, 5.315095289431447, -2.753952556990738, 4.453059432813049, -8.948800060003503, 3.2212073701473454, -0.5976163577689881, -2.7334157243865453, 1.5334144042870275, 2.601961050086551, 4.159149172277218, 3.4363770848418405, -8.419917823717588, -7.214472176568167, 6.4398314268958465, -7.432142644364379, 4.60583600930903, 9.079093656944007, -5.673511724192604, 4.558011789248049, 7.129231454134434, -3.872715799537496, 5.546124206426956, 7.958640418432022, 1.341079792170552, -3.8986481771070736, -8.987592139990694, 8.458450437049848, -6.047213866692093, -8.16157189624132, -9.47487063012434, -8.784745841898767, -3.6225094283284616, -5.981612030566373, 3.2476715708678334, -5.623922823877532, -3.5560864145395783, 2.4901245909554977, -0.7603089522390434, -5.76329305009769, -8.36962369147871, 7.911823477811993, 3.1713000494304584, 7.227454474239316, 1.0545344942112997, 7.354466982989514, -7.10686597209409, 9.14609421458465, 7.2915339059687625, -1.7221536636202721, -4.515163248446312, 4.691818391412399, 3.9369854138058855, -2.6914711278298515, -6.164724545673574, 0.20497026240999539, 9.408398630795343, -9.90636133709771, 3.5591676532529366, -8.508755261680365]
BIASES_LIST = [-9.441347612330333, -7.503754211326146, -7.934803576494119, -3.7763037241497033, 6.932993498826335, 2.902784972636379, -4.926247291005241, 1.0610871220773017, 7.864332822035298, 2.9135925710370465, -2.2862182166681304, -0.6616271259416138, -7.510306681803998, 7.897496252577071, -5.099686427177367, -3.576285554485148, 5.983048915865716, -4.851224742098625, -8.666616616422512, 4.435221518639821, -9.879056159929075, -1.4430760502779787, -7.596633494107459, -6.850854014250944, -8.933378764788493, 3.2927506485434126, 1.3425205872842305, -1.2765092774215088, 0.946237278411834, 6.064616727488286, 7.425946786924218, 4.453452249639504, 5.689381639329952, -8.334892842108852, -2.9333152502950055, -6.876486634282997]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

