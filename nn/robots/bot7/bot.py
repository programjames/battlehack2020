import random
import math

WEIGHT_LIST = [-4.095859972867393, -2.375689675328502, -1.637304922960859, -4.093882597341077, 2.698073238539929, -5.6836318406751545, 3.805095797061938, -1.936350650171873, -1.9784317764767643, 1.9168102204393698, -2.0829233747075175, 1.6517253666378622, -3.2907710734507565, 2.404408543057286, 5.691532378744707, -0.5461895029872383, 3.425948093102541, 0.010292263339156671, 0.4782262581814991, -0.27105325259281177, -0.8212159601389969, -2.679029819634197, 0.41168968434211584, 3.022615351933081, 1.0790236583907915, -2.7755026379427643, 0.09507841850749399, 2.4898929611352276, -6.719071766422461, 0.6024697089251094, -0.06952326546694843, 0.3515789148274131, -1.7144330292318946, 2.1444375909501194, -1.888204862393749, -0.7895450902413161, -2.6547813128158575, -2.9475431188979484, 1.4940682944007921, -0.2604210287028559, 1.6446734214606584, -1.0651313969340839, -1.5941625265798662, -4.5549907299570185, -4.128207719599356, 7.995554040610571, -0.7884973226595711, -0.9891027153446554, 0.6575945748628875, -3.2280355049214196, -1.0008534244478104, 0.12063807328926779, 2.5450619091641427, -3.7294818912610834, 2.9336763989804906, 3.5867660196657187, -0.4727215823158496, -0.5343402105670523, 3.539323735105806, 5.348896022869971, 2.8174516777265466, -5.099559486941438, 1.9492158631589511, 2.485176233956305, 2.1770244580609424, 2.312371077142031, 4.258420068889967, 2.82108251873509, -1.9301151044971188, 2.6996563658580186, 1.738628413788979, -7.418626873603662, -3.0034005343377093, -4.38968577451464, -1.7627728090511898, -4.031875273183119, 0.8866046279700794, -7.67867590828836, 2.993304549193802, 3.077881909830473, -0.5422561362845966, -3.9637034672502067, 1.509317601731726, 0.0015560874908733258, -4.586445459746855, 6.339966120322078, -1.2215482188100364, -0.34818027770701465, 1.9451743794506373, -3.402535610657546, 3.934280151289773, 1.7069116608516879, -2.3387077073344367, -4.514043880278793, -4.904385791290169, 1.0728695876232246, -2.7737443370275288, 5.820976833206253, -1.9961324483423062, -0.9140495017875401, -0.5063179349626605, 0.5561376547025318, 0.5086681785114164, 2.287274969611588, 2.494101318488859, -0.15134424949089575, -5.104691122109315, -2.382226233050976, -1.670117361632562, 4.2055228917553364, 6.707492139028488, -1.6718409937469887, 0.6245413035747942, -6.669538324287294, 3.905379870968016, -0.9094688159010518, 4.7832893196943935, -4.413180825569272, 4.261065403430122, -4.951988113911698, 0.6258994548287262, -3.571975185464919, 2.512587477573806, -2.69949077990084, 1.2439341566535287, 1.7619542884591906, 0.8518893797804059, -6.386401649293196, 1.3665291722251132, -2.5323300746453916, -0.6691928111271417, 4.721176421949817, 6.465495602812665, 0.43175320508692105, -1.7014093517451727, -0.14020626278837756, 7.047455541013649, -2.72177211039042, -4.638502578422752, -2.158664711521391, 3.599394696859215, -0.7613591334172658, -5.137270349005675, 0.6500344940470906, 0.48987563234224374, -0.19842381106386853, -2.924056255598469, 4.770333486573109, -0.7259122403450906, -3.1100868803861283, 0.5719848129935772, -0.5282535232776238, -6.012898421080875, -2.3748817076258635, -2.5043963520891035, -0.09076473337927515, 4.086546252363196, 4.445521043036074, 4.045318357641185, 3.3520652207421637, -4.060595161616353, 1.4344079552338416, -3.2653162078398856, 1.004598423740532, -5.512143796355567, -4.392016325996948, 3.1780597852219534, -1.360956643775417, 1.3476867706983313, -6.072936821013236, -5.702168435923834, -2.669424103930875, 0.7820267315539229, 3.2301389918431873, -3.7100496049896923, 6.276386075619413, 6.3328215595276545, -3.964428093666224, 1.876036871953314, -0.5809067147729363, -6.078017737740922, -0.626528115394676, 5.3459076245501675, -1.7095122618003584, 3.5280700416498387, -4.140383651680388, -4.701053668831655, -2.8990495302992842, 3.0522615941811004, 2.3104254585215593, -2.356682036165673, 3.474211620728214, -1.4508001013260514, 0.5510639578330572, -0.23861996951542852, -0.2835563585155658, 5.315860931098719, 3.390600660264311, 2.2596181104203663, -0.8590757444417132, -5.288199350550062, 3.379709972455186, 4.667141891574466, 4.074152417559113, -1.6546608931285613, 1.790734318427777, -0.9093524294259205, 1.4847887978820529, 2.370418776924981, -2.0156797668324256, -3.8700881737854047, 0.46163913470897233, 2.3219629369950945, -0.1874766252734219, 6.118813189672664, -4.5734043090985255, -2.6548234738736705, -0.9936457201289108, 2.094787927303467, -3.5221834443685154, -5.907311361523818, -3.2425414500595044, 3.0076311485558556, -4.087631170217962, 3.205438592409908, -1.1851766804491088, -5.54663156509237, -0.7986936413541659, -0.02294718992808298, -3.7953691464843846, -3.35505186284614, -3.914975003359878, -3.5695612368707126, -3.8567468170790216, 7.126663250248173, -3.9250531521388385, 7.2047763541815755, 1.8001732052872539, -3.025473488032763, 1.4561626506840044, -2.895831249322722, 0.3952897045252062, -6.810509513774213, 1.3156762258552837, 0.6613708832205734, 2.6512299890172235, -0.8025769085100601, -5.4271059712498175, 2.772785471869253, -0.5904077618640198, -1.9857634494043885, 1.2486239333248799, 2.188638550725824, -3.439646920382907, -4.713453998221929, 4.393551905680239, -2.223869499255465, 1.1044891131574346, 3.6211340935637493, -0.31940512853493797, -1.7514808187291953, 1.8735480503103874, -4.088929226365341, -1.6425983475649666, -1.259635638066236, 0.6498722722975909, 0.6491468342553015, -1.9932969251182262, -7.582382815489072, -2.299407724968848, -2.5500255150339477, 1.5899493959041413, -1.5883824231566026, -5.833451175353425, 0.14560645877365963, -3.3772032220206816, -2.194365395211913, 3.347324608817269, -2.4361478365841016, 2.5314135184801483, -4.548955763997286, 0.18699293258293403, 1.2082444929559295, 4.383739678317561, -1.385845221844079, -0.8900565535878022, 1.2696417399280762, -3.114094572678063, -1.6694702139604896, 3.888262060753908, 2.3756273138764854, -2.9720691580183236, 3.036918016685056, 2.656543418102043, -5.002384785841721, 1.482041994365142, 3.2947493981139866, -1.3314902348160857, -4.098270374235442, -1.147207339334929, 0.7184090791877091, -0.08435190323608821, -0.4975974183270382, -4.720126010703124, -6.937881792464572, -3.3993667474092844, 1.5641512498414016, -4.4743776871549334, 3.5301465975994306, -3.615956655662662, -2.1562862298032175, -3.9285720538125872, 3.993785101875158, -2.84931965276118, -2.364693176321145, -4.76162719151118, 0.849119219151458, 0.06888137890563306, -1.2039560992542209, -2.1202436910861167, 0.9842776762809389, -1.5422504636415755, -2.3110587564666885, 0.18419583229433534, 2.4012466974176387, -0.9023266986953427, -6.364683033013961, -0.6282770692620487, -4.959523231255687, 2.282094090252491, 0.7722435263095853, 3.873716235487646, -5.965746130223095, -3.8247425124910963, 2.7183244157439366, 3.8686047732192668, -4.142647830854994, -3.326163655034092, 3.7988168095229176, -1.8050968914129206, 4.4767459453540965, 4.0424797668948695, 0.8267009369220055, 5.678094852266939, -0.6488368302475764, -3.062334999173286, 2.7885792134859386, 0.04256927706118918, 0.5331364477942888, -1.563856616989695, -1.4002958436769743, -4.462001474414391, -2.2312001379092914, 0.6182589719084848, -3.511913603688372, 3.1652558169644402, -0.37364195225095953, 3.8074627695458796, -3.831293928834828, 4.303574310538691, 1.6987636113701452, -0.546035657473088, 7.027858569919628, 2.3485865566712816, 6.572712282037406, 5.110783085341617, -3.3595682075115816, -1.740697722433739, 4.35239480001388, 0.7616508507795232, -7.2895951558633705, 2.1255077046204818, 2.43157087192236, -4.820697246750273, -6.50134918368763, -2.2929631653652085, 3.5037428011052416, 2.850007036642011, 0.44114740829313237, -6.4400410187352275, 1.2004839814489054, 6.939147937958285, -3.421199095018471, 3.254496843397904, -4.144577785036839, -3.111388768308494, -2.6866657949328023, -0.774268655180627, -2.9471716120304015, -0.7849755462318675, -2.3326789812771267, -1.800596364386367, -3.1159552112978735, -2.47819725878169, -2.4776897713947594, -2.296055750633948, -0.7792633816723091, 6.6179064713896105, -0.3698278829189653, 1.6583912951682525, 4.2464141728692875, 2.7510418180513634, 5.502953578412435, 0.7614994377878492, -1.8556753175947713, -2.6560173508116236, -2.829805041150615, 0.7170145339522369, 1.286595972351619, -6.292402798375502, -4.60863568377136, 1.2528780349446382, 3.7271036221377667, -0.8707802873834918, 2.3288190605871906, 1.480341479459589, -3.155618632958316, -5.2043917513402045, -3.5902191256921254, -4.280684943332206, 1.7137610527610825, -5.129240587646425, -0.9287472081076245, 0.9678701725215, -5.707004970689409, -0.27917419093937657, 3.8399819474712524, -1.696203151938643, 0.9193872246707047, -2.2789294231045316, 7.292939972754889, 3.6536489981458624, 2.184469406073065, -2.840413560750121, 1.7350155661028914, 1.7701910088438044, -4.403893173913698, 3.934916337978845, 3.456829995727034, -3.1172779188337003, 1.6158133007739517, 2.9121720045510955, 1.3674688873424081, -2.004178702332843, 4.9179952434925704, -4.159738691218396, 6.193182159226585, -0.1924840659921876, 1.9915514072369263, -2.885365074454856, -3.027525387447504, -0.9456229056503971, 1.129365575960887, -0.8032966516677165, 0.53746413199243, 2.7160068631309144, 5.6551219854865735, 0.27252489313640726, -1.4874059473327752, 3.9856576722969885, -0.28354823536164486, -4.969846434746344, 4.935806073226688, -2.4486990462635623, 3.9057022673161486, -3.997049804767137, -1.3022596741506993, -1.5056091242453908, 0.5582883994974157, 3.1361826562261497, 4.771656446715326, 2.166852822549197, -2.2236044115795597, 1.1496197378655273, -0.4402337915203689, 2.9491351394056133, 1.648371104566544, 4.478879634315923, -8.161083513286535, 2.082458261713624, -4.834075133963951, -5.859978079163143, -0.09035695915521158, -4.739726930397396, 3.7204582007658873, 4.4670093598757346, -1.561605713669916, 0.09301054105800133, 2.9243233945974167, 0.45937267992647746, 2.9401584144429576, -4.880057511901409, 2.087445990829555, -4.853469347036757, -2.689655296405572, -1.4881669323486832, 2.0110626600588706, 1.9635045101483937, 2.9404363433133165, 5.566788102531382, -2.6500594037051317, 3.7331984053592624, 4.697536577056728, -5.357628916579105, 2.3994782915233555, 6.615304560402258, 4.416661913708058, 0.41066280271975963, 0.004885341169532653, -5.179497318881066, 1.5261698737929388, -2.0782003315376993, 1.342419353732553, -1.3137728585963422, -0.47398340438206743, -3.1099463316182265, 0.03567887982294082, -2.3992712933708304, -0.6524375582927409, 5.355535437404312, -5.335018095123557, 3.152970883299324, -1.4469366722103583, -1.7006694289917836, -1.9447793533743742, 5.954721015731836, -5.5964373556148015, 1.8836556285096444, -2.679893185178094, 3.3543686185642922, -0.21072905391808394, -5.179950054457837, 0.0070656232149841625, -2.5474614225746186, 2.8928713387007905, 4.610059593232097, 1.3766715156767555, -4.86691324697228, 4.132020921504792, 0.9173804422220144, 4.814504569038322, 4.266501728004033, -3.8418548176898932, 6.182308791482241, 4.275404052704513, 2.3799367137668943, -5.119173553387741, 5.233187985683131, 3.7521374362227045, -2.777289770573612, -3.0891083946070115, -0.36516521801301205, -3.7213598458717665, 1.1699992778888828, 5.996999868192171, -3.650488642038901, -0.732475832032164, 3.122333513097712, -2.100773174093507, -2.126597630503374, 3.0852409687665263, -1.1438521063017366, 1.7065285530849055, 2.60772547343921, 5.8639341031207, -4.198455925103933, 3.584001921780107, 2.665098092445577, -1.1757819873035376, 1.5771824905531577, 0.28927199884905286, 2.541181913354239, -1.2100385163116019, 3.358070396186836, -2.781221658317442, -2.605636191186572, 0.8714329517179225, 0.1072244601220611, -3.60601112746408, 0.08471746898116317, 0.3659003022704419, -4.100661940290607, -1.523902176186163, -3.594378114132722, -5.623376308599169, 4.755147176133408, -6.448767577962295, -2.7884927813898766, 1.0547684058688014, -4.761786604155562, 0.8180416541916158, 1.1861551426954855, 5.277337740867454, 4.235413705086956, -0.598588957020129, -0.5372528062787061, 1.9341467009031135, 2.7386393890036467, 6.580496987267646, 1.4267400511314432, 3.6328664399595114, -6.742853683376784, -0.29472856385664925, -3.4822167371268304, 4.51527470363419, 1.4755321671046397, 1.540862336587809, -3.248196088232981, -4.996845571494871, 3.5703976603727394, -0.1920565712929756, -0.6423851082735803, -0.4991310900563948, 0.7594470061271221, 0.2487336912036313, 4.5082402864998, -3.5149940550077083, -3.358886289577004, -2.761776074720696, 4.372778356758548, 2.0549650390066505, -1.2666195439775065, -4.4382049343896455, 4.044434612404052, -1.6076560605031651, 3.6795414610883466, 0.29565522082261886, 0.6748175107549705, 4.883168423167183, 2.2216763243054745, 3.843338673740246, -1.7967545512600118, 2.1302924996714854, 2.2801539363307493, -1.3796852775352613, -3.4406849060558704, -2.445584608882978, -3.038839563540841, -2.018452385536661, -3.4942411997919054, 0.4916778075440442, 2.1016082008111265, 3.6059521175989175, -3.6527703828612577, -5.089520221899463, -4.921746148167875, -2.1024411966747687, 5.689377774829798, -4.913478262097097, -1.1348831411521563, -0.534588560586557, -2.7950140445144074, -1.6763698171465362, 2.470552888218444, -2.121869162144432, 4.265187042199976, -0.9713967589982107, -2.4240667093061647, -4.540598021566213, 1.0718010786934138, -2.840493263797169, -3.029852732294999, 1.9265068866658988, 7.205110512508906, -0.08072137630707599, -2.1768237042631773, 2.1812749681452592, -5.200616885158659, -1.505917811125057, -0.6869703089052799, 2.945104665947818, -0.62568032795983, -2.7219202857903726, -0.4107525674625937, 2.722597037414875, -4.923547154438354, -1.92327778625985, -5.375055774025056, 3.300796155646985, -2.4345627941394477, -2.7938701744298635, -1.9899758426200376, -4.4012167691213335, -0.4506122357350557, -8.415849028906083, 1.1367798465005698, 1.0062759550923022, -0.05852607071293581, 2.042805287576493, -0.5882548600527657, -3.6053733704970883, -0.8532398852772616, 2.930697633033882, -3.9742352015129367, 1.644913009728211, -2.5679201500329865, -7.513097212728709, 2.2377050802102874, -0.7909434661525594, -4.58934778810392, 2.7855755373709945, -6.180725912500856, -1.2431066654091436, 3.8423457170985085, 1.5097926625791436, 4.288686528298334, 2.0176486395293756, 1.4214514783278416, -1.706481396538285, 6.538392562226385, -3.8675604413916007, 2.628101260448104, 3.0260169023917918, 4.085411765309238, 1.0419832743167916, -4.125682861244957, 6.81374956123823, -2.969129726985723, 1.3245868476733458, -2.166598732702025, -0.7210164748956738, -1.559483172770656, 2.6981213721789072, -4.806928632990987, 0.187143271298706, 2.167689384799403, -0.5040700036821404, -3.050453270250065, -0.6966149469324843, -5.233982757002271, 3.7233870145122188, -0.2824954664768, -6.196652043742442, 3.1772084231555153, -1.7164387012552804, -2.290606942952976, -1.5750461524366979, -1.840393295108417, 4.905415011000732, 4.499968689426822, 2.3379370763293723, -1.0238401623416606, -6.750549144683747, -5.775015961905851, 3.6526886799735108, 5.443159230234422, 0.2486759102056859, -1.169190541415524, 2.343614241643941, 5.254605475713742, 5.57863218727146, 4.371453181100376]
BIASES_LIST = [2.430546627048345, -3.629147215521958, -4.7265691073769664, -0.6681600763994016, 4.200633104613433, 1.4945628545256273, 4.621960206559878, 0.3802668136762497, 0.42103961427804193, 2.971640045619823, 5.924804242255857, -2.0962666869736646, 4.418968360117638, 2.0920756317223437, 1.2321207410089237, -0.571658523157675, 4.884289462314756, 5.291022626023861, -2.6745860118782545, -3.5770781511862406, -4.5249633746177835, 0.9065381816813174, -2.0820653417190185, -6.259217563344041, 0.04724031703218534, 0.5915863320348425, -5.9117325261040925, -1.90982501523799, 1.9941960361831716, 0.06570105340207433, 1.6997008723091742, 0.9516789654982285, 1.559963075276718, 1.6703948740699532, -4.543834262696047, 0.38828953718250814]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

