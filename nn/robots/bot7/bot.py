import random
import math

WEIGHT_LIST = [0.5604799869331119, 4.90701362720353, -2.3236373943005684, -3.5588601899701673, -2.3226219583702488, -5.296660040226164, 2.880054440539392, 1.8344040608586292, 0.8165202415985146, -1.1021315074307987, 2.6014666824352233, -0.013499049909009693, -0.9084279102352013, -0.7555038657724615, 0.23310378595453235, 4.933084092279298, 4.680827586409656, -2.972434003544369, 2.8404351362499596, 1.8335123273696585, -0.37574674974113553, 4.358172495535937, 4.925197008433177, 5.40571882691902, -2.118224916600863, 1.6055993759982858, -2.198577294855171, -4.35655100866356, -4.905630889313586, 1.392393676684773, 1.3479191858021295, -1.1077691512134675, -3.3977417432629573, 5.246031061114971, 0.9996107194745527, -2.4835982639484633, 4.146124801511255, -3.2797362121114264, -3.7620942647398956, -1.0281731134513605, 3.828369025622482, -1.8621385262229848, 0.42034109534215863, 0.17150287200117834, -3.271035432551016, 5.721032701773999, -7.876875627381055, -1.0317621280289062, -4.615356041746614, 0.8806582173172272, -3.8378725756123435, 0.6663228150782945, -3.593140402389484, 1.8843083811935724, -2.248727706497622, -1.6054641307804134, -0.4095058420690813, -1.9823759882907006, 4.900323574577043, 9.86884137902, -2.1875238775426866, -4.487464727554283, -4.3041763426085895, -3.5199134552772486, 0.7372382260451852, 0.20630922697703205, 5.358371432001996, -2.1957347858336878, 1.2294051621328688, -0.6801529242430584, 0.4485155008768275, -10.343770574154545, 0.4870926312629606, -3.6922784162851032, 0.04685145162806807, -0.9703306969997341, 3.394081786132196, -9.793897461098755, -0.07461952425096711, -0.5624968656615711, -2.4120884715781337, -1.1096686346567153, -3.258160213929693, -1.2108364124552127, 1.0113290089226372, 4.7978547985865125, -1.8334245411887053, 3.987228739521828, 1.3674674756948855, -0.6795558012594032, 1.0006782079364618, 3.779405455781827, -1.241362774354662, -1.066132685818216, -1.5782172771070384, 0.532717134804858, -1.7593196441521717, -1.12723183893516, -0.6193312707877183, -3.687565748513732, 4.124656807425587, -4.822740329387558, -2.3409115260867117, -3.611254233030513, 4.946009976226928, 0.753645844425019, 2.7005208506304625, 2.6843893864864845, 4.962072904600877, 1.8685445375251368, 4.390176318227781, 0.6077021280576163, -0.5293890944564327, -4.32401886091445, 4.455123507088213, -1.7157686552406382, 2.5414347672095965, -2.762054408404872, 4.556316230985357, 0.5678839893457209, 0.6194996694363926, -0.17025118817496046, 3.597479868435381, 2.614323635964641, 7.021287584426041, 2.4409868463182463, -5.375918918741466, -5.623328877486441, 2.5590023374103494, 0.06350269961611552, 3.628580166381888, 3.855614252919481, 6.508035011207224, -5.741489024606234, -5.206847711299754, -5.156133745149325, 5.251416518733034, 3.505207549242182, 3.5716662521302696, 4.552356625782943, 2.0782781588995975, 3.47250678663481, -5.230896966499783, -1.0410674761904153, -3.6732084506260922, 2.529315699519625, -3.9345350062754902, 2.488018709696655, 0.4532984950594917, -2.4729854435315457, -0.4271503795885457, -5.101674368604856, -2.422559632375262, -0.014199576122976895, -4.150271359059605, -8.68083689232941, -0.22019371097645243, -1.804199696135875, 5.45762958261614, 3.8061754224122457, -0.9381811779934252, 3.8458519595436753, -4.553850101702554, 4.478912044655556, -1.1338407599804352, 0.3622481727436142, 2.1152661410058275, -1.7009313483310196, 3.370684012714104, -2.610106906915773, -3.4553157424655514, -2.417663334811147, 2.060960927030403, -3.2801869526095517, 1.827775927051381, 0.18557502371713747, 7.307040157949644, 0.12834021287583203, -1.2380457743693472, -5.38224371816286, -3.2223164426873505, -1.8875100542157568, 2.1518902565052658, 3.644401029763703, 5.112832519971021, 1.1379901020231467, -2.6322701534953747, -6.101588760623144, -2.5160594183387546, -2.1397002444450157, 0.06679442611807644, -4.289583458262157, 4.565343185491762, 3.2550739047422006, 1.9185055583829353, -0.43479246141745753, 0.7605992415096668, -0.5175994909199179, 1.6708165852787664, 1.764151209710386, 0.11283880877270862, 0.7181394553730908, 3.0320224857626723, 2.4165706739070933, 2.239858993259917, -1.3481528487844332, 1.0250329449159312, 10.579319044573158, 0.5999183163052997, -1.1186442348828547, 0.614659205748156, 0.764349639824014, -2.9515327937968765, 1.300650944459704, -0.6573612346825638, -1.7672090808063643, -1.6014472160050204, 0.3395115147373645, 1.2997053982263171, -0.7515447656599886, -3.9258914257968383, 4.081053480709051, -1.568209502968533, -0.937480290542179, 4.250817181026865, -3.5229026171168445, -5.033595444216353, -3.3215880622929, 0.15049261180644963, 1.7550026905200216, -5.345050564463603, -1.690614517917423, -4.686070777714616, -1.6336174052486039, 5.269662093104022, 2.392963458673255, 4.273472041330231, -1.1736712400900222, -3.6229122261413473, -5.945247637153544, -2.5669728225210284, -2.59307505704444, -3.5874547731392306, 4.851510332871542, -2.6023698595165503, 1.2151558168241232, 2.594483219900066, 0.21451135126007576, -0.0860737510877184, 7.129953487437169, -1.54459811932633, -2.1158012958551495, -2.2900867132905427, -4.278270582925062, -4.854997827818628, 1.0178747367032948, -0.4215221062019837, -0.365545139265309, -5.805414014621182, -2.5075397499759817, -2.729087777517201, -4.577478638538488, -1.822281236889919, -5.896679813138164, -3.0750920780283852, 2.6969866171008627, -2.3704757444427, 0.5989283180857139, -3.762941980827939, -0.5481089905559873, -1.6501164241018416, 0.16485786502852603, -2.891855228100922, -5.621606027789083, 1.5234695690460371, 2.027839200825652, 0.20133570595118042, 0.9914382817549413, -0.7808989293922421, 0.3660555669513112, 3.9497954294885376, -1.0327079108325923, -3.9018279082720446, 3.7461138142144517, 6.170734425863217, -0.08239721687876399, -3.3840093597574694, -1.821125944637298, 2.626955344339985, 1.695086362436163, -2.9730036832369287, -2.6890534917391764, 2.547402736896616, -3.5624000474865967, -2.261686605644145, 2.366724288355453, 8.828545448220062, 5.9417230880119645, 1.8084464932145352, 2.0500026931998594, 4.5628991657610385, -1.8663462788208998, -5.857561200728846, -1.7744013553198796, -2.3747050016477944, -6.867571928879342, -2.883390106384383, 2.285811243648719, 5.068201385154523, -1.4176854962509267, 0.6690924183053916, -3.9195108138638175, -3.5941373882546808, 3.2736995600261998, 1.8494543299640602, -1.7775450460789888, -5.643031500978732, -2.4043908958601277, 1.300182605666618, -5.600830194367202, -5.313989962396446, 1.2701049386014538, -6.79111240489097, 6.399401529817212, 3.450078762048798, 4.610572572803436, 1.9867725227611448, 0.27554623076043355, -1.2735101088188612, -5.550826708291102, 3.95158276261788, -0.3439892396169262, -7.434123251578395, -0.10934689341429073, -5.037137357881611, -0.4952042497520222, -1.6708574586907843, -3.465427493793381, 6.5009924360417735, -6.794228617881085, -3.2231807835050534, 2.6733749763624655, 1.481007988691271, 4.18038767742086, -5.692436027141075, -4.635479327760255, 1.7119974214126932, 4.798364485112937, -4.8443045624155125, 4.66031573216983, 3.2494049215006235, -4.01579825669903, -3.391046066203552, 2.3114849427690483, 2.3447572583083907, -3.394622883681401, 0.04132888258714974, -0.011335506373494769, 2.8140835789079732, 3.241489602811818, -2.2472848871574724, -2.802739468251421, 4.9294196458767034, 6.048045327278151, 5.298287072711199, 0.12099786596498802, -5.83320692236155, 4.264183295024406, 2.615991390927618, 0.8530176599590451, -3.213637800769066, -4.703117869713673, -3.6712436038195926, -0.8976129856879103, 0.33255781643998245, 2.077150499334297, 3.932635148304024, 0.6691960631060473, -5.648577575645145, -5.246531918676199, 0.4177750886814294, 3.41062117590103, -0.8858841627153908, 3.1566929345916015, 0.12064790085519578, -2.867863426527583, -7.245793436251858, -7.872329192281009, -4.603190663255091, 2.4522232269877358, 5.6068493829972645, -1.7093744566922577, 4.706474187570814, 0.5074648892789078, 1.4295029481136292, -1.3021144601855466, 0.3517317135075381, 1.1872925465454292, 2.2488832324366377, -1.498081164851249, 4.286527946909589, 5.541858137420909, 2.718866286664434, -3.452549293622728, -1.7267904194367087, 4.55742679128439, 0.7092946061049834, -2.1442205836415886, 3.856191409668648, -5.55673239997788, -0.2995507740059035, 0.7875891415744251, 0.9089802218435625, -3.285538111846845, 0.9732203552320712, -5.682451528643407, 4.143678221928373, -1.585383304083716, -0.7182915470945427, -0.9935651309614079, -7.401669962814504, -1.8426125093748145, 0.7674867294506237, 5.223652090228124, -4.342871954668058, -1.149862459403977, 4.082615826716904, -2.7493725472051, 0.913392341308447, -1.929248078626808, 4.3831531778693495, 2.785298231245118, 2.991311420412169, -5.903956275839749, 4.93485232474858, 6.186330680527115, -0.729166593531067, 0.8048866453998552, 1.577880811630894, -4.767844998106327, -1.5978852022731398, 0.657787660166732, 2.030054927648387, -1.829248109985183, -0.3702415143418546, -4.3296276180822595, 0.7165322674632729, 7.992180160687002, 1.8203361122736563, 2.9283747490282748, 2.4205975757462523, 4.521543896643394, 4.941672228281237, -4.352776392694719, 4.6922054382989815, -0.0035938044715542548, 3.6275067283590787, 2.5594220930611997, -0.3732960999487694, 2.5254219485903455, -0.41802969465231954, -5.922274702245988, 7.698887068542997, 3.6786433319828675, -2.0392896210475864, 2.071910795063891, 1.5014407728625798, 3.2053170367686183, 1.3680906908143364, 3.0379424764108856, 5.186678053809193, 1.66084430647665, -2.327949930907746, -0.09965738488532791, 2.4822416772544025, 1.3416846946057228, 1.5859951734817115, 6.8535697922064855, -4.27441756163909, -2.4604412967832103, -1.203676576467509, -5.087506038726295, 0.5677687874911991, -4.344080148347084, 2.6920968150001676, 0.40627826257476013, -4.407755978793111, -0.8220207194294483, 0.48408770800863865, 6.2538159400743885, -3.279621799271989, -2.8762921084549533, -0.6927716304341737, -0.22936145707698016, -4.871032927743378, 1.366952661326019, 2.613019085781516, 1.836387124704079, -0.3698074036055917, 2.7254739776722356, -0.29474459553036164, 0.12466022095946633, 1.533477252417512, -4.748061902772723, -1.6469949434063664, 3.6236008694681487, 2.866890697027757, 0.49526933441973725, 4.255263379563669, -3.06117220508676, 1.8069335506163995, 1.0498384682686552, -3.777392927049262, -1.78548024965031, -4.921209426386165, -0.966207629474312, -3.995843738844356, -1.0086978566923468, -5.9706199422348165, 0.2876357649076769, -0.04186108007904206, 7.0222677994190414, -1.18801604496786, 1.1154236843154075, -4.024128174399567, 6.960715440460055, -4.0752710782867645, -4.124048324460081, 2.0536392390717784, 5.106318636290533, -5.4992804775806645, -6.411106287886416, 0.9072524836360543, 4.217932426648479, -0.9006707612962813, 8.074310907714255, 2.522122956962448, -2.2953011017213827, -3.3342873237141917, -1.9914045843222965, 1.4605712155863044, 1.0699408273490838, 1.440590678605984, 9.021159609911013, 3.807916179221092, 0.5574471171060684, -1.2668029904604676, 1.8099661178703204, 1.504721433915353, -0.5402163687136597, -0.2743858034378856, 5.975374512047171, -0.11788792417580873, -2.789928768566704, 5.4069973977379275, -7.764927944571665, 5.259239961933659, -3.899665589736955, 3.413255463184162, -1.0061520443162495, 7.801908090049384, 1.8906017672821989, -2.2353328752223414, -2.1851773262890224, 0.036436491453282926, -0.12238510185605135, -2.455830238485288, -4.419899184100699, 2.2177366889988765, 3.9556969404668862, 6.058319752049633, 4.881518540620407, 2.2489365661055776, -2.159971691693256, 0.02446632027249259, 1.8340377428227654, 3.698169574918903, 8.94258278825681, 0.39444914136792814, 0.23170418977203014, 9.602206645170977, -0.6090332374980223, 0.537710400924356, -3.188040261125977, -2.559626898203643, 5.764627750294748, -2.3412157156898394, -5.446573405574017, -0.23705382972044528, -7.366476901638753, 2.418693818397311, 3.08768961550141, 6.113408928649814, 4.954840367823059, -0.9508161256185924, 3.801179494777047, 2.9208487820110256, 4.108322277326572, 6.785626505028512, 1.3893203947814639, 2.2982554871037433, -4.245823743817904, 2.0167885884491303, -7.7421220954910295, 2.1511441609854636, 1.273746387893083, 1.2169027862701103, -5.139553120413774, -4.544334482304897, 2.3760938377613297, 3.0312035055660163, 4.275712664702762, -9.154263654779768, -2.420508184064037, 7.437247521440547, -1.3519706037783732, 1.445143517188846, 5.833229279546014, -3.453366273234986, 3.176186638281983, -2.0220375378685858, -9.991141494515784, -1.0644187310753468, 1.4831919999900796, 2.8972807420259445, -0.9041053000235442, -0.7099470193156858, -0.806285377399461, 2.274458889911529, 2.4920894876439, 3.2281966715256725, 0.2711781008869112, -1.4100212322493613, -4.291370532527078, -3.220187245997128, -3.4180867372881827, -0.7119272667805787, 0.873368193390266, 4.212351456930253, 1.9483912465318582, 3.186225360785856, 3.1117386221268006, -1.4394248639631064, 0.1636438272222435, 0.9590921549334602, -3.0972527240145906, -1.6435644783732548, 3.484236216695208, -4.015448933414574, 3.354230535800853, 0.5666233922562519, -3.679603916684152, 3.4436200879042884, 5.922081627086339, -0.43568082394856644, 3.227494900384714, 0.38065409003511885, 1.8544901797014124, -0.9122089936371138, -0.20516551111381898, -5.267864141808422, -3.351834600563685, -3.709288397932071, 2.3446105391207688, -3.8978841583109434, -1.5411668691661544, -1.1362381668395738, -2.061932842344432, -4.914314419300198, -3.8728225362770403, 1.9881218550574413, 5.674971285856721, -0.20139855646028157, -1.8309412122849684, -1.356671126692491, -4.279053727904223, 2.3482234127654946, -1.547049707923157, 6.682643502153963, -2.6724799720913897, -4.75473599799053, 7.888506179681751, -2.0411906287597272, -3.2899159929033788, -5.170287399577843, 2.9979083679941696, 1.5286675759884236, -3.5582641316738477, -1.3619939282975604, -1.6036902017998895, -4.8094430005322835, 3.3394666485245, -1.2947110599260847, 4.385057144943648, 4.620125576215163, 4.287534181286479, -4.915312874912149, 3.646562711212638, 0.23718299350672856, -3.4078432772836624, -0.3581941934029967, -4.736564252851838, -3.5393870708303288, -2.069535929485826, 2.513587084526903, -3.4099758382038012, -4.677951667228062, 1.4346702867739745, -2.7570326970885035, 2.0112818510042834, 0.4747499492648444, 1.6662253900684925, 3.968473635830411, 2.921217159904296, 2.788930302465246, -5.8639423975352205, 6.99026093168878, -1.3585157766000633, -3.4823072228881244, -2.849870177788238, 0.14666743598378704, 1.4815054652503412, 3.03122132935254, -3.599089613037626, -1.064729452157257, -2.754477984850271, 0.594306403683319, 2.188015906776412, 6.128608684634774, -2.759063382645553, 0.09688418863970676, 1.4647581810372585, -1.2318207588551169, 0.7409886729874315, -5.731734985823046, -0.8320568520759206, -2.3786440630498906, 2.3677215841566848, 3.7650214695671926, 6.921634547203498, -0.8709400901781819, -2.226306619440004, -7.983739830149293, -4.318614502064173, 3.001611582425946, 4.222489970405762, -4.428968514177993, -1.7694054692656946, 0.9502060043832952, 7.593852406945543, 3.7564617795399537, 4.870675293646007]
BIASES_LIST = [-1.3824561025181272, 3.710213323380733, -3.602978432533139, 4.790897925589357, 6.330824608661949, 2.7734734544069592, 1.1156547868859825, -0.08518201561216793, -1.1187404544106225, 2.651676409385163, 2.134909026647803, -1.375842197678094, -0.008914844660472246, -2.6266040091642506, -5.507085033360757, 5.26110242401644, 4.820756314019108, 1.4751730650487114, -6.580954769732666, 0.010048442845152735, -5.0731470161858425, -2.811872024102646, -4.078344151375848, -6.084311949663684, 3.9240192415023523, 2.646901937892892, -4.029176098117382, 2.9164458426617332, -1.0769679862925905, 2.3108791812246383, -0.3327642870244564, -2.2950228924498126, 7.12908428342467, 1.846397252059412, -1.6853879991314502, 0.4486547938698059]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

