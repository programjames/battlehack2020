import random
import math

WEIGHT_LIST = [-8.368204921853895, -2.581849668824226, 7.518189424458642, -0.5195639786641054, 3.947301362781586, 2.1980574031783395, 0.4082143878869989, -7.037786509019808, -9.603883340215985, -1.682427645500144, -0.034087814286043405, -1.714912012333794, 0.13195397466413045, 1.9855028018763172, 0.8945810613636116, 3.931477224827453, 5.3230975057519165, -5.155636964175501, -1.123980646245488, -0.23919863842919403, 4.362360365110706, -1.4494802097597725, -3.5389438843472396, 5.2250639747874335, 2.007111893747967, 4.684196527156096, 0.5483159304598924, 1.4273856536043101, 1.0644087872914814, 4.1531849494279305, 4.395466063787225, 5.6180409744810795, 1.0250288411543758, 5.538805742215161, -2.015788858098428, -7.041953620478309, -4.311114852868005, -4.765013128778096, -3.7514665402937766, -1.5221766721196042, 1.957108312869782, 4.928286591996328, 4.029873730231435, -2.30403502160951, -0.9236060901633536, 8.896385055781245, -0.20102483775728763, 1.2079256871325696, 2.8583653473644883, -0.30959313697190555, -0.8280323589932048, -6.094192171899383, 0.9773431989482544, -4.614003928609486, 0.396707377243883, -5.851346002684128, 7.874138926431759, 0.6865275074486548, 4.065786082418967, -0.7120219078344134, 4.9852486773848055, 2.411423234658505, -5.1231276198028874, -2.9293638432226383, 0.9413589557394981, 3.3579621149942267, -1.4256752321147284, -2.082016403850766, -1.6650253210518902, 5.909815978631961, -3.5456917975752615, -2.3168238752440553, -2.638862037202239, 4.707591411026777, -1.638006559320075, -2.2575365781009276, -1.3038180555161836, 0.028273617784732308, -5.19427713965294, 6.172778720334331, -3.1878758758156005, 5.142161974875028, 5.985784961103506, 4.026842849837164, -7.374842873232529, -2.03171806263526, -5.800364506551028, -1.6977051686570654, -0.924547414456093, 7.837974872793617, 7.222552856807125, 3.5405135044644784, 0.9126464632268989, -2.277406323579402, 2.885086300622976, -1.853291894077075, 2.5084802190497184, 1.1305289632661344, 6.060666809818207, 2.4480458543891275, -1.3573133288696209, -6.359964782296767, 6.10464684482292, 4.845796026466337, 4.736834426051064, 1.8669775172908483, 2.5931068209111876, 5.254455539450325, -4.864831831302461, 3.816720930975858, -6.7285596337310345, -3.0189217593867967, 3.361820295805776, -2.6775595257889346, 5.610469409317263, -2.385407083509494, -9.595495436262631, -1.5592624880213855, -4.668479530629701, -2.4918548128612183, 3.420013283910932, 0.2801738013049621, 7.637664874667426, 0.3245224102400122, 2.598014969225905, -0.23804639654759926, -3.004164523085492, -2.768631220586951, 1.0309829341027539, 1.5985210278396222, -4.677187274283503, -9.701208167825369, 1.950502357802831, 6.1252921508726, -4.472636087595981, -1.8219614076367487, 3.767751024383013, -1.2905988899495653, -3.7716142210187877, -0.42153308541644285, 1.8732550662527823, -2.9749637143229783, -6.821026363551821, 6.932849042240535, 7.3086089662956075, -1.1653887563147673, -2.046531390855674, 8.007909580850482, -2.260764753619053, 2.324394905085346, 1.569548540074038, -3.910686909229913, -6.931254691430722, 1.2544494650978002, 1.2692415123020229, 0.6118865883821258, -3.9424970493663007, -7.370747572598203, -5.926194284217371, -1.3742387835425047, -4.945727264143327, -3.984588186117009, -3.5517261445290798, -6.173271761794283, -5.037050017265977, 6.978528188170923, 2.3434333021129317, -0.4864361743895389, 0.3222844521860793, 0.8874887985162951, 2.978499456585587, 0.054993759673791276, 2.166820124057741, -3.00912507346588, -3.561847137168468, 2.058341139416793, 1.0387174526069964, -6.816348078596972, -4.546314590606027, 2.391760624410867, -8.182005494032385, 9.128846032726115, 3.3517334913835914, -5.142449498113348, -3.930841368245975, -0.483753861955802, 5.276000778068459, -5.389014869259618, -5.410165322129355, 6.815283944650914, -4.851998772304535, -5.463163437275204, 4.822630540093991, 2.6618771506462564, -5.449060777350249, -5.4004479228277456, 7.0186686794169, 4.203971502932128, -0.14615300269303122, 6.870171193982094, -5.641089323944304, -4.296617200806621, 6.502276732965255, 0.7346163736336502, -0.8910009909234924, 2.7131848748136793, 3.453213667345237, -0.7448300770618677, -7.426415056235767, 7.35925220867446, -7.317054719307525, -1.837376731653303, 1.7785538668116687, 7.018992406376799, 6.166431310312712, 5.9185487290310945, -0.3333270926077249, -1.780600960291113, -2.601557684374129, 0.812775304655666, -2.1459207080715625, -2.4068722204593915, 0.30206288988483004, -2.0537894502138494, -4.337272396809869, 6.226112908303691, -1.3147589087617986, -1.7214834203775926, -4.032813163566348, 2.7139054409044636, 2.7140699387987595, 0.37572670057939556, 5.851003290083555, 3.3000089192777797, 4.198859801007727, 0.7089994462918257, 5.07884617598148, -5.799767523839539, -3.0775363828760702, -4.859408195497978, -6.05290039927629, 6.659930041624702, -7.19671237971431, 1.49655836317405, 0.3003458223657211, -3.2375593256732196, -0.18561857391345685, 4.22502618306305, -4.456497771385272, -7.078785857414094, 1.9621066533496525, 1.9503009346577027, -4.623305303092816, 6.47181678823196, -1.3992191126615183, 2.1015102274783666, -0.6608474871903419, -4.375034415135343, 6.496935257669858, -4.113053569720548, 5.574321613409701, -4.013086512662267, 3.3031689513897224, -1.3885836501453441, -5.37068508549701, 4.573623089234857, -2.9317829137058533, 0.36857093898244947, -8.344049457378741, 6.686762734257208, 3.3813006693669694, -9.470039782726907, 1.8411098197218312, -6.678447914080258, -0.45826386474257863, 0.474907155338068, 5.561837884280856, -4.6650431780466155, -0.7932343186620294, 2.810508386510602, -1.391445473640036, 4.090881706086519, -5.5348795291406825, 2.6727638695179143, 2.819964802234984, 1.353496249652285, 2.307487173065925, -5.792194978196555, 10.420556941641323, 9.121282662751346, 0.39507108563285837, -3.782281735979771, 6.124878957401337, -0.9957300985399247, -1.080551937603857, -5.944368782264873, -1.2648560466313066, 0.18129844525344319, 4.9626957064031565, 2.6811895311958143, -1.5852926837032713, 0.09041816549644999, 4.784641858986374, -0.07244569152715927, -1.6813196476215437, -7.152667583705807, 2.463863235708705, -4.387708491082515, 1.5829826844734973, 3.9058913495114855, -2.114029893592417, -2.4728961603937716, -7.672308830921324, -3.736763831498648, 7.822216435919343, 5.485368675631991, -3.232784905180683, 4.62695054240711, 1.2722924059613183, 3.3171854854341727, -3.0765890972788497, 2.8737731665144706, -3.55592002876699, 5.865975167923867, 1.342668036933674, -0.12286896298038841, 0.8175598888368465, 3.2772398139220997, -8.038107801574315, -0.5557205928146349, -3.9296598797635025, -6.5906752810573686, -0.6433702954135297, -3.650078060196142, 2.4662658235135257, 5.456038070088538, -1.8307619792931338, -6.81809481914823, 5.347262888469131, 3.5674787973173574, -2.513170364547414, -5.6367216830240325, -4.501093641996609, -3.9008662813920285, -1.5442072765767498, 6.845313672678157, -3.5332881007761943, -7.538836826919453, 2.143404057879328, 8.593213416666066, 9.178769938383288, -9.015142651741469, -6.797892466911685, 2.711605437408205, 8.366316231377276, -2.4591384092345967, 2.4436615854442487, 7.333712610041551, 6.428319912394799, -1.8182352186319637, 7.669370625958608, -4.493818500578125, -1.4388313226076335, 1.5617034299545622, -0.7312188529746643, 2.8673722841136056, -5.282352539822553, -5.759309380109796, -2.097718338017439, 2.1958021733107476, 7.880439662690125, 4.196490098108199, 0.26606783536431683, 4.123657291222484, 0.02449824529660599, -2.343439470803468, -4.768921218727148, -1.1611862772756285, -1.8908042826507818, 5.557032411409631, 1.9111836517522116, 2.640608521250511, 4.326949624444215, 3.6329026334730563, -3.168486326234887, 1.855214560068676, 6.0775652834684175, 3.4228086044390547, 0.6658418810174493, 2.179937086191885, 0.3490230570080401, -3.492889768644082, -1.34357317704517, -3.468450760224307, 1.4445870395557305, 1.4303591604238213, 0.1635216425519051, 1.4542125830236956, 3.2479916092150005, -2.630742615658002, -5.982313280492429, 3.376562759918919, -5.578057160212616, 6.097037215624853, 0.2771735613494855, 1.4552233617000379, -3.5267945965726852, 0.3123629988155368, 2.506573758345916, 2.5145031573697856, 3.2685811758392744, 3.024086915672929, 3.454293441781189, 0.30315627907824, -2.392475218009651, -2.592541123039021, -2.791163195918404, 0.050740437378067715, 1.256042351267353, -0.9734749333368464, 0.9399767892457838, 3.1122721257035746, 3.4762844741279832, 1.7851007578892202, 1.134776477218273, -4.6842637005171355, 8.979066248856384, -3.64540403099205, 5.038171580382009, 4.013172601176289, -0.42165712877302847, 4.801799093184773, 0.42600916572282804, 3.34478161522828, 0.560489551709292, 3.2914806321860213, -1.4349540554361053, -1.4953619530118742, -6.162357853206873, -8.003234896212245, 0.9559086495850211, -3.6602805105658893, 1.2690882445761273, 1.3860873990791873, 0.721227494559451, 6.771877823253159, 7.492861745597321, 2.9975299783012312, -5.613086927289023, 1.282727384646961, 5.14555715455505, -3.2615584516898517, 3.0792702323654155, 2.1253371891871367, 5.853111822132574, -0.2885934645066497, -4.031123959267283, 6.380808885416056, 0.7186743013350321, 3.917529816456408, -2.609107507416511, -3.6962128757892616, 0.8718797807518801, 0.7674393303686922, 3.1243511889330633, -4.148855896440173, 5.4203526791028, 5.667664420233963, -3.5533105277527053, -7.931235949681228, 5.314256830457078, -1.6102357937413445, 7.188204754346713, 0.09882268482051854, 1.3566623645197904, -9.319156127233205, -4.4411877976826695, -1.1321846627456558, -1.5422993795892947, -0.9018736109817638, -7.0718535986457285, -1.008250816828452, 7.865195960075606, 7.914845574858485, 0.6553005175899782, -1.1420269282809168, -1.6816304945621594, 5.684031214054471, -4.209791675866831, -2.204769056070496, 4.276648614876354, 1.1110260606463471, -3.544853163552066, 5.181289545899549, 1.7054852572171484, -1.0880004375805987, -1.2324479107671777, 2.120198328836585, 2.745556740871978, 3.5901420680882095, -3.244463538939054, -0.6683792804188085, -2.3020076590423026, 7.6131766060290955, 3.3800168680879312, -3.516975872790203, 5.013974922129798, -1.5120178201399017, -0.1405845654934219, -1.6157856294768014, 2.431102722722386, 0.1296448554745004, 3.179528762880866, -7.229181397011192, -1.3850089137373716, 0.30915437105643656, -3.7121645908112417, -1.6427791135983258, 0.8096928135654993, 2.324411442728015, 4.1134362659209005, 6.09668560541513, 2.3940169820043296, -5.078458969989921, -2.4812288328856797, -7.852161503317127, -0.3218005007356827, -4.3848684147465535, -1.2515619514089558, -2.902295021898491, 3.6141975476814476, -3.3392090314236142, -6.802395996412391, -2.8322447038529472, -4.187062428955136, 0.09434099281084501, 1.9325919463142696, -2.1806283062762524, 2.7392264585179817, 1.171034452365722, 6.826475869747147, -0.9545382699954617, 4.479182941573657, -3.5795631908971988, -0.15088465243392563, 1.1626167734093054, -7.699396835049741, -8.42010161690415, -8.5461317125507, 6.196410167256708, 4.243671495484288, 1.740257822361117, -0.3638207665379933, 1.4474005822624445, -0.35512399120318666, 0.5655564499955834, -2.449595044625635, 3.6010451490541153, 3.311861493511055, 2.821606325458881, -5.242490243938472, 0.06800888138095423, -6.604302627456568, -0.40824462118591587, -0.38263670588872767, -3.2454756015283728, -7.777417406228718, -0.8130559211380346, -3.331609666751721, 2.4035285180097445, -5.132156687458964, -0.8257028588625532, 0.911518585987662, 1.3281058169562692, -6.864236546994126, 3.307390372625371, 4.212550435647023, 6.361774259397821, -5.67793467957787, 2.091790208648127, -1.9844649087836737, -5.349796906651182, 1.0887793949774616, 3.381451680864487, -2.053135233265897, -0.6296495661388684, 3.7434267116519573, -0.47458555758463383, -1.0757314724214027, 3.95565553561824, -4.620192724905957, 1.3856374393347142, -1.0750704454753155, 1.0553444229938072, -5.129421522778015, -2.4348054797068137, 1.9748661933839222, -0.8130961598395321, 1.431823310536801, 9.200857811740866, -3.8564663951952833, -10.491088990598874, 0.1306125768347658, -1.162882377116487, -0.9040711056506998, 5.495744545381481, -4.2962736272318045, -2.8818647897371688, -1.7603942079233692, 1.5181289770383177, -3.959538577763984, -3.013371846533193]
BIASES_LIST = [3.8764542695169912, 2.2460681297590033, 7.346201643645057, 2.352934211257066, 1.6751002301685363, -4.06388989395809, -6.4427400172802525, 2.263493885131953, 5.016905915233925, -1.3812728139037587, 6.126023476206138, -6.630224811481874, -1.3752504901116749, -2.40917162057626, -0.8490877616280801, -1.0963340811394282, -3.2419313465861053, -1.473086578046764, -0.14027999045685222, -3.569527363086802, 6.440065338431802, 3.3888509025668783, -3.6140202688282406, 0.4882824612469345, 4.874256827836627, -7.885923299080234, -1.1613869093809945, -6.0060102200136924]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

