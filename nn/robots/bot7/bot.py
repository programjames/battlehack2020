import random
import math

WEIGHT_LIST = [0.5583073972882081, 4.910853827808176, -2.3132105685369804, -3.5516630647935186, -2.3228365884973408, -5.2901939771384585, 2.875889626558077, 1.828122796889048, 0.8071414863953568, -1.1074922921040915, 2.6021769786886204, -0.012873638374740069, -0.9072291740350445, -0.7628093884982222, 0.2343509710514888, 4.933488762288085, 4.67552890963617, -2.9815135330326776, 2.837427040170225, 1.8292332629944448, -0.3786871098808169, 4.347391105008132, 4.934313748020551, 5.414942103987058, -2.117763894792781, 1.6155788969562743, -2.1876600310103327, -4.362187949213581, -4.903758731407583, 1.3797469264981952, 1.365110410177634, -1.1240146406853022, -3.3973429462507516, 5.262384657015978, 0.998612724543345, -2.49973977260756, 4.1542904832405485, -3.28292368107673, -3.7495080265138876, -1.031544401213621, 3.8290095976903937, -1.8609654541146838, 0.440667106968172, 0.16015448745456415, -3.2608076016880383, 5.732226496264392, -7.88165795710169, -1.0426808463973245, -4.613704294409778, 0.8854016844553736, -3.8433971018681583, 0.6736369011150029, -3.573584321545719, 1.8914257403822647, -2.250073874960347, -1.5872401029183207, -0.4186448168056102, -1.9767395589169772, 4.891222099795148, 9.881232572941988, -2.192808428387192, -4.490345889605424, -4.315631079662966, -3.519176124849659, 0.7259474089863731, 0.20059753199064823, 5.362114078531401, -2.2001083452686427, 1.2350241746007682, -0.6910187968831857, 0.4472728314155918, -10.343282242486723, 0.4929630802337365, -3.6872805637685095, 0.040842195850499946, -0.9621482985856794, 3.3927730423504148, -9.797884441102596, -0.06834941953980339, -0.5659249018956678, -2.414415141374191, -1.1042225791678055, -3.2484136206818177, -1.218035470176366, 1.0169040494130257, 4.8092412438447845, -1.8322619118384234, 3.9961679896659934, 1.3669864604089739, -0.689382401126483, 1.0021425359226475, 3.7835976825865556, -1.2432361854340146, -1.059903114052836, -1.5750504451240568, 0.5386415197393268, -1.7536617169489903, -1.137947326973777, -0.6311720926000375, -3.6917984816960385, 4.125222803314726, -4.82651292026042, -2.324860245872692, -3.606942439677967, 4.936602297340807, 0.7452634826338846, 2.7024002603278356, 2.6829296086680574, 4.9593843901566075, 1.8886609100265104, 4.3841654325785475, 0.6063335557235063, -0.534011763474906, -4.317825526920971, 4.4593724059433555, -1.712775089676997, 2.5579897752526133, -2.77446983647398, 4.559023793343597, 0.572672973581691, 0.6301312953821528, -0.16316508776818317, 3.600548465145998, 2.62155173004603, 7.014111512537258, 2.443319311144317, -5.357253247191256, -5.637941382037641, 2.552523700873767, 0.05783260593070681, 3.625551549987325, 3.8472194135826303, 6.502255302981245, -5.744537890380891, -5.195493194413775, -5.158343658572032, 5.24211311985329, 3.5091940618987616, 3.5696451525547213, 4.549540033444705, 2.0771315067519525, 3.486052169584284, -5.2298246064907135, -1.0500309873681675, -3.6884693750494533, 2.5167790435921114, -3.947616609802479, 2.480235752771197, 0.46926146590226275, -2.479044155720154, -0.42751343966887106, -5.120102820848891, -2.4247800469134586, -0.0009662664537268967, -4.153295388733893, -8.677952406339946, -0.21847653730707192, -1.8129837010058663, 5.463334715777505, 3.8053240703846063, -0.9490589599217559, 3.842172211659371, -4.558740191661475, 4.487287019898508, -1.1278780243550244, 0.3702858474384799, 2.1063705101214207, -1.6889115914604031, 3.369793179950978, -2.599576821915315, -3.4496668982327106, -2.4236561146805475, 2.0627107351328138, -3.2829716915129916, 1.8332338804984676, 0.19653058887000485, 7.299023032153542, 0.14118605362661113, -1.237992948464141, -5.380671917378163, -3.2204808873461794, -1.8769657371725235, 2.1511579637956126, 3.657265765789094, 5.120441569292469, 1.129050013935391, -2.63626608845894, -6.1138125362622, -2.5092246931846423, -2.134669835981734, 0.0851019438602798, -4.285100598360645, 4.584793651843095, 3.252005941987917, 1.9136360892704665, -0.42826263966056244, 0.7535605742045355, -0.5225641283706491, 1.6958822732375909, 1.7719498010550834, 0.13347315277044217, 0.7024407781406391, 3.0382490933481914, 2.4227048712674204, 2.2454170521136327, -1.3498363666997917, 1.0294677170764066, 10.581898547189445, 0.5770063752376903, -1.1270878046321922, 0.6094187425070181, 0.7531135624719298, -2.940456984225968, 1.3019716883241852, -0.6556927480428798, -1.7597260727724735, -1.610823069734865, 0.3329767819611535, 1.3028717086947479, -0.751437530070515, -3.923158526925558, 4.081820584314579, -1.5765889526566865, -0.9493842024416905, 4.253935828249019, -3.524128008080936, -5.027527452159446, -3.3225708905960794, 0.15546920192209615, 1.7422233800966647, -5.341371408960935, -1.7060168750588633, -4.6887755971236205, -1.6449312888092928, 5.2736487339979545, 2.401915969853316, 4.275611225711893, -1.1716939452983137, -3.6239986583324892, -5.936566687900037, -2.566970097139547, -2.5931844755540197, -3.5899627293016017, 4.866062270508456, -2.599158844611573, 1.2080457650303513, 2.591892797349628, 0.22228619257803073, -0.08162501842479487, 7.125005733277015, -1.5426320933554512, -2.110655347474266, -2.2991656642136364, -4.26705335484964, -4.850555438693711, 1.0180414396957504, -0.41937097887966523, -0.34863261464015544, -5.808992716653762, -2.5085595970106485, -2.7275556958832325, -4.578991785898988, -1.8284128059682265, -5.899383872639215, -3.062779109764863, 2.6875204180835617, -2.3668674621921513, 0.5936579193789455, -3.7627649976721083, -0.5538483984255554, -1.6570194570405612, 0.1701998320534068, -2.8948806688701434, -5.6157295619303085, 1.518227020193914, 2.0304692957377584, 0.20536834147759955, 0.9959497511037295, -0.7820541024956185, 0.3642222714384581, 3.9456551883389155, -1.0282814791467916, -3.900310188705953, 3.752706226553766, 6.154490058804988, -0.0819210439199736, -3.3820936312450716, -1.8243949430438666, 2.6403845405966484, 1.7014189133563034, -2.971170017449767, -2.6959877571279476, 2.5478867106870466, -3.575713376765495, -2.260862070481217, 2.355578750088426, 8.828668701988791, 5.94629913427798, 1.801268247822295, 2.052514691292972, 4.558694621051297, -1.8773056007289866, -5.8487194510099405, -1.7754826516269147, -2.3715919139806503, -6.869179333398728, -2.88494863439671, 2.2976746317356205, 5.064309717298326, -1.4294644832819028, 0.6773654406338566, -3.9194469681330926, -3.5945459894731644, 3.264747880793414, 1.840968671447456, -1.7774325819380987, -5.644297548379909, -2.406112884513353, 1.285976080220529, -5.594994906905565, -5.315914076358415, 1.277888898152716, -6.804596740527504, 6.40628199369458, 3.4338446107214797, 4.598179880827326, 2.001711296763124, 0.2747040306493285, -1.2727324529242467, -5.563261064752902, 3.962074571365626, -0.33776518525961274, -7.424980002470512, -0.09817403480129108, -5.032685774392447, -0.5064102675298086, -1.674621585093349, -3.450434481096427, 6.513823736392438, -6.780753813296153, -3.2410537942760667, 2.667158171517327, 1.4760676269963575, 4.1849978421079, -5.692924293568444, -4.628892981149244, 1.7087915372947202, 4.802870702189755, -4.852851852545735, 4.646059394168841, 3.257851752092803, -4.027941249935577, -3.4026580154798904, 2.3167867477184685, 2.330607829565217, -3.391077867915388, 0.03666759734955334, -0.015005116861001618, 2.8142171546824284, 3.242197142672809, -2.247676637453375, -2.8252836556186542, 4.919246766069969, 6.0529225969764395, 5.286152300912529, 0.11302653323494406, -5.838895511102084, 4.26174117630015, 2.6034940750125624, 0.8499137329463891, -3.224821221039385, -4.712852106078844, -3.664705047214766, -0.8892526664959126, 0.3389903745496239, 2.0752276247378996, 3.9162913026094808, 0.6761504857376185, -5.655875007039887, -5.259726095869737, 0.4248555842934892, 3.4241640558247406, -0.874477293174249, 3.170313388051157, 0.1241786433616792, -2.873440170615646, -7.232436069340529, -7.882428473065614, -4.597715211566432, 2.4639561442887286, 5.607047746460787, -1.702373005201346, 4.709109639416073, 0.5102065496325419, 1.4410067291202366, -1.2987965754632136, 0.34321263517920314, 1.1776265168152629, 2.2645243280874676, -1.5014756987217341, 4.289910114622745, 5.550926187121201, 2.7146757048787378, -3.4477753457902534, -1.7092267438318902, 4.535829882389723, 0.7044700004584638, -2.1477010443891498, 3.8671013008729984, -5.548622288777046, -0.3030933072065553, 0.7842279015390011, 0.9055720993346753, -3.275761379651734, 0.9646115226172904, -5.687496355857248, 4.127054167007059, -1.5812851274872857, -0.7153817136622944, -0.9929199960941228, -7.39994604812143, -1.8386211539404895, 0.7525087991751558, 5.21955404912653, -4.347909591418289, -1.1453947048386954, 4.082856988235975, -2.7421233807570973, 0.9129993625968854, -1.9392606114814634, 4.3963392798112855, 2.7893801072362163, 2.995084682477939, -5.913322611271519, 4.936281061117776, 6.18265946495045, -0.7382254597472752, 0.8084010184604182, 1.5850735182617117, -4.760158469303419, -1.6139859802539958, 0.6555841013182906, 2.015413365197482, -1.8252855450218348, -0.37986747384451086, -4.322985056693514, 0.716292204563908, 7.98871256916668, 1.799093964116274, 2.927936145460872, 2.4163820682503565, 4.524528258551813, 4.942207920833512, -4.366350587062778, 4.688850016467339, -1.4848495190907841e-05, 3.625200033122528, 2.557472574607128, -0.37464298906009846, 2.5145375218936037, -0.41725194083662615, -5.91784978133535, 7.6948666554499585, 3.687306679412912, -2.043282566942603, 2.065013254466188, 1.4955529154289853, 3.19538864481617, 1.376504695747422, 3.049064901705646, 5.177877780228245, 1.6586564499254728, -2.318458167834841, -0.11044732014817435, 2.4989019824611383, 1.3444728397416805, 1.5779282398224224, 6.847062648699196, -4.278917602809875, -2.4552829116373958, -1.1964065980471317, -5.08116507162311, 0.5670210677931548, -4.3473875207281445, 2.693024624900287, 0.4049710555634346, -4.412051163902423, -0.8184079240307989, 0.4750894875456611, 6.266660397062908, -3.281007200341673, -2.8777181052548806, -0.6978792703761398, -0.23979352047774355, -4.8631649094478755, 1.3668689665045233, 2.611915740326162, 1.8322112225945042, -0.3713008112948606, 2.7292072635454754, -0.2874906137726284, 0.10993994683045268, 1.5462194359979242, -4.741319148902004, -1.6565777186108268, 3.6075377082733215, 2.870220917195467, 0.4918561307195666, 4.257737200295992, -3.0538864846225158, 1.8237413504335835, 1.0497374314767587, -3.772774441390682, -1.787413012358697, -4.907643784029153, -0.9728394867828047, -3.9881539031198883, -1.0020586658736996, -5.975946971177359, 0.2963344006900635, -0.04320193829957836, 7.012814586966158, -1.1868895340540409, 1.1066983383043132, -4.021531301851865, 6.955644460158192, -4.0775401145193575, -4.131933601789714, 2.042372578667955, 5.102998498650795, -5.503088732531785, -6.404329427822669, 0.9126453828633706, 4.223268522468699, -0.9043381830704129, 8.075479250137203, 2.52699444728438, -2.3021452475809796, -3.3312611540780024, -1.9950176978969705, 1.4649008651257063, 1.0626365946224277, 1.44068906120677, 9.02060189921715, 3.80199948521448, 0.5713253489271417, -1.2706007052828348, 1.8033820539113217, 1.50526954387122, -0.5488473448675714, -0.2868492966225807, 5.977514924300281, -0.12216968764409396, -2.788983348754902, 5.403434015103002, -7.76174167701299, 5.249862033735235, -3.8844848639063954, 3.400236631441557, -1.0136086068330474, 7.811348201486034, 1.8968482039101473, -2.254924602544814, -2.1855787947989436, 0.028413486648329798, -0.11869403200988723, -2.4603590601825593, -4.4176065675282095, 2.210748076848279, 3.9636348800504413, 6.041596253109151, 4.874002665870178, 2.2491372344887415, -2.153689320214481, 0.03379112956553228, 1.8472658272161537, 3.7094261475750034, 8.939011833883974, 0.3934697168919706, 0.22389185316007812, 9.609888267710517, -0.6165830744195919, 0.5345155858167662, -3.1869016613534202, -2.551631554380849, 5.776728014004558, -2.3520789026399767, -5.44656891685665, -0.241169036253412, -7.360449410733652, 2.424736057811469, 3.0801063130187676, 6.109503226826479, 4.950624909850398, -0.9547446166063575, 3.8063658717306645, 2.9198316802281927, 4.112524850747529, 6.783933207054031, 1.3839454125168011, 2.299873197713341, -4.249263577115264, 2.0185691890801065, -7.7203808240022775, 2.162286206776781, 1.2644707155881068, 1.2156883729091956, -5.139165871279633, -4.544075600012813, 2.3619784283336456, 3.0306799509246454, 4.266782605398721, -9.140167667070827, -2.422152319638959, 7.443336413855479, -1.3613593684514145, 1.447151590586882, 5.825203808189959, -3.4661561713172446, 3.1632536018573285, -2.0117961037537877, -9.99045529625422, -1.0494402051104006, 1.4738333398886037, 2.9053484155763716, -0.9070874017447184, -0.7015788218845739, -0.8070698553382313, 2.2743220545683265, 2.4863411833141873, 3.226896930711022, 0.28548004274817795, -1.415041078820525, -4.29265106792768, -3.2302628610290722, -3.4216399739548793, -0.7097483049382559, 0.863905619161241, 4.2220765060157195, 1.9564153202863195, 3.1834971121887126, 3.1091908216597424, -1.4384694475526982, 0.16359152490498247, 0.9665465507509371, -3.0834468575281306, -1.6450179917012668, 3.4745125542389728, -4.021947357766256, 3.3628538624374054, 0.5660286147904444, -3.686046386679099, 3.4497765429888667, 5.921494852578903, -0.44694120274435306, 3.224122742374067, 0.38035579719680307, 1.8557562449587388, -0.9180191596024067, -0.2030811469662437, -5.263072679992095, -3.353646004925484, -3.715202479267226, 2.3440344749310915, -3.898003900692837, -1.5405329319758438, -1.1374484696205518, -2.060426636399016, -4.908355682578603, -3.8650923507053996, 1.9827443337626796, 5.683163963331869, -0.20692700611787995, -1.8244597115912748, -1.354986036274948, -4.28345284502337, 2.339699683640977, -1.55368108546088, 6.686957299515437, -2.675170615813398, -4.743037776076225, 7.888064064355467, -2.0471610411832413, -3.2783746720417635, -5.156742036101212, 2.99761986528531, 1.5222527604805114, -3.55850825397864, -1.3619904638560931, -1.595471123095242, -4.804369899765803, 3.3273365977727085, -1.3039799355263402, 4.3824898818035365, 4.629142247311719, 4.289470095153235, -4.912988918136593, 3.6475215145738735, 0.24063938818818648, -3.398085988490158, -0.3589001799323148, -4.739504348755621, -3.537377846483689, -2.0716233432919595, 2.52421664612759, -3.410598265409973, -4.68093881898663, 1.4353059145514628, -2.7546299652764588, 2.009925485291233, 0.4759496805678698, 1.6715781205279046, 3.9643501525276443, 2.9372250650626137, 2.796288250130695, -5.8630266891228295, 6.987267396309302, -1.36193539715549, -3.4702294498175927, -2.8437730245483337, 0.14883737142881823, 1.4938448657624714, 3.0295249871513716, -3.591632991865488, -1.0532271631949108, -2.7636756855876525, 0.5864275678825768, 2.1854720172014255, 6.127845461378253, -2.7569463605801694, 0.09093770084536817, 1.4766840468391784, -1.2543212308344562, 0.7330137320715231, -5.733737392882387, -0.8385864147033715, -2.3795255628358345, 2.354630138053484, 3.770939884152903, 6.925638144230892, -0.8689553965997839, -2.2318828857600423, -7.9858933913782915, -4.331447276424426, 2.990490838477216, 4.219062381966758, -4.422298245692699, -1.7765223324777357, 0.9735927391520648, 7.599078357511103, 3.7533373037310405, 4.880687733577307]
BIASES_LIST = [-1.385298241914249, 3.707791346969914, -3.6133544680836964, 4.798218478953641, 6.329678703720794, 2.768763467020726, 1.1067873953190437, -0.08016598640150141, -1.103350902620616, 2.6558899142056096, 2.1238474326250714, -1.369412545589492, -0.0015752197971323515, -2.61755162647115, -5.503205920000561, 5.26614529829878, 4.821022831592622, 1.480629288453383, -6.566677959970062, 0.020749944298834387, -5.076936595868094, -2.804459743580854, -4.066886620398347, -6.093305179946785, 3.9260214342354556, 2.650521369339082, -4.02896838205512, 2.9177319058342053, -1.0783752617281737, 2.30703700308551, -0.34093339408628287, -2.290600614032918, 7.118851022326269, 1.8513929878858495, -1.686038447236385, 0.44264886697088085]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

