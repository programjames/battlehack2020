import random
import math

WEIGHT_LIST = [-8.490762365376908, -2.5580561521857175, 7.305910210289147, -0.6007024401820711, 4.015796006472624, 1.8863993585480587, 0.3813947469299352, -6.827200816030085, -9.497798100612616, -1.1758829965585718, -0.16290393001409043, -2.2067265393750986, 0.1849545190079936, 2.2897361790954123, 0.9397367942008203, 4.204305636254763, 5.1923128823821045, -4.811283433135529, -1.2748944794842287, -0.10255366585024195, 4.470639726654433, -1.171355407287882, -3.5893662963240427, 5.343178544005168, 1.8910231270989581, 4.853418304307824, 0.4542240830479684, 1.6928667280633132, 1.2780375316774328, 4.515309908746132, 4.390028667348134, 5.040776819635897, 1.2610568245877027, 5.390047775680293, -2.2271937984311854, -7.351986977768071, -4.4351081682794025, -4.522179139148855, -3.786321980827828, -1.541396038213762, 1.6474214225623496, 4.50602728198924, 4.0942282424516145, -2.3838008772498127, -0.4729094850876364, 9.362135188968084, -0.09800399815176841, 1.5558186760640107, 2.986952888654353, -0.6385823235925512, -0.7461082704867734, -5.798762920110511, 1.218529110021417, -5.140328313333416, 0.03695424246637924, -5.955668625002017, 8.022409918462962, 0.4222293175960719, 3.8458176659522523, -0.4290335043651495, 4.662501577568411, 1.8912485278603275, -5.144403758028236, -3.1699750447556863, 1.3633174042541838, 3.520512589290139, -1.1258663870515548, -1.9330842057653168, -1.1867459014897654, 5.977576116534588, -2.939759436731748, -2.3718008800643218, -2.362880700664095, 5.058840253968813, -1.6601056615950156, -2.2397515334184397, -1.6892252939721135, 0.10982017962835772, -5.599486879902702, 6.231246472179887, -3.0034778198732273, 5.327329943068611, 6.092589845370492, 3.8130860689739463, -7.565199493790105, -1.60114349907238, -5.999354867238281, -1.8163200873275138, -1.030293112755815, 7.839969874517112, 7.536482325164548, 3.6743001711276544, 0.8725912721878224, -2.517711166371559, 2.79002906192717, -1.7186753274269093, 2.3794868629067736, 0.8474477523555428, 5.872844449330197, 2.263710548280137, -1.230590872033985, -6.694667629983268, 5.894453086260088, 4.507400512632741, 4.420714538240626, 1.789513904228151, 2.563952512083295, 5.25524824134372, -4.5658992331510415, 3.8429597227416434, -6.439376727971838, -3.1218276287648314, 3.549542380949283, -2.6681459261020013, 5.545652614537255, -2.2894117968063177, -9.715358921720359, -1.8417351223228706, -4.461131199461818, -2.4132108059963473, 3.5292200462523984, 0.3799795596396702, 7.84106656078722, 0.012361639241196182, 2.6009898129646927, -0.0647412559992078, -3.2035245361450246, -2.572475492660243, 1.2278276208316814, 1.806219077373668, -5.033569219932661, -9.577003495034253, 1.4807428499612547, 6.13300260881485, -4.812593429850567, -1.934896121640429, 3.6023174786683017, -0.8321603029574944, -3.4125363737016703, -0.07916609459348126, 2.19513225269601, -2.64727540129094, -6.91600284736743, 7.0670912152401275, 7.614698131440475, -1.6423231905913405, -2.238881714692873, 8.168327906051378, -2.733059909578865, 2.3586829790995405, 1.5435619637734608, -3.6707986772557746, -7.0671870104728365, 1.1909710490337404, 1.4185652832355178, 0.37929865174632044, -3.7866428997839927, -7.048557784879314, -5.661552524932174, -1.7128757849931415, -4.818119730318013, -4.070773918064818, -3.6324436922493297, -6.2972368748825005, -5.479028390390014, 6.716613634202536, 2.1567086801566417, -0.0867856516063999, 0.24001320193005693, 1.1684528841244637, 2.9539202120857193, -0.4351380426425356, 2.2140195316000213, -2.81496047609594, -3.331980826851204, 1.9800030138477975, 1.07122688703374, -6.258331047908347, -4.647513030703893, 2.334750456797306, -8.12134851795211, 8.93596489044198, 3.3822223861309837, -5.52786585958783, -4.434003070270775, -0.8536087653241506, 5.039721728851513, -5.214992724975466, -4.965643116929997, 6.964741615263751, -4.915561573675285, -4.8559926850792765, 4.907408038810035, 2.5436694235016466, -5.435342226010391, -5.156640202179632, 6.9267777803707675, 4.236123420474785, -0.07266264423543264, 7.4335366066937025, -5.5905386056538715, -4.451148241373717, 6.49474148734815, 0.7749690881475368, -0.4224571669364256, 2.7064469378373093, 3.4937204563364817, -0.6086447748459078, -6.895931387920796, 7.398170957133152, -7.086089389733198, -2.0226701006189494, 1.530430777618304, 6.96965592350692, 6.2088627296901, 5.586165994257551, -0.6091047401800086, -1.803450341940567, -2.5615794475491103, 0.5284565278877758, -2.27869557369085, -2.7013642362175774, 0.37979343851559694, -1.4136968955897287, -4.203935721506098, 5.944299996356282, -0.8951894279944617, -1.380752230066172, -4.0593836889521935, 2.5966856869773935, 2.971460775327836, 0.6989490947465606, 5.656562520014236, 3.2738969706485537, 4.202336458554038, 0.3541456363737679, 5.597965893037142, -5.971132581137026, -2.7767345445014797, -5.111259197062595, -6.195676309779083, 7.232308880868993, -7.092150214320084, 1.7263900930837872, 0.5207578346234836, -3.4235718191010367, 0.10275076154470669, 3.9961685464095384, -4.328045316410059, -7.862921844440796, 2.0150520620657697, 1.9021875071241916, -4.694811062834004, 6.564598811761541, -1.3536351399205326, 2.2529675243865928, -0.7049607331937136, -4.347719187361079, 6.261472400885693, -4.311809562122456, 5.887742856656884, -4.2581038234289625, 2.7429346183886745, -1.326432307127683, -5.093142068524382, 4.66618158218723, -2.637695668127456, 0.5068624188687785, -8.28645010909107, 6.820439923509451, 3.117168626135354, -9.540694774044796, 1.9014559319708901, -6.717992755692092, -0.48411471961291286, 0.09991340354438255, 5.267155170249441, -4.543156092987713, -0.7777904125985582, 2.388644829312065, -1.1616144800651496, 4.366701861438648, -5.797572418413234, 2.53683003993918, 3.516576267080449, 1.9454283197647824, 2.2781792596721, -5.930917320560011, 10.373687137588542, 8.906483802898826, 0.7985791711033274, -3.621140999209893, 6.005231000220346, -0.554708319122704, -0.9380356964319136, -6.007907111065246, -1.2438986069485676, 0.8393484529412305, 4.812868414114128, 2.4033857869485504, -1.5627430975600185, 0.07532668909110846, 4.737990845439578, 0.4549862894232632, -1.7176120832228885, -7.5648041087886595, 1.883341528637923, -3.7721314676199746, 1.1907056787885355, 4.197137336740995, -2.3851042925830965, -2.520787996763892, -7.945247865447674, -3.613033686795194, 7.647596833599996, 5.660338295883827, -3.3339247926784292, 4.145840796556364, 1.3549253575826103, 3.5283741349330167, -3.1976238857532016, 2.4303895840982066, -2.6931015965372125, 5.726273116959714, 1.5166403488712237, -0.25263142466570027, 0.45316485185968797, 3.87103623772794, -7.880296339174156, -0.400177146778667, -3.7456515238919263, -6.95501676197834, -0.4118517301599354, -3.8753010136095645, 2.7636469636689873, 5.183446290867442, -1.2387235544137327, -7.01805729102741, 4.92662642696274, 3.285431121807827, -2.3604608978026236, -5.675697163347841, -4.539854727050136, -3.724324731246461, -1.816464682055526, 7.187744357768794, -3.4232453220309185, -7.15301305600644, 2.104228425799769, 8.78444530516951, 8.988311989836037, -8.806490962216088, -6.857057268491993, 2.85998984459953, 8.347013719403071, -2.808439507093881, 2.2196371191271047, 7.643226205081707, 6.154443509239799, -2.330140721695813, 7.434145529484641, -4.121538076351188, -1.1913017937067427, 1.5831729738003666, -0.8831002363314071, 2.908229198383736, -5.254533576277818, -5.805016427840601, -1.783671356207901, 2.28446810074866, 7.915669833098691, 4.119745351817925, -0.11307074490472732, 3.8658744930584086, -0.11562876187788373, -2.5756258216782855, -5.045731691928232, -0.846853959043288, -1.7713233248291176, 5.542352712894058, 2.059108170694667, 2.960219541051037, 4.023854270997206, 3.3824849829900487, -3.526407318370968, 2.207361198242851, 6.401839364734371, 3.4388463240652998, 0.36063595456188274, 2.4386365676495405, 0.01894364287817818, -3.4730165334007332, -1.2294780942327441, -3.7432599299652582, 1.2159669354640013, 1.3955636915407001, 0.17191236161918183, 1.6203694745576254, 3.116988511401519, -2.6431910299025243, -5.908238590113329, 2.7392632260249083, -5.838911781128164, 6.406869862840172, 0.12882196149434988, 1.311767359063396, -3.876380795646955, 0.64501514617028, 2.6704931038469972, 2.894167383140901, 3.0391405634567747, 2.8841107993307795, 3.5867259542206757, 0.12494373585880342, -2.184178708495114, -2.764243841266738, -2.6666810479759127, -0.1666687724309856, 1.2786790623797692, -0.7588605434502427, 0.4679024736739203, 3.0978170297332075, 3.810368044345943, 2.0842461288505945, 1.3909805031414728, -4.426244447699875, 9.094044517107495, -3.2836473912055033, 5.017715795959248, 3.865828869512264, -0.3835412742946992, 4.932488564634435, 0.39547871369222104, 2.9727040454450444, 0.6520970555388685, 3.4548561594526745, -1.7601464931444295, -1.3344404198962836, -6.473919263141583, -7.837990708923525, 0.8610070728100423, -3.7297334285817754, 1.347802077514965, 1.5572105218541075, 0.5775667749720113, 6.669225664867694, 7.5798656690018085, 2.965370756868187, -5.743162819227138, 1.6182187919664068, 4.8506425533699, -3.4421250402692514, 2.825120839381211, 1.6197561717028726, 5.777390234289795, -0.012101716739447321, -4.06468305676238, 6.836623591103229, -0.017988600635426844, 3.981450237027079, -2.503943281452792, -3.5621535419520907, 1.0752402840364526, 1.1132671255787066, 3.09397741882912, -4.246618164159363, 5.425516036338102, 5.476082874026994, -3.5175519721841253, -8.057302873974546, 5.104333783752403, -1.5679106771278513, 7.214131259915406, -0.24670512293667793, 1.5180353304888246, -9.151195499747939, -4.562322675344668, -1.1357802575975215, -1.6438624150795556, -0.3527570489814047, -7.09229984415559, -0.8857795522898695, 7.897662922024538, 7.936211267130671, 0.6325410009493397, -1.2437471365697115, -1.6464363613230217, 5.585575539047871, -4.27105320351362, -2.270515065090463, 3.9958988790416723, 1.0642562943511824, -3.2677602657975826, 5.372107465618438, 1.8245863986523259, -0.98866746209616, -1.2423641766181674, 1.8740258992613792, 3.4065119109341486, 3.554474637284737, -3.364032538928347, -0.2693008000513935, -2.3345544172548616, 7.242225060418348, 2.631424432285779, -3.4172942360023133, 4.995347199285662, -1.7954519200011572, -0.4059695091807155, -1.4764501819184188, 1.8663474672359341, 0.38581365626109515, 3.891492444597876, -7.103922432648351, -1.2443736199077868, 0.21565506521852912, -4.289514348066898, -1.8433683021085119, 0.5105296748197155, 2.524424602728593, 4.127415511084862, 5.826483244790835, 2.3924053465766044, -4.769309335960155, -2.7260502906829176, -7.570182598567556, -0.05734367818580363, -4.071846647091533, -1.4325988252558974, -2.893193523583979, 3.966684653015252, -3.1281947920047686, -6.980750918091313, -2.8536323193342192, -3.8530648146959026, -0.06203382790375986, 1.6298683210625586, -1.9819552641419154, 2.6508931506617617, 0.45179328822266557, 6.611225766468545, -0.9407739798609895, 4.562277487455002, -3.6812617205991787, 0.28529846352985305, 1.6998499342699886, -7.815533001597431, -8.21121157922631, -8.506095267299086, 6.18605743639161, 4.0706136574636504, 2.1941761549983054, -0.31482701607207886, 1.4000019856340695, -0.5373806239037041, 1.2079851185796082, -2.7724660890310444, 3.5999886965256755, 3.3429341731102973, 2.4847547761793605, -5.104519069754938, 0.42032534313015263, -7.213247436344418, -0.5259346244787699, -0.2823553381462752, -3.1300218385850287, -7.84689116898481, -0.8004140065471264, -3.1676074688052167, 2.4368369967953774, -5.521537254468775, -0.5787103409491327, 0.7649024924763612, 1.9245948825558141, -6.912044925003095, 3.0467161945546866, 3.7634963234640146, 6.230081297161087, -6.3286298864935775, 2.4976463382018386, -1.7308135945608545, -5.013612071419626, 0.8917251094674108, 3.387653708534061, -2.0252814606624936, -0.2825639994924199, 3.6260821474387988, -0.3251885157275663, -1.3613418480013966, 3.4498647767942288, -4.876186019307102, 1.308989074158222, -0.9684547338769969, 1.2834770304760221, -5.264580826921376, -2.1003746667102354, 1.7624077668762026, -0.8994410934624659, 1.4342423308346528, 9.178964746484361, -3.6386967523598432, -10.646207111303283, 0.7263957348303933, -1.5769397848138895, -1.3090225270402798, 5.480889473573949, -4.45556551856698, -2.7420195722530836, -1.7471515001170315, 1.7098543000579018, -4.410451198364409, -2.775310812072323]
BIASES_LIST = [4.085811095235502, 2.3638448462048913, 6.863248916172599, 2.099143174466908, 1.5991173730870383, -4.032358682161945, -6.836306643619033, 2.5452003124909868, 5.478575125863926, -1.4929802364485787, 5.870785040672714, -6.589756651884383, -1.2856593228323567, -2.302664294067371, -0.8253697647462326, -0.8095721447598687, -3.377185094978838, -1.257123009339648, 0.1918377612663224, -3.7538962201832677, 6.273064673508729, 3.3905773524821923, -3.5227484898326344, 0.5733648991417895, 5.083936557865293, -7.58399332521945, -1.5663618294375956, -5.898203787282492]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

