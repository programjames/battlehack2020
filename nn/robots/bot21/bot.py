import random
import math

WEIGHT_LIST = [-2.5023996905169215, -3.4074195356910573, 1.8596246005060881, -6.359360527787706, -0.03658096468183625, -6.264768333542077, 0.9348697790392602, -1.4163904354092047, 3.7490563831973533, -3.553961197766255, 4.516701506332276, -2.1261523537000566, -3.173533838353383, -3.7266580027472833, -4.044263323436964, 5.149469090040006, 3.9213170449489425, -3.869195285017523, 5.822019708398277, -4.738025929829103, -5.2483874065807505, 1.5122844834254643, 1.8715134816558034, -1.6306311821031663, -4.991667065862438, 4.668598005843619, 1.6396615085467765, -5.573092585897672, -5.751348481233223, -3.7039225697956546, -0.33810601412102526, -1.7234146993243653, -0.04682401199888475, 1.0974589754261102, -3.7256420181502827, -1.3050001127590112, 5.989550368430645, -1.5813441623723858, 2.033260066205929, 2.6223762003967286, 0.2940595383135356, -2.3076272837696874, 2.7633589725782994, 1.8224917883452623, -4.739200023192465, -1.445359715747735, -5.640334651952417, -1.8757470997445942, -4.406502670930234, 4.325575082715026, 0.5273568094869046, -1.551684431912174, -6.4441530398847, -0.0028286237020955785, 1.4929072664962195, 4.095363375453216, -0.5741011009927683, -6.077327205389269, -0.9100010161213561, 7.923407788479208, -4.228226878517766, -1.5484723240377052, 2.433819227675933, -1.9053268707269688, 3.4111221432213057, 1.0514040554013233, 3.8054335597593854, -2.2494632449826666, 1.317369406416348, 0.8062648787667142, 5.212059217639404, -3.6171120549596867, -1.1156979523213284, -0.3963132515213421, 2.8401063870544414, 1.558563190660685, 2.6357548218271196, -5.102370586559159, -4.783156450853572, 1.571555936456595, -0.8523082075795442, -5.035867426597323, -2.682041593738278, -4.070020059506637, 1.1525121419948747, -3.629210492217874, 4.525880046956413, 3.804350016388514, 0.7268396463369886, 2.0257333748993367, 5.0639157168132165, 3.96117467083174, -5.6803679819849995, 1.3964121946333439, 1.7157506455902354, 3.3436063906597617, 1.8309884019551421, 4.739318991098204, 0.041017068786146194, -6.714842162291595, 0.45925616728698215, -4.305465275450824, -0.6264794469639781, -2.2457159677343315, 6.547779205233539, 2.7956256390312983, 1.3737050733764389, 1.2302238210256555, 3.2964872581844658, -2.3357460246893442, 3.7869658606008194, 0.34439045433274296, -1.9269143778096067, -3.4990560920308336, 4.001467025890489, 0.05573494042543281, -0.8642308993684433, -0.6014270477684739, 5.347510978069766, 3.190738213930379, 2.8901790824462497, 4.261531832197374, -2.151315753251942, 3.770763389416768, 2.93935324909416, 1.4086441867034765, -2.2923914534240053, -0.8157260399134982, 3.393368082742974, 1.5746408650387842, 2.4384490427850984, -0.03119162974403933, -3.439844780899919, -0.6068905193814158, -0.21421328457601585, -2.5445365077463107, 5.285881414137447, 3.139428094045364, 2.6302140275626744, -0.10413841119196632, 1.457659242333409, -3.687170960729016, -3.2416920900394164, -1.566038292567901, -7.201541008102489, -2.3406477822810476, -0.39021708395858123, 1.6545702978338914, 4.159441394826129, -2.333647690362678, 2.0579296216228546, -0.30172688440356255, 4.057140378475321, 3.8647713174933633, 1.031481750715633, -0.9570291222012817, -2.6370123225783275, -2.8512785266674507, -0.46404517007829615, 5.7957440682099675, 0.4130885028817086, -2.648555355045084, -0.19612772084123598, 1.6273961210436894, 0.06664277322914391, -0.27330645539145504, -0.001188593303878882, 0.18395136662552525, 3.837944793809548, -0.8176625236439425, -0.5162921111228872, -3.831106385310937, 0.2838180063830307, -2.427583055875136, 0.9065741409975443, 5.271665031902596, 4.3941646348270496, 6.439259837634098, 2.6686042048947636, -1.5738023097051361, 2.9103892765891017, 0.6512239701226679, 0.4161937154303308, 3.987172479063398, 5.0657905328756785, -0.3340471527298412, -4.112755565992577, -0.42005231905401197, -3.2423851791376705, -2.45637066105821, -0.795122841301737, 1.0322429272999738, 4.818229447212542, 0.8090539766954021, 1.5666399812473637, -2.402955619583852, 0.7841572107669872, -2.715425791436121, 3.1170278462478898, 1.5701905355499974, -6.006717388918762, -3.5568831846882363, -3.926132778186412, -3.3583557660251087, -4.104843424787931, 0.9061726333757352, -0.5499514575969324, 7.7722019271742635, -3.2461073866679833, 2.244103001209551, -3.886900426776669, -5.619039030018913, -2.4109527968750357, -0.16087081926586433, 4.026329883401012, 4.594080305834462, 2.2998922046081174, 3.7313356522812757, -0.1318115052215656, -1.4608094591743954, -2.8499729077296037, 3.670079950665497, 1.9468665958420734, 0.7185216545471396, 0.7450171252556346, -2.629795639602481, 0.49242434932551893, 0.5546513199964722, -1.2596643722550318, -0.7633025545021666, 1.0410869646308059, -4.437036274506099, 3.2702176058664074, 2.7563338588705415, 4.059008695623689, -4.194302978959185, 2.6435927300617266, -4.044608070985245, 0.6246551615827127, -3.1692972250038234, -3.607797528216271, -8.101168662098537, -7.658960827252974, 6.211493697850179, 1.2819607037727057, 3.8301137877309737, 3.1923248121578043, -4.497497731963646, -1.330579730941501, 7.388938232063744, -3.201813275895346, -1.7590173177631068, 1.3082829587540727, -7.023403628121272, -2.4911096400128727, 0.4903270408151208, 1.9070515314287917, -1.5329569479056557, -6.715247793817022, 0.48709763549266505, 1.500959062132969, 3.081311314444892, -0.340635761685566, 0.851310201610531, -6.383546676625645, -2.3034116153770685, -2.494644601500464, -3.1647472386356075, -4.637222994813133, -2.655825364714187, 4.102013826880747, 1.6725543371616522, -0.7473213746667158, -5.780349803996199, 4.213827173504502, -3.411620547029826, -5.353619962134264, 4.859180981167759, 0.10772481666729572, 1.0249495708511525, 3.9796636855910696, 0.4368655699329347, 2.2437796539572856, 4.8688384803278995, 7.126111403163591, 3.2020410104993164, 1.7657379580324983, -2.589145225737845, 1.8941040284998447, 3.2437141979219515, -1.3309202327342322, -3.741685518482546, -0.6951531242546589, -1.4601398859990782, -2.37619849025009, -3.397897298488828, 3.5963933114222932, 8.106523989494235, -3.096807122774149, 5.563325952716756, -1.787789324059257, -2.584734452107921, -1.132852936309642, 1.3278599306377985, -2.3165329066740887, -2.891224189907466, 0.988760920903248, 1.9993023229386093, 7.18097188998555, -0.7316588853485329, 2.851917574982357, -3.3434812453062186, 1.9118090001286498, -1.6320661121256115, -2.5461837422150886, 2.36998426410244, -2.6936743797599076, -3.306358092361844, 2.5223632123434294, 0.9998384785030741, -3.8515352605097672, 3.266864712737445, 0.16831691049887576, 6.256771125035398, -1.6724299762104324, 1.3301371785721292, 3.7390492193173017, 3.5782236485373042, -1.166362611192697, -6.777765646139099, -0.3518883016554475, 4.423241559931162, -1.8316999909553306, 3.922925295847696, -6.463156794315937, -0.11208933169159119, 0.7036103122378083, -0.12430495078881232, -0.7872706678556196, 1.2505151451834293, -0.3171253546876357, -1.6534922686769888, 3.7990324219756735, -1.3841979622596836, 1.0602384579443669, 4.2335201461050636, 2.4374881914714157, -1.1814976130102224, 2.321634236857613, 0.03369857453171399, -0.8348834825849016, -1.426947290265582, -0.8810516626832143, -2.2854606929020234, 2.506819481717391, -5.443256760124944, 1.840369621338203, 0.9651401114139948, 4.024857620444251, 4.883691747192924, 2.401606992773549, -0.7812149777765693, 4.5483572407596, 2.35827410026011, 7.544073738856241, 5.456316503932818, 0.3869934973863629, 0.7643482421561141, -3.1721217281074243, 4.0446856509473985, 1.563434003524582, -5.14893162272731, -4.761081482774376, -3.1000954921103308, -2.526307103059514, 0.10886259329910986, 0.5571350701636639, 1.5147519597711252, -1.8263056715951884, -6.447521937792367, 3.283364869695191, -0.40773013500184385, 2.548081982611948, 4.238304698657428, 2.888121321936694, -0.24897443456672974, 0.30243616559049036, -4.297365658883997, -4.698861727717428, -0.47810215525879407, -1.4836560973325552, -3.9199810445603878, 4.70465548309283, -1.7430688949351218, -2.250697371700327, 0.1561585784179218, -1.4660599542260282, -1.3476710669533505, -2.7196183831845326, 1.9090780773613938, -3.628602697744153, -0.41190560785328145, 2.2730091378175628, -4.200973395259326, 4.258294694528163, 2.134769671667813, 3.947321876966244, -5.9638458494426345, 6.209071466176722, 1.5339932633238016, 4.123180928217024, -5.110853580763188, -1.4525614644028224, -3.835033822206486, -3.677191858901641, -5.19079530005573, 2.5060102401298496, -1.2540623646835638, -4.574686797543437, 2.9821519199087825, -2.659839597026152, -4.782684142713103, -4.874882723367246, -0.9223832833752594, -2.6841740497643363, -0.09065290060691578, -2.7351645638602013, -3.583822822080365, 3.532846623294976, 2.412846972765526, -2.0693306666436913, 2.920571329224426, 2.4458079719453742, -5.202515323233452, -2.679756441391036, 3.2470439411028797, 0.30737171356999005, 2.9117608996659055, -1.132966022420532, -3.9562151257222817, 2.6007836158251454, -2.4812945401653046, 2.173826754327225, -1.2221493942309634, -1.5343883465806152, -2.8258613618468438, -1.5190722064380202, -2.0843942465964638, 4.199535425562123, -2.294027836145765, -1.9238086062073778, 1.8063335882889122, 5.533598120189332, -4.280154520591565, 5.3700824210412925, -0.0573567125651574, 6.675691467272029, 0.05538164184289873, -4.392044717666533, 1.337584678601762, -2.7206827248280905, -1.2105545482976818, 5.2985618040690285, -1.7812642051021461, -1.6105102432406948, 1.0105796590539926, 1.573461249714137, 4.06323436401489, 5.795070231175206, 1.1042988721352236, 3.6787530937292923, -1.93589097871492, 2.750231399060123, 2.1896669326710896, -2.6997371097570984, -1.0816094074609803, 4.075525952548719, 4.388290575084918, -2.606284569484891, -2.027188673559449, -3.250448261706271, -0.865246951544244, -0.9704992849964797, -4.151312656115765, 0.7905363901394642, -0.8049458614995191, -7.247245403214773, -0.24076199164751755, -1.100035246147022, 3.973668706690588, 4.791152193007518, 1.2446261808164554, -3.338067509692528, -2.8205944396456384, -2.723886678304982, 0.22512323598999773, -2.5936061785986517, 2.580267233616506, 5.130660778906304, -3.9143890923313216, 0.7133738771957416, -0.15111227514631653, 5.312932902051626, -3.998535098393226, 0.8185408619784778, 8.011856008835146, 3.270655768243383, -1.8644763825649993, 2.2208212548196524, -4.583602083960241, -2.7575004245201655, -3.420296827799606, 0.5962438082311468, 1.5426033261376704, -4.39952847103508, -4.744949777915214, -1.040280305467985, 1.386783277442302, 2.09781898968129, 0.005824861074911425, 0.6943266285753962, 0.7844529734738148, 6.562853801960557, -2.123488689265479, 1.5906912314512782, -1.7993163459950035, -0.5170958066989684, 0.1836510649838834, 2.3757143406448695, -0.5101514846747197, -2.0414857376509135, -4.894315163743747, -4.736960918044509, 1.2438443721826564, -0.01112708169787524, 3.8164566920545635, 0.043454794919807194, -1.47075896497211, -2.076271987268477, 2.522198738320677, 2.4229057889603047, -3.848615725180067, 1.3073215329720207, -2.015188537714649, 2.4661072102648367, 2.2666033335860902, -4.56441141122762, 2.5383858873311604, -3.793520665627041, -1.930904524555884, -3.562571176160352, 0.897378831314529, -1.5702508920995688, -5.63519070147815, 0.10064134542186354, -3.111065397229706, 6.505444223036046, -6.403511294097654, -0.8399278588773871, 3.843241397850596, -0.8654223609020881, -3.164607472331332, -1.6576440370309962, -4.273807825072333, 4.350579368196822, 2.326723410026738, -0.12931296860042063, -2.1988897722033034, 2.4168822672607826, 4.210943331811732, 0.12204395143609714, 2.0732391025666117, 4.097700904349986, 4.639706795160228, 3.334240667769082, -5.466183103322999, 3.759627562844, 5.773123079116887, -4.301754356652918, -2.5992993045084583, 5.273818542551465, -0.22045237508566606, 1.1215139461810364, -3.0577083578394273, 1.3629608359864118, 1.93089133023059, -4.9874822580066525, -4.512320732867909, -0.3934289984445104, -4.654896487379497, 6.880744668676775, -2.70625151586244, 5.341437428309891, -0.9546056920104882, -0.219743094321871, 0.3807061078169769, -2.063145931940606, -4.839479426401189, 3.8324503110955446, -3.3381704126721314, 4.483937692656386, 0.12480817986041326, 4.6583483026437085, -4.325140855733647, 2.3645983496743823, -1.5032089751113629, -2.32540453311588, -3.289781754371983, 2.142073329220308, -0.16062746168769004, -4.646047782689709, -1.4197442555451947, -4.954381548150035, -2.6593310933189973, -0.8803638488126315, -2.884130671522791, -1.0604366957595086, 2.588790517340067, 0.6707240780476635, 0.19162938343705793, -0.13766192862480064, -9.559129006408325, 4.467947192152145, -2.361668587438914, -3.192288069606333, 3.4824407536323037, -3.1413643009134202, -4.391802108705985, 2.7866139775365726, 3.119796537390312, 4.4194850545814965, -3.0287071862059967, -3.1194872975241514, 3.8289223185418404, -1.324904090449052, -1.190241258110225, 3.80765832326723, 4.218669128926484, 3.8777258229549574, 6.042487064235225, 0.5351670285067069, -1.5752391262068326, -5.073792604992718, -2.4250251799198663, 0.20459320059563169, -2.556279389194431, -1.7691514994154047, 0.16004814979865478, -0.5633825175291911, 3.1855190150953128, 2.5758734735347124, 1.2169068944078694, 0.7504518968266849, 1.525831548109844, -0.4390826587049217, -1.183993488352622, -4.044700653524451, -3.1333443924371696, -2.039725205634397, -0.8165220602826868, -0.49550008151533875, -6.894837770745548, -6.150873975046207, 1.4297901676683802, -1.1713454758280981, 2.5083806403111826, -1.4773997319078216, 1.6822905216676856, -4.6845507833724085, -0.061567713296214466, 4.160651121152044, -2.533373430545891, -2.9205745508182073, -0.7184318841710355, -0.45140302111742336, -6.635101068846256, -2.2589042052077963, 1.8997136895063198, 4.750784304438972, -0.07571949121447008, -1.1013840176537748, 1.9182761673308253, 3.323952820389378, 4.383057087792414, -7.511036032159804, 6.005947545806866, 6.176709145661402, 0.290484342295551, 3.544088394834895, -2.7386360408563424, 0.4071122534144125, 1.280572774225564, -2.5217300418451307, -2.490993106550074, 0.6438342535958561, 2.1385785184819976, -2.0971081515465837, -1.1420273647697032, -1.3514542749300227, -2.390767962504338, -1.7366092374264128, 1.5050758494692262, -6.099011189719349, -3.3242759083824414, -1.544744187469429, -3.8784977041129016, -5.489500420713322, 5.227677686733592, 1.7693950370610727, 1.395874450090178, 4.765019349852142, -0.581725941919923, 4.549591881755146, 1.1575017306314983, 3.491805269103308, -3.975227880886159, 3.1326498623054535, 0.5243820995737982, 1.8089379609728753, 6.113155916566544, 1.022831410635543, -2.1709851341600164, -2.6344581933568594, 2.2067384024542567, 0.939228344465538, 2.953785653067076, -3.5003956231021887, -2.1537435764618085, 2.7808585643228882, -2.703441831805272, 2.058979841695721, -3.4609803278077744, -3.4284896487501504, 0.2857437640789917, -2.758961833294614, 2.337805417076739, 2.3282596429575535, 5.18867568261002, 4.271703560699157, 6.347905536927778, -0.3794651289456892, -3.5473519135284457, 2.6922899582767457, -6.412776768102755, 3.3125289518531833, 3.3644314059356537, -2.0515591625421923, -4.5789842940081265, -0.27102547016292067, 0.919297157880886, 0.5379908549186594, -1.9426576680895082]
BIASES_LIST = [-0.036782238755109775, 5.939617004646331, -1.1337951785533984, -1.8262150028472635, 7.101430057604446, 0.5317056136094551, 3.446032856843364, -1.3816834620946878, 0.32673185318765974, -2.9876234414881626, -0.2154985412146102, 1.3352132685096896, 2.032247673679245, 0.6271348075555023, -0.8835961233378691, 5.872394878633773, 4.584519120637798, -0.5274845623997158, -7.642057253617574, -5.028532900256054, -0.855701855241985, 0.6114645093309585, 2.2251036958291674, -6.3288303336753025, 2.3494804722728997, -1.907805866094055, 2.7652063875773445, -4.568896966841873, 2.871284141921359, 0.8580845165132358, -6.4103334742572535, -2.0177703013555788, 5.9769831310959765, -0.07677312164294436, -2.156362128095436, 3.187018552465723]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

