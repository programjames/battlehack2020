import random
import math

WEIGHT_LIST = [-0.6291225912375624, 3.989362283808184, -0.1949238298635626, -3.9905376487705766, -2.7099073156119253, -4.78197787828163, 2.703415110373659, 3.9599637924181375, 2.989071599567559, 2.0701123721746244, 1.9449016362036033, 1.090971878004285, -1.3190394830347258, -1.2195849313208496, 1.6475505098939416, 2.8910626626839053, 6.14496760672024, -3.2507441497357794, 2.4114830949904107, 0.9375563137259657, 0.21226121418609445, 5.574759704007047, 4.0265468000672495, 3.791058788136244, -1.296347634827895, 2.052016949217924, -3.128178202986882, -3.571685098661988, -3.2588805869713706, -0.8817550757751796, -0.6305757333425068, -1.4058743615834317, -1.925827619400305, 2.150817356048721, 1.3332554034599267, -4.212279747725336, 2.073806458347101, -2.686203798054171, -4.673989283362894, -1.6166037352087448, 4.409320660233791, -1.2521861761146418, -1.4002938315839073, 0.2557627138549472, -5.263481283503534, 7.674396960790615, -6.127458559461228, -0.6560248353133562, -1.7126704143834264, 0.3286892731449529, -5.0260860435471475, 0.692381070937335, -2.4796654173404615, 2.5347071102087693, -1.815363586539058, -2.0446016139418024, -1.1138906498787158, -4.601147578533511, 5.659788276741922, 7.813441982667923, -2.942015442551943, -3.4000182395396745, -3.078487321862082, -4.091153082577188, 0.7985502937781965, -0.318760457828999, 5.982833461930536, -1.573301041600649, 2.9444187648936295, 0.0058348425035386065, -2.3218045321012672, -5.703737692728452, 1.233201183198462, -6.844353142061939, -1.8540475472281648, -2.3582451505561766, 2.1419494809895703, -7.688235599636048, 0.053931381538276923, 1.6262984110275238, -2.3181393068891407, -0.461854144917653, -2.1788976783971954, 0.3491226635744702, 1.9811678097077388, 3.710735532655624, -2.501273265452376, 3.057400217813303, 2.0406800595146755, -0.9252040881934116, 3.518039601521271, 3.7543736139578634, -3.6227569551624397, -2.0134889328929244, -1.079713512030085, -0.7214323584871374, -0.5080037690971131, 2.8010594385986822, -2.2407030088514768, -4.816865444423281, 6.73455854248181, -4.775836921580916, -1.0792419523647392, -2.6377183298130467, 5.848511579422523, 1.5738663974077398, 1.0395112739267454, 3.7150442322726374, 4.457834664624611, -0.38262849458686765, 5.355176221684329, -1.439222083166324, -1.9843818575511072, -6.170172459943872, 4.294121103179026, -5.892703225373161, 4.025340338349237, -0.10211480650426297, 3.741988568263519, -1.1615387284905043, 0.44460042513282594, -0.8467291920465927, 1.9904794753977795, 2.196864963938846, 8.460533109025922, 5.13361166045625, -5.639458073187326, -6.569947808148777, 4.197701626467497, -0.6108676526747987, 3.0664903183969905, 3.159862472094412, 3.9649827840988205, -3.5574022209499496, -5.035565989317121, -6.2791141392292555, 2.6893472349587952, 2.8437869422633684, 2.8094378656246106, 2.9046418197645556, 2.803964083601622, 4.540747291702135, -6.479081530653067, 0.4557638543191802, -2.995917629953431, 3.7372168129925374, -2.509411595049749, 3.1320200014166435, -0.9333844655138741, -4.863504644870563, -1.7139644400604344, -4.184068041465293, -3.306918847960718, -1.0959228171615027, -5.6331723882748, -7.309489963830131, 4.309401933549709, 1.8358630514505467, 3.0846703913804934, 3.16740096897061, 0.8529499965389571, 1.6742174054188332, -5.817105784694729, 3.9592088284634492, -1.476342026314251, 0.8813235183398769, 2.466118467897024, -2.9312576148760146, 1.2522946109386686, -2.986200156551636, -3.0049245312301447, 0.7950222445493687, 1.3053266108629415, -2.3042620054629683, 1.0652186188537032, 3.6134415009502048, 8.400572779832256, 2.094556723461606, 0.18249628404947216, -9.34728739922298, -2.1375808598751753, -0.7979817350605831, 0.30443276225833626, 1.7881794228483407, 4.1846079413808415, 0.6878045117841529, -2.373787830778211, -4.978380143912371, -2.142873263855222, -1.3953699344808042, 3.2324293105276016, -4.492872553882613, 3.0159666367927267, 4.559731286393921, 0.2881821006702374, -0.21859272284631925, 1.795954870333464, 3.9926092690803507, 2.9878229751243293, 0.5223581509864197, -2.015309535555123, 0.44234315303766225, 3.619153031932841, 0.7963330972760843, 0.1316496958718767, 2.037537493920423, 1.1720318979196032, 6.347467065552995, -0.6658295543548403, -4.348136896698733, 0.347339595331837, 0.06774342011995271, -0.9138162474344744, 0.9908822306214644, 0.7374750864812918, -1.2035860732759398, 0.9008231250085905, -3.909646315688605, 0.191181860828054, 0.41006373137026086, -2.461188718865851, 3.9724096297359806, -1.6993904802730797, 2.4005094291524234, 3.6491001731548547, -4.122803393659212, -2.859435831469015, -2.712027259570526, -2.3447887990734197, -0.7737219597741234, -7.404303644375642, 0.014459456378070445, -4.528959463699247, -3.371579736486312, 3.825953754528493, 0.45227258056820996, 7.4728368522748685, 1.4799593895349972, -1.3487526769160882, -5.683066097583875, -2.466982022513668, -3.640072217147169, -5.165560463648028, 4.642749708908944, -2.0960488635437637, 3.9126284690851074, 1.4019292244236823, -1.0529868500325212, 1.8214394414507202, 9.308051060506987, 0.7912700661537846, -2.4803884093512227, -3.200324531725082, -4.588097010751297, -5.029258824000538, 1.6424625071111079, 1.8039469879448289, -0.47899012126749585, -4.112208836016852, -2.807858951228691, -5.845489516700044, -0.900186133414461, -3.5138250383665244, -3.5996996835114037, -2.9356753298952354, 2.4419705364616373, -1.3829548557614282, -1.4025207429431676, -6.662220539574611, 0.056085938673378744, -1.432372810286382, 1.7275969590768678, -2.7418343870660995, -2.981298303505852, 0.07161939302264941, -1.2743457961167155, -2.6640920825080254, 4.465625354742217, -2.1863521279584823, -0.7091614678507732, 1.0902215692803248, -2.0648972834819324, -4.270616404072162, 3.303613924141559, 5.398041878704582, 0.4717421868427609, -2.225773969233654, -1.622338293057001, 3.4509681949858226, 1.6258937806162956, -3.872387711597672, -2.6281991441239385, 3.350653409201499, -3.662962196664057, -0.9222603167181733, -1.4117561759669695, 10.187151797706875, 6.827651260987938, -0.7593331554247749, 4.523987216277846, 3.426261096055544, -0.008540876277088438, -4.494504929599764, -0.25614146545469496, -2.5895879122305816, -3.7362444530264542, -5.268526323713985, 3.26430638839952, 2.209782539379818, -1.78871432579892, 0.7449265757541446, -2.9472951543727346, -3.747353079976966, 2.5880537404014907, 2.413441961252685, -2.2780280574323193, -4.07062053790244, -3.726429832924662, 3.28291279251446, -6.6153001434737515, -4.5209993444451335, 1.593818996367255, -6.621644368797353, 6.7177069575592006, 5.0885100783669825, 4.774909851173184, -0.9867076520083201, 0.7411429148212709, -1.0665101270477482, -5.039762776266369, 1.8570068779076085, 2.0222011588149384, -6.1764118823099325, 0.8994668448975482, -4.669692391549455, -0.4071735024840534, -4.180751772739559, -0.5302952092166926, 5.434826046080392, -6.855010957849098, 0.04751123188572759, 2.6199410635635516, 2.0174218826271053, 3.6957473620163084, -6.428324637109501, -3.2681790592555444, 3.814612699692141, 3.144789181436753, -3.9201557662521127, 2.55935952346839, 2.766878962491511, -3.9078228621276585, -2.7671314079040386, 0.9049808780787678, 1.043873981649102, -1.1026603194325633, -0.6428131563225004, -1.481367573446191, 4.536660920381372, 3.395354168322566, -0.24387669690519886, -3.054102492378295, 2.7520273127623915, 5.100268122009503, 6.400137717839618, 1.3353660088502255, -5.08027768184856, 3.080770402595446, 3.5496958951644606, 0.3312427811201484, -6.006056949580166, -3.4405083519387505, -4.942819639381053, -0.28039819779453756, -1.0728234107201673, 3.805152510036308, 2.7006952361062826, 0.6854112362167499, -4.0700045171887655, -4.61702188423534, 0.12326616188472239, 3.676588866031164, -0.7513392396363343, 2.8497196790967703, 0.9606249225946306, -0.889747907568927, -6.236732652125363, -7.9702895650734416, -7.37712489388392, 3.5245456333593825, 0.9727959177237688, -0.5546946986346647, 1.8040363253950726, 0.43364478563720343, 1.978346278119394, -2.5319898587190623, 0.7211175834417212, 3.1007155024106803, 1.6129765242067036, -0.6070660742939171, 1.3351392185597568, 6.902394729763948, 3.8848364475956707, -2.0813917561804347, -0.20580719761691746, 3.3345258142057377, 1.13150267251073, -2.373935603878725, 2.3281137490282857, -5.159988049295787, -2.117708952578642, -2.240859614568877, 3.2326124760175556, -4.311955482516415, 1.6790368674071945, -5.845741305824577, 2.1153963885018547, -2.618434953118304, -1.648498642545828, -1.733492842713797, -5.7954815995668945, -2.049758151295185, -1.1851544957893487, 5.559199893445227, -5.511537062937003, 0.010841322437057377, 4.288427691192328, -4.594820896187233, -0.4442033695355456, -2.9974258355897154, 4.621873244517105, -0.7216897341895844, 5.132882319090649, -3.8127452771949213, 4.267877908087957, 4.614946640236889, -0.9603639376907942, 1.8274925656099272, 0.9940955218882426, -6.444482761254205, -0.003601169699330553, -0.9459762010484654, 4.5016455310464645, -2.387494339760014, 1.107360043984162, -3.8626492262901984, 0.3747441192801335, 5.813939699836753, 0.28344071320694875, 2.9373150590543755, 0.12494376902727766, 4.567166369276657, 4.013012878302737, -6.857703740276589, 3.420045213105933, -0.34169221264866123, 3.4147624431602743, 5.394462125642188, -0.5497596909683358, 0.10632187740840982, 1.433440432891567, -3.119836303026868, 10.402878864580746, 3.9680946952296363, -0.2532447355283145, -1.6894362241316307, 1.3568243373667812, 3.371210923185326, 3.1401677752500676, 2.4540184201344992, 4.981719691172566, 1.0709400281213206, -2.073488276686625, 0.2780449213287257, 0.46032526415671016, -0.5733385716584369, 2.776937441914617, 1.9569326569260026, -4.32615709021007, -1.8495450415741364, -2.3618734298370336, -4.5558585529833096, -0.25118982233217757, -3.955753784340234, 4.34040162599948, 0.37184156261816925, -6.869490297718859, 0.6131288004799988, 0.24098607820090479, 6.4596919058818605, 0.9225833462712845, -2.876637868264456, -0.2681402640284014, -0.399756744152409, -3.3492635011253906, -0.1336027922645624, 3.511956265200043, 1.4528700750193941, -0.3863835085032785, 1.2464236982163701, -0.22548630663698055, -0.18725218904066843, -0.2462232418418815, -4.878178776136508, -3.3133250351618173, 5.81708969787848, 3.539227425449255, -1.0050756785878991, 4.056644012856915, -0.889235526338243, 3.00939793164428, -0.47799441803686027, -2.7551953745224687, -2.442786271417328, -4.016713289278684, -2.790308401306743, -3.123874035709418, -2.7761147144319285, -4.797910096928972, 2.816324477035442, -2.2589659280388634, 3.6945810038123934, 0.9200149582749788, 0.9035609253397177, -1.8554188342744753, 5.914123295141317, -2.6032415271850518, -1.8504506574103063, 0.8949940355155408, 4.504093842416284, -7.450565001588684, -7.667008488706509, 1.2612476970897921, 1.8385183753401906, -1.2671645529598274, 8.191865117058683, 0.04202157007515139, -3.781154735673673, -2.7164768352625615, -4.157127608353251, 1.3402122496436975, 1.3522598298079958, 0.8961788423153494, 6.117821496510736, -0.7713714858669671, -1.4756650513632839, -2.7726638192541984, 1.693323746254947, 4.257670858091521, -1.5820026760044819, -1.5339226369963275, 4.262786502990256, 2.382641096057202, -1.1038390599964314, 6.183931816871311, -6.991206872005673, 6.025779045011538, -3.9411159527279027, 2.8541235552853728, 0.17902448911265045, 7.910618590035995, 0.5177617043279965, -2.9315513488313547, -4.278544172015381, -0.6093648879283364, 1.5856858485516114, -2.3536311757213007, -4.566575248490228, 3.1637274890235245, 2.6622417190092893, 2.7263970993011286, 3.517279592666549, 1.6527395973074812, -1.3807595825123253, 1.158616153657734, 1.7799980787861247, 3.60959600633928, 7.762445520440785, 0.42970865444167283, 0.40790087614465587, 7.519616822035228, 0.17957833102969323, 1.7829184066017234, -2.3965268869836303, -3.367155367840385, 6.364911868396779, -4.202574060500775, -6.090092720002949, -1.2984438910574512, -5.184693418451767, 3.7164460920866524, 0.9794441615242413, 6.29368247601222, 6.52250734891121, -1.6399557866846617, 2.7328804480627857, 1.5754159561711147, 3.4238932196907204, 6.205771767986917, 1.324865632964861, 2.4789142431584676, -6.5195060252831745, 0.7630345120859261, -6.378853281824172, 4.589556421529943, 1.9212657535435005, 0.7672762003906659, -5.04983722964132, -5.05510149649586, -0.1762951974563034, 2.6013934144051434, 3.2628580533851954, -6.1872653555342065, -3.2427355057912512, 6.849272884194582, -0.246581640257993, 0.9422425503747769, 2.093449013790448, -3.0993693727003597, -0.3096821606191913, 3.089691219534946, -7.726206924953543, 0.9101851945468793, 2.6741035629741234, 1.4213980996877047, -1.134344378801909, -1.3262477858764212, 0.8562818635382283, 2.688630100754258, 4.354183207225917, 2.786066747954645, -0.8873943249935321, 2.3150013040134882, -2.381439166100349, -4.011691507554369, -6.118462774129562, 1.4936090014749563, -1.3636554020270388, 6.46566948751936, 4.199445747191977, 4.156934339084618, 3.225826954823175, -0.16272452282179173, -0.9472538424351999, -1.288442845040065, -2.539144079707393, -1.9438716341118363, 5.514143490278384, -3.1557875881216937, 3.0006924941743005, -0.16840298316862223, -4.229079723952209, 1.6578461569899008, 4.127319335133012, 1.4947456262814942, 1.53415202365988, 0.5108770708632246, 1.1182293335556164, 0.9703920830134958, -1.829743794276365, -5.231583495312011, -1.3966755593648141, -4.315174772984574, 5.003871541002437, -4.437055112884369, -0.919540292282814, 0.4880165177550657, 0.1394534616291263, -3.3201478509160776, -3.187579063211289, 2.7254137946653563, 5.601339220538067, -0.8174045020795337, 0.024731593777142402, -3.6508342693542684, -5.859748813545556, 2.5687628232564057, -3.632967086180466, 4.306563982804154, -2.2230933777193536, -3.6412958436560903, 5.533003747564378, -2.508761067491708, -4.1595797552053995, -4.336528645193938, 3.8491627907192347, 2.2719095994454928, -1.219027875853572, -2.2803074533391228, -2.706641272173055, -2.9554933995049772, -0.052939556039331315, 0.013558709552282666, 2.342619573449757, 3.7273751334819725, 3.8913770304382416, -5.569273592665755, 6.706461265249189, 0.8546043556341352, -2.805574580792722, -2.873772177850787, -4.858395195652306, -4.779352028701003, 1.0300143650598241, 1.2489019389190137, -0.23801678483518662, -3.0223506031006444, 2.2240135257754448, -2.054712290885048, 3.604114130174991, 1.8332839441261473, -1.829596117815438, 4.137958063120001, 1.6962169794715534, 1.7573350028168884, -5.077619606480587, 6.548045378383366, -0.4985547378985895, -3.138650010623227, 0.14499710621042983, 0.7043002291756622, 1.9204364758681969, 4.658588440575257, -2.3371092445671144, -1.1785518597768418, -2.4140280084299155, 0.6053271207205735, 0.5958036382591625, 3.958296554105109, -1.357484573598209, -2.2908506733077636, 1.3997860424945978, -0.4793461218586763, 0.9398984703139079, -4.028321774427365, 3.0400362821554294, -2.2146962572980495, 2.621169290689739, 5.765310951487102, 8.925385908422605, 1.6219985343299292, -3.354456248511637, -8.050215009531865, -4.3805650617079746, 1.234599375173976, 3.638494251748593, -5.4067183976137, -0.3884923655206767, -1.1807872661262657, 5.194195892921643, 6.106837766193966, 4.026169382553239]
BIASES_LIST = [-1.5028153025178248, 3.6818716677914, -5.321622890368818, 3.790627807511325, 4.870593742138619, 2.049313541336037, 3.495990490794906, -0.32908028053071603, -4.42940672710304, 2.3495296096246356, 4.054721914599601, -2.847629384085015, -1.137231810576419, -2.627156779680245, -5.5767627774693, 4.534118667107119, 5.574359818614354, 0.662516390905912, -5.436535037172357, 0.1443120395215789, -2.7958046235935052, -0.28133394972440984, -2.1788854184128756, -5.2349333002848715, 3.7282634058085744, 1.6833598663626064, -4.0496782181900866, 0.87597794279875, 2.491440375905767, 4.056175388788957, -0.8348538940750139, -1.4226737014037418, 6.096255612052374, -0.5805249647709212, 1.0366886550031662, 3.8078559074853864]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

