import random
import math

WEIGHT_LIST = [0.57457224630616, 4.908123813138065, -2.3285061908175426, -3.547916668842112, -2.3179765188958683, -5.29011982856697, 2.8745612360908956, 1.8387273037179175, 0.8120804033020776, -1.1042636494705615, 2.5973629599627808, -0.017691036491973303, -0.9014211467188097, -0.7578052687601081, 0.23488083967556392, 4.922411440664401, 4.6725954708664075, -2.9699646889880205, 2.8323389136777246, 1.822116357546086, -0.3624265491410982, 4.353701661171051, 4.92316578456065, 5.411996138838823, -2.110058210056627, 1.602556575089077, -2.194145812714365, -4.358649043710282, -4.90848648933942, 1.3932816945584006, 1.355489126824816, -1.114504522419939, -3.39769127686143, 5.248135552806142, 1.002101932726325, -2.4943029257506226, 4.139956299135072, -3.2842509409719804, -3.760906455423164, -1.0271157404598752, 3.828973946971681, -1.865480158326458, 0.4204521513746774, 0.16842755673216395, -3.2669320914315176, 5.72660796719753, -7.87502465805929, -1.0362223345128787, -4.604961160211913, 0.8802705776413615, -3.8443516499782406, 0.6700151142405871, -3.590901477397926, 1.887669599886398, -2.244939694129098, -1.5945623908111106, -0.40239454028113525, -1.9766538617648588, 4.8969438736885955, 9.871228954654743, -2.192797769289873, -4.495690651104132, -4.3075762044132055, -3.519586728984895, 0.7405973111354451, 0.20199693841150365, 5.34896057367721, -2.1939053354456557, 1.2325913826217054, -0.6809237589837838, 0.44466491000458575, -10.348207643119531, 0.48747203932375177, -3.6944390624010475, 0.04927892209460089, -0.9655300238154649, 3.391248257313613, -9.795433818758116, -0.06579969423982877, -0.5701032978472058, -2.416515089908891, -1.1090493784909479, -3.258909987145224, -1.20818571628163, 1.0116879322774794, 4.804969703086245, -1.8306893503507133, 3.9867481687866198, 1.357715533332585, -0.6829738409240214, 1.004167663180859, 3.791239532235024, -1.2455755988340427, -1.07276853866112, -1.5769366585873794, 0.5374211838749733, -1.7575263594316406, -1.1355324345508049, -0.6371770109977414, -3.6879880665893006, 4.121361214107301, -4.8285080027061404, -2.3347826286385303, -3.600140967533396, 4.931615395128717, 0.7444657329851907, 2.7046710126100204, 2.6873157780937853, 4.965855225428634, 1.8726903746786179, 4.389690968911752, 0.6043429750262606, -0.53215136954698, -4.314974030328041, 4.459748756208304, -1.718052384991165, 2.553567570700492, -2.7666564493260912, 4.56152861770218, 0.5648849466611608, 0.6280730844968884, -0.16722600751259564, 3.5937430534164676, 2.608576810920206, 7.0194698682305114, 2.444353616860968, -5.37620211727434, -5.631066648624098, 2.5574114252595774, 0.05606742010212364, 3.6190866982399275, 3.844720224514922, 6.500199412111796, -5.736033107742862, -5.204661457292062, -5.151061729686755, 5.2481972231291465, 3.5062004475304067, 3.559794265589702, 4.552695506806666, 2.0772015185941104, 3.471948787659999, -5.228757873987074, -1.053344929863851, -3.6785084355833226, 2.515886156251062, -3.941619892233258, 2.4834948148963125, 0.45528926975511963, -2.4797309612503007, -0.4334217383573757, -5.111234266333084, -2.4175352165319772, -0.01118643826325871, -4.1484404574252185, -8.683707937545622, -0.21023858957534888, -1.8129777406839271, 5.456263018271108, 3.7950611778161134, -0.9505622647382092, 3.8448803799558293, -4.559017475316186, 4.481948256320365, -1.1311212254186633, 0.3684461031845383, 2.1162441228146625, -1.698929659652946, 3.363052663670189, -2.60314210479707, -3.463778889880256, -2.423358541083891, 2.064053738149715, -3.279428750543409, 1.8304421887636206, 0.18460494418543372, 7.297053313375122, 0.13837002465742582, -1.243817497607013, -5.378888630209787, -3.2281193598847184, -1.8924047865698876, 2.16073238652584, 3.6467078005545908, 5.118127197296788, 1.1331891935318477, -2.6262274574313946, -6.102459775008438, -2.5155322661599424, -2.131752355504639, 0.07532699534559807, -4.291798804210562, 4.569915915358519, 3.2498829206482753, 1.9088103804024825, -0.4256105773802775, 0.7538329548130337, -0.5234730893254488, 1.6841966537863702, 1.7570738820574348, 0.12114035201917916, 0.7150424326432303, 3.029244123252904, 2.419537807827527, 2.24582724622217, -1.3398327284556155, 1.037612819275721, 10.572206168858672, 0.5869177688327232, -1.1306579684930387, 0.6078514809531519, 0.7546187013321952, -2.9504426247772177, 1.301885062904787, -0.6498499523018956, -1.7593325001636844, -1.610759070052639, 0.3242511941749239, 1.3071071538758876, -0.744403237154741, -3.9284215898168577, 4.086194727726376, -1.5697979356036944, -0.9470907692304258, 4.255274488594095, -3.522927829121766, -5.024663656577212, -3.3144529969320926, 0.15330613311638555, 1.7586405132063954, -5.332919715362679, -1.7022521632040764, -4.677443868784915, -1.6407208548318606, 5.278605510475475, 2.3960152215020147, 4.266095453182433, -1.1607090719470263, -3.6350907792113656, -5.940853520699106, -2.5650577552022296, -2.596466474960209, -3.592531165021006, 4.853801226930227, -2.6001644633926495, 1.2140475453792618, 2.5907816123564094, 0.2195256217812113, -0.08947310675614066, 7.135213914629942, -1.5482587115713056, -2.1214433457316715, -2.3013489511209815, -4.274176549052753, -4.862360067140791, 1.010160340938168, -0.42485843806039497, -0.3572134504591079, -5.803753066597299, -2.5057008772363516, -2.7389327507496906, -4.575891759634781, -1.8297983369045236, -5.893656278289963, -3.0751520172727576, 2.6800812559350424, -2.372152387711289, 0.6081578135299005, -3.760604886632064, -0.550789874708824, -1.6489580278121654, 0.17000654162372444, -2.8936141510568674, -5.617776379794367, 1.5271857883803612, 2.040462382304038, 0.20117824878496757, 0.9921866535867472, -0.784841570199435, 0.3758364097203184, 3.956585374209462, -1.0247803010271883, -3.900793456519768, 3.750885759631663, 6.159632990419322, -0.0782871386118915, -3.3736515397389275, -1.817569634213943, 2.636015522565118, 1.6967707694329959, -2.981602279562358, -2.690528650960927, 2.5460146566388335, -3.5727773743260234, -2.2614263699729973, 2.3681643440203692, 8.843307633599135, 5.951357854520528, 1.8027689155840394, 2.047447596531506, 4.5723986125656495, -1.8783404068905176, -5.848298737443661, -1.7742597128992423, -2.38346776268054, -6.863509906408984, -2.8739253600522083, 2.294401400186618, 5.059480904352944, -1.4159157035644303, 0.6791155658855791, -3.9089670735825233, -3.5927766173634113, 3.2669208509910392, 1.8552140803506358, -1.77931452930726, -5.652573598416575, -2.4166369588057766, 1.2990249756120216, -5.606354490057832, -5.310914058982921, 1.2686719437682898, -6.795694815786079, 6.391962476588078, 3.4376637768110534, 4.597242489643585, 1.9952438492446467, 0.2778542439114033, -1.2716872141526667, -5.561224516534652, 3.9573461057396457, -0.33428719814512964, -7.425828213225343, -0.11500844536495802, -5.034033914226908, -0.4973996445929719, -1.668798129609857, -3.4641418288006194, 6.506175658538909, -6.792216269968495, -3.2366658981193477, 2.66568378570132, 1.4807238597149637, 4.194399017049681, -5.689876062984206, -4.635494993488409, 1.7045287806638505, 4.793955924423549, -4.852432588608271, 4.655030959588935, 3.2461204430857733, -4.025015094513613, -3.3917888211379625, 2.3149907084896744, 2.35336554322577, -3.3919248138244433, 0.04568901022875836, -0.015553829421854749, 2.8110030424577763, 3.247930917086469, -2.2484258985387005, -2.816999425976384, 4.926502001757095, 6.043114055754229, 5.295576989070988, 0.12300007170028995, -5.83292342539776, 4.267143493062945, 2.618183599102893, 0.8573701620612499, -3.2171262832301295, -4.707397421182122, -3.658355576424067, -0.8920028123062623, 0.3412032535298416, 2.0716928369769314, 3.9215469613665412, 0.6743757892265527, -5.6440395644068, -5.254227184923455, 0.42452012029141767, 3.418308276838235, -0.8798155331045909, 3.162484206164613, 0.1215079491692676, -2.869853172501441, -7.251492934768584, -7.868041079285036, -4.595561181215384, 2.463519737984865, 5.600161656786098, -1.7012893761955628, 4.700599568354777, 0.5047502924264137, 1.4403151206940246, -1.2953308383952005, 0.3422066374773383, 1.1699170959389507, 2.2633475034796082, -1.5026579286298505, 4.297095716609473, 5.54831892360038, 2.72539860805969, -3.446819672848308, -1.7177425003863716, 4.5561349397135835, 0.7071842063985477, -2.150532099873094, 3.863979443485164, -5.552375266358752, -0.299183760573792, 0.7834811211243222, 0.9083676363884122, -3.2903777199973803, 0.9840818462672859, -5.683944642666742, 4.148300689778076, -1.5800911424783612, -0.711593470897146, -0.9861679554397474, -7.40149173677621, -1.8430621025359657, 0.7629662912695164, 5.219325414775396, -4.3408177375947785, -1.1413947859410942, 4.0872318993926395, -2.7472067948503547, 0.9190409056637089, -1.9268736953887935, 4.38351276928389, 2.78271442245845, 2.993413014842509, -5.89629531385021, 4.936266047467058, 6.19182916344483, -0.738506707484048, 0.8037921561124003, 1.5712857964426188, -4.7574107503085425, -1.6095057787232805, 0.6572236847692304, 2.0215009427641966, -1.8198063289906194, -0.37806015325586856, -4.3144378417444385, 0.7141877596505901, 7.990549140499395, 1.8137204139368472, 2.929458114228959, 2.413295803142792, 4.515723664767585, 4.938537128306892, -4.366382605495799, 4.688637293237396, 0.004642819062179717, 3.6305183263524805, 2.5581475608842887, -0.38321593103932733, 2.5157343293163414, -0.4255009447687904, -5.92165391112709, 7.697751333449067, 3.682288641991108, -2.0412187280815015, 2.072167772024749, 1.4994278528704936, 3.19258736078835, 1.3794252162112168, 3.048335594885514, 5.186138880007114, 1.657197474582076, -2.324657705329037, -0.09997483904464106, 2.4857410755042335, 1.3417492727112506, 1.5849806818855656, 6.855352005155139, -4.269151024017202, -2.459203860563742, -1.1955414937468072, -5.086246266700903, 0.5743974689447044, -4.347325013929695, 2.694034931639311, 0.38802556542530864, -4.406043598672876, -0.8221559333033043, 0.4968821058397654, 6.2559200361141, -3.2697104725684945, -2.880274080774629, -0.6928503859636821, -0.23448882052051087, -4.859849526356991, 1.353336720599941, 2.6123786646002904, 1.8379457373257868, -0.3631745053771571, 2.7272154516759537, -0.2891099123287695, 0.11185331023623352, 1.5381670958361398, -4.738223594765107, -1.6445431874688334, 3.6183831416926777, 2.868739177683217, 0.4942182432604811, 4.261336534506058, -3.0581283835683126, 1.8219840428633785, 1.0488725778801413, -3.782518525102805, -1.7841078918427444, -4.918785770517012, -0.9689165710347178, -3.9969907655097785, -1.0112862762616557, -5.971651374302254, 0.2917342541676608, -0.04297418929922673, 7.015479658311226, -1.182505735907651, 1.1117679124526951, -4.014358765216556, 6.960901443060258, -4.073177524945136, -4.136161795885662, 2.0462337434935027, 5.100185358763091, -5.504987649815383, -6.407925389655377, 0.9063447645946453, 4.226370812018807, -0.8996747171811671, 8.06877246005023, 2.51784819504311, -2.2933213298233497, -3.329324715138433, -1.9807633893430776, 1.4555114840189856, 1.0596695687598439, 1.4408417440788386, 9.027408277314226, 3.8035571140270825, 0.5560154522289223, -1.2671038622202457, 1.802261383760486, 1.5177044066762198, -0.5511676063533069, -0.2772289974466974, 5.970625484954711, -0.12506970341212573, -2.7805459188486767, 5.41982531993204, -7.7655766061367055, 5.260394757185704, -3.890447837621588, 3.413062068014849, -0.9953095195226586, 7.809328824518903, 1.894280265254836, -2.247147037332696, -2.1819617206387454, 0.04218260738535354, -0.11385980526903224, -2.468622379239381, -4.414644598380367, 2.2183078832972063, 3.949348366893903, 6.057225026715401, 4.882748636497129, 2.2527502683641742, -2.1485621780032043, 0.02646827781457678, 1.838301454917525, 3.699819767644385, 8.94782788477016, 0.40093402941437417, 0.23356975900966584, 9.603898144122502, -0.6180673456187871, 0.5369041937696406, -3.1812025371483976, -2.5470477672088507, 5.7712540349838335, -2.343463951864042, -5.455883518449902, -0.23248456496412118, -7.35828990064462, 2.4130885381040543, 3.0934855445388183, 6.111280962432402, 4.941140924102644, -0.9485068879884417, 3.805117161710435, 2.9319316427768363, 4.115564194174501, 6.788105561948341, 1.4020529162861453, 2.298115945131605, -4.248745216237885, 2.0248890521268414, -7.736784180521445, 2.1602270267761696, 1.2672765114035889, 1.2295094494181151, -5.1372438749662654, -4.544494642019222, 2.3655655805396356, 3.02311617659007, 4.278899829875868, -9.144777303762307, -2.4155855386522127, 7.435432623241089, -1.3561212547571122, 1.438954136542597, 5.8341053973454375, -3.4533030546391354, 3.1657040607427684, -2.021330562149326, -9.98877384183025, -1.063281062359248, 1.4821011240653235, 2.8965297945107693, -0.9049477702217235, -0.7022494842997702, -0.8087119187931474, 2.2757945783161424, 2.4995688975985466, 3.2328061552075678, 0.2822544769690511, -1.4019385727489502, -4.281723131476974, -3.230757955914425, -3.4212410572316503, -0.6967012574258754, 0.8695012688618133, 4.214623697964419, 1.9595510196094776, 3.184436619739757, 3.1233932091842735, -1.4405019587118086, 0.15686299868039183, 0.9591519772286234, -3.08990387097505, -1.631285925932053, 3.4840720142228045, -4.012920909257504, 3.3608592689395294, 0.5716259460108396, -3.6839587593853222, 3.4386031717264287, 5.927349382015894, -0.43523342440309276, 3.2195498822922386, 0.37551896574049637, 1.8551159574770375, -0.9080206885332011, -0.20211940622981728, -5.26634371215552, -3.3488368076592905, -3.7103579923888006, 2.347050629189145, -3.895895826592951, -1.5364281875608388, -1.1357026340949297, -2.0677622172244448, -4.9170194506046165, -3.8679818143767193, 1.9836709709893898, 5.671673617111617, -0.19741896489252125, -1.8287183760124939, -1.3614601896070748, -4.277335137037062, 2.3482593311559787, -1.5495385679168818, 6.690070582458762, -2.670981003967213, -4.742044080376303, 7.877426464171155, -2.0332686170351812, -3.2878902838828172, -5.160995760493138, 3.0028928400332857, 1.517354895510541, -3.551575482469685, -1.3648891693745335, -1.5914345422732283, -4.812221591113999, 3.3370640824324354, -1.3022371708302878, 4.385288443877328, 4.62807895986786, 4.284389947428286, -4.914173206133257, 3.6490529699309473, 0.23783430921159052, -3.4015923312156904, -0.3548351186978103, -4.74675470091451, -3.541546073684511, -2.0757344266776396, 2.515850589845268, -3.4107910706067237, -4.688826373983398, 1.4340666688421293, -2.7661163093149153, 2.0129099811238205, 0.47385965770122374, 1.6653818376729568, 3.9672448125259128, 2.9377647056109364, 2.7933477422378603, -5.866670721308026, 6.995496012743893, -1.3578214218469937, -3.4811508992882163, -2.8459750177946734, 0.13762220579755163, 1.4954688771339375, 3.0316254884130567, -3.589604094418796, -1.0606746471928676, -2.7628228615007577, 0.5939956212142432, 2.1864715469062808, 6.122664813429096, -2.767920240490741, 0.09347117998136506, 1.4724358569771059, -1.251649073129854, 0.7438641240022585, -5.731263794551808, -0.8316826575743761, -2.3867822621218395, 2.360578100950402, 3.7739761875812343, 6.927461273844457, -0.8791982375254247, -2.2317587787513804, -7.978789509776445, -4.312817480939746, 3.0054551614477187, 4.2160426646026545, -4.415769746755663, -1.77553735721017, 0.9587975395568679, 7.59164569808357, 3.7613500563444546, 4.875175099832564]
BIASES_LIST = [-1.379761728906718, 3.699766376380193, -3.604470822808738, 4.7937457160971775, 6.32723584199106, 2.775298585703922, 1.1087705975872095, -0.07336691947822027, -1.1083334391341546, 2.6477293679914697, 2.126188415452224, -1.3712241026778411, -0.007394109843741763, -2.6237647693013493, -5.507847347360656, 5.259512935393393, 4.824002803035281, 1.4785089722011175, -6.574564235333193, 0.017602627294527065, -5.074221221704893, -2.8036366554193104, -4.082959936906853, -6.088874772012249, 3.9155348415113633, 2.6508124625910976, -4.029507891726012, 2.9165020068742584, -1.083162290431752, 2.2995339333411535, -0.33881732701624423, -2.2877131959424153, 7.1222768923753055, 1.8427981373779354, -1.6851242526630428, 0.4526347805201611]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

