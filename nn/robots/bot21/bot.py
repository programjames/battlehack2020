import random
import math

WEIGHT_LIST = [0.5617928166900803, 4.905923446513454, -2.3127394620504638, -3.5473243507764716, -2.320310622732316, -5.285121376469469, 2.879778880816472, 1.8265517502997948, 0.8048981819549346, -1.0999741527042943, 2.60257689559425, -0.015172241884110278, -0.9040900411510466, -0.7555385710792789, 0.23164356763010663, 4.934565691935386, 4.67684184778221, -2.9760716465899604, 2.836473803086462, 1.829198441733389, -0.37778750533224087, 4.349487328346339, 4.929716137007573, 5.416151479656964, -2.1168749455629756, 1.6095289023703192, -2.1852143931882915, -4.354142621538329, -4.9072240781925816, 1.3836146300878174, 1.3632074198379107, -1.1223164721399284, -3.396526947122251, 5.26356144594521, 0.9997247914097543, -2.498071926508526, 4.153462539988301, -3.280244760214752, -3.7456400557783662, -1.0292666957328902, 3.826076406732087, -1.859917063164884, 0.43971570414460626, 0.15979342313904804, -3.257805430168839, 5.732356536964661, -7.8818144140671444, -1.039161209656198, -4.613986382189946, 0.8780477437708921, -3.844870149978413, 0.6793843199478719, -3.5808227878228007, 1.890001463806027, -2.245682115611534, -1.5904316850176405, -0.41079275471542925, -1.9789912049494531, 4.889871625296928, 9.880683232330501, -2.1928548947207456, -4.49027003603162, -4.320629883164376, -3.5165507045241005, 0.7308336609889113, 0.19672695503160356, 5.3651616875149, -2.196513331395618, 1.2275528765904484, -0.6882394628447488, 0.44497934534026373, -10.342605550604755, 0.49061834013537414, -3.689916481258859, 0.04021299146389805, -0.9653686853324532, 3.3932854706433084, -9.798307411912246, -0.06753437588068462, -0.5659053059240623, -2.417728702406451, -1.1068126349446301, -3.251615856761778, -1.212734931675254, 1.0198257700946123, 4.814898433696383, -1.835466264156588, 3.9929641458610647, 1.3645375716548769, -0.6894182928841613, 1.0028386149889017, 3.7809384511162274, -1.2479919777537634, -1.064498441587956, -1.5762781362232352, 0.5308096902989772, -1.7523129922683054, -1.1320828193075396, -0.6278529822301185, -3.692131144016755, 4.122473920401452, -4.82488691821139, -2.32612596267981, -3.6087999794595755, 4.932136480671268, 0.7445280318540406, 2.7042395762786007, 2.68837734461882, 4.9654194049180305, 1.8838597093697609, 4.38762545323857, 0.6045026323643115, -0.533464181161208, -4.3107559760378065, 4.457572391055425, -1.7110904538608231, 2.5519743069723266, -2.76798113190861, 4.565696384541438, 0.5787578653822797, 0.6295316154842825, -0.15892971440096682, 3.5914742502357915, 2.6159784617024915, 7.0088572887547045, 2.443400993448087, -5.359148133782569, -5.636995655479607, 2.5504262514805984, 0.057492683320495286, 3.6255212027953188, 3.844147653189008, 6.4997532204181745, -5.743096314149689, -5.198422767636233, -5.155518036381802, 5.24062582254446, 3.5129124398672538, 3.5713240356049916, 4.5513662223764575, 2.0728294521909967, 3.484796310460522, -5.22105536159642, -1.0501910594092703, -3.6879605434309255, 2.518986923336969, -3.943268663643297, 2.4815550483447857, 0.4652473718670391, -2.4871491334567075, -0.4248904313792778, -5.120461482381947, -2.419958282432955, -0.0038145202767403442, -4.157614828719791, -8.687244000822803, -0.22203745212900988, -1.8205901629625656, 5.465282832118559, 3.8048363078062746, -0.9503779194470607, 3.837750776331828, -4.558876202964487, 4.482936859676222, -1.1263949996066265, 0.3643635955453849, 2.113441599435466, -1.6871295532060404, 3.3729127189501438, -2.6049517866275673, -3.453595538836192, -2.4290045626297094, 2.0628012271484506, -3.2815228275273043, 1.833849816195865, 0.18957211585717026, 7.30373378630966, 0.13573713101342422, -1.2338757412724808, -5.3741374179590435, -3.2241209763590812, -1.8738791684582092, 2.1517877129132548, 3.6554259781174006, 5.117607103021195, 1.128205072267362, -2.633353292074454, -6.112176063696672, -2.5085231259694023, -2.1310067420047685, 0.08464977359514042, -4.288084921761057, 4.579564688018273, 3.250164628178226, 1.9194397576953117, -0.43042921377888826, 0.7606991625981977, -0.52073637991123, 1.6968611793200505, 1.764619199421931, 0.125509588015295, 0.70144188401865, 3.0391792687016674, 2.4205853316128287, 2.248833038281981, -1.3546127328435404, 1.0335144442639321, 10.579412644765947, 0.5791142673092045, -1.1221799796163214, 0.60754733847028, 0.7518104085164621, -2.9373438500744036, 1.3033183976752045, -0.6587550232589329, -1.7625428145079238, -1.6094332751865144, 0.33397352954865295, 1.29559302795382, -0.7493984437449642, -3.919693630332782, 4.0773674087274845, -1.572032540505895, -0.9505839057727365, 4.251278674670075, -3.5270769763876397, -5.032731869396295, -3.323980949359655, 0.1567342180568723, 1.742874262381033, -5.341390070926117, -1.700538713151102, -4.684804767617052, -1.646309915931198, 5.275210575101859, 2.4077530611996516, 4.2783250703132, -1.168715825885057, -3.623930023956508, -5.9405083402642225, -2.5670775576093714, -2.592060986080045, -3.593341176580279, 4.861943570721607, -2.6021147992721527, 1.2123227467882054, 2.5923515743629513, 0.21395747997317777, -0.07732828307365054, 7.123453666499909, -1.5410192215995926, -2.1115727409735303, -2.305222365396366, -4.266523200013101, -4.855778676689798, 1.0133519609872854, -0.417219081277482, -0.352271133159185, -5.813884616186573, -2.5077996040485284, -2.7278270120843384, -4.578269676260029, -1.8264519733695306, -5.904599665043475, -3.063045296546426, 2.6911692497361006, -2.3680778342464355, 0.597170839678449, -3.7609405662368505, -0.5475215797012766, -1.6643242611073998, 0.16444791374049192, -2.897640424617787, -5.6180294195712195, 1.5193540047777474, 2.026706994059877, 0.20676892689777926, 1.0004721456091963, -0.7775514908360966, 0.3664502353171948, 3.9498789381988786, -1.0356350601459925, -3.8951725013150185, 3.753671607658794, 6.158853668081892, -0.08263916736659425, -3.385428043409363, -1.8234084367197636, 2.6382777815089327, 1.7008846464508982, -2.972527226667063, -2.693327186197713, 2.5492981455720156, -3.5724765382777144, -2.2627794645423878, 2.360495433403471, 8.828856654663122, 5.940845946833149, 1.80016572469973, 2.048618167789842, 4.558966555642014, -1.8798677002938617, -5.843562886849873, -1.7704717393646516, -2.3757213762175926, -6.8640060467934765, -2.8787687839098806, 2.2969728525104496, 5.061043164195604, -1.4310409525475094, 0.6763390315901946, -3.913051952398492, -3.5944219485597775, 3.258486521192951, 1.84713092011224, -1.7831451013472768, -5.650877576746266, -2.4055559855854582, 1.2840977811787313, -5.5991537782880645, -5.31783003104684, 1.274453236032849, -6.796838607002935, 6.403300420507867, 3.436714464954421, 4.607011486292213, 2.0001064522598906, 0.2764117231248335, -1.265980306521347, -5.56628712857306, 3.969568179292226, -0.3376558282145014, -7.429465855231072, -0.10107073849538886, -5.030316220065254, -0.5097312898097042, -1.6714557419681386, -3.4515904469064274, 6.5128995833331205, -6.776069429545853, -3.2369442626333393, 2.665790387823871, 1.474958776418668, 4.183404563244713, -5.693967312627246, -4.631372228775863, 1.7057803888713585, 4.800325579501542, -4.849288397680528, 4.651281402268537, 3.2552773354290867, -4.026068917294976, -3.40391677687912, 2.314181668125529, 2.331882694383708, -3.3904699537364302, 0.03450593882862325, -0.015148198097757583, 2.817558366659423, 3.2432122332440225, -2.2429809788761035, -2.826004702047082, 4.9250435487982935, 6.053556410162056, 5.2908218103133695, 0.11487896146723066, -5.843904223297776, 4.2670964569970815, 2.6064330541039773, 0.8511247746511404, -3.227176600239386, -4.717699332724624, -3.6654294265812726, -0.8907782848392282, 0.3360164649194965, 2.0698842991330317, 3.9230296339525355, 0.6833260641121778, -5.655904587395571, -5.258533069055147, 0.4253151037272863, 3.4227777943636544, -0.8705331065160917, 3.1702776880059917, 0.12397534163409756, -2.8720084627585627, -7.2332630643916636, -7.884026206343733, -4.596856623581314, 2.467225871795516, 5.603642805835565, -1.6997089644950858, 4.704881580385506, 0.5141926015281052, 1.439519951579601, -1.298267314208836, 0.3377521433314658, 1.1767002258732142, 2.263254941974681, -1.5031362064462326, 4.2929312586461155, 5.552365714297607, 2.714354100844295, -3.4545258809862025, -1.7139782799957863, 4.541440799610516, 0.6985903490705835, -2.1453254585033212, 3.8663723293603613, -5.550882797735069, -0.30192415456546495, 0.7841438171214313, 0.9040342938671668, -3.282045466635127, 0.9616347278623573, -5.681681244647848, 4.129135142402273, -1.5758997526410408, -0.7086142132332318, -0.991023110400447, -7.3940915190168495, -1.8341553592102753, 0.7527752894388836, 5.22382109138541, -4.350199919852235, -1.1480660336176873, 4.0837354348554005, -2.7432089095413525, 0.9122673101124801, -1.9395404802695557, 4.388421486804161, 2.7848231187153396, 2.9963522588760214, -5.909601617567071, 4.936037305406598, 6.180993920435831, -0.7317425242398988, 0.8107434555545809, 1.5831644044660356, -4.7643300312548655, -1.6111300653300487, 0.6534586530567157, 2.0179567689721556, -1.8302405299819755, -0.3739493683920033, -4.324573711724845, 0.7151164187900645, 7.986358606115575, 1.807103419524369, 2.9280878606117295, 2.4165114058862005, 4.517566777735973, 4.934933752114968, -4.359865544841236, 4.687502485125592, 0.005025824305337151, 3.6316943958844288, 2.5549147710659827, -0.3834695678678975, 2.511162068802204, -0.420580033891662, -5.915180130069716, 7.698171634500682, 3.678833766944798, -2.0467445879323236, 2.0658287840268623, 1.495971728594897, 3.1938422999439107, 1.375347519587088, 3.0513637656157355, 5.179781228106786, 1.650642100329967, -2.323822269105449, -0.10215098845763479, 2.496659142919143, 1.3519986783254658, 1.5672538029466139, 6.842797572528975, -4.27346172486696, -2.454692837526921, -1.1956505008629839, -5.078725428943841, 0.5680511232371032, -4.347652592857904, 2.690891151451674, 0.3994992424150148, -4.408830958413767, -0.8186354766562997, 0.47886915807952496, 6.264689759874029, -3.2784010178945495, -2.8764983913956823, -0.6981410219618301, -0.2481439086277025, -4.86523529740995, 1.3554782448349474, 2.5997469022650987, 1.8363139596169191, -0.3681498303050847, 2.7221233917344643, -0.2862947706844555, 0.11340548334733763, 1.5460888583354442, -4.7401813849713665, -1.659914670890722, 3.6086860815030075, 2.8705701317084946, 0.4961505809354491, 4.258326251745868, -3.059850899778173, 1.8215834889403875, 1.053857569224646, -3.773753448303033, -1.792262057359646, -4.903060525207705, -0.9702728056946074, -3.99319018412528, -1.0084084412336025, -5.967901272521663, 0.2972712787035542, -0.046214955330379226, 7.010514927511703, -1.1913553422281813, 1.1082599203795416, -4.01858483038612, 6.9588144464483985, -4.077387991732655, -4.133649227094735, 2.0444540071536066, 5.103411466869036, -5.500610942512037, -6.401424583855079, 0.9177511362367381, 4.22624653485075, -0.9045743811904118, 8.07281766294815, 2.529122009744475, -2.302321908520575, -3.3363715193977157, -1.9933772264607406, 1.460170202581447, 1.0614427855715172, 1.4329847869507883, 9.022271677470439, 3.8056874118394877, 0.5654928918584206, -1.267490762238832, 1.8053913990248136, 1.5001118428661637, -0.5480798464142785, -0.28125590780734633, 5.979810326775359, -0.1215500854516893, -2.7845519651055692, 5.40580460280924, -7.765429608919034, 5.2545091972067945, -3.8908126334584874, 3.4042365633432614, -1.005505730593743, 7.810211954642656, 1.8975611138108062, -2.2596885377919502, -2.1868894929368037, 0.032837774318366666, -0.12105815109169045, -2.4584430437092366, -4.424613677131838, 2.215959151680356, 3.9635549013175027, 6.044234100195006, 4.876087527099293, 2.250336316181714, -2.149874296629184, 0.033063791384832786, 1.8525874853599549, 3.7036455587277852, 8.937905417692848, 0.39559006592529433, 0.2234141757547996, 9.60937312252815, -0.6184569827452495, 0.5400777154993335, -3.182823817258742, -2.549945103760997, 5.773185494711297, -2.349645625674118, -5.445487822779977, -0.23986810929046792, -7.3628018800479405, 2.4202263679811162, 3.0771862767476907, 6.110367971145739, 4.94399869485751, -0.9556746960630064, 3.8056597694242473, 2.913259242002996, 4.111464030948646, 6.78905185246761, 1.3844868688483079, 2.303912431866331, -4.256135811465317, 2.0197255974174366, -7.720965001712325, 2.1621173486904812, 1.2601852150290525, 1.2213992910178262, -5.138874180910269, -4.539441678898162, 2.360136496093026, 3.037241391071576, 4.273746919518438, -9.131157481283482, -2.4228178523193544, 7.441318478015247, -1.356665357049586, 1.439080692646875, 5.830901903549044, -3.4687901441473716, 3.1610667412171334, -2.01020721605782, -9.98604438833153, -1.045451287101306, 1.4762629191618388, 2.9052829047305107, -0.906115234318237, -0.7058908642678035, -0.8053893865750237, 2.274218221673816, 2.492405383561498, 3.228417170946373, 0.2785871268942101, -1.4204503848416772, -4.296004739157706, -3.224238311300752, -3.421945066661792, -0.7076566347568607, 0.8621183111748515, 4.223122130553978, 1.953691767705768, 3.1835146747730083, 3.1160572629454633, -1.4429276531341535, 0.16326075984931956, 0.9671055138775568, -3.081664694145893, -1.6427481160296218, 3.475543554152683, -4.019589744661032, 3.362056861262319, 0.576783228994784, -3.690680001918957, 3.451089083273833, 5.928026708567155, -0.44561502929654356, 3.226511208336411, 0.3830475051696147, 1.8525614602982812, -0.915184836204694, -0.19891180995791394, -5.256341640642487, -3.3610796943376324, -3.708246922814613, 2.338456125231905, -3.8972049534838353, -1.5393307033737822, -1.1390102517876814, -2.05816314906381, -4.907299585098893, -3.8641670503885597, 1.9849351580281454, 5.675267698580878, -0.2013219164049499, -1.8312694249777752, -1.3579108634941646, -4.277930233330873, 2.346918277920492, -1.5556788193592423, 6.687329670602021, -2.6751350892364654, -4.744772056343939, 7.886275794531842, -2.047587499272365, -3.2791327135963915, -5.157221387859917, 2.9961095871017576, 1.5230903947496213, -3.5567687087900555, -1.3627155343197577, -1.590661369062121, -4.803203156034482, 3.33303590637087, -1.3114139545152894, 4.386050301869272, 4.6269512865405495, 4.2914365133790735, -4.913292093792658, 3.647963793008628, 0.23494062890372833, -3.399418272254908, -0.3542183220964006, -4.741443750677361, -3.537606076781037, -2.069403866849034, 2.5282222893541446, -3.4119830416762715, -4.679747690609918, 1.4371872686286646, -2.756987682498663, 2.0092899388388368, 0.46980782102013924, 1.672447113034196, 3.970197342541615, 2.928307144508816, 2.7892641667948874, -5.868898104268152, 6.9827785006823015, -1.3600989410322777, -3.4663504942804315, -2.843087867080174, 0.1449119069629491, 1.4912157988381216, 3.029662751108817, -3.590036815563833, -1.0577661261206757, -2.7610104380361062, 0.5841309922812161, 2.1872311819268586, 6.123648440939336, -2.757143540598413, 0.08878847398657032, 1.4798039198734423, -1.2518909396727267, 0.7347098506098106, -5.74007055419283, -0.8377841117440726, -2.385228280848938, 2.358069969182594, 3.7721407310504165, 6.926259189879504, -0.8750730971519959, -2.2277028277113438, -7.979213955294661, -4.331285113944897, 2.9919141040670354, 4.2187943979769065, -4.414998551903722, -1.778554199602416, 0.974871345006018, 7.594658216550414, 3.7565676786292173, 4.876499378534994]
BIASES_LIST = [-1.3852096059396832, 3.7073068224000676, -3.6116373691014183, 4.794277682495607, 6.336811813074186, 2.77340889008345, 1.0997671824657276, -0.08725149804373364, -1.1036456325052026, 2.6551693097792657, 2.118438902584342, -1.3728150748433139, -0.002376753988461361, -2.618673439706178, -5.500630244835626, 5.268496195676573, 4.82243524361936, 1.4767497320328444, -6.565652701543652, 0.024468196124548272, -5.075975917538869, -2.8045357840559135, -4.0672971436715395, -6.096830052788481, 3.9232725489927933, 2.65077781890774, -4.027490296760194, 2.9178439646663796, -1.0824217645059204, 2.2990697982692754, -0.3422305734004665, -2.2942948772705702, 7.1241618798792805, 1.850392922851316, -1.679480354543223, 0.4433828593137494]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

