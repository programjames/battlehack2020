import random
import math

WEIGHT_LIST = [0.5580897508621417, 4.902061941728443, -2.31376327375659, -3.554012868530245, -2.321992115958357, -5.2917431476834835, 2.8795962814942557, 1.8259525398672767, 0.8102307541400758, -1.1001574300872585, 2.6009202856657847, -0.014029680080208329, -0.9050318374657913, -0.7531096237509098, 0.2342156654121144, 4.935828375918826, 4.678594523357008, -2.981907477964048, 2.8330930536188434, 1.8306201297506974, -0.3789390473805493, 4.354526256380915, 4.931406242723134, 5.415644750477257, -2.1153140678951403, 1.61086914105241, -2.185426407297328, -4.355148904526989, -4.9098400072991994, 1.3799652421042503, 1.3648773450654492, -1.1198470643409446, -3.3948326645823137, 5.260529647815382, 0.999296105524827, -2.495349882476362, 4.1533030025454005, -3.27679489605176, -3.750509128185598, -1.026442166312243, 3.8283239337352506, -1.858849876786484, 0.4376728327631632, 0.1622120161064523, -3.260105942034829, 5.725478224536783, -7.879261439103027, -1.0402241349266643, -4.617849803515022, 0.880297329930319, -3.8442096117148137, 0.6759946293401129, -3.5748244961620395, 1.8894272451622225, -2.2496354964899217, -1.5856706417672357, -0.4086565768043326, -1.9801310856954921, 4.896412973281089, 9.883431633073412, -2.1944665196571185, -4.492389994605219, -4.321363927886506, -3.5194073458651265, 0.7301599706857583, 0.20293231481279037, 5.359849912950896, -2.1969434133719767, 1.2272412973014226, -0.6868074875431774, 0.44679469918373804, -10.348233205653324, 0.49383041282452433, -3.6893698120833203, 0.040659543673516055, -0.9629346151049812, 3.3941022290781495, -9.79490713096901, -0.07025530898723842, -0.5708934710317767, -2.41936763748663, -1.1132431704186991, -3.2559864792382984, -1.2093432383087896, 1.0164291951755398, 4.8113794181963865, -1.838874910274206, 3.998157446889384, 1.3623228154918023, -0.6874436205871544, 0.9950562520471989, 3.7816427082289876, -1.2472234158601845, -1.065733881328558, -1.5753157129890751, 0.5340335550526326, -1.7526658128366104, -1.12925359630952, -0.6227415446275684, -3.689949429582345, 4.122588421425588, -4.821834114720694, -2.3311771110400854, -3.6083823038384812, 4.932833326884241, 0.744155628500455, 2.699571908810782, 2.686462593576165, 4.963677913249073, 1.885538177095864, 4.388194582027526, 0.6008518113733382, -0.529769001465921, -4.317298116314829, 4.456925240523357, -1.7064757184535417, 2.556311687893816, -2.771474999461531, 4.566908584899261, 0.5770988936317418, 0.6315688682675029, -0.16229628297452237, 3.599331704282534, 2.6151749788523184, 7.01113423528278, 2.4407943505018075, -5.362219559063685, -5.637047565874153, 2.554810997051893, 0.0591349756140155, 3.625830043973188, 3.8426930898812106, 6.501497203936269, -5.745304557131444, -5.194695071731917, -5.16267549605168, 5.2414103011453355, 3.514483940177762, 3.5674903345855156, 4.5569760378406, 2.072450663377431, 3.4786997888893434, -5.227825023120794, -1.050112724682451, -3.6824472532450305, 2.5160424105808987, -3.946518549201409, 2.4882510972866516, 0.46282456052015114, -2.4841452430545172, -0.42583842412467016, -5.12080842421384, -2.419529748162055, -0.0019447563471116846, -4.1551255689756355, -8.687358246962683, -0.22242950833520678, -1.8208169226288466, 5.463526555487953, 3.8052758030152423, -0.9528322883134707, 3.843238031144743, -4.555023862381479, 4.4848831229643675, -1.125495669813529, 0.36345830531690915, 2.1080278877086904, -1.687131140801213, 3.3728391084968146, -2.602062849549925, -3.4569119969661073, -2.4256606364884865, 2.066122297622453, -3.2867229340623156, 1.8312712634282482, 0.1943831871132816, 7.301291618259784, 0.1380905679681631, -1.2343941387461288, -5.3711036882068734, -3.2202430779892635, -1.8817946248889867, 2.1510883159025656, 3.657866471879582, 5.116201054432652, 1.1308253947078222, -2.6346966297864527, -6.1107791031218675, -2.5103341840577866, -2.1292484430547582, 0.09032739506687394, -4.282999364497025, 4.578378048212945, 3.2510261328205234, 1.9174545887436232, -0.4281848081232339, 0.7598704864432411, -0.5196863632088113, 1.697280739566954, 1.7646964252577462, 0.12564677421039075, 0.7062930140962326, 3.033578122792788, 2.424729861317184, 2.245371696288844, -1.3506118489665533, 1.0345299142261728, 10.57540006137206, 0.5818848791021921, -1.1192573165741768, 0.6077329786725426, 0.7495390909866918, -2.9415462469816704, 1.3060062789633051, -0.6512764674876208, -1.7613590232003988, -1.6091940323147171, 0.33479984795477163, 1.297980944338022, -0.752867124509577, -3.9236389776428404, 4.082996954947886, -1.5753359969155716, -0.9505801904682992, 4.253056686376583, -3.531709792144816, -5.032550270066307, -3.321902168579518, 0.15598677703256442, 1.7441493394525727, -5.337092349039024, -1.7035347369804283, -4.6886947787806506, -1.6428360663273933, 5.270771497613421, 2.409018400198277, 4.276955787309964, -1.1717098062998785, -3.6253962363429526, -5.936264085361707, -2.5709883242210023, -2.589240145806285, -3.5947661069418837, 4.867409740662518, -2.6006304449293007, 1.2149447917107614, 2.5969806492421266, 0.21918540286496124, -0.07720093792843143, 7.127983279084286, -1.5425361759549339, -2.1150911248531075, -2.2993133846057043, -4.265813477435402, -4.8530715491233645, 1.0187746286251322, -0.4208306328457804, -0.3497552011339598, -5.809207520224442, -2.513027119350321, -2.72544266307552, -4.5736528718704195, -1.8275560176813805, -5.90209939101656, -3.0648335738720136, 2.6864233010303957, -2.3662354724575523, 0.5946286994249587, -3.761961280821161, -0.5478905139714867, -1.6639376267347126, 0.16981068915170391, -2.8997382784867503, -5.61886188045105, 1.526537536841853, 2.029021859242862, 0.20581466950663513, 0.9957790486140602, -0.7818036593484383, 0.36240231824639474, 3.9446219593642233, -1.0318034706031944, -3.895706687856125, 3.748659103897172, 6.163270850513452, -0.08097802730856223, -3.384569395210106, -1.8227729170421951, 2.6403846690791033, 1.701767613936042, -2.977003208413504, -2.6953594091611186, 2.5483020067360913, -3.5670169713463933, -2.258778331396223, 2.3624422606915787, 8.829774201869293, 5.945708536231739, 1.802754067171553, 2.0500474755644174, 4.559287209177146, -1.8812753283831498, -5.844850721257823, -1.7739392882849725, -2.379157173734943, -6.863193768543243, -2.8788828444082806, 2.2976539739681154, 5.0649702026693575, -1.4293081097694522, 0.675010317740227, -3.9187234611404693, -3.6017149067312864, 3.258723099515702, 1.8466406437708744, -1.7802669818063426, -5.644624353926614, -2.4029953034452496, 1.2862516501372312, -5.597459424162084, -5.314931288647363, 1.2721730821149262, -6.803599981399496, 6.403328087610084, 3.4355022184850372, 4.602490501329058, 1.9925299756258261, 0.2768876792803721, -1.265608758682969, -5.564811413131881, 3.970452290511735, -0.33687797192917873, -7.423653780988197, -0.09921230607428218, -5.0323064753984355, -0.5071513665820647, -1.6788000570221662, -3.4482089202588946, 6.515242730973256, -6.776417012347379, -3.23412017998186, 2.6636611185586556, 1.4731984524390305, 4.186391689993674, -5.695664234504693, -4.628928179966403, 1.7044956205460022, 4.798964329024758, -4.853269570775531, 4.654155969968617, 3.248253810322599, -4.024461438016152, -3.400378017260416, 2.3124796722838203, 2.3359380333919058, -3.3919109551874795, 0.03486097871612949, -0.014506541784011952, 2.819783001233306, 3.238676824271298, -2.2494577577606, -2.8238592419766726, 4.926741380748412, 6.051742410290979, 5.289255937163188, 0.11495240805760427, -5.842685385529825, 4.261996759007329, 2.6090671118947633, 0.853424676584658, -3.2234146775469625, -4.712024694518883, -3.6631008437413817, -0.895304048480464, 0.3380592186496531, 2.068656311103088, 3.918201617589607, 0.6842661981587645, -5.651188298617186, -5.259200087529153, 0.42541352435089413, 3.425764583530791, -0.8754451846097138, 3.1730392554722293, 0.12487925099141835, -2.8696578688236505, -7.234357406148604, -7.886063233087492, -4.596111963216726, 2.4628190714797085, 5.602523130802997, -1.6978951275558836, 4.709332188700318, 0.514153924703459, 1.4394899753800137, -1.295070293834356, 0.345549802941904, 1.1786145876888712, 2.2653616689717264, -1.5015811948456599, 4.289285309820686, 5.5540427300209405, 2.7175893793281656, -3.455583519470848, -1.7143661013635814, 4.537399099463305, 0.6997681233084082, -2.149970604149949, 3.871490838088802, -5.548008509814989, -0.3026877666451469, 0.7866727459793489, 0.9008478477961325, -3.276659465804507, 0.9654368979736908, -5.685348869431675, 4.128861063771466, -1.5809285270947069, -0.7101429659371418, -0.9963484342276626, -7.394289113358827, -1.8399433765113828, 0.7579279993580756, 5.223235880302477, -4.348048389012112, -1.1471259140705463, 4.083746219606662, -2.7436015489082406, 0.9170250423465502, -1.9379361358289175, 4.388485141102961, 2.784968575719095, 2.992689994609442, -5.908974244342936, 4.936682603464528, 6.182532218122121, -0.7362553089502522, 0.8094147177888948, 1.5836187274760856, -4.767955838070881, -1.6131641185897614, 0.6481548475144098, 2.0154258699237313, -1.8364679453445516, -0.37336895098151074, -4.324455278669641, 0.7166385915420147, 7.984260093444699, 1.8032944423967714, 2.9279507300733494, 2.4103475634799083, 4.5195940379223085, 4.932083459870101, -4.363022704424119, 4.6909600040297015, 0.00020031886534624312, 3.6278772774542545, 2.5523920386678327, -0.38018662329809133, 2.5123221405108342, -0.41531439202630444, -5.908581453613319, 7.692328153629191, 3.6851785077015244, -2.045414260127159, 2.0700523678785188, 1.4969472626133873, 3.1969065089566855, 1.369621083426501, 3.0440047301466913, 5.1852767476024155, 1.6577929158106075, -2.319126496554645, -0.10785943098937112, 2.4919981464109027, 1.3494385225558838, 1.569062325095712, 6.848195893431359, -4.277328160102904, -2.459305248421396, -1.1939583132043794, -5.078714583348427, 0.5706701222555259, -4.348872284610848, 2.69121354220767, 0.39553633325506515, -4.4104474182543685, -0.816328825403428, 0.4778284448089397, 6.265616989867676, -3.2858194045429863, -2.878684922681139, -0.7003387740985261, -0.24588208959470848, -4.8627367024972825, 1.3597802578223612, 2.6049560148413855, 1.8308383654603564, -0.37366374124971613, 2.7251176359960767, -0.29235408669130053, 0.11925071492907481, 1.5421140554571577, -4.7441957108064665, -1.6530740484510884, 3.6079216322446457, 2.872754813781714, 0.4914304371964881, 4.257045841286165, -3.0592202291705193, 1.8263794716025312, 1.04787259989239, -3.778258824614921, -1.7877750546642976, -4.906406313587035, -0.9718779149980217, -3.992990479855937, -1.009312361225386, -5.972360977445296, 0.2992510790418047, -0.04919950374069079, 7.004114418350346, -1.1873085588652579, 1.1090505495958047, -4.024521153555644, 6.960327031823967, -4.076889279674726, -4.1351204723220665, 2.047511110869092, 5.108756658808407, -5.506557958769691, -6.407257765506868, 0.9125164529571829, 4.224513042182328, -0.8993617787670792, 8.071362345046547, 2.5279674167965234, -2.301852328662074, -3.336076269449178, -1.9917239140386371, 1.463462831198249, 1.063420696492395, 1.4383265580274114, 9.026782671434079, 3.8064424295500072, 0.567266769603416, -1.2623708256682982, 1.8123681368104796, 1.4969028169088978, -0.5498173281265075, -0.285397862828063, 5.975014521745236, -0.12436177009852159, -2.7919373569727686, 5.410749930238031, -7.760154099989032, 5.257703898743541, -3.8847329030700917, 3.405750492622591, -1.008982143291357, 7.808829225886473, 1.8971928052648408, -2.2551418042239444, -2.187240031410142, 0.02877675119563324, -0.12613148635183385, -2.4578931872964684, -4.41985409928799, 2.2098713164266446, 3.959048783289274, 6.0420279238621175, 4.881748862535985, 2.253653402846451, -2.1506757751581214, 0.033875213148068684, 1.8488108067075286, 3.702157886213593, 8.937632413475669, 0.3987620696342977, 0.22416247973238482, 9.602533171761124, -0.6156586069719234, 0.5401621913765544, -3.1842471818936926, -2.551586953809633, 5.7759588078725566, -2.3464207865666666, -5.4470475032535575, -0.24010745696319466, -7.366643927286859, 2.4252837532434435, 3.0807980556821004, 6.109488194077621, 4.949722959813108, -0.9503589277543388, 3.802500034923675, 2.9124679864668024, 4.110222522257813, 6.7885935806078415, 1.3832093557360747, 2.3014113169344768, -4.257996267040518, 2.021257186444311, -7.718922776720495, 2.15771305415357, 1.266299843089588, 1.220868003423515, -5.1415740150030835, -4.540881172314138, 2.361023524808604, 3.029980091978017, 4.274285406317248, -9.133295013034155, -2.419838148155931, 7.439549674520654, -1.3571683390876397, 1.4378527192944792, 5.8290644651581225, -3.4687049511571906, 3.1617682725567473, -2.010077253589178, -9.989225544719309, -1.0453569395381506, 1.4715358857990772, 2.9042876209337094, -0.908289993830578, -0.7076664479320227, -0.8116596793736972, 2.279283103502455, 2.488880662002926, 3.227090646069824, 0.28399735478444865, -1.4157051807615988, -4.295826617560031, -3.2281174577597698, -3.422530658324555, -0.7132979405329393, 0.8618073873123847, 4.223378240333728, 1.956743071559515, 3.1835930543410975, 3.112010390873556, -1.4447351978972718, 0.159076310828989, 0.9658333391870328, -3.087439505814283, -1.64927145392623, 3.480381839832742, -4.0175777981770215, 3.356018927589761, 0.5717777203847146, -3.690268577447094, 3.450964362577492, 5.9245895828310235, -0.44108144187150694, 3.222797797452646, 0.3842256769488055, 1.8525094322686857, -0.9163536590286628, -0.20030876452592078, -5.262223386356473, -3.3624045424951827, -3.7053580434604823, 2.337885696920224, -3.8965301994777217, -1.5440829288548235, -1.1396739118868167, -2.057846548220479, -4.903994927369828, -3.8615834201366113, 1.9860162471900622, 5.674173998770634, -0.20055210303060728, -1.831343462074989, -1.3525843226390608, -4.2765390486753425, 2.3437093448306348, -1.5559660908503745, 6.683250020821485, -2.677022351980068, -4.741436057945076, 7.891997329158045, -2.0407019904516686, -3.2754515854229163, -5.163798695761916, 2.9981270254997368, 1.519479725430845, -3.5591352118087185, -1.3654319085069118, -1.5901089991830435, -4.806289017801063, 3.327705885823024, -1.3068639430199944, 4.379322336107178, 4.633004605223365, 4.2909388322361774, -4.914775329157971, 3.646540786181785, 0.2356578774575623, -3.3972717155463457, -0.35644228311236525, -4.743013530088022, -3.5366487300959397, -2.072983125017077, 2.5262758875591955, -3.406301543747597, -4.681208912807094, 1.434602623869688, -2.75725291517767, 2.008612099182161, 0.4718228227094018, 1.668342578557681, 3.963700526639326, 2.929128705849483, 2.7923462966097397, -5.867218873805587, 6.985445783861199, -1.3536629147289325, -3.465602595583424, -2.8431105062001496, 0.14713353725472278, 1.4954133808793593, 3.0297899271212883, -3.5908849350262555, -1.0572699650481925, -2.759211129450082, 0.5826987851818074, 2.1863793352866394, 6.120483456835772, -2.7608392667498647, 0.08911698996375693, 1.4740208920947437, -1.2535910832209884, 0.7300714002858686, -5.738814921246647, -0.8369088309752389, -2.385455616338707, 2.3594395818947245, 3.7672240726690753, 6.926079977556418, -0.872497205280521, -2.2304558899909352, -7.983349055490328, -4.3283475856436375, 2.9918688506157434, 4.2183499608266635, -4.417607543669833, -1.778168703642759, 0.9765641945706096, 7.593768247059084, 3.7544092302675334, 4.8762544519208895]
BIASES_LIST = [-1.384981150194436, 3.709598285218788, -3.611286320439107, 4.794614811568993, 6.334952610771802, 2.7732191697044954, 1.0988774409134263, -0.08120859172296349, -1.106646577906233, 2.655719589857714, 2.122913343880091, -1.370901297834892, -0.004537477124717421, -2.624835594084667, -5.49818093078719, 5.26933895762561, 4.821135945252482, 1.4767040886093177, -6.5678698248608764, 0.023880498194096617, -5.073495959932059, -2.803349523727676, -4.063634488411657, -6.093989386414801, 3.925750251748989, 2.6520378369526725, -4.024772515673517, 2.919818400078678, -1.0806047184902223, 2.298177476929979, -0.34165281400174075, -2.2910514608376475, 7.121580018835837, 1.8556854049104983, -1.6809122865073374, 0.4405256947547356]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

