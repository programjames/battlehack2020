import random
import math

WEIGHT_LIST = [-0.8042982966945994, 4.04477619390396, 0.40474910426836375, -3.802747351253089, -1.930621368966981, -4.262038827926722, 4.739612692317744, 1.7343572389576334, 3.2341993754661287, 1.5636510668918526, 3.9227285835741625, 0.7083172701656624, -1.0992711702238007, -2.5500935348866234, 1.4275114865968979, 2.8178458694160247, 3.830730171732685, -3.4670843096778583, 4.050482793276051, 1.31862975784435, -1.2154484571419113, 5.684881763763063, 5.232295171873265, 4.300892634629535, -1.1918333390848637, 1.765848161315572, -3.3232976874655664, -4.450206709185777, -3.1928457484353157, 0.21031026197806657, 0.2528979957009465, -0.638711947605036, -4.260602473018471, 0.8284934802334118, 0.9139793915137306, -2.225379174695698, 2.4002991565816223, -2.242713935241112, -3.3604104835403, -1.3940934526793793, 3.5897325498040757, -2.3715201897084413, -0.17900729799115966, 0.8034443899200392, -5.4586253407855025, 6.04769397016022, -6.047348687478582, 0.6440241502960573, -1.4965199452091345, 0.42473073649211135, -3.269373814290938, 1.9442969770768723, -4.381544111937191, 0.10013299509029183, -2.839971437626283, -1.1961222329534205, 1.007207472364683, -4.353313813917163, 6.244508640161222, 7.771242338449463, -0.7548272394369027, -3.683663437825298, -2.8214984310184104, -2.6554203025014376, 1.7271489391028183, 0.8979385813152336, 6.493045206058475, -1.6223628033721798, 1.6619134513163778, -0.1373732494158868, -1.8586018349718039, -7.747423275877348, 1.187610682514828, -5.568810380784525, -1.2731703832845134, -0.9183188965947673, 3.217927279315152, -6.671162552427607, -0.3842045611400374, 1.6372346979518184, -2.1389663974748037, -1.7728658534688926, -1.405117200517544, -0.9742318337105464, 1.2634161096495324, 2.7284796343024906, -1.3035081301183375, 3.3397514872681544, 1.8273789420960087, 0.1307879138877759, 2.8105556702729433, 2.480832478156862, -4.0009950720351615, -2.7193110672627308, -1.1883576880765305, -0.40088672557561855, -0.6922056645035275, 3.215503312458935, -0.37960723385422046, -4.113600144649117, 7.044889001567292, -4.436926844285841, -1.347568794070432, -2.2666907617126877, 4.903737191187536, 0.9679671000786572, 0.9971787847562608, 4.070440188546234, 3.372551045423914, 0.5503397883773609, 5.334699553076998, -3.004917067659444, 0.6067238842381582, -4.272036270094642, 4.632132941836891, -5.44668531023026, 4.460495941501034, 0.6410364402606963, 3.7998701917585826, 0.022408727432388975, 0.19487376838901316, -1.97659354476227, 1.929421340357413, 2.1201387614922913, 7.195616400999917, 5.447754990511032, -4.512706092418128, -6.618300550602834, 3.3628741822767427, -1.7125781547864243, 3.663059537038679, 3.038354395113691, 3.770211126086263, -2.9664953733555683, -5.374070800290648, -4.7870108210298286, 2.4942576524581828, 2.6204047901657814, 2.539184448591768, 3.119965553742653, 1.2048313467380947, 3.00687524189562, -4.93093700249069, -1.772530632545444, -4.517668281474546, 3.3402647386751125, -3.3518557753462095, 3.420220095863714, -0.2493954333331534, -5.584560212268888, -0.1001499468978857, -3.869078022771229, -2.6882059915817105, 0.17929619921452877, -6.105389794147581, -5.871714708906358, 3.8246131700687513, 0.6574865014253932, 2.8564096179860226, 2.134680762200479, -2.13515338589602, 1.7091637952775685, -6.240084852744882, 4.539544039939607, -3.2235988601699783, 1.0089139135943626, 1.523853913379277, -2.4200507363023167, 0.9988882784447559, -3.7306987332067454, -2.9308169212846296, -0.7044031432989026, 0.5788241784827806, -2.057014272570435, 1.7105475035765059, 2.0454032292867232, 6.5061245288332605, 1.771625563093214, 0.5363404930104387, -8.966937236310798, -3.1493078105777306, -1.9324207929202732, 2.6647303007864367, 2.8938443584418394, 1.4905746456081919, -0.18343011245018437, -2.063733861616374, -5.312653274286001, -3.2227368473842057, -2.4521310462828176, 1.687772462803201, -2.6704809520055863, 4.801032817062341, 5.042963997048741, 1.172440338769595, -0.1570969469785688, 2.560546762245502, 3.107984542791379, 3.6402785143400465, 0.5181866567479283, -2.4725894459037727, 0.8725298763217091, 3.1293785301630486, 0.5995567321607902, -0.7612132156309088, 0.7758309019491938, 1.3189522063158732, 6.913350928267155, 0.5171152864389867, -2.427617655254478, -0.3936981175738927, 0.5475289017464444, -2.1309805031760636, -0.5023290081018436, -0.541870989777326, -2.0458627231662385, -1.4782937717827975, -2.575154999383271, 0.44109629929844707, -0.8571641585274579, -3.680533651467651, 1.8477799708385865, 0.2897548821875562, 0.9848982286830628, 5.55664253027257, -2.8302623534315474, -3.304924533498483, -3.1267554177126344, -1.1898105819296882, 1.9228000256926454, -6.424804291895606, -0.884206149367206, -4.416190320921745, -1.6081673988525387, 2.790150399679721, 1.3324807525008504, 6.112850445179635, 0.9658798329146281, -0.54130181054611, -5.57018927299615, -2.460200362629392, -5.720260211468552, -6.707769041992271, 4.358262573361841, -2.1431164931622795, 3.008591742154298, 1.8384858006699627, -1.2714692653780786, 1.3539712788903602, 8.084963104796206, 0.8753676335272185, -2.5851555418253978, -2.4960546656029448, -3.90630575929194, -4.347478601313362, 1.7409445999523339, 1.7277033614453718, -0.1381968760440595, -2.8488215540725665, -2.797260543041718, -3.218007934759494, -1.437972203878595, -3.9284062420588293, -5.458290862456996, -4.440696178151256, 0.7767092567653751, -0.6275239576474401, -1.3172680981478377, -4.434535737482459, 0.5408073077892728, -2.436269610774395, 0.876276060371902, -1.8808464164551706, -4.086328583428604, 0.8749171590919396, -0.3386101214483599, -1.672527274788669, 2.709435089063861, -1.9870979553122021, -0.3598018321014338, 1.8625686618979662, -0.5471899182079185, -3.945000005325606, 3.9001342837879136, 5.579683646905289, 0.11042257491430929, -2.880553704287246, -1.3137085756492008, 2.771512432907739, 1.0991271257155728, -3.436341275327486, -1.6352604614727888, 4.26123656714965, -2.4755326279271577, -1.0907716646884398, 0.1546297027585286, 8.810076781821204, 8.724387384171493, -1.9374060962945636, 3.3806999880077084, 1.6299065698179525, 0.9829793896065435, -3.141233092752636, -1.4594124417052947, -4.011024536420717, -4.809684413753615, -2.8238642548319075, 1.5062081218152406, 5.669296787400958, -1.523361817975224, 0.9309604287596818, -1.5635083438222148, -2.0185202345721853, 3.971760467255251, 0.7439868870264985, -2.846329546030807, -4.5702347746144545, -2.0917182818866493, 1.8759759955641169, -6.691852055076032, -4.588945838710027, 2.4524345324309085, -7.42676718411086, 4.64000104691582, 3.3510140836658344, 2.7753708670800323, -0.16258907468299655, 2.057091837607574, -0.9955210294441392, -3.069510158958663, 1.8412121490066884, 0.8293755549581476, -7.927177402201522, 0.8191702254489215, -3.6503646201917554, 0.24150775560776383, -4.238236640205822, 0.3303928800954994, 6.1391132260935795, -5.067478628851666, -1.7425649861334813, 4.518877797428679, 1.2342311680051585, 4.535708668592106, -4.534656083444744, -1.6340904662185278, 3.4121551551692546, 2.5709985067408168, -2.6391653771703947, 1.2998548887822468, 2.7592801892827845, -5.139240427076857, -1.7744686356387354, 1.9873335187528127, -0.4977579672839707, -2.7055122842041532, -0.1913417340174116, -0.13480754538631112, 4.292995162749401, 2.633463638129794, -1.4773825238425629, -2.9009448193210363, 3.3071058081823477, 3.1694186584851893, 7.304795952076761, -0.6121221285286602, -4.030627556960249, 4.4277930701591, 3.0238372771848416, 0.3105600512215694, -5.453640728513722, -2.5043073252031958, -3.434941736767711, -0.7056532433277489, -2.244805006359907, 3.070323543441564, 1.7860743565024313, 1.0088762100353468, -2.0741372172401187, -4.752795751961088, 3.1748562819184425, 3.3227740631347196, -0.5475940142791154, 5.032334386917967, -0.4247838396435336, -0.6499547321539818, -5.097500185578562, -4.810954988678733, -6.279916730700262, 1.812126699207008, 0.12223639610841297, 0.27013352270462754, 3.509692640307268, -1.0709706484727353, 0.6337145501670147, -3.835541020201985, 1.5723723988544096, 4.741380302069153, 2.5018286615257552, -1.3574941313625888, 1.5106285076801456, 4.664144225248329, 2.8989902037725837, -0.899585897400109, -2.0867101689108027, 3.6585575564112514, 1.8792694152953624, -2.9086877810311336, 2.732960163829752, -3.9366151609951743, -0.192053777007562, -1.1954915455345998, 2.486223854289036, -4.625669427296991, 1.1930125867244494, -3.9441571841374747, 0.9274017847742704, -1.910615495372263, -1.8246218464400699, -1.0638789584088824, -6.394534979896422, -2.6212402121242926, -0.9455967584494622, 4.972906101430376, -2.39811975482814, -2.3462736538155173, 5.000775502063325, -3.196546503991324, -0.5166577270401103, -1.5653185385270154, 4.380758848395943, 1.0173017369937982, 5.144746291677441, -4.924763233867776, 4.842263653756301, 4.681622969377716, -0.46870555339004494, 0.2843218096669591, 1.3247833010611045, -4.899247308232942, 0.7771040944959378, -0.31500048212130083, 2.8667919508555353, -0.46835292859141764, 1.4507252075932024, -4.8203433576158705, 1.5362709633852791, 6.829125300039072, 1.0771144632854015, 2.3434376802042394, 1.2049899595866225, 3.7603423836180188, 4.48218513001455, -4.438794120141549, 3.892970612582947, -1.0518784013889602, 4.27642954382474, 3.150762076980035, -1.8215614365596224, 1.9784672588028602, 0.896915243026486, -2.7602852574104664, 9.647920098344116, 3.6252474622101083, 0.010144657223320586, -2.13006116427601, 2.019098978071523, 4.619855173068079, 1.9843764919324696, 2.1307858756183813, 4.84022338758373, 1.5528169033470332, -2.4597241271725316, -0.599100825636669, -0.167766942639068, 0.4415671236248466, 4.3433966410054925, 3.7821025517504747, -6.079697467540035, -2.6955830346017557, -3.2533099830857592, -5.15291558219991, 0.3239078002638447, -4.6492914967671055, 4.4016045992676744, -1.1529338049726818, -6.0726632352689665, 1.214903616452725, 0.9548917238865924, 4.926556955514444, 0.7856416784231879, -2.487017528569559, -0.019843482375828114, -1.2234520278227297, -2.8270395064867015, 0.34657127138964006, 3.9178698758210118, -0.2508199305085471, 1.1108430314676903, 0.8368650663906367, 0.3071610397451803, -1.2805654306941738, -0.24214311330408933, -4.029821559510168, -1.7697335963017315, 4.4235962580890495, 3.2561228017986323, -0.3928983538134405, 3.03377795649378, -3.3002843034212743, 2.6589583415356994, 0.9361433724266826, -3.7774291174935977, -2.6063891959581538, -5.528130718807093, -1.2722053472546033, -3.9821326187566415, -1.0170198397991117, -4.041719535694882, 1.399467494108706, -2.9435307158397332, 5.360423932161194, 1.1409358766673199, 1.909463648303916, -2.9645469183838875, 4.689468218020449, -4.205666973873328, -1.5059864106229803, 1.0806077764486512, 3.618073171583739, -5.632690291748175, -6.412541820755946, 3.0116907139780835, 2.042588601896907, -2.854232267977335, 7.395446602106633, 0.7638114154940523, -3.6839655133271645, -2.6493006411703206, -4.236151532843298, 1.260654792690969, 2.188676441121901, 0.8551248972432175, 6.480699400268015, 0.49571844298305123, -1.3505916933182363, -4.733727125200677, 2.8074139224859476, 3.8035100348725503, -0.817159097497834, -0.2776941195985182, 3.260658016164479, 1.219800175531283, -0.8373260363098343, 6.924107188211127, -6.081507193655828, 5.608712992498057, -4.200929405130993, 3.5300524860969347, 0.2401400330380381, 7.11634812283496, 1.0067095101211896, -3.463585883997135, -4.060497010844405, 0.001509722420956816, 0.4032126304329209, -1.5346128388091018, -3.1159530650734153, 2.7097170339394356, -0.1993477410108464, 3.287953156477771, 2.6479888182277653, 3.589541744563471, -1.4110782045626178, 2.121392693522305, 0.8972025399813326, 3.3662402276810486, 6.334113334152056, -1.3538326739027817, -0.504915373063977, 8.450008138719834, 0.3324190324495173, 1.306454994422817, -2.1805609293058383, -2.3433284220273314, 6.613986068237097, -4.39383390449114, -4.691247139987198, -1.8596820733274242, -6.715406915093915, 3.8676407322459863, 1.8505987885347945, 5.950664765513128, 5.393537852302672, -2.9602112209483167, 0.39700844683969994, 2.319261590719699, 1.790395148776931, 8.27418789295817, 0.8433877323191827, 1.0584358321166127, -6.581505474941576, -0.2527748634661856, -4.238396900866791, 3.223887528903836, 2.646921449341881, 1.9532728325193376, -4.381374881187975, -4.113335995745787, -0.2748689083348117, 2.02169717661648, 1.710002784514204, -4.813707610603064, -1.020363053090363, 4.980030990541345, 0.40382227888737576, 0.33618911984713695, 3.153805713754384, -4.299487978623028, 0.46358730683043436, 1.0517355488399316, -8.596268309852444, -0.20807432072397547, 2.651866119693126, 1.5646116621715014, -1.8682114654926316, -1.1531639635473674, -0.38230814956116665, 0.9497429618820994, 3.5370059250360235, 3.2856053527851667, -0.7583029926764081, 1.8149675325493373, -2.49938711191549, -2.6582180038213092, -5.11513177876903, 1.561054269339758, -0.4081452866639995, 5.898128621982402, 3.388778320154124, 2.2071839270173226, 1.5687281924299024, -0.6392020265876738, 0.279364149169002, -0.4756871062664647, -3.0603453615422853, -0.790448752389215, 5.702983035711468, -2.4474491731569747, 3.547675166565498, -1.2895672353428729, -3.429512721825092, 2.2553141107582553, 3.965322370060516, -0.9437213702846856, 4.299428682602247, 1.280749510315836, 0.10033835337991492, 0.20085228336146055, -0.18090638405731552, -4.25368715181667, -1.879756839947669, -4.02360917141457, 4.821539996839193, -4.45354450606623, -2.170122690141593, -0.08166712108068797, -0.7550627271420931, -3.71440301513376, -3.851373350739088, 3.258105956989512, 4.371776690141978, -1.1490482695479032, -0.8937760002284447, -3.149775280818564, -5.354568010714293, 2.4933232553883196, -4.911754828782041, 4.048586621540126, -1.3506939221049095, -4.01824165580545, 6.283892464420914, -2.5392100606295123, -2.3362215254431105, -5.220712122041159, 2.945547192689676, 3.297455745474606, -2.8089093340810414, -2.7341638303939204, -1.9349006095286776, -4.085131494495946, 1.654293724145076, -0.8633204311426161, 3.207760200986508, 1.6524155365212492, 1.8461377414738123, -3.7751057969723054, 6.14026027124675, -0.3288357727128861, -0.6027551912187215, -2.2060584390119837, -5.917405285249607, -2.8099714684179737, -0.28723200406368776, 1.9322797510261314, 0.8427625642999428, -2.824333427877285, 1.1058438136210396, -1.02529832653134, 4.083667924818529, 0.7174082152438888, 0.2779462367638923, 3.6613394614438377, 3.7717906448776635, 2.4148151109720732, -3.9277397669770133, 7.185703661272756, -0.007111357913415883, -2.024170691342304, -0.6368596296480321, 1.326101128531275, 2.186424522925285, 4.151423609868519, -2.0407638931240615, -1.910541463333977, -0.7496545671285684, 1.2998289465502175, -0.14584035088169078, 4.437927671553172, -2.253313200238137, -2.081691391186154, 0.27330624267113324, -1.7811839139906056, 1.042297709679322, -2.634093279538808, 2.98307941460574, -3.1812072017282773, 2.5718713683696564, 6.143177359019563, 8.936925359160217, 1.7956626625959071, -2.045173224122429, -6.04426291111166, -6.0543592505072805, 2.2696946693779125, 3.3703013364705816, -6.639249557827663, -0.6757953869121907, -0.7024099996840096, 6.97733408102615, 4.242930968306702, 4.329141017960582]
BIASES_LIST = [-1.5985046284748925, 2.5596587566160798, -3.3941617944786113, 4.042934346348828, 7.808140131003116, 0.9099360577345665, 2.80931746889899, 0.6809416682179026, -3.525315469326007, 0.9666754030064992, 3.517791379180143, -0.5149727337855614, 0.11944183894075233, -3.092977872183435, -4.046420789557162, 4.821979357553278, 4.685927553649402, 2.66027275205324, -5.309307140917131, -0.5415798853068879, -1.9923538005231611, -0.46766325926488905, -3.2303772057256683, -3.9028442090534607, 4.503312330089774, 2.5336817252052946, -3.344779813923128, 0.12318206860651593, 1.5453020829908404, 1.8732840029990534, -0.6434431982694786, 0.20717695398713842, 3.3000475657485557, -1.313381758954383, 0.2829536615821968, 3.013012256671578]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

