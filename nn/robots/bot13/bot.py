import random
import math

WEIGHT_LIST = [-8.155363476184418, -2.845157666570184, 7.21623798942136, -0.6350555645943405, 4.064688078280915, 2.26317700388627, 0.27838426358185314, -7.081835317599288, -9.501632907779584, -1.5221329718073466, 0.22199476947025704, -1.9665042633960208, -0.02234062046050031, 1.7112241196004139, 0.84456447236515, 3.9873062873260596, 5.389413841955784, -4.802163517215008, -0.9921240170418906, 0.08713110396263862, 4.24758094014599, -1.5866477223046307, -3.6572157542631483, 5.409421229592714, 2.065439993561917, 4.621978643549282, 0.5123454160450014, 1.0132631509455634, 1.2326733675149457, 4.190110627219151, 4.246890692037994, 5.304873961233761, 0.7840240558343357, 5.53126845801489, -2.0928871702497838, -7.228491214502038, -4.278125002779729, -5.084337154804284, -3.8550563804596476, -1.5640902898252864, 1.9697094096053473, 4.692201832521832, 4.194694464333161, -2.3447975503140084, -1.0661725950474334, 9.251460468341328, -0.13724690663465106, 1.1174560947509087, 3.213568022237503, -0.29193094883892323, -1.080770688397082, -5.896987727225961, 1.2634470311887929, -4.781583581575337, 0.1056802579852093, -5.7306915168615244, 8.1138216280302, 0.385139104063796, 3.8892104399003418, -0.5133886861838505, 4.658188846308019, 2.008299631052042, -5.316573829620653, -3.1691915662036947, 1.0724331810745504, 3.3223377560989733, -1.3069366665730746, -1.7926277972358495, -1.5492692393062473, 6.021977119218817, -3.5308984294626256, -2.6556368781958466, -2.402234209774306, 4.733835657029751, -1.5286429484255095, -2.282992104322418, -1.3007065903728734, -0.06860028196057727, -5.0659059647276985, 5.883897437103345, -2.830475721458495, 5.036815723689557, 6.271899397234248, 4.041838842978255, -7.233055104082702, -2.345113961302503, -5.942566191888501, -1.439269957152308, -0.9288639078597092, 7.768765356652964, 7.361158631808168, 3.4041843022253673, 0.9936965940398717, -2.331534156426452, 2.8417365543816064, -2.0698118853393823, 2.530388809863131, 0.9537324837720187, 5.743926061867043, 2.3955974081483657, -1.0784679419447143, -6.672229757258953, 5.853685240919385, 4.6745120357301015, 4.685646741314012, 1.632795468621051, 2.6060281654080972, 5.180844068386658, -4.943532002790264, 3.6555792637660685, -6.790122564872942, -2.842333069369952, 3.700697291883927, -2.560862442718424, 5.5755839336682635, -2.3108853342775966, -9.66279380065238, -1.891939436108692, -4.684076795778482, -2.6322547641059235, 3.6349486086290237, 0.22480288747214444, 7.604851322464379, 0.37556869579374347, 2.493084205084817, -0.09602842920003421, -3.245607780595221, -2.914735563724891, 1.1167357059328717, 1.4275912858885629, -5.097031012893037, -9.763532615462381, 1.7522685470004495, 6.154742232327545, -4.5443669487761325, -1.957271785738055, 3.737635365889716, -1.2311038590220469, -3.636189170861835, -0.346912497771764, 1.6927424228559156, -2.830507733098744, -7.0776791026730415, 7.020973796307806, 7.647647035272545, -1.3543375234202655, -2.163765461495446, 8.3484678351456, -2.132776951947832, 2.3258919379459955, 1.6616292192972164, -4.14335494519691, -6.962649417290933, 1.2344965087006687, 1.1639068835800304, 0.6870220524000155, -3.6754471768469448, -7.4897335064608015, -5.71792674411697, -1.4910659237385757, -4.983622735981956, -3.7960459265444695, -3.3464949180599577, -6.238629214347685, -5.366020022082668, 6.747035594893524, 2.3703861628899623, -0.4721259284661188, 0.42900795251346774, 0.960434284169138, 2.9263956320035494, 0.012513002545515683, 1.8653786594096151, -3.25831272902228, -3.7369589391595563, 1.95151977245877, 1.1575385492525694, -6.619958711184834, -4.850298826332887, 2.2285192052200737, -8.375976616496075, 8.709954462623958, 3.5858475169658686, -5.24275929639909, -4.065760483794636, -0.48811992359541295, 5.290670623406027, -5.62344510403252, -5.205755955789221, 6.528939480705341, -4.907054901756944, -5.493013280250466, 4.840111972531832, 2.405863547195918, -5.600473342830892, -5.239060532231824, 7.259781933023675, 4.322191341947819, -0.16384161438385678, 6.78726487811423, -5.526283008451187, -4.384972014534133, 6.534913891248861, 0.6611745511231759, -0.691001645223336, 2.6322689782351425, 3.256997161452164, -0.755189502660581, -7.113176676550104, 7.000381332836951, -7.161382675358644, -2.095315924642012, 1.7784093576127638, 7.1325120014311265, 6.017745749046584, 5.734891871626308, -0.5418371666809467, -1.819848716956865, -2.4325149848975767, 0.8038885674621867, -2.3976714509574433, -2.248351135493897, 0.3691332669063813, -1.7165539353068293, -4.2200957881318875, 6.128469142411329, -1.3121834892488944, -1.669396338843696, -4.056784044566818, 2.576505698715784, 2.4920110523682832, 0.5982181977702283, 5.8005457464804016, 3.5499524349483162, 4.522695540903213, 0.5107174101492962, 5.219337644417724, -5.820323511412617, -2.78300878081468, -4.888519327306003, -6.473358441538196, 6.772200736163513, -7.197259898283018, 1.3832632725872271, 0.44103916237713464, -3.0513936616821584, 0.12870022355350358, 4.018095079399974, -4.269072923081543, -7.099915695189241, 2.037995610756081, 1.7451663153391213, -4.604201852016858, 6.363767485298894, -1.4790473011368033, 2.367805326127741, -0.8545212933594599, -4.490324588923628, 6.8349318653384366, -3.8105012441513955, 5.735572248148363, -4.1032630798721454, 3.087634745483113, -1.372665244773427, -5.113586187933151, 4.1507902380092405, -2.7958473681644946, 0.8144069823898188, -8.237120178599074, 6.734108531425936, 3.6416153712065698, -9.723169935597289, 1.9782687331353466, -6.784777865806544, -0.5540017159814488, 0.2599426725392448, 5.686659993625603, -4.6824456269180414, -0.6771360961264047, 2.8610525851340864, -1.1309876943613473, 4.288253993813601, -5.738235347083196, 2.75800218183868, 2.9040760916447956, 1.550705528264175, 2.452189340611089, -5.983605297490095, 10.500425555467425, 8.983351153648009, 0.48387528605170177, -4.03869779520952, 5.878589254033741, -1.2358144836515057, -0.7206539429029792, -6.024919186887482, -0.9799856439754935, 0.23867505839454567, 4.788444559475396, 2.669118126658278, -1.561983718000104, 0.10506682516039068, 4.943320788830544, 0.31186740405708163, -1.7091486987537063, -6.903602767423542, 2.3226639593371887, -4.222906761014758, 1.4475705699378767, 3.9861315269112887, -2.442228546374627, -2.3808140777359927, -7.532856873574279, -3.502354178644204, 7.573361885451832, 5.775537960404387, -3.4932191695992065, 4.2912492779107, 1.2296423760287516, 2.9134822547329557, -3.09441866846018, 2.582536135764358, -3.4708169502990347, 5.66007640828929, 1.2411835213002247, -0.3648604178964735, 0.7627752456069019, 3.3659939973078257, -8.058069400193467, -0.6088725155447368, -3.8525377286507645, -6.586514165088707, -0.3312810308662456, -3.8690912407759375, 2.4212027151588114, 5.230958403683012, -1.6582024008105374, -6.641361089362194, 5.224470898976038, 3.3596369413278944, -2.5367099360519516, -5.8560758473409305, -4.732032202279308, -3.8906185029428637, -1.667327095958952, 6.842379589475506, -3.3482966430676635, -7.694528708739298, 2.128423776854991, 8.92313120603043, 8.91127618291266, -8.682838285790663, -6.726371137306664, 2.6503848664638925, 8.385418712643537, -2.5278986774445995, 2.4935627831656877, 7.51663746962691, 6.495752537987008, -2.1581225610632373, 7.432302384748214, -4.431388842057387, -1.4412152112902485, 1.7655781832149398, -0.694383657575447, 2.6840963663059227, -5.06563212954523, -5.506787377459181, -1.8387749879449697, 2.188664393419877, 7.833998777838501, 4.1713835670055674, 0.05314802335866847, 4.001193885693801, -0.09379943495799062, -2.0907464666274005, -4.598834135903031, -0.9478918551478779, -1.7838467594077372, 5.22051868614913, 1.599856968488471, 2.481160517520503, 4.445921884928043, 3.475284603536443, -3.3642356966456948, 1.8495583924945302, 6.207298276567413, 3.2297433542189076, 0.7021619200899685, 2.1349971556770155, 0.2496946135478541, -3.4744637601485358, -1.2976916071200084, -3.5893142951443866, 1.419342879059545, 1.675944321163007, -0.07643765276068287, 1.8132834409678673, 3.2843053283833155, -2.4133339623963344, -5.662806187794694, 3.1393292744202608, -5.77054045723889, 6.172789147719823, -0.1497197310759761, 1.6630559277221941, -3.757197161765109, 0.2667672428948295, 2.6626050753333828, 2.604615189987651, 3.286538980753279, 2.8106280753099706, 3.3053843169501387, 0.20637571018879608, -2.4703596936871457, -2.4561274255184693, -2.76383340439795, -0.24374262591649046, 1.5231648725098244, -0.9672847489406675, 0.6303549051715227, 3.3265773178776628, 3.7818192076810244, 1.949122084844022, 1.3289437266509299, -4.627490309642192, 9.06937913985668, -3.514848091517532, 5.372184708840811, 3.6752523078686834, -0.4099629867039817, 4.8088550693410745, 0.7303491573181298, 3.20367096579122, 0.32027530285371647, 3.2313990433957502, -1.6922026903250185, -1.5345448483378594, -6.048981385803462, -7.6937946995451005, 1.1669325227131715, -3.637714163286264, 1.6000661770244284, 1.487513728219472, 0.9781275833921663, 6.4115955466704735, 7.318460924687023, 2.866666394046723, -5.778416463084516, 1.4717726446906612, 5.229312529296708, -3.3596932532072383, 3.1050329071342, 2.098280220462742, 5.951321402657442, -0.28688675454145546, -3.9869468945182573, 6.2400356677070565, 0.6742817480823846, 4.079623919847226, -2.577237774558945, -3.743344591199881, 0.9921588401750727, 0.828480088435875, 2.929810023921155, -4.106620949731085, 5.6290157750375425, 5.246706925793316, -3.645097903502133, -7.952568351143173, 5.10557694980456, -1.381978324104559, 6.901631282678401, 0.11139056422664151, 1.5090297373415262, -9.240518103334981, -4.146981954009089, -0.9418969182185026, -1.8419603616198803, -0.6847302940138338, -7.264253423037123, -1.1632298538770716, 7.647587374508261, 7.701680305084203, 0.5010590320944894, -1.006299964069607, -1.8452382158269642, 5.485603536532968, -4.3975864363002115, -2.255487672753791, 4.172581435975824, 0.843470160210213, -3.1795741400472544, 5.153856601448581, 1.554217202692095, -1.1674309349450867, -1.4355605831438816, 1.9211132862689069, 3.166092243358643, 3.4614291880702153, -3.582837868532576, -0.6080772275626899, -2.2708038318497215, 7.608870967260586, 3.1733319601489414, -3.249698739465653, 4.904558073005332, -1.8288980742943675, -0.03983268362506576, -1.3367362969492556, 2.557846612266434, 0.024041602993634725, 3.330741199100259, -7.483758376456169, -1.6005390570930207, 0.3348379387225016, -3.7614297561175642, -1.5703061495997184, 0.9169126235230602, 2.3366951421832542, 3.662879667970432, 6.117922592942708, 2.1192197838536133, -5.070828974438105, -2.608937518843027, -7.5962596708412375, 0.0351967347033324, -4.394395141620165, -1.5212314131202886, -2.772112762056817, 4.023239541726746, -3.450871281675295, -6.625492309729437, -2.8543801522117365, -3.85043295585259, 0.08857680769970844, 1.7220583051073337, -1.9530953463259009, 2.63882255107626, 0.8803909514634816, 6.597699068035349, -1.0057064018004866, 4.24200648075957, -3.9217524901013885, -0.1704644957713961, 1.156994427686838, -7.571696507734995, -8.603880165801348, -8.492765207926116, 5.866571802012712, 4.11889338544108, 1.7760981123803758, -0.3334487206301723, 1.1257812600037407, -0.4917442594655362, 0.6815505180349946, -2.8510652636330014, 3.729695844483096, 3.555569507297322, 2.549384953243874, -5.356360486477293, 0.24715629384638482, -6.930480516822816, -0.36630402413819935, -0.5292145451473519, -3.341501855397938, -7.787284715660614, -0.5896336541632516, -3.3798945381118397, 2.276721039478294, -5.247751375422039, -0.6958589016464147, 0.9624911081774883, 1.2804091926830798, -6.881364229348545, 3.6728821288143827, 3.8571015588141457, 6.315236821135284, -5.766966181987869, 2.3554512624736463, -2.3581616855054306, -5.129140498885791, 0.78510688693892, 3.320837688057949, -2.047622099486402, -0.6140866083525334, 3.5893958098131287, -0.36236287165897885, -1.4147292522105994, 3.802563977137653, -4.6868736214188065, 1.4416754344698055, -0.9999248141021801, 1.1664053341305236, -4.83883634235074, -2.6630740072840196, 1.9880174365601477, -0.8229881836285482, 1.5622454031586441, 9.321815770849547, -4.024999293700315, -10.6194549897781, 0.5422521323026868, -1.3994323145157546, -1.148273560995118, 5.54486989702718, -4.535739514324037, -3.1394369641048927, -2.024338412287747, 1.648562637957392, -3.9406260186546396, -2.930122812731443]
BIASES_LIST = [3.7299005042119906, 2.0931463908916124, 7.575345200320023, 2.2344093307313826, 1.4813708130726213, -3.9630304233369666, -6.507166125793849, 2.548118013417406, 5.479755819952262, -0.9720276085903532, 6.203120206984499, -6.614425329111132, -1.5879170233572908, -2.5332572448363315, -1.057691357339985, -1.3367311236491284, -3.3847187456865133, -1.5645783704597216, 0.0949112370575545, -3.608866870629499, 6.120805047018226, 3.5569292011116294, -3.8603179059546426, 0.5007856624293825, 5.113291151667649, -7.5833945343010765, -1.237819568090049, -6.016123162069839]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

