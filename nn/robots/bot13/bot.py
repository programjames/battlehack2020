import random
import math

WEIGHT_LIST = [-4.1939225863599905, -1.993906739744958, 2.4902167045652845, -6.6392887860738865, -1.5080806237417732, -5.053318091539639, 1.0489873377565386, -0.645102853614312, 3.2986514322493123, -2.991373987632014, 4.424457729757666, -2.651672676910013, -2.24341289935679, -3.3929499307042827, -3.600577767499769, 4.654436760560669, 4.6258739646232145, -3.617110357397374, 4.543548726805795, -4.429800832075218, -5.907642971262596, 1.9967324516171319, 0.5957775247627832, -1.462079537843719, -6.853260693328303, 5.055023335150395, 0.4154711018084556, -6.629741787772681, -4.743938113880229, -2.7875286196609226, -1.79483424199329, -2.530584223987132, 1.3164375881651567, 0.4760335171847072, -2.685767180533051, -1.615180211492266, 4.922726611130102, -0.8448588473455754, 2.1578120917914827, 3.5346665129897668, -1.7978466904158823, -3.810055056768415, 4.1163752744552085, 2.8369548368335478, -2.893060538677804, -2.6883581350956884, -4.737979225815436, -1.1611080671286649, -3.5671641117917856, 4.351406924266746, -0.3196704747509933, -2.867348542304894, -4.871825959727868, -0.028268559584658126, -0.6999763689207257, 2.3047277313807584, -0.8035762411707383, -6.150328697527801, -2.707927237397396, 7.588552718455315, -3.61045306972321, -1.249374993429709, 1.259919056236849, -1.7686471247203408, 2.457715789886843, 0.44890796116299936, 5.517879387517108, -2.4135558715598835, -0.604494970305995, 0.35084474824187417, 3.69658097182948, -4.599191416678447, -1.2533500375966617, -0.17119693289169957, 2.149891796255039, 1.4753857345265766, 1.752884119380104, -5.972910027577463, -3.544725144890119, 0.47640189147462086, -1.5858927628491046, -5.734931750570191, -4.242087201438188, -3.940334055094162, 0.6516746899198627, -3.3929993034183723, 4.1513370054404755, 3.9063463868644117, -1.2785420871214097, 2.174641561628474, 4.79898360912256, 2.9988616970555535, -3.982298619945368, 0.7386394952956683, 1.9457442432070478, 3.7752610209229784, 0.6222080338013687, 4.129684834155047, -0.488099428896003, -7.43827281692018, -0.33229618617793766, -4.808579992997105, -1.6851974718967213, -2.444730820919068, 6.997591084891328, 1.9428009056202993, 0.6207560255764482, 1.4085421798771307, 3.6097463613449374, -2.353749880668161, 4.086547975484306, -0.03470973703201086, -2.7460173973163187, -3.3700520543001824, 2.5877077050887456, -0.25645334926900887, -0.8673382719207046, 0.11404369125448044, 4.804283441914259, 3.290833356175537, 3.9523624361102163, 4.273275822017161, -2.63438801679996, 4.562288050239542, 2.9432441640132865, -0.04482093958636124, -3.474497661288, 0.8851185297933448, 3.4439252541685743, 1.0520015673333836, 2.4250787139463346, 2.2691117744933935, -2.626077581988877, 0.4147709683525216, -2.021492281964312, -3.3491764515852647, 6.127270397164546, 3.0555490457882204, 3.078078802473139, -0.9890353324699439, 0.9212290067735256, -2.0803474696468154, -2.561671425930246, -2.9318193455870576, -6.722279279260157, -2.505047285380928, -1.6145871814871446, 2.2724434626396617, 3.2107093152662767, -1.8787253059964333, 2.500495731198645, -1.2449919698335823, 4.9970503255416725, 2.327118224706927, 0.48004450660713727, 0.5891289623176315, -4.187106775510719, -2.3697650278008577, -0.21349097532059957, 4.835885185016179, 1.0128991057831986, -1.4588881722160536, 1.1639364737118192, 0.48257546416083974, -0.08552653869630844, -0.475593011923678, -0.9089193522094445, 0.223099792230381, 2.266773432267682, -2.184424756609026, -0.7446339046351306, -2.2712167217094343, 0.20250881814237132, -2.155599876360794, 2.154874407896214, 5.675728183683726, 4.311198730452, 7.231096988434096, 2.074930281756678, -0.3890754461681871, 2.8205320885457086, 0.8862075535443357, -0.10246815166826173, 4.494711222541052, 4.359715691376792, 0.5626820721771473, -3.0621884856068924, -0.5220158127834158, -3.598704190381781, -1.7459951972926466, -1.4157352474358973, 1.4810094406156344, 4.960284320593884, 0.08272702098692353, 1.1554979045500744, -3.2460602079380987, 1.6112355910414489, -1.4121389933376607, 4.578290598229131, 1.8444215698617592, -5.302332164952121, -2.8146128222406044, -2.3419651642504418, -3.1080418587088117, -4.362853083786817, 1.421807923014001, -0.39890388962376944, 7.552143561032619, -2.0449451052907266, 2.5081311627189518, -3.3372663298577576, -3.964570873365696, -1.8978016547497887, 0.5120948782101202, 2.9823333901084714, 3.1513655151529854, 1.3861057258762335, 3.654240216042864, -0.6096917087273555, -1.9898428174958718, -2.224059125893155, 3.9056441172157292, 2.7360917620274083, 0.6395506767102315, 1.0504967845614956, -2.959923515176441, -0.5122750845452706, -0.24921867374364193, -1.690125200126314, -1.2521273620809152, 2.1147215288831456, -5.6103600204317035, 2.959845696957567, 2.169514664955744, 3.2411542786881764, -4.0282937631078735, 2.491061880129072, -4.520834022021203, -1.1765614738838823, -4.035208483828134, -4.566759538023602, -6.170055430479573, -6.535705204796001, 6.8729334900413335, 2.812932917692618, 3.0147192739394697, 4.542974937121625, -4.739421614054358, -2.1914937564521306, 6.521515250529767, -3.2929711257487613, -1.4401065555657915, 0.8779023368411953, -6.977618348079154, -3.1385378593277764, -0.8158919150484466, 3.319575182117923, -3.1647467665369904, -6.351091703220559, 0.7525279785983581, 1.848731967894449, 4.01498394696711, 1.332552112517102, 1.3080306553006675, -6.139053810776078, -1.1344460976981898, -4.098412692228688, -3.5621501943020384, -5.1434942066735445, -2.7820913442170143, 4.7329285456014185, 1.2918179940955596, -2.1431809667102986, -6.344843802573092, 5.167586307457676, -4.30693985021486, -5.175948811040247, 4.369613823657062, 0.3621833975372053, 1.6973990128901226, 2.539763936316029, 0.955129995438255, 2.195480102656443, 3.8522357081032848, 5.1699982106915225, 2.7509565413264028, 2.3069207295747836, -3.818121192651406, 2.493595874777357, 2.948485446559892, -1.1344370563317023, -3.8037224952210154, -2.049916146353413, -1.421931645733223, -2.8641640190917044, -3.9125760519657855, 3.5997479131534416, 8.898823416314126, -1.7221764464306697, 6.46872447383031, -2.2704349273940525, -4.520248542608077, -2.258836338490964, 1.2884594472469049, -2.2419850768131666, -0.26022472910568983, 0.8217109955704673, 3.045872705896251, 8.133983352186785, -3.054220837329764, 1.2066634215398797, -3.491928848435484, 2.6785549378553832, -1.7539310061577273, -1.2808475884835344, 2.8070808372532667, -2.4286168320642467, -2.370372514724808, 2.080103259495716, -1.0673480483408033, -3.8062092448963627, 1.2297655678756367, 1.9996662619126262, 6.5060016692116704, -2.8260624405668935, 0.021539949743693443, 3.760162088403624, 4.441107603411763, -1.6162279563984026, -5.742635390139359, -0.11521193880709601, 4.3671270011203775, -2.2634902381565443, 4.3616973685719085, -4.8757621353843295, -0.2564831510068384, -0.20880877749909388, 0.3804259148481781, -2.4024848731356485, 1.5922696233983693, -0.995263359704251, 0.21133279790743664, 2.9937954830590208, -2.23240163008352, 2.3904967662941754, 3.434705744364641, 4.217447973300852, -0.5191532895279436, 1.6543062850131145, 1.3185572748148835, -2.06043075643697, -0.9548883800119428, -2.0429983892010153, -1.4456590843303192, 1.353974683928171, -5.178598084759118, 0.7462961178822816, -0.5959382970749515, 3.2286237002339533, 4.415098161338026, 0.8149720369583917, -1.0896904312857663, 4.670769539754685, 2.521978335898845, 8.15510177156665, 6.254920744991743, 1.6965515649932792, -0.027936227069809805, -3.980558197816503, 3.6898381546739323, -0.171144722696299, -3.9417252091252015, -3.9653019520370423, -4.189596389814611, -1.646147158671769, 0.6222099430611616, -0.07979117660566537, -0.37846639091803647, -2.6433866842857956, -6.213220317847559, 2.13765833378107, -1.054682635337758, 1.3554031504742103, 2.9679436654246265, 1.6474659524388233, 0.9954737029883804, -0.3869895412570046, -5.525853323238126, -4.2595027838706585, -0.08006096936469986, -1.9024200257712802, -2.4359668705226367, 3.8646287521038474, -2.354967627994485, -1.9645897500890297, 1.4873001689706902, -1.7193763589840798, -0.8146554485201127, -4.132690131061367, 1.5446533846352315, -2.7149165171337266, -2.200734461043698, 3.5859336047926007, -5.310538275651761, 2.744293778076193, 1.469262927313058, 2.554689229982844, -6.816567608500781, 6.915498288570954, 2.838067626019803, 3.5233822725618396, -6.65177077198612, -2.207036161137437, -3.3357012404245205, -4.89042107889545, -4.45192689816638, 2.5454510501090333, -0.06714225709180455, -3.054767333098315, 2.5146853354671097, -2.9379469358152708, -5.0083730026646505, -3.8697336541770664, -2.524641682344418, -1.8707969598446894, 1.0711424588589775, -2.485583308265762, -3.1334580450638434, 3.0895585566141675, 4.690556377525309, -1.5985509453875506, 3.219849175353634, 2.2589451225742527, -7.154632158833642, -1.201772674990849, 3.7429564138839186, 1.301638798525906, 1.9705829442497649, -1.2724464313777988, -4.4168423965486765, 3.114650922392544, -1.4483755438302628, 3.784897774095877, -0.6459040383878734, 0.3291804406989689, -1.8490336861752135, -2.4938122832138516, -1.148229456601131, 4.157248061495603, -2.0374217281458247, 0.006672825461834897, 3.232451523353305, 5.658606317528655, -3.6694236774845126, 4.901485065149397, -0.5815678043905215, 5.838492790607429, -1.363505510055982, -3.1464648706231313, -1.3888598511758454, -1.791668431862474, -0.7693211268372147, 6.448350974921199, -3.098781597490178, -1.3346490431578828, 1.2570474760976018, 1.5713540684227691, 4.2387732451844204, 3.8806182598706487, -1.0258548169403854, 2.9422246026489356, -1.4315664671607156, 1.1960881191892474, 2.247085919929448, -2.866716152022531, -0.3920226702963192, 4.1198982393602295, 4.123075364525369, -1.8447661075665214, -2.8075571467462366, -2.0039094630933842, 0.37274309403813866, -1.0879927207798312, -5.860155486669914, 0.8428176301179922, -0.46560134435829514, -6.903141717962815, -1.0945208469399246, 0.24240336250505612, 4.635353687239839, 4.627286173484972, 0.7259950000894964, -1.4993765466150906, -4.026003151481861, -1.2634018383920798, 0.4820983314851346, -2.527084547449313, 3.3692138412439885, 4.359802545913044, -3.720137726441771, 2.0623620735024364, 0.30441281800873043, 5.317684931655658, -3.1946422366081664, 0.7942543854795672, 6.922783417577266, 4.131252759099054, 0.29630496569889875, 1.0791367747446046, -2.216240514224287, -2.7302058606110817, -3.4856601271893015, 0.6455474188902888, 0.16111778125110088, -5.141933367705359, -4.978145821649314, -0.7508339340363248, 0.6180784134248065, 1.40846591445598, 0.12436985478082585, 0.4445941183823494, 0.4355872545586863, 5.5802180235707795, -1.6749027791950337, 0.2743378035502002, -2.2579936526901756, -0.9431067143961585, 0.2115283743009373, 3.582799088483746, -1.0985717708378346, -0.4151141176293003, -4.844821161172295, -3.1281891938942987, 0.4523510431006659, 0.3852053385441321, 5.6950301939797985, 0.32302357992689457, -1.5541777822868112, -2.1225773497733496, 3.305206919591704, 2.4770324763204163, -4.003390993506833, 0.009874683984828714, -1.9725130881537238, 3.9305641023267937, 3.2273900145466747, -5.354312098253455, 2.714486815114915, -4.153646817550798, -1.2172590337995717, -4.651029117980016, 1.2583020654691275, -2.8511536542231464, -5.690553231501578, -1.283658234011943, -2.7431029166514946, 5.380965208940427, -5.772634517223108, 0.8536915182225093, 3.2701035315812144, -0.33565559044855964, -1.623555044747853, -1.628901146997676, -6.26381968516611, 4.732319947161447, 2.3307071421819225, 2.4614849254566273, -1.9653659932368606, 1.262780513712186, 5.064667656702186, -0.43394077324234437, 1.0091177261403708, 2.8302836801445426, 2.791882566201501, 4.08419805370601, -4.058868843913029, 4.096818642836742, 5.3615909447951005, -2.3435236057190005, -3.057005781426672, 6.1668291555853205, -0.7364545754598742, 0.013153532837374193, -3.7219180104772267, 2.8076882071658984, 2.707487739660719, -5.491943950097345, -4.28727352978623, -0.4523638822094459, -3.4586776231647436, 6.046209105551656, -1.4001201759086266, 6.202916273286128, -0.7085621985989938, 0.5435710197066284, -0.443519969807711, -1.43745741990058, -4.353596978980965, 6.008385416620628, -2.8125644620664776, 4.892762622508069, 0.24503476947043668, 4.463539770429827, -2.1530970870384962, 1.2571267217991036, -0.0476799019163896, -2.8584681836112047, -2.3710766621001342, 2.1017143910305407, -0.47861363914502586, -3.4525260264814426, -0.8479283294035844, -6.369207950226878, -4.161724585855599, 0.6869255837982597, -1.9295308390099601, -1.1681123970960836, 2.3347102373340163, 1.143878491991952, -0.025116890096400946, -1.791160547274209, -8.749612448256958, 3.097676095108503, -2.5231259658758454, -3.64720469867106, 5.066725510462324, -2.809284613148475, -5.97818975581656, 2.6592619480033535, 3.69650561204058, 4.350135796786314, -2.4743883650004257, -3.628225888640629, 3.867054587309033, -3.260778604412436, -0.2535926210947028, 3.5880158854335686, 5.834282863811257, 3.4867539542372468, 7.285343605926549, 2.0989434131573006, -1.778886615791405, -4.8245282407053764, -3.105827241519912, -0.8450859432667872, -3.385804613219465, -1.5038495234831577, 1.4121923187228385, -0.575842544346848, 3.1495582501799504, 2.1488778394001598, 1.7402614291159058, 1.3418105879782858, 3.0861775876127915, 1.3573079983398961, -0.9116186770737129, -2.3201187246896775, -4.748981892602772, -3.213268602148923, -0.309877774836275, 0.26343000808214057, -5.508826880226501, -6.382306149330354, 1.8204700712032578, -0.03976773114230747, 3.1558251700504227, -2.336465168288836, 3.0230916063779336, -5.309345945862977, 0.738257200161069, 4.682187945537246, -1.2086546393115423, -2.3343120574431646, -0.42417185072556873, -0.1089518110381088, -7.432655359255634, -2.2974365758144266, 1.3631380589058626, 4.639838322932438, 0.3326175154088915, -2.503451661674328, 2.528647696670663, 4.445063817623963, 4.789155492312819, -7.679743896452913, 4.763068013633232, 6.0479461557275, 0.7977041187785394, 4.586608061542913, -4.147787731187575, 1.664851078038771, 1.0911021980984703, -2.012359099671502, -0.8588889354061877, 0.6659805039876572, 2.7365890752830513, -2.343315918393581, -1.359779728305487, -1.9974201499380466, -3.0310331504282004, -1.5127381717515063, 2.59593723425047, -5.875694616397671, -2.969784042816504, 0.08106989135369003, -4.3096532476862475, -6.990188547621349, 6.5027985352175985, 2.918405876826701, 0.494056630936059, 5.0997003826690825, 0.11982202665727115, 4.0299144778505145, 0.08193204731726511, 3.8539708915051936, -4.915686623035925, 2.0554366925285033, 0.09011663969154204, 1.7905380340850687, 5.604230594574127, 1.0522846463843045, -2.4487308351281594, -3.0328115736629986, 2.2664618945668744, 0.9844257221737089, 2.4887108269850913, -2.1878648462826, -2.529295150674085, 3.8730517142063103, -2.2199539680580043, 3.2023918380235727, -4.432461718386929, -3.38840086576884, 1.7495179214082874, -1.648256346675, 2.481694902771849, 0.7817024225021096, 4.625294938426718, 4.283848542557764, 6.02835918492729, 0.2826216995963884, -3.8512925903841833, 2.8559443210656266, -5.6360872137324876, 4.5756415745153, 2.2509549386789227, -0.9207974343679812, -4.433246934177475, -1.8847519679676814, 1.1722967680606713, 2.6308470733469944, -1.4340513946930664]
BIASES_LIST = [0.27152960389428316, 5.537928922735565, -1.5109821794495093, -1.1891768717150621, 8.797827636258104, -0.7438178975621796, 3.891277981820637, -2.4312415449542857, 1.422405739200955, -2.213335854625592, -0.73863242336373, 1.770097915392113, 1.4391782025802269, 1.833636580298406, -0.22535231223409968, 6.3592251321986355, 5.762216441068459, 0.03709130354836421, -7.2458408345346985, -4.259625899053328, -1.9006422810752195, -0.03419338092560431, 2.4213479137498344, -5.85686368822479, 2.152750292319965, -2.927670497327325, 2.5497454367271732, -4.49049868403623, 3.2326081117930254, 1.555262767898678, -4.16884136474935, -1.1436710108023287, 6.7681302333724345, -0.32759825821397714, -4.386263242968997, 5.358721826177474]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

