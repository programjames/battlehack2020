import random
import math

WEIGHT_LIST = [0.5657919770164027, 4.910563141165052, -2.324931693930033, -3.5452357412126836, -2.3174226476023323, -5.288811834576203, 2.869915573573604, 1.8325080700757235, 0.8039555177492766, -1.1104035242697936, 2.5937058177685848, -0.023360654785348246, -0.8981800864052902, -0.7614217759134649, 0.2384267178944799, 4.938609482212809, 4.676100829380439, -2.9710339575225926, 2.8372012355967797, 1.824620786540554, -0.3724971095062334, 4.348102591055618, 4.921989120761804, 5.409047212040973, -2.112311889940593, 1.6142708510401398, -2.1880974148068257, -4.355231293938074, -4.905908812712013, 1.383689338265733, 1.354104429891999, -1.1223260801858232, -3.39739984144717, 5.261381941006866, 0.991659707429134, -2.492116439743189, 4.152072673901681, -3.2891585803222263, -3.7521836650938876, -1.0241980211194852, 3.822104920724352, -1.859655522651626, 0.4267841558084615, 0.17558947707421088, -3.2672832640244223, 5.733218580423283, -7.86989865970442, -1.0420219232909513, -4.610329524797288, 0.8820121404658053, -3.836114028704311, 0.6700903125897705, -3.586612117338511, 1.8871585583283208, -2.25103206618787, -1.5998496568502707, -0.41180117944952627, -1.9756304197750363, 4.88960918301858, 9.87798386391857, -2.188274240544765, -4.502967663662304, -4.318227216363323, -3.5194254774182547, 0.732394623232197, 0.20055568446266706, 5.356235714948163, -2.198548474812562, 1.234285184971857, -0.67646063073234, 0.445573788340863, -10.343960298498285, 0.48195404658468416, -3.6875889092506586, 0.04456192200508304, -0.973047806825362, 3.3970630507558246, -9.805934664532392, -0.0728659377887977, -0.5676325257871463, -2.413794743413519, -1.1147550900625676, -3.254152716365554, -1.2119402430546586, 1.0145583857954843, 4.804071384843773, -1.8330845295881137, 3.989528992286327, 1.3695596180699634, -0.6829809875345901, 0.9978366872595876, 3.7823141347635767, -1.2458996426087596, -1.0715502978808062, -1.58392821716711, 0.5334948534802015, -1.7521765026691243, -1.130069852384656, -0.6275035727107038, -3.6932225217040187, 4.128297952811089, -4.820303522277373, -2.331283262409424, -3.6102320478700807, 4.946860938014644, 0.7482678512359245, 2.6959025465487887, 2.6836220436592217, 4.9541973284530325, 1.874199542327728, 4.389063788000999, 0.6003843891471331, -0.5279248414967672, -4.318947085641386, 4.458011889587298, -1.710674720720182, 2.5570068264233994, -2.769193279238255, 4.563011181752196, 0.5742027876940039, 0.6176598672455524, -0.1597562620812306, 3.6027816335003395, 2.6144519718341717, 7.00890058604415, 2.4443302950200474, -5.360174199734238, -5.636692658715615, 2.5609521443335326, 0.06323490588171787, 3.618252162592672, 3.8469653234455135, 6.514361118116836, -5.743938425079298, -5.197350638015478, -5.156113705231627, 5.238610754360084, 3.504056981376615, 3.5736759874215087, 4.556548186721073, 2.069893245315145, 3.4746124171500186, -5.2171023189253365, -1.0489689321334987, -3.6811397827955017, 2.5145728504092997, -3.945995174825963, 2.4861512403879504, 0.4682564091755136, -2.4815680326300837, -0.42998573265131806, -5.1159860773455295, -2.4252830407285244, -0.0010303078147009554, -4.151877809493751, -8.682380834866768, -0.22522682072276573, -1.8138358940545731, 5.461005480171988, 3.8055718144291997, -0.9412234629237323, 3.831728501392446, -4.563466939982177, 4.476181520221815, -1.1210329338673346, 0.3683387361988698, 2.105089840177969, -1.695275224763136, 3.366883116924177, -2.6040827520895573, -3.460371698353697, -2.4146635295646774, 2.054922242392456, -3.291467448568627, 1.8410791302204026, 0.19689110233948823, 7.303706681748405, 0.14145297026270953, -1.2362130269313298, -5.377759278334172, -3.219602544671848, -1.8876452329619826, 2.1536287616804892, 3.646927966417215, 5.104770327087382, 1.1296554777547747, -2.62878779833596, -6.1109814187253555, -2.5034030690047433, -2.134938728595378, 0.08090806066704684, -4.2837221745192675, 4.572669525348773, 3.2450809841960218, 1.9105886477799103, -0.4287735891359818, 0.7562431703626133, -0.5222109852898235, 1.6835017912851726, 1.7594808970395628, 0.13127336344459312, 0.707193064452395, 3.0382148738591095, 2.425059226332116, 2.246132752269724, -1.3459274908825873, 1.0335134588895922, 10.575241154523956, 0.5823717741623143, -1.134461723237225, 0.6161284841940008, 0.7575642075137432, -2.94176109272742, 1.3143466669261732, -0.6623075726752184, -1.7639248182145082, -1.6016775281532034, 0.3244108987612093, 1.3034561132332865, -0.7539040225064735, -3.926321788061548, 4.077066387747417, -1.5766191772971454, -0.9476767353064448, 4.259569466105468, -3.532193189294805, -5.024456550319689, -3.313409429378232, 0.14891166848097934, 1.7526168111703837, -5.3352353110319175, -1.7110577777139528, -4.683154608897263, -1.6395150675101124, 5.2766050510826314, 2.404602611901791, 4.27615811038538, -1.1652745708735042, -3.627620631585605, -5.934636782113922, -2.565700766457936, -2.5874725641339347, -3.5936611859400895, 4.859815120552427, -2.5991826900186252, 1.2081705922492143, 2.589204904253087, 0.2168449329549265, -0.08110008488073678, 7.123631670472142, -1.5461521611768068, -2.109176056124904, -2.299152288418317, -4.266172673228303, -4.8518801830131375, 1.0191669032896153, -0.428338802401701, -0.35362697165594253, -5.8131721473452345, -2.50292968142134, -2.731427967785278, -4.5757661164429795, -1.8318307255696933, -5.902749658646808, -3.0716976927932564, 2.690151172274825, -2.368754751349412, 0.6042757250023448, -3.7591138304674327, -0.5498395698436911, -1.6563434649253768, 0.17580416109246513, -2.894100393910693, -5.613614131984318, 1.5180016145730615, 2.0331509006644435, 0.2041289721051985, 0.9945425658112144, -0.7758683239326848, 0.36837454549339854, 3.9508344693979325, -1.0380572699046238, -3.896449390597385, 3.7382134170938754, 6.160248517316692, -0.08118654833475639, -3.379070790840401, -1.823067499803544, 2.629709576660712, 1.6992774984252668, -2.9827724069028494, -2.6881152255110483, 2.5481503668987298, -3.576583222015337, -2.266698540561809, 2.3652410182698422, 8.83257355691897, 5.939869358999821, 1.811819501016498, 2.0496717594500597, 4.571234467366739, -1.8750752111703377, -5.848387311742705, -1.7813303222140515, -2.3759457322888595, -6.864066860297062, -2.874957563539002, 2.294816611303721, 5.058398234425513, -1.4180545150320558, 0.6788858896100787, -3.9239185319530345, -3.6032100885684732, 3.2700675093371503, 1.8468526543246992, -1.7767736052752245, -5.655345313500098, -2.409789677555144, 1.2930634822161953, -5.595261632747433, -5.31845678524138, 1.2728840602118183, -6.793662851370801, 6.393821740562643, 3.433300832822688, 4.605430479451197, 1.996216215395077, 0.26994843724254813, -1.2700893992495657, -5.564954918383437, 3.958988893372317, -0.3313209981412701, -7.43601996137137, -0.1054862187106782, -5.0281026636171555, -0.5027542699179868, -1.6768310384321252, -3.461441111638976, 6.503421703733501, -6.777920362412757, -3.2346007922330915, 2.6633802793762356, 1.4856717077045507, 4.191935919430914, -5.699255824355603, -4.633286926092521, 1.7020868436897068, 4.795407237045052, -4.849130686199998, 4.657901533058655, 3.257393137106279, -4.021834701901574, -3.39874237692771, 2.3164467978886614, 2.3431122540007188, -3.3978153740858166, 0.03875976995817627, -0.010253971167955282, 2.8151764580329224, 3.2523132540768303, -2.2475699626917156, -2.8123991024871424, 4.928071952621083, 6.058236340242799, 5.278225652212693, 0.11216488768931593, -5.844436704465288, 4.260006816373987, 2.601975599193032, 0.858662136574561, -3.2296289505523, -4.706144861085747, -3.6633564013686706, -0.8874084409130791, 0.34313427884336395, 2.0633532843310163, 3.9149791775927976, 0.6849222721582783, -5.650357166810847, -5.261422898281057, 0.42739430936450407, 3.423649915681823, -0.880078325612963, 3.160661194261705, 0.12455590712820294, -2.8694867636606225, -7.238973790308681, -7.870106800352906, -4.600925420742944, 2.462722570171582, 5.6130087781061295, -1.699185672728359, 4.710749380106554, 0.5024676343268076, 1.440579215784928, -1.2929760750157586, 0.3410850070105127, 1.1908626740157948, 2.264950502386874, -1.5007710294515653, 4.298347810189598, 5.5525362152886535, 2.720322833192082, -3.4587804368171406, -1.7191596483488079, 4.5493583725077436, 0.7085377916879506, -2.149996249110132, 3.8698923739870237, -5.55150589619484, -0.2969895495969968, 0.7856866399581933, 0.9041175881422931, -3.2791224882877015, 0.9647363443536076, -5.691060622502252, 4.1294937788450845, -1.5712051130638218, -0.7156583592610493, -0.9917619238957435, -7.4000230934033, -1.8320672659020736, 0.7529209755373353, 5.221483685980841, -4.346061843175366, -1.1388352623822575, 4.081604480497175, -2.743332172897822, 0.9231950723692907, -1.9419387855214305, 4.391602063760959, 2.783508360331394, 2.99391605141876, -5.907514028004497, 4.932444676361447, 6.1807188774416915, -0.7293460736167201, 0.8075366011535482, 1.573554713193667, -4.767923945479679, -1.6137835585711426, 0.6645940761324228, 2.0223564104077933, -1.8281890160074918, -0.37873407587935937, -4.325378976021742, 0.7153805691138437, 7.983608244685397, 1.8065470514187583, 2.933436616612069, 2.412361980599013, 4.514670479492402, 4.936340358667533, -4.362835294579873, 4.684624675703178, 0.007927804806736731, 3.628127885234684, 2.5517352223151297, -0.37645597452901663, 2.5139345893728557, -0.42336834814987373, -5.912914355210015, 7.696809759475085, 3.6834230228403952, -2.039124233145529, 2.0688981999636904, 1.4988025691865947, 3.1937464270172535, 1.3702386374112772, 3.0420368537421476, 5.183645053257849, 1.6553251576756196, -2.329827014674668, -0.0996436679890433, 2.486515865103425, 1.3449162602585694, 1.58380694435148, 6.856953295554722, -4.265907244052629, -2.470879324500725, -1.186816620238035, -5.0852055672397425, 0.5679806705539578, -4.344875965253404, 2.693029160943347, 0.4084887335577766, -4.412827800796299, -0.8141720926219304, 0.48527204448952843, 6.268821680044249, -3.2856140235989164, -2.8796274034278806, -0.6862634089406809, -0.24303142816150633, -4.862116587875742, 1.3611559370183575, 2.6081601246264032, 1.8382083930229736, -0.36813704182305246, 2.7176490712175974, -0.2909329173376655, 0.10973346772705624, 1.5420089513507167, -4.742805250030745, -1.6587537573714222, 3.6059680477189677, 2.87395506640855, 0.48994294841210345, 4.251718577008632, -3.0577910200863956, 1.82252137259104, 1.0492659579984853, -3.7712588877067432, -1.7825158330558444, -4.918667243535513, -0.9633118625755157, -3.99051969617239, -0.9958571640660973, -5.967576794077787, 0.2977625966789192, -0.05023106714741135, 7.0119978823553195, -1.1892039936565693, 1.0969630617249737, -4.020374039646904, 6.950793767865802, -4.071719745182032, -4.136103047524263, 2.0429674023990203, 5.112620968140906, -5.503466453236587, -6.408998811157328, 0.917694672703466, 4.219538200773949, -0.9050088255457991, 8.077687887603105, 2.5245159599973532, -2.2934587998906184, -3.330429951153166, -1.991062927983924, 1.458270519562764, 1.0644934460097064, 1.4417639606128576, 9.023188000103751, 3.8080300003246252, 0.5607173099836718, -1.2595298501324794, 1.8090188859334266, 1.5098137580569473, -0.5472589932989557, -0.2885987869767613, 5.969395500687461, -0.12223170151976179, -2.78273995545268, 5.41127281740063, -7.75673595059197, 5.25518882921395, -3.889011005450246, 3.4095456569862157, -1.0036655604377827, 7.81470705989596, 1.894385890963779, -2.251041981755989, -2.181522890542833, 0.034869093282597206, -0.1153024486810127, -2.4680008954660875, -4.41254200002666, 2.2106123048074675, 3.960749717930409, 6.049160722910523, 4.872828457289584, 2.2519187029159844, -2.1574744141879734, 0.03760448853922827, 1.8401831489790403, 3.7093201133784057, 8.946631530627315, 0.4000857277302092, 0.22530458026917125, 9.607458669344489, -0.602986954599593, 0.5431051117946935, -3.1869319362395725, -2.549905803467755, 5.767393959049331, -2.3516927441144433, -5.455800700668338, -0.24629876979344925, -7.365973457737835, 2.4146117126949176, 3.086684154154585, 6.116391544222175, 4.946903171765834, -0.9538922787750598, 3.799747414212084, 2.925058765010364, 4.109786817087943, 6.783233098293809, 1.3893253176680833, 2.305237024039168, -4.250788740786498, 2.0177028134083814, -7.725190491210977, 2.150490753422725, 1.2726893550676963, 1.2300219031104116, -5.13666755060066, -4.543325452540164, 2.3625032912233155, 3.037205891178966, 4.268708428827978, -9.133137963287965, -2.410780378508739, 7.4447809515679735, -1.3587685939895033, 1.4414012211258609, 5.824879108160153, -3.458114859433949, 3.175159683666889, -2.006499030737748, -9.980812440521932, -1.0510141931283976, 1.4765570477075978, 2.9084442317292427, -0.9068541203171785, -0.7075729114310405, -0.807225858611029, 2.2759404682922724, 2.483432447677158, 3.2226688674635535, 0.2846621088405345, -1.4068770799823416, -4.290577478165497, -3.231197657251667, -3.4225293011994307, -0.7126580134277783, 0.8680918081345392, 4.218172700350901, 1.9582759687472475, 3.181866155217078, 3.117766501300729, -1.4393014385388931, 0.16181078025963574, 0.9629122866956982, -3.089226006819947, -1.636373958026491, 3.475459037883883, -4.0213813047642635, 3.351283915321431, 0.5705695610285041, -3.686800544201018, 3.4443670842570264, 5.923983061160118, -0.44041971146308867, 3.229653020064426, 0.3761807149858432, 1.8546845746034302, -0.9096860492737522, -0.20010747052134237, -5.268250573704732, -3.3579482866412893, -3.7152785009752725, 2.350533766416844, -3.905206992470735, -1.5430116970222667, -1.1386941920132863, -2.0714455355965, -4.905478058874179, -3.8724438707173574, 1.9804847602978843, 5.6732952082880015, -0.19713783291824916, -1.8284800987451768, -1.3594888731147265, -4.273831253031596, 2.3426375012494045, -1.5527252604479087, 6.679680402183165, -2.678243703395669, -4.74774507773738, 7.885792140189924, -2.0340890426392404, -3.2860463636372423, -5.168170251413412, 3.00296519663468, 1.517381822385676, -3.5552796241244016, -1.3563066399650752, -1.5970755751031938, -4.802686093725778, 3.339093916673783, -1.3086538356696495, 4.376509293589059, 4.627071067769683, 4.285615758609983, -4.915121834123679, 3.6439976103773772, 0.24750370290085882, -3.3944488100265158, -0.35999926784579006, -4.73295190530353, -3.5385771264420507, -2.061345429924449, 2.5158786073661634, -3.4126116468376195, -4.671128043258974, 1.422603485389341, -2.7534671734730787, 2.0072260172186147, 0.4729353035243971, 1.6694520923144818, 3.963871839233896, 2.9245152663608662, 2.7837647651067288, -5.861901288767904, 6.99828093766498, -1.3569169958456764, -3.478164298109163, -2.861789411287016, 0.14460207286785903, 1.48605208043935, 3.0293684061593353, -3.591569940858119, -1.0543442536147318, -2.7612714489011725, 0.5837821624218305, 2.181960380008241, 6.118624234751024, -2.7585514285486092, 0.09844933366185511, 1.4667583097890895, -1.2496075116876042, 0.7254616808863609, -5.737488810238569, -0.8389039870998886, -2.385121645730941, 2.3556815521032766, 3.7686654283035828, 6.920335048809582, -0.8741128888095689, -2.2385581604857943, -7.981683169589134, -4.315005298062434, 3.000228457145452, 4.225962258063586, -4.418751850798024, -1.7710726595487105, 0.9655152903257194, 7.599601538247787, 3.751348499998123, 4.867488554765001]
BIASES_LIST = [-1.37855495820783, 3.707539791020911, -3.6126655169502007, 4.78956513750449, 6.335707483871772, 2.773413250667306, 1.0954411090004739, -0.08621593373408079, -1.1068732208164587, 2.651681835553131, 2.128233742733718, -1.3756036148435613, -0.004779539545606625, -2.6174837284009445, -5.508543162106303, 5.2618122101825, 4.824288651626493, 1.4753261376336881, -6.567116760848518, 0.01790721256290053, -5.070884018890966, -2.801047759882416, -4.074198088431975, -6.083549956818367, 3.9139321773703553, 2.6512135732428965, -4.036752838476801, 2.918247003354091, -1.0828734981544672, 2.287099630764832, -0.3424335285596631, -2.28958833469972, 7.126883227326234, 1.8490784925632424, -1.6905818942369462, 0.4473849794746203]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

