import random
import math

WEIGHT_LIST = [-8.12040692676029, -2.4127840057436236, 7.204420123680082, -0.6841540391168206, 4.075025211390111, 2.0858201138496297, 0.32226361896425654, -6.775983429935797, -9.49355182178913, -1.544019431219372, -0.08748988232024635, -2.0019316716834585, -0.2337642553356138, 2.1989825612851157, 0.9341404302116778, 4.2212590979417906, 5.011145194239922, -4.897887546787428, -1.0758817234670952, -0.2996417305042579, 3.902443837003696, -1.2286450138967346, -3.487388599255275, 5.785902922439178, 1.7197397547958058, 4.855377882191836, 0.8864735452363504, 1.6496583073984195, 1.2686144375213797, 4.421326686306029, 3.943592662528659, 5.5300689912879895, 1.1677409450378606, 5.347376518191181, -2.0105501301311324, -7.597236070291171, -3.893791958009049, -4.727028772162565, -3.8838187137875857, -1.7567262678742477, 1.9157009563659169, 4.2605216841452345, 4.090181708254935, -1.9940431167631072, -1.0253860172643174, 9.05256177231532, -0.24457832180814712, 1.3339071292795739, 2.8113159519248465, -0.25179404446127923, -0.9405911260095039, -5.9195107373341935, 1.2996840103827236, -4.792211962588049, 0.39573751656100903, -6.061784232103989, 8.140997996345757, 0.8184725900835308, 4.239720178960607, -0.6917596814728274, 4.736530569916381, 1.8975693876241482, -4.682882299846677, -3.4846655095557093, 1.3196011262586034, 3.470765721915248, -1.1902238291962821, -1.817060312955884, -1.3137442188278328, 5.872977709323504, -3.1632100086968222, -2.136719300599593, -2.4043192596370186, 5.04309785871439, -1.7374451694186137, -2.6849682760740774, -1.538065397779928, -0.13054492377142646, -5.456708176000307, 5.91218414393751, -2.8908616276758874, 5.262234503037076, 5.962438654033314, 3.80520960020339, -7.325983656130375, -2.120102480318938, -5.783668577603552, -1.8095299418362032, -0.7943372834186102, 7.86846267925037, 7.4002627489058055, 3.77249937299194, 1.0303242689495244, -2.4278123015493693, 2.6897525296072065, -2.222784094406938, 2.5024013859525236, 1.5210264046148985, 5.980142166936734, 2.0755522395558477, -1.631292931605727, -6.641947916421532, 6.057052322951921, 4.901842285343745, 4.528935779863133, 2.0118116349490207, 2.4854387364984682, 5.4369872174664, -5.0990624189393605, 3.958576586593541, -6.847588700816562, -3.1436697598768486, 3.4603573234452503, -2.5841086353136125, 5.408649650066996, -2.2507081693713586, -9.862203453004204, -1.5440824064471579, -4.347611214812759, -2.498166643202067, 3.4552464200566955, 0.6412777296710894, 7.549061794482612, 0.37191422532854007, 2.3181832993733833, -0.26418912978395614, -2.9345543318266873, -2.6825151656474775, 0.9043632098295868, 1.9326376390755406, -5.1077589898900415, -9.358818743823381, 1.7445947124801326, 6.107879423069951, -4.57438755406802, -2.065280853503943, 3.869557595528035, -1.3621726942609862, -3.759155683969974, -0.34904751500415115, 2.2968087513828777, -2.6496518214143174, -7.1074135835083085, 7.084739675720229, 7.2690168318313075, -1.638905355175022, -2.6855935188154643, 8.187952642689945, -2.6488721085515503, 2.150127486383385, 1.8136265275313121, -3.7603818605424646, -7.338954432474095, 1.0991912073097478, 1.3867031281114577, 0.31131136519826524, -3.8419314997279255, -7.105001726299844, -5.79035465989436, -1.619157672409436, -5.031898995035068, -4.316060590030433, -3.1172761823896367, -6.5736573955402084, -5.430856084628131, 6.920005676227724, 2.2660082978328373, -0.18678180641879777, 0.15085376776611664, 1.0430459494977322, 3.2047539044875943, -0.5847333109745769, 1.9813849580515002, -2.90060742329864, -3.5385657667156587, 1.9575728553050862, 0.961528647746094, -6.419745218017407, -4.785036558863214, 1.8735197454954067, -8.149469665780744, 8.872189405493705, 3.5942614633368217, -5.777196944467843, -4.124570992308398, -0.8443734584222418, 5.371146574316763, -5.437980192079636, -4.8598211674203, 6.983415599709723, -4.956912379183217, -4.904527104345667, 4.921773386034734, 2.152454925348294, -5.556224646409845, -5.440502439959303, 6.9062034121009725, 4.2227239822217335, -0.19899125785893293, 7.449095207638661, -5.472860514545356, -4.40653893983501, 6.334030299011909, 0.8481960600730745, -0.3105365297245455, 2.602772971685747, 3.417994301248231, -0.5174394735843671, -7.226687358796654, 7.39793592135559, -7.150725915330342, -1.9944098962987793, 1.6928859437854953, 7.158162819111275, 6.577387858155769, 5.773325140307459, -0.5247627116864163, -1.7689703702590893, -2.7276960244226434, 0.7267657611736451, -2.2780735740284044, -2.450039814661018, 0.6867464598328588, -1.5398352627944216, -4.534381709160934, 6.44244094386457, -1.0730211198771957, -1.49248110189104, -3.993512163034859, 2.533684381859249, 2.476301954051399, 0.7988742168010055, 5.880720839743786, 3.7690655620427944, 4.158701069798933, 0.6464710435468626, 5.528219600020418, -5.709711522765977, -3.0006855583654284, -5.512159290327671, -6.417427804560438, 7.216532442903386, -7.075857090081239, 1.395738550943565, 0.004270046162915819, -3.1324249082381206, 0.28297140249630354, 4.464616501992498, -4.560147809720179, -7.720565624359548, 2.269048528852448, 1.7002206104943105, -5.181834459579049, 6.471124118931075, -1.5297994797495824, 2.153598316351601, -0.8206508662497054, -4.111922331150236, 6.144939596179569, -4.092769536925687, 6.0026839274674835, -4.060270877392815, 2.9403264825519164, -1.3691234706838653, -4.943083713787674, 4.479524735332436, -2.6367433066478942, 0.823382607674239, -8.207294549680862, 7.034941713433293, 3.469650725125384, -9.441827589854253, 1.8884247243683925, -6.502895671426209, -0.7186156303675915, 0.19856162412476314, 5.647171425752583, -4.203903441931315, -1.1745784886083905, 2.7153315109404073, -0.9516492563251422, 4.123790414667193, -5.999180170652076, 2.7403276136028847, 3.091779506523842, 1.6546197483676894, 2.4082760365388163, -6.384916675106945, 10.371716839062366, 8.835007420880356, 0.7496545471594853, -3.9283442614232684, 5.982367807099937, -0.6131585020458569, -0.8623003909936626, -6.146859100616072, -1.6600367947417858, 0.5734682111539784, 4.787149035932495, 2.2374052144935077, -1.343698582903467, 0.046005310024710366, 4.954798976721341, 0.3659102725192395, -1.5381730254141872, -7.245504800830493, 2.075226377279041, -3.843445533431125, 1.0254383127503526, 3.9744651375207742, -2.618150510098724, -2.0410804158572993, -7.705438840507168, -3.4419125391538614, 7.843177150212665, 5.376502708693966, -3.174972595878795, 4.258209411900232, 1.11480489031719, 3.2837489349244655, -3.074047148816574, 2.7128565617621683, -3.174342734190225, 5.759699409096479, 1.36175724059366, -0.07098546887950166, 0.7302779408184916, 3.564970020518538, -7.646027447251137, -0.4554252248832783, -3.817516959632846, -6.949525874534502, -0.6286305208893075, -3.775093149159917, 2.8363537293689007, 5.030041527736162, -1.5374746188968524, -6.685474939377927, 5.299811139437127, 3.3650909515535434, -2.255222875678678, -5.733404532558256, -4.2988927309647265, -3.6357230379697407, -1.7074724766475728, 7.194634797396428, -3.712463981157558, -7.314747753683459, 1.7273616668714409, 8.511098170941795, 8.819715305537946, -8.991806406414256, -7.093502223511575, 2.436291443072985, 8.020014589522363, -2.736493341443677, 2.3575615011963, 7.398560791119178, 6.376225017540109, -1.7020156265938713, 7.281673967049033, -4.307970601069419, -1.2131276849653, 1.4770531434985528, -0.9034763027966954, 2.628535893215049, -5.668698734848315, -5.439225157936291, -1.8404838800393248, 2.3326934540807827, 7.768679499879151, 4.432909435841358, 0.12865407720151384, 3.822029761284917, 0.14506625805487078, -2.315014696611099, -4.676742255645026, -0.9887637388465349, -1.8237896986354476, 5.348177042022149, 1.8097839906654891, 2.904636150050723, 3.918709709532863, 3.352320484895095, -3.072303200169285, 2.11801653093542, 6.20592883267854, 3.2174806107805174, 0.3393658433640144, 2.2872107226655998, 0.3286127117153534, -3.478665589858184, -1.202319995196277, -3.6668489949279546, 1.2132760470132216, 1.5025062329232572, 0.16784700991722085, 1.6510691737644285, 2.964411371097383, -2.8075463903370483, -6.085942342528999, 3.2156134366140576, -5.845424112063968, 6.005182547385895, 0.059705173205998385, 1.6577567228967194, -3.202613362780276, 0.5440210144015973, 2.2057314387255533, 2.9668760411576134, 3.0225113370681322, 2.9583984276700432, 3.718029938064702, 0.09938643890317828, -2.373571200407437, -2.499180765631905, -2.9252757795650353, 0.016532826640411113, 1.2957937690076116, -1.0635744263318654, 0.672975388522572, 3.0444688311737704, 3.6560145575730645, 2.1458324311758696, 1.2013361561039348, -4.610724950344727, 8.993284901655723, -3.365115430431199, 5.11421657254695, 3.879812156172957, -0.4135553520335699, 5.026615837382906, 0.5600691863778047, 3.0349331689627292, 1.0225544794129573, 3.076232451360255, -1.486079229915442, -1.2819393663862089, -6.287225853922351, -8.13638130771784, 1.358803136908542, -3.6489348316353825, 1.4315398556172692, 1.4443373000802107, 0.8342923663724506, 6.875721874639613, 7.5812526384396515, 2.7696733383166703, -5.794443696812232, 1.418864725714407, 5.2002825829024655, -3.635335987768529, 2.9545986275711456, 2.2697775418286543, 5.575726548445794, -0.44500837937374715, -4.166058694711414, 6.412331217048276, 0.2036362355515759, 3.567663401441504, -2.5156159914073597, -3.3352508471500744, 0.9032620310076975, 0.9256149507649756, 3.099580508893675, -4.418422520057741, 5.099789912376243, 5.511000291472576, -3.4303166469355433, -7.897242949831492, 4.983973175944068, -1.4869687555880318, 6.911387091722129, -0.19208725223974232, 1.7919369821516429, -9.495028357615823, -4.305284273161841, -1.0729795827684447, -1.3305407522987651, -0.6250550106713499, -6.843247409013619, -0.7827468439767626, 7.77968526997167, 8.07189117207396, 0.3480278098080177, -1.4916934821318901, -2.0933030136430317, 5.774099076570125, -4.3837793481402185, -2.0511476455445132, 4.4422519360499475, 0.656148910939552, -3.106364409926756, 4.9113896787408375, 1.840121840890586, -1.0108847949614905, -1.190985657597424, 2.089653979102951, 3.121496755192423, 3.616621751547807, -3.3101463588380877, -0.3338431220538147, -2.6407309639975267, 7.4013608744404005, 2.871448033154929, -2.8660363626590803, 5.319863190295869, -1.7782731007326957, -0.4533902323952723, -1.4538992830447794, 2.255273556452776, 0.03900684928350362, 3.9260683739332722, -7.120029033321559, -1.34656166233004, 0.13483622678276735, -3.6988525221728437, -2.221310433003263, 0.4620372324944682, 2.1963373829712407, 4.073455351620353, 5.954194804521627, 2.386411640639825, -4.661190780382104, -2.815378635846422, -7.640447507119808, -0.08970769241817417, -3.949607991688844, -1.5345040648536166, -2.8562273185646982, 4.276873542247555, -3.4510474670869176, -6.758655203983662, -2.952702195071563, -4.130684749577266, -0.21129369206153362, 1.7080567334524894, -1.9326095700390944, 2.3856903995298295, 0.6799557755721444, 6.535383896866466, -0.803971709914977, 4.260557797124368, -3.882043769506475, -0.047546424388695885, 1.5232973195984187, -7.619835120466409, -8.156704943894551, -8.556297442636875, 5.731012695562259, 4.17512483213903, 2.0496951280815643, -0.26391827547780544, 1.2019835476337017, -0.03759779993325704, 1.0788600697537616, -2.5791714144632327, 3.875163795711996, 3.8607819154100427, 2.8340498544427786, -5.184390028485087, 0.1873616992464901, -7.185321990258452, -0.753008201830621, -0.5071683275624836, -3.0453061235148335, -8.152508083080061, -1.0178959128161778, -2.9839061912285314, 2.288991969350841, -5.222400980761389, -0.8505823052443982, 0.6566238059842344, 1.8001346700063094, -7.241817553899659, 3.2011222131310757, 3.644805346978995, 6.4238074883008975, -5.906810292968718, 2.860956760693528, -2.094860065341211, -4.821668405227141, 0.7417397165502584, 3.390744019687044, -2.029772378245829, -0.09556905851229491, 3.9696326171192067, -0.19414630007951883, -1.2255927136543132, 3.793971437454974, -4.772290852925376, 1.4910834319619002, -0.8904228263467469, 1.2049397739222072, -5.2271868571159565, -2.16488199616082, 2.1626665007846664, -0.7800483671710492, 1.1523267013422653, 9.150672585556938, -3.7089523572883945, -10.451558973173581, 0.7530882361618993, -1.5664681894348023, -1.5155476032390678, 5.733129072386716, -4.783304963689604, -3.041148801621598, -1.7808560251918186, 1.7948395662708552, -3.9162892452053613, -3.019887729356647]
BIASES_LIST = [3.6257838222075587, 2.00953349992107, 7.321096808596937, 2.2898484433069677, 1.112242710071139, -4.014588968124357, -6.596444138828417, 2.3199281722811174, 5.4302036130490725, -1.2098129019543027, 6.010668408049004, -6.9990089282414205, -1.7380691532027304, -2.4953245673013367, -1.155204634416286, -1.2375734277906836, -3.5332841945943083, -1.2205299136535066, 0.2068227950911709, -3.8076153777346393, 5.975348786889817, 3.2718348824722834, -3.4706215472392983, 0.4503113005621631, 5.190796213511932, -7.523814206738253, -1.726170155837058, -6.006612671024034]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

