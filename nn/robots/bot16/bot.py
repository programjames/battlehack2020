import random
import math

WEIGHT_LIST = [0.5667978156820749, 4.908338204824177, -2.3268277113624216, -3.555067141934018, -2.3277926910431317, -5.29814023805229, 2.8767632101117666, 1.8435242201465167, 0.8096225797040115, -1.1163183882649292, 2.589119200642814, -0.027334823463343205, -0.9087018430349918, -0.7516487090092603, 0.22826885402099428, 4.923428656619232, 4.674474771680907, -2.974941656300889, 2.838442089423232, 1.8248916377195614, -0.374800759908414, 4.348223061292935, 4.9262173556344155, 5.409877887852921, -2.1140994732165024, 1.608868458485187, -2.1898671129213176, -4.369682656337007, -4.911006961281764, 1.39329516125726, 1.3572576447044995, -1.1061935276049308, -3.3949820338807313, 5.257652109007915, 0.9962523306154203, -2.489878250806904, 4.147042955287474, -3.2900784905384697, -3.758321020353798, -1.0247423364073835, 3.835629524105774, -1.8735804178118047, 0.418982183470492, 0.16629006041151398, -3.2637779377300635, 5.726167781427967, -7.877061785175909, -1.0333478373897875, -4.607649803878618, 0.8918479268972634, -3.8426456431215503, 0.6687082504380032, -3.595614064921292, 1.8835741328981017, -2.240834594535513, -1.5919015949680206, -0.39698158495696034, -1.9844735721040785, 4.906418405508943, 9.868955111013106, -2.1795240845577224, -4.497188461668241, -4.313673598778622, -3.526301466799738, 0.7436847799566634, 0.2038378244183833, 5.359114528565914, -2.208067714238734, 1.2257513972192395, -0.6805919134766188, 0.43742110731840644, -10.351480692483568, 0.4950542253996067, -3.698347723681079, 0.039009485717634865, -0.9702341675350239, 3.377811115028346, -9.800865179690428, -0.07229916331072879, -0.5677832260973665, -2.410671907511431, -1.1077547097498452, -3.262764655781072, -1.2193298900800105, 1.0203700957646944, 4.793021017688007, -1.8285403752340643, 3.9866933711829207, 1.3597301657929208, -0.6826174702858359, 1.0010458824851356, 3.782927719570346, -1.2492024184750319, -1.0776021856536702, -1.5850919541671162, 0.5342644320347625, -1.7584100954663306, -1.1293830361165205, -0.6332704095006707, -3.6915102743901316, 4.122577515280615, -4.820485974101212, -2.3385691453334614, -3.5978193587960825, 4.9430780605753055, 0.7431256549878714, 2.691639660597649, 2.6902249600251875, 4.962899318111546, 1.8759797145151285, 4.3989575590630805, 0.6093935589115438, -0.528363304501596, -4.327951405366052, 4.455746589883498, -1.7226951799507757, 2.551014332371932, -2.7645425182847028, 4.553519109991727, 0.5740266418387968, 0.6318049267218676, -0.15909605919868566, 3.6070926817635436, 2.6140163482814436, 7.01298875858114, 2.4480505417832266, -5.380049811132488, -5.6345047696498956, 2.554021479885871, 0.06088398994260616, 3.620605025758154, 3.8531873259482463, 6.503160759543353, -5.739368565376177, -5.197244757712066, -5.152689116509137, 5.246470930322356, 3.506077802793266, 3.56570401748373, 4.550829681405287, 2.0846030777658795, 3.469304322224615, -5.234139910430568, -1.0522687902197594, -3.687340028768069, 2.518061731352075, -3.949172929595316, 2.485184876815335, 0.4527275993360325, -2.479221801879542, -0.42172990784808867, -5.096873639548158, -2.4209979401736845, -0.007683350535474701, -4.146806299701153, -8.68443737103018, -0.21588644826050027, -1.8144624144142718, 5.453998393756618, 3.8075204580733994, -0.941717104502443, 3.8369419467358843, -4.547633054748783, 4.484301796238108, -1.1193463690915797, 0.364911414952543, 2.106124152337396, -1.6999477626843347, 3.3753992612704264, -2.611846017941474, -3.4503963359680916, -2.426585286753438, 2.0684652566168045, -3.278035335431732, 1.8343518909426273, 0.19362888693145114, 7.300116654785966, 0.1373390491682802, -1.2357041999326537, -5.376538636948853, -3.224773803754645, -1.886267869207296, 2.1438259292437802, 3.6439994356625385, 5.110339092275653, 1.136265714309309, -2.6279168616164252, -6.107495226181896, -2.509368383261123, -2.129305336337022, 0.0846557742496241, -4.278693390476836, 4.576603173800785, 3.2493067381181544, 1.9136897662641168, -0.4322159002889573, 0.7536614253141162, -0.5301601798684411, 1.6734981495635728, 1.7519798853030208, 0.12809210798948129, 0.7154010957254391, 3.0368617585716025, 2.4166856884715204, 2.2474352768395183, -1.3292559320925286, 1.0346603007790627, 10.581289352420178, 0.59302348766608, -1.1300502723851693, 0.6122693809707801, 0.7605736175451446, -2.9350245437026214, 1.3092521031157864, -0.6551869994211956, -1.7558277259033637, -1.6055247459823687, 0.3398692969529162, 1.3090991683059108, -0.758683982256634, -3.916795140341949, 4.081346976002171, -1.5761923417459434, -0.9490804032671589, 4.25575054877434, -3.5297456510555114, -5.038665868479722, -3.320034970885728, 0.14030751186243076, 1.7545748106740735, -5.335104080556678, -1.700694208982897, -4.686277552648051, -1.639466485686093, 5.279795980840616, 2.3944526562345563, 4.265076263729613, -1.157237465009924, -3.6275788779164126, -5.937972046440595, -2.56700808719109, -2.589060116783125, -3.5910402626488405, 4.851237328663838, -2.5994655880220505, 1.2128944678976583, 2.604813017034646, 0.2158662138172025, -0.07529341982488731, 7.126240060914583, -1.5409178750467236, -2.1122224425018614, -2.292972665949994, -4.273111825498018, -4.8564058131901255, 1.015487746092818, -0.42136915026921806, -0.3568480577318011, -5.807466027664687, -2.4970059604098473, -2.7294294195540916, -4.581462800384528, -1.8268254135166688, -5.894410222921101, -3.076191942678408, 2.690620762929557, -2.3745207797697794, 0.6037214212026419, -3.7588328135212263, -0.5563423436887577, -1.6522048046633242, 0.16513490024452862, -2.890335260469311, -5.609082972216977, 1.527810513542045, 2.026457829959741, 0.20677281105222936, 0.9990842299335456, -0.7870541771014429, 0.3720292802520481, 3.950126639067427, -1.035401502711692, -3.8970799846641553, 3.74459855831975, 6.159570233580345, -0.07917213940706912, -3.3775473857422664, -1.8272798231013894, 2.6423028368443484, 1.6943677632865835, -2.9755453405828343, -2.6967908599577615, 2.5539950959790354, -3.5723868003797086, -2.2673025979048322, 2.376006206966054, 8.829548171594606, 5.946070304355231, 1.8019903461970834, 2.0496865954634536, 4.559294190755526, -1.867392832395337, -5.852193290275107, -1.781638289348637, -2.3696851839089947, -6.856551201133905, -2.8703119773900907, 2.28833148780096, 5.054910774044447, -1.4194556391684396, 0.678443266990547, -3.9105884517740015, -3.5904988403998326, 3.265310099156113, 1.8473587458692375, -1.7824959516576782, -5.654068258360328, -2.415777526949053, 1.2945874520552698, -5.603640358801093, -5.319616392284194, 1.2660831052198185, -6.791157586264794, 6.395090232819504, 3.442689881272795, 4.59865939766969, 1.9952469554019634, 0.28016125065230446, -1.2740359145764428, -5.55153942607896, 3.9592319988316538, -0.3347044457691171, -7.432027820795182, -0.10046038205383956, -5.03033302726668, -0.4915894028960782, -1.677753239235629, -3.4634455179501114, 6.50973381688542, -6.7866746635709925, -3.2325782609482925, 2.668565690095257, 1.4726374213116895, 4.190562908207035, -5.694158607393422, -4.640594938460633, 1.707026273873874, 4.804920348038164, -4.854773755703562, 4.663714444766321, 3.249115883068578, -4.007098691524276, -3.3965899354157365, 2.310742233351283, 2.345416236975851, -3.3993962044342707, 0.03870350474071095, -0.012029874517640322, 2.818945762006405, 3.2383468192859453, -2.238896972280336, -2.816396734195765, 4.9185073454971455, 6.043974999364562, 5.289585485778799, 0.11833770033363872, -5.837682746510554, 4.264232305253286, 2.604958129236342, 0.8518870895565915, -3.20780335182373, -4.70354356931215, -3.669265431699825, -0.8838901184177872, 0.3372173961796108, 2.067387386414399, 3.9279522650350542, 0.6707887822858094, -5.638412474289746, -5.256731452590492, 0.424436210090414, 3.419666319262591, -0.8773900866794433, 3.1665420333925667, 0.11717272738255825, -2.8681129637402445, -7.249182566126134, -7.877837805579605, -4.592615753324061, 2.464265200349056, 5.604681097989135, -1.7125582997944535, 4.707161427102189, 0.5143849893528218, 1.4297389632261324, -1.2912583344934867, 0.3527834155523241, 1.1870060738779171, 2.2532589190157384, -1.4906889943106365, 4.289283990487933, 5.543126194092673, 2.716891117657494, -3.454553636760842, -1.7281272708748254, 4.548246098313126, 0.7060019853620344, -2.146949170786828, 3.8627060457360898, -5.5566650286995545, -0.29721322343499296, 0.7780996579225558, 0.9052288507025202, -3.28497839356654, 0.9746505517934426, -5.6901062647564995, 4.151145697908458, -1.577113151583325, -0.7149037398109326, -0.987883954586748, -7.395335062838939, -1.8514040060599444, 0.7614273507009693, 5.219276299865673, -4.337170082573399, -1.1357584884776928, 4.085817553771878, -2.7532962083785795, 0.9181978135245801, -1.9373960251548286, 4.386676879295826, 2.7866447195448965, 2.998024101714913, -5.903944710254478, 4.94186716388326, 6.185012277689423, -0.732273302278519, 0.8087208830356417, 1.5790681417841905, -4.7627226675099745, -1.603877910794697, 0.6557809736269913, 2.018223347652527, -1.8300830183608616, -0.38163292893491285, -4.326140570004975, 0.7149301100348412, 7.989464411139499, 1.8124798210681912, 2.9320388419339887, 2.4238566172091387, 4.5228631586227355, 4.93090162394042, -4.356026470412879, 4.690204146100325, 0.006565712851680226, 3.6361228187278627, 2.5581486775206677, -0.37429748241648053, 2.5168960684358397, -0.41733124686414036, -5.913647154611648, 7.704923606231793, 3.6836697553695763, -2.0402491001342877, 2.0723082770205097, 1.4908018445312883, 3.19887293024845, 1.363504432770044, 3.0497700286922433, 5.183097579640612, 1.6669515426241932, -2.3275352193803287, -0.1051608121749049, 2.487182007916365, 1.3411052693116392, 1.587938674115681, 6.851685476406428, -4.267397125604561, -2.454676771689444, -1.2009903492895964, -5.097906045852624, 0.5685162499015091, -4.350076701512727, 2.694414557348702, 0.40293998252179825, -4.401245031878587, -0.8252924683094275, 0.48025005894914496, 6.26043235293341, -3.2725951245161915, -2.871080115682659, -0.6828115228743208, -0.23456209914869405, -4.86909279138904, 1.3586678079580947, 2.6187036055395305, 1.835114666168564, -0.3734979163285318, 2.7196623500766144, -0.29305091149508766, 0.12152149850107954, 1.541209004156561, -4.740419233240674, -1.661250834704398, 3.6127599379558157, 2.8710363044454295, 0.502357429037652, 4.26039090420359, -3.0532854856887437, 1.8173818659875014, 1.0478832975037966, -3.780118203533542, -1.7862926730161934, -4.911090355873575, -0.9735912297677911, -3.982981132347103, -0.9976469804980834, -5.976259859517567, 0.288151530523997, -0.04851708359303237, 7.024119764787258, -1.1920851049922472, 1.1190364991333797, -4.018816015630611, 6.959990824565947, -4.0721819287906165, -4.129043362730882, 2.0511672314013443, 5.111400804611414, -5.499530806812181, -6.406863697006403, 0.9084322024857319, 4.223930951128767, -0.900053499133534, 8.070108625877266, 2.5141047697463654, -2.297853342290748, -3.337293971049045, -1.9856563465666077, 1.4571905432517478, 1.0690697217131278, 1.448860721682954, 9.019761339733472, 3.8077322528430746, 0.5619685943020198, -1.2626517396619512, 1.8062201070183528, 1.5164376445652208, -0.5391790547291678, -0.28129246417085413, 5.974838469368136, -0.10848539292555699, -2.781500562130556, 5.422392618445938, -7.764770834051906, 5.26333381818836, -3.903328440679942, 3.4056430778580795, -0.9984282495117914, 7.797830853040535, 1.8882227372197233, -2.244642185093248, -2.184029914112555, 0.04282954916870526, -0.11264881189770144, -2.4556889138202944, -4.417280401887399, 2.2149818159493524, 3.948768104242793, 6.044499388681935, 4.886068592594391, 2.2568715461239504, -2.1617045674452253, 0.029900526487618796, 1.8453248336326173, 3.7011928447196047, 8.946450689818352, 0.40502425005018666, 0.22989773116801854, 9.613274045407387, -0.6154234132525789, 0.5411155021346128, -3.1892851796212343, -2.5486690828650724, 5.757516743367804, -2.3405127732933466, -5.444075760362264, -0.2306660986208903, -7.359351341010428, 2.4162308289886156, 3.0933951510635245, 6.11772988077627, 4.947278945821772, -0.9593306783197775, 3.795220778710525, 2.929195771597283, 4.11820294967557, 6.8005791071933865, 1.394985225423714, 2.3020954853017517, -4.2519139466055735, 2.026284456132912, -7.739835392803362, 2.1518686982217634, 1.2577635243510286, 1.217042577617294, -5.139633284355468, -4.545871830008419, 2.3657892900195714, 3.0343156451914632, 4.269849308153195, -9.155608942116794, -2.4178456534353128, 7.438298505529841, -1.356888320885077, 1.4479725915601174, 5.818958606943678, -3.4631319796730486, 3.160200229462014, -2.0112118554283436, -9.983310282341055, -1.0587686273403547, 1.4792547933431308, 2.890572173683002, -0.9149819031933655, -0.6967774727398476, -0.80511754183558, 2.287322877209685, 2.4851861426984287, 3.229920404311544, 0.28437210560874704, -1.4200750325630969, -4.285487843419625, -3.2253625683019056, -3.4155219413457916, -0.7097062849959801, 0.8640624135978435, 4.214080623890542, 1.9494014334238488, 3.189952039713152, 3.109794584445827, -1.435764590277402, 0.1567072044393879, 0.9567517569856097, -3.093745135928023, -1.6410185189885795, 3.484969029370112, -4.015752996401721, 3.368555113724872, 0.5619931303528259, -3.69401762869482, 3.4336680044796486, 5.923131864565977, -0.4425924563825056, 3.2269839929856747, 0.3765589291861604, 1.8477699259725595, -0.9068791923978138, -0.21409113129114746, -5.265826185306793, -3.354956446950806, -3.7059947090106222, 2.3486337581474848, -3.9070249964221997, -1.5350886500394012, -1.1393678563132483, -2.062568323999008, -4.915244614777686, -3.86743867021854, 1.9829069961337547, 5.683556965952355, -0.2004308710392106, -1.8325188492433588, -1.3580224889124437, -4.28337076161656, 2.352493436638244, -1.5512639758113167, 6.684056962859508, -2.679762193252377, -4.752124160744145, 7.887823096099091, -2.046789830674083, -3.2915739656835186, -5.167885471107751, 2.9923864985081683, 1.5256698462815608, -3.5639004529392984, -1.3623759048370754, -1.5979244356552451, -4.79848465013047, 3.33130551336196, -1.297646151338796, 4.382729389692635, 4.633916484586766, 4.286289725377922, -4.916427022848212, 3.6535119178634936, 0.23958157753709167, -3.4085363504204613, -0.35346696303468067, -4.7401504671050825, -3.5398206726069397, -2.07095552210466, 2.5163202736587804, -3.408063844442911, -4.687096059249207, 1.4312986731328876, -2.7649532437733257, 2.0065015222226497, 0.4840844015999771, 1.6624813721204845, 3.965502437205165, 2.918409827929408, 2.785980296085569, -5.864913167030791, 6.990736454040349, -1.3552074848047282, -3.475905054470934, -2.8525092846360782, 0.1481484011787714, 1.4821085451986247, 3.0335205579291062, -3.5958904393230116, -1.0581686666030496, -2.7529567311522736, 0.5923641061190804, 2.186532677231644, 6.123282623210979, -2.7639953835497124, 0.10227622483003396, 1.4711591424065957, -1.2381301372591091, 0.7327128549018563, -5.731607978689217, -0.8296572924019286, -2.384727747392413, 2.359177019861953, 3.7671665317216236, 6.921965807429421, -0.8711493504947335, -2.2304542208185274, -7.977506639854969, -4.311199487929457, 2.999044808405553, 4.23008564141572, -4.423520319110896, -1.7744687877126155, 0.949140944598626, 7.590584596111855, 3.754537634921429, 4.872744292455711]
BIASES_LIST = [-1.3840185138925614, 3.7126376668115397, -3.6106410745264865, 4.802256139818329, 6.329449031922996, 2.7715697903547456, 1.1068262293122766, -0.08362757186720962, -1.1159782368289324, 2.6460528610987253, 2.1198519313823487, -1.3792785325812886, -0.009511578167494367, -2.6352191186076808, -5.507910596323412, 5.269966601967504, 4.808982992256067, 1.4641641658942997, -6.57315869650178, 0.008080530525104958, -5.079133735886736, -2.8028897743854007, -4.075484295584852, -6.096074438928667, 3.9236267402420797, 2.6446089312868137, -4.03229905946365, 2.926603347518451, -1.0847117178177825, 2.3027398957126923, -0.3383734151213939, -2.2902993901654267, 7.137086423808622, 1.8436793601966293, -1.6800961608692002, 0.44647569799755643]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

