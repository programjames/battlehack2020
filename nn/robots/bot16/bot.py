import random
import math

WEIGHT_LIST = [0.1629812964920463, 4.094993239814384, -0.2764223507185082, -5.131813475387772, -2.7233514710891873, -6.508477985978088, 2.5163082707008826, 1.9381021484664664, 2.6635779419709102, 2.221317280248799, 2.7310768043539078, 0.9396300238739064, -1.186869151877787, -0.336960143460596, 1.169532084901034, 3.3552735621585974, 4.734664666613385, -4.280298532261452, 3.760914740826342, 1.5363833362488215, 0.21964968029146048, 6.371161196864776, 5.757582402921027, 3.635103739908762, -1.7349651627386025, 1.459528242254184, -3.0091196713628277, -4.174504131706966, -3.8109782080964365, 0.6257151351763321, 0.6992481679586562, -0.03982047064069327, -2.43872923837914, 2.3957503975410592, 0.07604424554255051, -3.2383022908565913, 3.3156227150396864, -2.487581340973849, -4.77917838854696, -2.1673326019379457, 4.9418536608180075, -3.01097489761486, 0.07854323109506578, -0.4628628528110057, -4.287728831983073, 7.427471275884061, -6.713373309075301, -0.32162846515791177, -2.464303770522683, 0.3402713932140169, -3.8727442956275766, 0.39484069267021105, -4.057070056501694, 2.0473685912890005, -2.8363597006221717, -0.8659507467826895, -1.4926123428448523, -3.3022791403327303, 6.205086043731031, 7.813372971633649, -1.1226240191869885, -4.129886216901642, -4.024892518070757, -3.668628416490203, 1.0899082830468858, 1.0337177099624975, 5.783378234943802, -1.2038864125686195, 3.3900057000615016, 0.09721243973305849, -1.8077699885171328, -6.7825951908875854, 1.479409812652385, -4.899263520836383, -1.592444257358797, -2.807236272016808, 1.6295785798069145, -6.837928250798848, 0.9576720578003872, -0.21445499487643238, -0.8794945607822735, -1.357964184857791, -1.8066997403688503, -0.8356244554508605, 1.6138186010650428, 3.633155898947865, -0.6804951459092913, 4.071905657856302, 3.4053698602477738, -1.3100161190370812, 3.4978651622200667, 2.4920655665601794, -4.481589305172234, -1.4962150062974975, -0.26874659079872387, -1.3658338297979118, -1.207098585355025, 1.9708890490268507, -1.7321129166575315, -4.174218791327564, 5.352870793672611, -4.520428229708291, -0.6273650145437137, -2.0735277237413436, 4.628257450854273, 0.058819361312971274, -0.5401602488794643, 3.254354609539604, 3.741227587494068, 0.646879936468796, 6.836016035041558, -0.19779971176828637, -0.24619999939779058, -5.6181867847255, 2.220817265298293, -5.683679242221817, 4.167826366557956, -0.5170505391476377, 3.7210299838600314, -0.11468105445332488, 0.25697847881113467, -1.4522728023137637, 2.5431983912368565, 0.7547331974721381, 7.516878423066778, 5.130750160155033, -5.068350775842242, -5.951801144288915, 3.334124606089971, -0.14058566421107743, 2.5819246027978586, 2.095345561599218, 3.9420412815850057, -4.11967259530871, -5.6598509068396865, -4.612460876063025, 2.390955561373326, 0.9655961263697816, 3.6041222678800606, 3.103983476006009, 2.414090116703264, 5.155438550212503, -5.710831280879059, 0.18573000041110554, -3.366503426940607, 2.5826173636954843, -1.2315876328613813, 3.6738492199180257, -0.3874864084795675, -4.761433008734006, -1.0350631897429126, -4.855119213595608, -4.687736732138046, -0.2316986741683117, -5.333710997395781, -6.099512281597928, 4.635399754563096, 2.48516936648389, 2.313430664961681, 3.8857447874650166, 0.07377670055358299, 0.8934355755986603, -6.927069939901402, 4.477639066253342, -3.3495613058592033, 0.16727915538462557, 0.05310835528856206, -3.2947370051070513, 2.355486687275884, -2.4624736054041048, -2.894704540249022, 0.5558248352528627, 0.4909737215587464, -1.3590264257905385, 2.9221458679767656, 3.7373057502316662, 7.98514036913263, 1.182361210045725, 0.3774505380006372, -7.87451269800399, -2.5188646968892865, -1.273500910796995, 0.09108294421209662, 2.0302383627985465, 2.173562459114255, 0.5296452502238211, -2.754220935833175, -4.793305108898718, -0.8595892042400115, -1.475039256802861, 2.507356534467858, -4.59257226264617, 3.504344062604983, 3.516155810917601, 1.1771874313884663, 0.2950833374817907, 2.257020752879742, 2.513581969167318, 3.8243963833254746, 0.47715020612855885, -1.1097566434569872, -1.2930518911247053, 3.027856452036742, -0.16955975467698292, 1.125998089774276, 1.2582675150225215, 0.8062726835486096, 7.85259740398396, 0.38940854013969295, -3.7613106090863484, 1.1488232398481237, -0.400998651052235, -2.085399084875408, -1.2411185341429343, 1.9452563536008651, -1.946882089472392, -0.47091833775729786, -1.5862909642535206, 1.462645800176671, 1.053345828765992, -4.391658976553485, 0.46875082391269696, -0.46899814339172585, 2.373033072483, 3.591024638841594, -3.2821147800289543, -2.6996358011246544, -1.748461923368657, -0.5435905098858097, 1.2250438577807925, -6.34046361814694, -0.6981875006862996, -5.061656529461084, -2.418016662596563, 2.7007514832908392, -0.2506055097247458, 5.070333005405719, 1.5339051798624834, -2.6460277287751506, -6.835495390310548, -2.186105456633887, -5.727357188959612, -4.811570987719797, 4.9042497910912815, -2.1522809284815745, 3.339034727207574, 1.7580032736336397, -1.2458543245548912, 0.9822652405942718, 8.003955661612627, 0.7872372568716581, -2.194132567025684, -4.415240396001022, -5.038035068815075, -4.118272809645186, 1.4382098951109143, 1.002817435371873, 0.5732275459142169, -4.477631291282867, -3.04412391074524, -2.9171852746010245, -1.922029401948746, -3.779938498612452, -5.012490984089053, -1.8549016409023742, 1.0356764330276191, -0.8979321071072359, -1.2831984626585653, -4.694577914013033, 0.11569997536883525, -0.9789808519252001, 2.3527692985261957, -4.179773320396528, -3.1015417418349243, 2.130391563674266, 0.4829570133015064, -2.6260943049647993, 4.276786053069561, -1.2211399961916636, -0.6106153699441684, 2.4681808342694476, -1.7693539018935318, -3.79735835346724, 2.5054871194664976, 5.755842357368952, 0.8527431633118376, -2.7605116415315956, -1.6403886908857408, 4.224910864208232, 2.4641613754797005, -5.704804188873576, -3.636900941921563, 3.1849079304679444, -2.7734267851435463, -1.4567733758739028, -1.0583754113804196, 9.223718726442952, 6.29841549162548, -0.5535673277166437, 4.436803532806173, 2.3944911389052628, 1.7950461254971546, -3.46980571655748, 0.5196523783638693, -4.727376803330327, -5.097136990704598, -3.4332649500850585, 1.6100955830316233, 3.113199228422392, -1.93626478143811, 0.9880586668686733, -2.750080885843425, -3.8971358390271353, 2.7867866932839354, 0.9153827428191454, -0.73132489874873, -2.6648186622745755, -3.4960043420260805, 2.0760128566277327, -5.55718484151505, -5.0239965766402195, 1.5296057085965948, -5.909769532779504, 6.070617392052915, 5.275272228572548, 3.411897640562744, -0.5880496072371755, 0.8796178067694487, -1.8821349147595532, -4.301595446860405, 2.428616513141788, 0.3736119705523091, -7.21069904397326, 1.9175600903560421, -4.867647654509186, -0.28310521187676585, -4.395563840643829, -1.7203022361320135, 5.745436983023679, -6.378271857093747, -1.0394072738703937, 3.77378038841075, 1.7548902183736934, 5.007981318077859, -5.604888449747735, -3.229739131162299, 3.6505668731658965, 3.7686001902675237, -3.2050503232506764, 1.0400754486362063, 2.8503804762736014, -4.872559944165753, -2.8730880619587342, 1.4963512263002845, -0.1644077487970561, -2.512687661373914, 0.14310686018732688, -0.2734427440265421, 4.25552023042371, 2.8999548535798247, -1.2915757547202917, -2.5506857431872367, 3.0418657661487165, 4.488722329805398, 7.434228570649708, 0.68043444064286, -3.457415814686657, 2.8298643724787533, 3.4645760952097673, 0.28800010853975033, -6.412644861087573, -2.4250823404588067, -5.136562102464199, -0.6851466725787891, -1.865163819616834, 3.246124246340589, 2.613242546670462, 1.4215592674166722, -2.128344674872089, -4.96012068694647, 1.7156547578429455, 4.224992911480234, -0.6771236905314035, 2.342958284526564, 0.1311787717376094, 0.3082583650713224, -5.209864023541081, -6.168317309295601, -7.110504904172115, 2.2895556419406935, 1.0001755943208606, -0.9121664284849298, 2.6827811120671567, 0.07862693332115445, 1.6877278158293878, -3.7695677932178002, 0.765256830943668, 5.352259021729271, 2.18715308711348, -2.1746694000122857, 2.2367218136968874, 5.9059876361594, 4.479682296072259, -2.1841090809909165, -0.4169868023003529, 3.9786736435554673, 1.639069246592237, -2.6117438951936185, 2.246018242327806, -4.074861767384899, -1.2178996691801984, -1.7685021332873376, 3.9962883087863696, -4.073147937447943, 1.875797570371443, -5.434446991862, 1.950523737188742, -2.824262012011914, -1.6731031940588343, -1.9114858141010673, -6.3321693633431, -2.0899226005189178, -0.5346052111014183, 5.749028933674113, -4.278943241841247, -2.2185809562090277, 3.6853862033516753, -2.943499746602675, 0.44268630930807396, -2.9348056748671842, 4.6229954205923605, 0.6939380444834427, 5.56940510552888, -4.657534207275085, 4.841182365633664, 4.4333608864551355, -1.9556061275781307, 0.8838922412703645, 0.5691066363076871, -6.831875580708653, -1.2324412780349556, -1.0071561330245178, 2.872641991805701, -2.9313342696470737, -0.4416456058599556, -4.541404782843575, 0.2710181348859775, 5.612705878239281, 1.6383260499578123, 2.49975114896509, 0.7920442673160559, 3.3016649162416565, 3.2711913867166196, -5.190373311346343, 2.0067713058858194, -0.7330892780053594, 3.273952006353367, 5.873382303272283, -1.4491279584498042, 1.279624306337242, -0.24282209598038473, -3.951491252091852, 8.896971289074163, 2.8092219975181765, 0.730339532164741, -0.5255825430013954, 2.7373914666117463, 2.7322662848020163, 2.3663358431616017, 2.636486870941347, 4.767681824380935, 2.0332693070302787, -1.6505917280587865, -0.8521738712684017, 0.4623693801664883, 0.12888089312686368, 3.554757976607438, 2.9714843930604404, -5.932287175200379, -1.3428720147200783, -3.2526129832423725, -3.116905643704128, 0.653751502322981, -4.865917801875819, 4.903515769009507, -1.7781748509593511, -5.3220111922752205, 2.0292349250689554, 1.0448273219053177, 6.581643664494103, 0.5274949261001864, -2.887817356422246, -0.5470606897304355, -0.2284223582954431, -4.1578433340759595, 0.012407152718137748, 3.5417713475346577, 1.2673192411454464, 0.2829085388238386, 1.8917817360012013, 0.6473981732247496, -0.6951881832961466, 0.6426832495030617, -4.144556923008116, -0.9620861902642779, 5.665013185039883, 2.115779515835576, -1.0936287557575426, 3.8184514551648476, -1.5336323584561653, 1.984264449500861, -0.17557127240618908, -2.593056381023093, -2.63711749364027, -4.74232971035611, -3.1784894536332953, -3.926190562899817, -2.083216594861046, -4.556236408071866, 2.2363653247066093, -3.1765062601531575, 5.072350207716709, 0.06377516510893955, 1.4375699707460927, -2.0141807725052194, 4.9681383740473875, -3.075738552441929, -1.9474935690508233, -0.19508984697163778, 5.39668737898013, -6.249341222107137, -8.523521422968797, 1.9065681666484506, 1.4863465831364007, -1.2736983102721888, 8.635920390218958, 0.23696902181503954, -2.8139519022249524, -3.4768878285123574, -3.154561895673207, 2.1550289921797505, 1.6191566217541147, 0.25907334740603183, 7.516016600047042, 1.1777130411816126, -2.2125556446562715, -1.6582993151024201, 1.2927928143853267, 2.0336205363119695, -1.0295148526764901, 0.8355992366502374, 2.740755529490082, 2.02431673487232, -3.026260360601916, 4.611477131686296, -6.7427522734241085, 6.204799683401547, -3.2892892228363175, 2.5539208935868998, -1.4060771240805958, 6.1870825201960375, 0.28712804929382596, -1.9062831320259501, -4.725249097950796, 1.221666031558434, 1.3936760794543495, -1.4397562643883537, -2.9779722152345878, 3.132241613512236, 0.6170629437082458, 3.6648301975393274, 3.692331997249953, 1.7000962636821617, -2.0047246732703647, 1.4409710899812982, 1.7608630932063587, 3.159303568829306, 7.61274060286811, -0.3826785603309797, 1.1992635197171886, 8.230959398498822, -0.6573313105278261, 0.6270648171696407, -1.7070135533763435, -3.8900042622654887, 5.958776885420365, -4.599439538615742, -4.662746718248126, -0.7777133109584689, -6.834156049571222, 2.990339255925112, 0.16415306915582573, 7.099221318061865, 6.269186308833401, -1.8118080815818305, -0.3147585569396384, 1.304167144406942, 1.3849801953783576, 6.123479218252436, 2.161776506002523, 2.336510774899841, -6.998291349104131, 0.11841928141777647, -6.323610673324807, 3.489775035241374, 2.296664798821707, 1.412888639514581, -3.8200550077332722, -5.711884226241631, -0.13910813951558598, 2.481525069959399, 1.4014525925606098, -6.123253979819864, -2.428900968574567, 6.0006698467383925, 1.1768656665756825, -0.08127248813672061, 3.513367855042101, -3.521024482084088, -0.3493361093050422, 2.088270299735006, -10.316228492031529, 1.1211490045389074, 2.6142273766562933, 2.4033139330970403, -2.2371055882830877, -1.5084360775311279, 0.011831433890758802, 0.6221419804216062, 5.006741422124413, 2.807393696520588, -0.0034484262879224126, 2.9107110236233202, -2.631000471567079, -2.84560847902299, -6.232645592039134, 0.6270793362244627, -0.44295539267210815, 4.794844348285125, 3.012242284350238, 2.7233896096419734, 3.250080393373654, 0.10026290959786444, -0.06359993334304337, -0.7120742250886354, -2.5426476692819273, -2.522836480307614, 5.868493278056132, -3.011024507209313, 4.769503960029856, -0.517946938109111, -4.132175302029483, 2.052595868160661, 4.104269797191495, -1.0714101475257696, 2.560885013412978, 0.09779784475327524, 0.5106200732224992, 0.5695713126011863, -1.0644253885780015, -6.073668784884372, -2.522431773457587, -4.753871460166932, 5.904076564577549, -5.195711533133572, -0.9022784093762994, 0.9358122385809957, -1.040466139034835, -3.721414290020733, -3.7860589832228024, 3.418616364764124, 5.0857104206733545, -0.7892033677991546, -0.9703493759600414, -2.8744344544471003, -6.909121353950138, 2.2058707130311066, -4.011305063541216, 3.4104442982698897, -1.5385475190966849, -5.1241936911073225, 5.19821069802093, -1.0117974374909713, -4.322525939099659, -4.387853788746507, 3.8645255447450806, 1.6639501309041043, -0.7109285591566958, -2.486093731176675, -2.2140416569980985, -3.3377486878037246, 1.808286115573857, -1.1728999655250654, 2.8272801387477227, 2.6696606176537667, 3.6691494715151745, -6.1163233793525436, 5.776318721632893, -0.15933829726969528, -1.6734950667399981, -2.392877847554414, -5.931572460266348, -3.274682565840446, 0.0507910208131217, 1.3364931258914003, 0.5112764516701169, -3.286032034765152, 2.4335989779181846, -2.3470393387704567, 3.2238965882164266, 0.2937607260533768, 0.44825049516735227, 4.647030643119752, 4.292130767720399, 2.6230169467638325, -4.19739438400527, 6.2950543807388035, -1.8896806127998669, -1.4702386934191671, 0.1339244593912028, 1.2815284606335124, 1.1654015538003524, 4.36048508534766, -3.077694062077568, -1.3405281370926359, -1.356161610543369, 1.5528370867033718, -1.4141456819352567, 3.9407939993605376, -2.330167636887304, -2.1853520566079445, 0.2399119925734179, -0.429495578837666, 2.2430870237838976, -2.9871326067527657, 3.309506188020677, -2.365527365783633, 2.6349406548716168, 5.305726860471385, 8.116944005277514, 1.2191587647726356, -3.2267131032614595, -6.519104112224939, -4.445218070931993, 1.5436078611809454, 3.880954962615566, -5.610519197593523, -1.0239117558532327, 0.667278229251421, 7.381459871750337, 4.689263724277116, 5.216039785301541]
BIASES_LIST = [-1.688847151967443, 3.2071509999814154, -3.128223210901951, 4.307753420731597, 4.466598641555403, 2.643874739697641, 3.158433401865774, -0.8400220683089261, -3.2085358521699052, 0.8347854817379075, 2.913826692427362, -1.7654339868799027, -0.032803397817422586, -2.143408516126474, -4.002082009801735, 4.142781085796409, 4.165741267285254, 3.1810861485554494, -5.223741069208038, -1.403671919472874, -3.136743813554042, -1.9607722843634412, -2.8845263578425673, -5.610071968891669, 4.798883391223006, 2.830189478054142, -4.101269821629298, 0.9215659503782849, 2.498426572574731, 3.1074531310302467, -2.75381431068943, -1.045499877261255, 3.96661348123385, -1.8206042495850014, 1.032420937295715, 3.2587143621211885]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

