import random
import math

WEIGHT_LIST = [1.247488347916999, 3.045767935093938, 0.39446936129863874, -3.5378429690502706, -3.0447585997361353, -5.9134521732832255, 3.109197419175378, 1.1681386370066504, 3.098640443607036, 0.40482075250089533, 2.1012861550321613, 2.041139996274503, -0.9428718259480131, -1.6252837858232065, 0.028507737061119087, 3.286460166329972, 3.9557370331619195, -1.5297344898458138, 4.018826003602378, 0.4107221102176284, -0.48058832321265044, 5.146546109241947, 5.734710760072088, 3.011951020211929, -1.2770992904492877, 2.255281271471488, -3.01697516173589, -5.609744730265691, -4.002618424037802, 0.005528291595032542, 1.686652223146683, -0.05511791352529283, -5.9699660433143436, 0.9332669498091177, 1.6263662144134647, -2.1158816718218123, 3.7004525325559356, -3.590394976956035, -3.13171805164274, -0.27990357831754853, 3.162188845298486, -2.8762524661974185, -0.3975058922278193, 0.4263694905623072, -4.677750206836551, 5.113224404705548, -6.49884552441703, 0.445324707696527, -2.5671994887644405, 1.6097754452457993, -3.7766329424182112, 1.0239838018278657, -3.1139641265496714, 1.415180281498544, -1.8448896280659535, -0.7482110182889069, -0.4780421678085407, -3.912620013289227, 7.231150499036458, 7.31692180042595, -2.022795174707075, -3.9691030415190167, -4.303893661835984, -1.7446608284873029, 2.098803669369108, 1.9872507047295924, 6.00676024175112, -0.5335309124929182, 3.558272990408411, 0.45454164230259875, -0.7563762056266943, -5.401462688946804, 2.084091638766178, -4.530277145029639, -0.769405028813563, -1.29780926900052, 3.052478213774961, -7.436044985192766, 1.4076899380227168, -0.4540308459284176, 0.15770229856175133, -0.37631840292121654, -1.8404566006561538, -0.8311108861750693, -0.43163976318143205, 2.5949297979352126, -0.33214994065507597, 4.221995560704832, 1.4769574329641042, -0.1385938952232859, 4.0045098100999965, 2.115181543391682, -2.5766598167627364, -3.673442668858991, -0.11094543911811205, -1.4964925977835724, -2.2393371291304716, 3.092167389021795, -0.5822211606895673, -4.610215293875375, 6.678087723998474, -4.385550826115935, -0.48216460003372563, -4.189085997637088, 6.551797292945628, -0.44967451134714453, 0.5033657677098202, 4.884787731885231, 3.6081663457867794, -1.4022951952899265, 5.150334125758885, -2.022436201710822, -1.0473901045235403, -4.991679129669973, 4.552462837192346, -3.380216304995201, 4.447708135113575, 0.6755675489417321, 4.151733873837789, -1.3848372724370512, 0.5430630316829113, -2.459478801136574, 2.2233899592987347, 1.2188293767901128, 6.766192759635113, 4.13494319466145, -5.420949239965058, -6.2257746157722815, 3.520178840029862, -1.6250702588088322, 1.703116626813145, 3.2492457982896426, 3.529937897788317, -2.8011848511537956, -4.126968831283181, -5.072171433297951, 0.9325927799562075, 2.4086165246414275, 2.410440556946654, 4.082742129059637, 1.4758414086225091, 2.3555258613712597, -6.627053525628332, -1.8846598553437734, -3.0030262971803747, 3.0974049346819026, -2.2900044797246406, 4.369516462815358, -0.2416187513939182, -4.49288945706637, -0.6216449002102318, -3.5811305523349337, -2.3239375638002224, -0.9983607251829496, -4.732610499561729, -5.601473861404104, 1.4488285232823594, 0.22456546521977527, 3.115789310253138, 3.0423571811235792, -1.7297167573297532, 1.8552065366587671, -6.443720179813151, 3.9509063184063073, -2.5888052550128933, 1.295668919389664, 0.5769514685716883, -2.2596476618554746, 1.5201022597094145, -4.72760701990727, -1.2558606887742874, -1.304032122223505, -1.3850004010540307, -0.24606364513389178, 0.6578687089856512, 3.7252831413914933, 5.480099014995875, 0.8595468611424721, 0.7181799812374101, -6.892294783553564, -4.371851874807977, -1.4661199236384819, 0.7391139732049177, 4.474219908226917, 1.4933271529809935, -0.39833828923107706, -2.190596221877259, -5.088963620953265, -1.3698097742228412, -0.07655979463205287, 1.174841795183454, -4.730962438453069, 4.998959388351366, 3.824802714155499, 1.457148711212823, 0.33151283446997715, 2.211039008592087, 3.0434644752041446, 2.4218761991177815, 0.4171316572918191, -2.4922779873033662, -0.5690797248692457, 2.9777465803803636, -0.3540880670173753, -1.3971109432714959, 1.749276741184394, 0.8267855582487826, 5.780762322230066, 1.798126546449434, -1.6582111260770576, 0.7800272249786158, -1.382825311129703, -2.03066211495788, -1.243442934686667, 0.29556950702694995, -0.8375450608760233, -2.6600663301481697, -2.683633709474899, 3.5674279597498204, 0.8114202733471427, -3.772098824704109, 1.210535535070954, -0.8066446296110745, 2.5508927530678553, 4.413921926356619, -3.011423527504475, -2.5481420742410403, -2.6270070286993086, 0.6570748777937592, -0.46800418872205896, -6.794588182944536, -0.9944604650950027, -3.8376048315111038, -2.021722070639589, 2.9821729560937515, -0.030390739661679156, 4.918731894556915, -0.4736276581997654, -2.8648354092725565, -5.272627286788952, -1.9906280435433512, -4.995813237805438, -3.8581168904805394, 4.009028890562103, -1.0221455331756322, 3.0986819058602473, 2.9982099916653286, -2.0928291781260135, 4.198926268556085, 7.74016927507355, 0.12205066847707746, -3.0433649264561966, -3.379129109787633, -5.5897031533325965, -4.120294417284306, 1.8232073735337746, 0.8015841734206233, 0.26492500472112845, -3.7991339164888567, -3.7382176018252484, -2.8584486328716343, -2.4693218531578163, -3.4578013969324233, -4.196086889889725, -3.5649872967857448, 1.930116907402525, -1.1097467699797012, 0.26351771528050083, -4.46105091347101, 0.15734501596265016, -2.8314472559079173, -0.6166071582890491, -3.039943424423897, -2.244346349457916, 1.0050753456022057, 0.285029588094766, -1.6519875905984143, 1.667136454272125, -2.5410192832806366, -0.5968225893178754, 3.8658681329413316, -1.1235384145439937, -3.1604440049072253, 4.635488719916213, 5.642791552954724, -0.4452317676006389, -2.4754252904123337, -0.0591908966854513, 3.1422758917014395, 2.053916812209919, -4.6680037716452185, -1.6003514668628658, 4.645018885655952, -1.7999336680374038, -1.2968785827789273, -0.0976910065466855, 7.322969302381331, 7.228847289155741, -2.7522023493291554, 4.136942538366805, 2.2380363252371414, -1.2516599562058837, -2.2286283764574546, -0.6155469162734637, -3.261108124016563, -5.143798607200922, -3.82985505572098, 0.674959234992287, 5.132910136227151, -0.7585673946739893, 0.9311126261118308, -3.2514018086181657, -3.5147549143244676, 2.7781782497250394, -0.599503597394847, -0.029096326365425806, -3.0022653355314457, -3.483083170435779, 1.7756954633122595, -3.466097741729744, -2.430423463676807, 2.286794486365582, -7.264519000450127, 4.808107273614061, 5.6423327658254925, 2.625686361234499, -0.12910215253683155, 0.8979042254346945, -1.0912113838120543, -1.7523332217641545, 3.70527858536727, -0.14213366008815864, -7.096482268086896, 1.3768723699340928, -4.831053370815605, 0.1372478121536551, -0.8025076264819582, -0.8639658263805285, 5.518849769731033, -5.453733067987264, 0.20543895168911286, 4.733794551864562, 1.3719137895249611, 1.8665596043786792, -5.111862431983928, -1.9329974812364379, 1.7965933700028676, 2.582790339128332, -3.883926780139464, 2.229110346114613, 1.7939547675029908, -5.068023696833767, -1.602082277014757, 2.6453108396635834, 0.9863264202458337, -3.597583793469431, -0.29725278946482925, -0.6722648255753088, 3.461947646114102, 1.718160969014554, -1.3016523951501884, -2.1476843791388243, 3.526506664424282, 2.2668334964316577, 8.249530692330511, 0.3456809926994757, -5.01307690601674, 2.5877895542076423, 2.560763203495889, 0.3185745629741703, -4.088996759143473, -2.3573074761389243, -3.599644570183228, -2.114020779847424, -3.129347647450997, 1.8988780720163616, 1.3397259513518032, 1.0988725287854635, -0.990770081717842, -5.262255759683597, 1.771206222840946, 3.927635933324174, -1.1547515077390142, 4.88035301726439, 1.432027417276832, 0.45414126346714845, -3.6216375367175884, -4.718952556883935, -6.705128887907737, 1.127450625690531, 1.6015651842761436, -1.37842684784305, 4.007341175652562, -0.010022863281802019, 1.4153013252096907, -4.227261404486247, 0.545607388240364, 4.6737122314464425, 0.9188330769852335, -1.6982306394103106, 1.4953494810412398, 4.386050859682122, 4.9431247714437765, -1.6325073004721555, -1.2587678538145959, 4.251157080657822, 3.0415627767035476, -2.7287883380731928, 3.6221557348471425, -3.54862695470935, 0.05568373741806121, -2.1863017332742567, 3.4217785615257608, -2.647071301773239, 0.9244566542081836, -5.138743355555381, 1.9555354928573605, -2.12237771913634, -1.985569443077684, -1.532502361209452, -7.309021495435449, -2.1549003680059906, 0.22932988303251678, 5.468785843456015, -0.37295879746354466, -2.0102446204799858, 3.9679453169500336, -4.111126031388286, 1.5441556334570423, -1.3744339096165281, 3.527496089348693, 1.0683867301232204, 5.14143340390131, -4.902462551716378, 5.095994096835177, 6.237893684179254, -0.2741075425374724, -0.3562217201114606, 1.1311458069093856, -5.169355782567603, -1.3286932272792464, -0.46264447661933716, 1.0833158303665877, -1.630729690059733, 0.6162193755386918, -2.988564767563197, 0.7158612546839334, 6.053394936399757, 1.497051951772975, 2.133037922891432, 1.819520434274633, 4.07152106334182, 3.0129075790118733, -4.166384652518987, 3.650006652326214, 0.36912609176294353, 3.984417844558278, 4.5648401621251855, -2.8998203658202, 2.2592624276559237, -0.7976160972884039, -3.750776940701086, 10.000441072099957, 2.4401965141729054, -1.0801509074598763, -2.2162581380579187, 2.2679042646749332, 5.322374621066448, 3.6382767997324557, 1.4935715367872184, 4.976374445771999, 0.1709595744318324, -2.316953475780579, -1.0565942826311, -0.7724133075335957, -0.30481752758584735, 4.543192872257656, 3.71821131745087, -6.051964873658859, -1.3776709543831667, -2.7854070902993135, -4.127897183909362, 0.7689284307821258, -3.5436742834757498, 1.7451169016403751, -1.4811289493136301, -5.013770978505689, 0.582007483474154, 1.0034760511142076, 4.289952430284383, 0.5929796096167654, -2.661454502967336, -0.9971691435035659, 0.2954385393742094, -3.817761999484941, 0.0949993903252917, 4.765545074858191, -0.8765697449946324, 1.8338674691994306, 3.010099451924317, 0.8199268368157417, -1.4077725115542616, 1.3970561376778559, -2.126298309917342, -1.3035327873365934, 4.6666941036264955, 2.520138068885095, -1.4037481767379207, 3.0975606956492676, -1.9627064680869606, 4.157768009653253, 2.5042507768667295, -3.3152165486643455, -3.415149109063233, -4.916502787068772, -1.8799234306252388, -5.467047737389732, -1.504854779363897, -4.001834260767215, 0.8055128812516419, -3.290799929783943, 4.651353169401789, 1.2944889454066892, 0.9831243758573283, -3.071764768463975, 6.246961491717098, -2.5334533150987073, -1.728932593658181, 0.6437169570488612, 4.189247011193279, -4.685650316208866, -5.794277466289824, 1.4806578878099539, 4.574061294026205, -3.720726123904785, 7.275124879475836, 1.3745481302158673, -3.0804993840122794, -0.8762968936199316, -3.0537566143933423, 3.0736692458765145, 0.5880098954169095, 3.207256407511805, 6.109094465989256, 2.5204240424805144, 0.5485078024938763, -4.328569843695487, 2.958661236181637, 1.3508403081442868, -0.6372288630993512, 0.8487675588420478, 2.989864118997426, 1.9822383621051052, -3.385630958283449, 5.125970649811354, -5.543921033153784, 5.966824526135585, -2.8901252148351855, 3.409531358730584, -1.3059328039472378, 6.499758117414264, -0.48325860983879976, -2.607579037716498, -3.5625690500331006, 0.13187236454949502, 0.866181058156853, -1.7095301276632935, -2.544583265877632, 3.1705603551626638, -0.3300783187694354, 3.36407405738238, 2.686333976154423, 1.8849872403271752, 0.12654191261774606, 1.7950103957366386, 0.48250386742714, 3.410023854535873, 5.686117511183637, -1.732545363789841, -1.2781558938072086, 9.410863062799333, -0.6470136471651734, -0.08355592697162195, -2.586166045838418, -4.188709095749227, 6.360201895342247, -2.34755122789352, -4.82904365949096, -1.0088626831553444, -6.823660279228828, 3.878643966750934, 2.9234796818668913, 6.206101773665548, 4.969307752628978, -2.3607910601619633, -0.145194116201242, 0.637910452553184, 1.258886358095502, 8.042964233410965, 0.39440912007172946, 1.6102365676987498, -6.075966095847891, 0.696343959510362, -4.984495083348232, 2.538682920414219, 1.282819551381552, 0.18164707010034853, -3.7087535275481596, -4.925775563184078, 0.5230703075858338, 2.8082576513842232, 2.2017831076166807, -4.648323390672747, -2.091585831615703, 5.286659653018215, 0.4127419321961676, 0.6975912195731497, 4.255758199505121, -1.502227836432388, 1.500232113394012, 1.16073186068399, -11.516893086652749, 0.25112619158497873, 2.7778712493710094, 2.1372655891792283, -2.4595964421883094, -0.4148268627587388, 0.6011401859585299, 1.2704478861802269, 2.707846104656813, 3.473111140024872, 0.8081225740349978, 1.87530307303701, -1.8824116358152192, -3.973617519222147, -7.011142599680961, 1.4745885810666444, 2.393447102123731, 4.598093134462444, 1.9664750252174512, 3.252368895251098, 3.459629756632884, -1.0607819408088823, 0.9496394135568842, -1.3967366600997675, -3.218266773499103, -2.0021002436972113, 5.79225367759163, -3.1881852865390807, 3.7586031928334958, -1.1519573731611548, -5.081375874345313, 0.7770359508881395, 2.7441972445621405, -2.1850760566171603, 2.0379968506372372, 0.17855589697285046, -0.2006926522494229, -1.160361911881097, -0.2289642426773708, -3.6152712908875118, -2.665978692805951, -5.3349480426261415, 4.479955871608926, -5.743864798921817, -2.0219034411193384, 1.1805946463195012, -0.9034578978439713, -5.378813484474078, -3.404923172571216, 4.5084385764400645, 4.33972931023178, -1.3735789018642413, -1.8328903372689909, -2.8494323328647204, -4.97276889326948, 2.1045582919043015, -4.567622684678759, 4.096716335849361, -1.504536609401591, -5.422440173164874, 7.1996376361564725, -2.4478229155269, -1.421975146887502, -7.255706923460568, 1.4453127015120755, 2.972618345515307, -2.5993843209858865, -1.9353340192435804, -2.7248241483516944, -3.252227064388604, 2.205441746569598, -1.8449101479500694, 1.61978357427334, 2.1649400880254914, 2.630519062737387, -2.6802672746660514, 5.456004631188247, 1.5131132690981524, -2.7921699533526594, -2.2011991621379674, -5.713106638393496, -4.174506886677804, -0.41462034319790897, 2.376648460572122, 0.3528941218637778, -4.663511327037856, 1.1292983325094714, -2.2392534441594787, 4.284385554713585, 0.17078769452117082, 1.2809729851835119, 3.322573379618917, 3.296367539870297, 0.8312480245748624, -3.9139635450880013, 8.570778655518339, -1.588817974587632, -2.1494911764669475, 0.2592688548845854, 1.5727431005450936, 0.7598544799885527, 2.794751870469618, -3.979825382974705, -1.6891920569370482, -0.5968934410134834, 1.0861640486575217, -1.8313708558325512, 3.5103901429922075, -1.2990484491932137, -0.7177218415016244, 1.0845414944457636, -1.0600137940477778, 1.4820776300288534, -3.2301760342558588, 3.6510745614729148, -2.6033662450313853, 1.0006856508470117, 5.422543329198518, 6.879781720782997, 0.16634001789853792, -2.94148308029828, -6.60323330157378, -4.165341067419784, 2.4762453466975938, 4.949123406410902, -8.06175597833493, -0.7252101931487185, 1.5691004263763966, 5.150133071641394, 3.9876441150424835, 5.203576748105292]
BIASES_LIST = [-2.702569739958557, 2.3519024702474596, -4.594196411825657, 4.735767569810086, 6.4263367528903785, 1.9904200581428704, 2.532332728414103, -0.34598878980472547, -3.3025238456190324, 1.6994338250425884, 2.4065760638000224, -0.39427434578803344, 0.0953667551800712, -2.990764238538708, -4.030130942253352, 3.753321558109116, 4.4510780532330605, 3.277352566224354, -6.20013882132578, -1.384816175397165, -3.968196114283371, -1.0648915785205773, -2.7940074835786635, -3.20221329300974, 3.243431729820575, 2.9441640469196932, -2.7400345268926714, -0.026108467765489585, 1.8854296215703026, 1.7007941275321565, -0.9229123824267933, 0.8857209119970519, 3.6323245234751065, -1.4363784124194734, -1.2780112838018574, 1.6576846891586685]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

