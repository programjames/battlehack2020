import random
import math

WEIGHT_LIST = [3.4689452151463858, -0.954625207571187, -4.680796981403336, -6.7134728503389685, -4.55079452564118, 0.730534221382193, -0.031006523994284052, -2.4400756254890084, 8.113214317241365, 8.500810028755662, -1.9772433431223533, 4.846619071452649, 2.3631360975238707, 2.8253418163446327, 4.291281454858527, 6.804528184803019, 6.821089814277876, -5.264957127428962, 8.283942131893756, -1.0878770050207809, 6.1597182526901335, -8.606504552345335, 8.403263292727281, -1.6883685660675631, -7.330933520394458, 5.040999404661047, -1.8312807735241758, 6.639187192650663, 9.546240343603909, 7.37500103647616, -9.908496167739035, -4.054241075305873, -3.786665757387384, 1.1056552189372386, -8.598368936906521, -5.2927720317281235, -1.1617481048054596, 6.832803517378181, 8.517149775308233, -0.8111036063665757, 5.464905794420778, 7.475694184737286, -3.143307263758861, -5.750096224111132, 1.0630858141428838, 8.51274238018199, 6.97780784477424, -0.11698548662212538, -3.6379210730513867, 9.702303885356208, -8.646177833588009, 7.05836163285494, 5.096892021133536, 4.222776641991075, 8.574420095306262, 9.060639339014884, 3.5495435003686246, 6.1508513667275295, 1.3558525617687582, 1.9578352580197063, -3.7832201578064506, -2.8651226018378058, -2.0645827894622055, -6.366362089826339, -5.060663103100838, 2.8272935697176074, -2.086639028311568, 7.78179569522262, -6.352451388818392, -6.439158754710304, 0.07440978136257392, -2.102906155255992, -4.70054881993825, 7.592347476554519, 3.219572603297088, -5.710222717485469, 4.0842384958569316, 4.378374686106053, 6.930690877913467, 9.596359427047688, 9.918867420724148, 8.539503872674299, -7.7114833726604815, 4.273417921115733, -4.951523266921969, 5.30648071094568, -8.95486845427312, 0.9977145783009895, -9.598059640386282, 2.2982292384921337, 3.170064236169095, 8.057782576279141, -5.582375315593293, -6.530690743508507, -0.8291807585835826, -3.520230432060769, -7.399218137466532, -6.670386910983741, -4.369606154308907, -6.290900647988047, 7.904664879274236, 8.885451217041446, 8.143166832744349, -0.06809194382552874, -2.401429807817575, 9.5996010395315, 7.064273060876367, -9.665071505956845, 7.405107250046012, -5.221509011169571, -6.150972228189864, -1.760891589776719, -0.41514316797379713, 6.679557806653232, 4.206663671950576, -4.240311794559823, -3.535401822155473, -4.381002417268068, 0.37335113817789534, -6.279165137785075, 5.847205463605432, 2.772113990387366, -6.7785478617648565, -0.9799743029257595, -4.9795777845762395, 1.5772904076303202, -1.7456671170154365, -9.94520470396827, -9.836952733557212, 2.2979831272100153, -2.4837994565835846, -2.566544196216709, 3.8234517186856625, 1.422430471928548, 8.891136827743729, 2.1817174074980112, 8.734170803922346, 2.8671883338593425, -3.8027073765566914, -8.545281020293448, -8.042310201437965, 5.569731650912802, 8.917851207552157, -0.22069399776835041, -3.7038063679926463, -9.814978965132976, 9.880776103719096, -4.851626958806086, -4.411698216312403, 5.150650933766061, 6.559737299890724, 9.7280829129299, 5.5561267237262335, -9.830011893241435, 8.232862387331437, 9.40249778497935, -1.6715570193688922, 3.900536086821994, -0.9425925285714758, -9.420949097394411, 6.889194848956841, 9.224210013798807, 9.013330610223452, 4.995046700508093, 9.868705135421955, -0.02848307228848057, 6.251712834975805, 2.5608637404625085, 4.396134631501511, -2.8228782251052964, 4.20737692575692, 0.27685485941420573, -0.5868926646074257, 2.079266676635246, -3.5659279781991593, 3.3391890157471966, 4.94512355167104, 0.0011428295038911074, -1.654414258033336, -9.775090701499916, 0.5897470957589572, 1.7800001524819216, -2.243034989488417, 3.7394385385989786, -9.8227804215067, 9.47001518817531, -9.482563434560042, -4.808113742629015, -7.861718547839236, -2.623528142245963, 3.0307684279941967, 5.9146144652902315, -0.27222615081252677, -1.1092496777061456, -5.133154289269786, -5.4999655327588854, 7.6619364311176135, -4.135388238181568, 1.0957596648318066, -7.220332071714061, 6.830305329023222, -1.6410610570011173, 7.3787889509776186, 1.168346806592215, -1.7987835543887556, 9.008315395708838, -8.44655352591693, -1.094350195304834, 6.506545548023812, -3.425759388810306, 3.275355986425284, 3.076664416692479, -2.7904530229982294, -3.2384226059823673, -5.5948923081411355, -3.1322229911088284, -0.9060963500033345, -3.132210154446369, -8.11576920394915, -7.24706603297591, 4.034377383252735, 5.81234103757332, 7.030672300618001, 2.548841246042187, -1.270102723795695, -1.6035449657621328, -7.091331286364162, 4.258272640963433, -8.16568120999552, -1.6324979633432246, 4.123889892361527, 2.432222399052728, -7.284956402201834, 9.968088388664523, -9.7394591862915, 6.343467245759982, -3.271145206382158, 1.4045434998435766, -2.281668705981894, -7.7032631896022, 4.164148983393991, 2.871632174612838, 2.6298779254731244, -1.2059480804611322, 7.326044203348218, -9.118059136828427, 5.968229055656877, -3.501167985419147, -1.82598017052009, -8.564614294910466, 0.32223054703838017, -3.483497961714372, 3.4413926031565225, 9.659677872619042, 4.833657138184339, -2.376724782949184, 5.2552787416176, 1.8940409813454977, 6.628328515939227, -0.7668948243461635, 8.780175430153104, -4.312250577806617, 7.60490431574684, -6.090520631319025, 5.135078736103864, 6.035051170466751, -2.8144776461918735, 0.986730050752767, 1.548201313746734, -9.340895237898973, -6.7905276189441555, 0.40779794884462994, -3.2650342488113404, -5.001043842788047, -0.5826963865677559, 8.521067846686691, 6.35597007970776, 7.1264929480679164, 0.0814797163102714, -3.725763993115634, 5.620852661470646, -9.305177995937449, -6.672150626872961, -0.49282681262736894, -3.7724443495459337, -3.595174302920004, -3.7753118468193225, 8.670037327835509, -8.254106864507733, 7.569334521917334, -7.731684367296503, -6.126150872762544, 7.10836690243719, -0.22215473057391222, -9.12790609120914, -0.1615360015105658, -8.527139207360335, -9.512713157309145, -0.13741018610796019, -4.790883143085698, 6.443158873319209, -2.108236092741496, -4.055342236474755, -5.736972551612651, 2.118762740215738, -7.725515259951241, 2.167534227724083, 9.995520043299699, 4.646916405123731, -2.9472643539341163, -7.079009002838632, -4.976955258815893, -4.596280382605757, 9.046414036986008, -1.2438746339874704, -5.9532498084049035, -1.2789194505224444, 1.9870923913336664, -1.030564980513521, -8.98272796842539, 1.8688750015557414, 8.3733502094416, 4.42369748759887, -4.113319158366362, -8.993754958271069, 6.315051265876356, -0.6870783580033475, -7.448694182781956, 8.82299572169913, 1.2610779739810454, -9.330494311475366, -3.8205654727982292, -1.5428654225731044, 6.670452953492699, 2.8179638800122824, 9.717883110389, 5.386654998465259, -4.3410087340463654, 7.715073590790908, 2.320830247281986, -5.806381550283525, 1.129007202233236, 2.809901077169501, -7.7390470078246, 2.1220288469268134, -4.603963391388515, -0.36702021821169595, -6.693410370336075, -9.933274604671968, 6.0484438387320125, 9.007244507717608, 6.429199918463805, 5.4933093397730755, -2.231963266120413, -6.672368509924096, 6.487231239890001, 1.3559787707203146, 9.862055527787238, 4.412138630890901, 2.872059341450843, -6.029217399910419, 9.992019309062467, -2.0709756783112887, 2.934910231231825, -6.292032373337864, -3.726824333745869, -6.364634109919438, -4.056951100487729, -5.295816290770201, -9.226750655230514, 3.8689889904261126, -2.4684804106966247, -2.957187488973081, -8.356477960883282, 0.6212309506946951, 2.9290893587448874, 3.2995025296431315, -8.899336533951402, 8.922372554003577, -1.160309560971971, 1.161435917560766, 9.344789786413564, 2.15447007299408, -5.909784576363295, -9.047237835379738, 0.6338389248556826, 9.040766650192356, -7.4514427947813395, 3.1231324895600228, 1.6792325622535653, 2.93471821196097, -1.355642710647956, -7.010784744646259, -7.314990919168094, 9.343893826982764, 1.0756231116725026, -8.59207978645336, 3.995005638728845, -9.936563640121536, 6.998283809798327, 4.895603834971043, 9.29141158766447, -3.250939571535268, -0.2093997298311976, -9.173373779874945, 9.717473182162323, 5.881761367878626, -3.8613449105699154, 0.9432874423257829, -2.60634546182561, 0.5858583576901566, -5.6042450524692855, 1.7859008523416886, 0.39856604944482577, 7.248787386689777, 5.624536658256126, 7.828190627036243, -1.4583962361536642, 9.032951857591705, 3.230876980356971, 1.3009773027601064, -4.359523649193733, 6.33396227703297, 6.215989057163192, 3.8855446120133017, 9.471147417839887, 2.6487730639703493, 3.489363937724084, 3.182738153378022, 8.614092175076422, 2.522121557942441, -9.567566073655083, -6.596257622420891, 6.291197507430866, 1.6009171591868423, -8.450097184946316, 2.206194635547048, 3.1914142413068465, -8.337633257839663, -4.108685992162135, -1.8092892539089291, -3.8178650623473303, 5.387926406573955, -5.305407233394915, -4.433423836794805, -7.547129931695746, -5.659005340131136, 0.9520069801920013, -4.202858291964537, 6.478487013110879, 2.556890260068709, 5.562637322130154, 8.815870464153658, -8.837953892403052, -6.318430269429105, -8.063577473822134, -4.8409140358317, 7.259879942724279, -2.680152621761409, 6.347414184757778, 0.8430679070204921, -1.4301178219122122, -8.229141705901243, -3.5019114733915053, 4.398624645074305, 0.9705610142927483, 0.2706985732934104, 4.344417855905467, 5.538389210009658, 5.639959826412365, -6.848942814277422, 7.551744556495304, -6.077859216735398, 1.2392378004954878, -2.049751027728859, -3.0656266805293892, 3.991198167286562, -8.793279836160355, -2.425740997749495, 8.423564414680612, 5.088428364049344, -1.4280369024981532, -6.580308526244323, -7.334835773802835, 1.318276780556122, -6.141680718393674, -8.183553677705921, 5.9487020629652285, 7.446696715564769, 7.069033219700714, -2.654178796896578, -3.1563511236413877, -7.410840292816168, -5.579718431435379, 2.0603209496992587, 1.4449646296417242, 4.400197647301784, -1.6029415783827634, -9.481835964515987, -5.122767418437482, -8.883233999775443, 9.282138687579355, -4.8103303687757855, -6.699585929086713, -1.1856383088613, -0.7706881417917284, 4.465352831791741, -3.860861124109336, 0.23142693917904467, -1.9422822951087522, -7.708228145859044, 0.8234646028519812, 2.8803818403171473, 9.093807483563964, 7.392502310236868, -9.396318846084917, -0.17364457852129078, 2.9809947003518396, -2.8832555273313947, -0.8441723416309799, 9.067467929372846, 1.2168639477699656, 0.3099792894551143, 4.271164553994982, -5.3303800814667675, -5.822801860861848, -1.58864119065462, 8.197630065732202, 2.8449709123280087, -4.681631183834838, -6.681358326862645, -6.653699918912437, 2.569169182041902, 1.6811575757181956, 3.853922890511555, 2.2831685467478273, 4.852318662762192, -8.625425956142971, 6.104371561992018, -5.33091426533765, 3.3311857838749326, 9.190165408879821, -9.528284142251895, -3.384438650226402, 9.029434210592498, 7.356860863630693, -8.117700638504388, 9.721473953948571, 3.0466093640860663, -6.363096947692872, -0.7961302300055646, 4.431719285422538, 3.4953083484068834, -2.3496764968987582, -1.6376375720189458, 8.587775629791508, -7.347850334720705, -1.1299941339352735, -0.9932749451592855, 0.8610519153350431, 8.105168151727995, -3.5516379496342143, 2.117122427268745, 5.258924722918669, -3.9372531534728905, -2.8850689655027857, -9.574582873983728, -7.075727281623207, -3.9622109145132196, -4.045376700390095, -3.862773352308782, -5.274636483752486, -4.4142235237818035, 9.252618032097772, 7.098858280984874, 4.003057287117917, 4.954271558804281, 1.0528285063222427, -3.998007749371051, -0.791898344942183, 2.6843686868971623, 3.151199089157757, -7.0158769637993075, -2.782583213966787, -0.5472171124127101, -7.995327720737915, 4.691041157267753, -8.983643937440554, 1.860325349461787, 7.854674893453922, -7.776243684098924, 3.6031882269159805, -2.821120238384573, 3.832925261512191, -1.8986570500146875, 8.167331463580407, -5.068427977452689, -5.832683865536312, -8.458144219988924, 9.447948008977079, -8.018076185042284, -1.8914590849207897, -0.30687799977608066, 3.6907743634236105, -1.6957155027070119, -4.672610625172348, -6.3987529333148, 8.27118163468586, -7.532731380284787, -8.265462522006716, -2.0716429746508354, 5.299902346225361, 9.838949741254908, 0.07826810779621951, -2.226294660869126, -1.0056804760997906, 2.34725430035037, -9.638943630559531, -5.672959238709194, -7.551409434553767, 8.80283628726827, -4.104587366141641, 4.748025685380741, -2.847377828432938, -3.8437478464033763, -2.175998439048083, 1.183290597103369, -8.90566824992165, -7.80462775905117, 9.631851675289866, 5.496948645349324, -7.607214650160962, -8.680475675951797, 6.781521391198446, 9.139331877018929, 5.129266036178262, 3.058375355836551, 3.010880446030086, -8.652396174496035, -7.938030228063512, -9.90843037487551, -2.6504408992544963, -4.500546253380728, 1.588719835660923, -4.674471980881949, 7.447367844441754, 7.518855489215554, -1.715235484298578, 0.1208088495615538, -5.403195031809522, -4.2226686063405, 9.016783417635711, 0.8786844600413133, -6.891098335576061, 3.9830440884012113, 1.6058641081627272, 0.21116817136537236, 7.457216538356796, -5.98083235105296, -2.7011108652891043, -3.219711573626931, 9.880994809818048, -7.450063300233736, -5.96344297826999, -9.384197721495553, -4.299634656045123, 6.3384624478437885, -6.457848781183473, -6.0207501853999545, -9.524926776272727, -8.777660555138883, -9.222758084960738, 4.799834389242241, -5.252191131828439, 4.681294930347944, -5.799830314954515, -2.3731107309272588, 1.1397167689925514, 3.2599101673269892, -1.709978185675478, -3.1312294318659912, -3.2017029927166902, -3.6133441194386906, -5.738065466861961, -8.633454291432685, -8.148104601216497, -4.448427730811502, -0.13886018272631873, -8.795769752472811, 9.738670347052746, -0.14191085725485486, -2.95102286040777, -0.10835647887124011, 2.3280288482895966, 2.981734086512658, -6.981870736194953, -5.978768861110817, -9.652171816650267, 9.375533443409672, 4.850300102199155, 9.341706746214594, -1.8370212232608463, 5.739043276916, -9.898911472538877, -4.46344150746177, 1.0868770062044604, 2.524830325429516, 4.40425958200059, -0.03209147442763616, -5.565706535264616, 0.8520631879630258, 7.344125521754112, -2.4686176760306804, -1.4314798611701196, 2.5587615611963166, 1.404559659904045, -8.891637628528077, 6.893165110708988, -0.6452482168251361, 0.5739119241718367, 5.861080414543679, 8.93752082909413, 9.550086637154028, 8.203977603543983, 0.562645762619562, 0.12402809520332347, 0.7309389914999862, 7.283298759020525, -5.134682304263536, 0.9433556884339733, 1.0603156884090268, 4.707971315106839, 5.132187697465804, 5.865818034088511, 0.3394722695603303, -9.822513079693342, -1.091004397100848, -9.177891450767927, -6.973280545221822, -9.324235403969244, 6.846117103837422, 6.322819341623486, -8.975023856756167, 6.019562767608164, -4.631720446557342, 1.3376178101051082, 7.273212568126979, -8.226751943754877, -3.573572903163676, -7.660465958454942, -1.0835668356220047, -6.766895077306092]
BIASES_LIST = [-1.0489382692208515, -6.399056111211399, -7.46257347159502, -7.103145514914775, 0.3476140049236047, -0.8234220241447758, 3.17209897139813, 6.946317360780526, -1.924924678882876, -1.4718887004469323, -5.420414346725206, 5.547941809911441, 2.9768285706601887, 7.23329665000168, -2.5910772709076113, 1.77586647927434, -4.892123509301252, -1.8733288243793922, -2.9819983412442497, 3.6328454216033066, 3.184846886614526, -3.8191728765989126, 5.558764210759868, 2.8383585832045437, -5.515682931459334, 0.09326804946672418, 2.455611234504664, -2.3082772822548208, 7.002144993605, 5.528545919269822, 9.003906145179748, -7.646360322377483, 1.9557644644163634, 4.5358169186810535, 7.697548349179591, -2.8073788543633054]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

