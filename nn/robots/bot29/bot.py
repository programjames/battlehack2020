import random
import math

WEIGHT_LIST = [0.34981253520351174, 2.2663006945594404, 1.9833758785693227, 6.807291332284986, -4.134050784739198, 7.620605183891435, 8.909938922188331, 2.81606834481774, 6.905830311278191, 7.597392295317643, 9.84033284214285, -4.9122678857333835, -1.733582033879287, -9.024131313075038, 6.565144620506366, -6.29063230270023, -0.695751951872623, 8.942098540435556, -4.678222464404622, -8.803998778233403, 8.061954519996636, -5.504899075241621, 4.639076374168212, 7.651702963698611, 1.943577421810069, 0.042376765103460556, 8.620097133658732, -8.844663210266486, 2.7868557670439404, -9.782868587581312, 9.02213213929086, 7.02138705015237, 3.1003664803845687, -2.3714349292642716, 9.549026925987928, -5.9453704344261515, 8.692553041463285, 8.685703086095494, 0.04205617481040491, -7.9491859323348635, -9.896252655044552, 1.9892428582788888, -1.5946902508591325, 5.795100836826785, -1.8387991895132583, 9.102053712817487, 9.90656348899121, 5.470225901254693, -9.134754244930427, -1.0062396394782684, -0.5564443940539565, -2.8849925455082692, 4.308948278393089, -4.076295830609804, -9.06156637256043, -6.305359682578205, 2.277863967846553, -7.7615349435344765, -5.158368756586171, -8.419272180489228, 5.135122328803082, 5.4852146656518475, -1.5219307657272996, -0.5658432532538971, 5.778711021178697, -6.64919904608352, 5.093691234331899, 5.944438711050491, -6.411874912450575, 1.9284418337868932, -3.9525292270923984, 9.647394863779013, 0.9608547731625556, 3.6471412603972535, 4.4749337552044, -1.440604244540646, 6.913125869617655, 1.2254979704339046, -9.147313053923643, -9.846849525948333, -2.715861565728197, -8.003464475683009, 4.704172328122066, -3.970606994074477, -2.438931782440859, -9.607539110440761, 0.1891185997638729, 4.49494569967168, -1.3807833223811237, -9.835705100478172, 3.116945286167663, -9.8044758237575, -8.52076813741822, 2.054616322253297, 0.3287500624463924, -9.215488072041243, -5.215086023194562, 1.5360357400377556, 8.252178342531, 1.5591523814621624, -4.417126776163505, -3.8186292145594543, 4.618736152465244, -6.994078262385377, -4.4662655450306765, -2.3728165313897147, 8.183916829999557, 4.403589753091062, -5.224936408432061, -0.9478751569580428, -8.181656918811875, 6.886309981228514, 6.610916683889812, 3.63242432301387, 1.3546268861340032, 1.9078009932683226, 1.1159224279662965, 4.452576136267048, 8.574156168384675, 3.172345273553672, -6.227295499722716, -9.474248115593799, 3.536674659034208, 8.114243386512442, -7.233896106109208, -4.281981860122319, 4.24486089886611, -4.484338182975094, -9.67636617745068, -8.288385937528844, -1.318036493779184, 7.810044339422028, -3.994276163173427, -4.681513364136569, 3.7705830988071654, -2.7560943184954922, -8.261202593780162, 8.21254346992706, 0.9950953732115764, -3.241908744177742, 2.2266534400181293, 4.6214437051233315, -8.792295397071111, 6.0533225648987, -9.238313440074819, 6.519878833010683, -2.7882593764835413, -6.3269753759077645, 7.569376572954816, 4.575838030412147, 6.323674517756622, -7.4623690319866265, -5.421414832022069, 2.85940433260855, -2.442965882663996, 5.816514826841011, 3.5631811238633944, -2.42539558214437, -3.0284461556246995, -6.071173009163946, -1.6581078187875242, 3.5705562587148094, 2.9577810408168066, 2.21459292178449, -5.960601752366371, -4.608470897007968, 3.3540633302217326, 6.323316963744304, 2.1737615376116217, 6.13429967422557, 7.741713824698607, 2.213375069617225, -9.912938860603916, -4.084564226743299, 0.19186409584406938, -4.650445624774175, 2.3295697806352162, -5.871409866104242, 8.253271189030109, -9.311514602737297, -6.052499367322691, 3.971472867813473, 6.248914128568121, 0.04725238072289706, -3.7817323269740317, 9.060751122129439, 1.1302731053688593, -9.862101071636216, -8.380149059944074, 3.9326093611144266, 2.8936546537105663, 9.275806799864316, -2.1080071366971183, -1.0831122728288385, 4.921659082125785, -8.808888662303412, 1.49215758728376, 5.554077284442725, -5.698052630266521, -1.2824296088994274, 1.9169770082230144, -5.415390209673623, -8.827229814486461, -2.052363570087625, 6.962549282664124, -0.9622381335348695, -0.8707673297784506, -0.4235339080106968, 6.497185510000037, -5.053503560247221, -6.95348901476091, -7.087430608438692, -5.536255773034231, -5.493207767844252, -4.000660544153691, 9.192169503197473, -7.195976023401625, -7.779848958032778, -4.74997589704603, -8.859480752339655, 4.338577395982917, -6.629659280779398, -4.2459652710274876, 2.022491385060661, 1.5010649455962284, -8.502227222409624, 3.092266269950759, 8.987941069874914, 0.5050725619917635, -4.959327772835862, -0.35245773472220954, 8.084447398755373, 0.8934827745994909, -8.031428034168124, -1.4865605793653458, 2.688177602423039, -3.947614987158518, 7.455217572741621, -1.0596324457753976, -6.83086116875738, 3.700808358820529, 1.5978765876422862, -6.1644618152602115, 2.4600770268201835, 7.113211820603006, -0.18037231034879397, -2.0561695727007523, -1.306216346715697, -2.4548042747709093, -3.747217976402217, 1.378775290787793, 8.325849836816342, -5.989461202135919, -3.4583067211154344, -0.4480296389673395, -3.2352877194094676, -9.903254368964824, -0.9433457412591046, -1.8742913457059274, 1.0915560747982145, -7.0503141758784915, 0.7586766516397798, 2.7158626351533837, -0.3392141933931274, 0.21625865288044466, -8.80908416671955, -1.873802902739918, -6.630901711281137, 2.6210147732012743, -3.6005852775907403, 8.791644962988723, -3.8281163364665822, 8.507485600989348, -2.3564616930143467, -1.1284392638919076, 0.9212425355672806, -2.3252025136984678, -4.942789152170672, -9.19923583082872, 5.192973587839544, 2.0666259848169766, -6.921729328727229, 5.554927802566613, -2.445542949957982, 7.892525358443564, -9.743553354991569, -2.649265689600706, -8.277789826282056, -8.737751813936187, 4.505493665816836, 4.896882879911926, -4.569656077754205, 9.583510138217747, -1.3090235856431391, 5.636475861220866, -6.3378277733981525, 4.316533424079324, -9.173699161678687, 7.8514674653918775, 7.763763505803446, -4.924414436035551, 3.893601383943432, -7.28803925541836, 9.12297731742726, -9.710578443098187, 0.5350065185254582, 4.177337257116694, -2.483135104230998, -9.521249065498687, 3.378853084484266, -5.94999727994683, 5.775746315737615, 1.9477652874520412, -2.2154584537775968, 7.05938712926319, -4.187046451856455, -4.743256309139499, -2.097670355794518, -6.972467477544719, -2.3086120255360676, 2.6808630204924366, 9.954740196974974, -1.0552568235322912, 6.892077834870971, -4.716946125137786, 4.497890511163547, -5.153466791195386, 4.926562174257235, -1.8429156228195183, -2.955452477864922, -8.785846255045882, 4.475186850289061, -4.355273642090307, -9.499877716711465, -3.384760953681127, -7.649349860433292, -2.9216607661240452, 1.2136333925000216, 9.93515142120162, 4.015777072548394, -0.16582780498413996, 1.786100092406425, 1.9455567770962272, -3.385074368312642, -3.4833023788941126, -5.14075017992758, 6.959862859096681, 1.0604936870479502, -2.7584722587583617, -2.7808704645760773, 9.972724966803238, -3.842330869942174, 3.338598660697631, 0.9802805035258295, 6.344746190289381, -6.7799456820231985, 9.935533818828965, 8.773577715527743, 7.972365239217545, -9.047252484310649, -2.3986336239254964, 2.848614146591002, 5.225456974640553, 8.17205119971526, -0.17067033307312407, 5.018615825400026, 3.54871380357263, 3.1446457976639124, 7.169499944503556, -4.5498725344371245, 8.38724165843061, -1.9791058853894157, -3.1398485603422133, -0.9298495301572078, -6.416451822169917, -7.476992846892969, 6.014372000442481, 2.5172500150679706, 5.685607325969018, -5.452054059094471, 7.678524014089408, 4.750387643971683, 8.150935579240596, 3.6443333152126716, -3.3974974985181934, -6.21588355789979, -1.1350685455950593, 6.293548481785322, -6.561732859797629, 2.14635769739159, -2.5605214450912257, 1.4395965652393699, -0.35061540072969777, -0.5566714883197008, 5.012086820587049, -5.567687848644849, 5.117220661450334, 4.569913014086243, 2.725255815243184, 6.160129913999079, 1.2817274409673747, -6.834928727169009, 0.7925024393047799, 7.66967133328037, -0.8727026131573723, 8.480191579004188, 9.340121786347318, -5.935997191544735, -2.044420300177457, 9.539916241262691, -5.985702831097797, 8.482885045240486, -9.881900593204428, 8.976731461482089, -5.1986648793975565, 0.8905549911778792, -3.0583221053557335, 3.316574364318118, 1.2140974134126576, -9.83509103597061, -3.7266464523525755, 1.0872574293768373, -8.931193702603224, 0.9090955698772767, 0.009958713636130767, -9.394485355632243, -8.538168931960485, 8.63952308239887, -1.9374434696702423, 7.986648684903479, -6.6165604732144745, -5.455343159201669, -0.9285714226828272, 3.243330282978567, -4.73083196836037, -9.979047319759381, -8.965332836512523, 3.7031143003755282, -3.795198005221092, -1.158019459998691, -3.179854982917858, 0.5662853998201172, 4.671671768739216, -0.9682976691532623, 0.1316640520882153, -8.223207576841027, -8.14980596907581, -4.340043714798226, 8.545812498779966, 3.9968991162260608, -8.367205256260421, -3.0260029771994645, -3.6373648790403257, 7.935586454631466, -9.487665911956984, -4.117491566792464, 9.002663612962024, -8.970231484881568, 1.9334872896374584, 4.615867504885786, 9.821884137052884, 3.55783896242491, 2.1425090624399186, 5.58507677161408, -6.080591903919816, 0.8519928437654674, -5.337711845932544, -2.0901493223340744, -0.32205194296338746, 3.9618369718240807, 4.16131632885639, 1.5765364595487537, 0.11676051681471478, 3.6288800342856717, 2.906171851471262, 9.500986865255005, 0.3638045418098912, 8.81647074970478, -0.03483814644313554, 2.2035844362706385, -1.7070516075905484, -9.140988507033445, -1.3905403115851627, -1.1060152516709323, -7.755377025781565, 9.949853269875565, -1.5426400209260507, 9.740051487153782, -6.968335960673933, -9.70696004323225, 8.16107721898532, 1.11373078398789, -3.4178870125206595, -5.569192447537395, 5.46328192660976, 2.756039526351543, 7.482422828068042, -3.3722917037966234, 0.3419506223598532, 2.6172428821505775, -2.837431369014592, -3.3246873057318638, 6.8325418727434055, -3.7531158640007067, 8.541774843623948, -0.12630086029764165, -5.554330449162732, 9.835253512588753, 4.927283503209534, -7.646959874828687, -5.2700658502207425, 0.03236960748405515, 3.782017637931043, -6.733154160451349, 0.8039088990328676, 1.9928549531055477, 9.465539029171097, 7.286884729708099, 0.1900028489079304, -6.37458528326926, -7.2857401982092025, -3.0700567850701947, -8.846200371714998, 7.010598415385253, 6.532801125542427, 7.515569618392533, -7.199955974376245, -1.073341915856858, 9.473909266408349, -0.23127096124029833, -0.03764697602049516, 5.959875321969568, 3.109056058012145, 3.832217989050184, -5.626978750869838, -8.70420389555205, -2.251778597706357, -5.188844734485453, 6.792758820094107, -6.149981349959384, -0.11613669643736557, 8.88103369136762, 2.5932516457201906, -6.217722674001136, 8.092646782695766, 5.613110745165679, 0.6070063385713347, 3.5244734114815905, 7.6736508909247405, -0.3229769101400066, -5.08025467053832, 8.293356528767134, 6.92122844682423, 5.657506544081812, 9.789042338455985, 7.059927681476847, 9.192499085202122, -0.45025862108418835, 6.060564009132143, -3.2452894728196036, -4.9360186488654145, -2.3507709299408264, 4.678126937120288, -3.0576446194071654, 2.4499610099939506, 3.535265194229032, 0.7507220618866519, 4.63932673846694, 5.144720923828244, 9.72099727089277, 3.124298248312865, -1.1790074337539025, -8.015866203578376, -7.443000242767774, -2.724893164510533, 9.334907419243404, -6.345107285902172, 4.901763819689462, -5.676833818754488, 1.7972034940049575, 6.120528604032618, -6.174601855963459, -7.189942601497017, 6.038322050521746, 8.686828727297904, 5.370555253684131, -4.099526504506709, -7.377550482454572, -4.775684403457325, -4.1933347612091465, 5.496871054421462, -8.175068733513575, 4.088955756013522, 1.5579247838866301, 8.891049900152545, -0.10904203532874845, 8.49861729414544, -9.289622981587122, -7.329826053002089, 4.167461429288048, -1.3546595503660477, 0.6827992023251213, -2.760959579375715, 0.6475739782955756, 2.7646548545478904, -1.1756916448721473, -7.814002807859324, -7.758386052563139, 0.2669438564558675, 7.967882552684628, 5.458949458799307, -1.876307988962143, -3.376160355870123, -3.757427646566141, 4.145181981896744, -5.0918138194059015, 0.9674581301066176, -5.270383601935564, 4.704026760734703, 4.673230170374456, 0.4377852025065785, -3.9948629249237904, -3.06836678369592, -9.667588130652366, -5.323560814162676, 6.865860518998009, 9.615416382600948, 3.7895500352042895, -6.543706097066549, -0.40399498868167427, 9.99123005280267, -8.786131338187651, -2.5903801485559574, -2.7513337698855427, -1.52704493916319, 9.920173762309407, -3.4232442403864427, 0.28773969540968025, -0.7813298174677996, 8.666319218411004, -3.6256921388988577, -6.556990143161123, -1.1076192583866629, 3.0936604448454723, -4.493455975452307, -8.798845322439501, 5.5222174504131445, -3.9076394668637304, 0.6975127529753085, -4.527350286128831, 5.891647711871924, -0.4184734282235265, 2.1936234923287063, -1.6020011846999243, 8.570428479980581, -5.043282344362636, 8.75235856257381, 0.0324644470497546, -9.686008513122061, -1.8500627655097297, 6.731639336323372, 1.058387216032564, 5.3557819591246325, -1.5840143929456083, -9.932405923279667, -1.072980360046916, 2.7562800628250894, 2.021722555771701, 1.6409683743485424, 8.99414646967093, 3.8853586737034362, 5.108158045137907, -0.009903910282563544, 0.658078915513606, -2.736102561661003, 1.3689026089283214, 4.299285902681875, -5.7216284028217075, -2.1178109544014, 1.6591320809865007, 5.8737529733845015, -3.2940557408149402, -9.531885177706345, 5.755623459063848, 6.590666681363423, 3.78841284103493, 8.575023748199431, 7.489313631743528, -7.953101379789141, 8.281265911945308, -5.399043927829636, 6.294127882339392, 8.04536584258075, -1.297021949087192, -0.23718733011349968, -9.554663188280355, -2.2356671416548135, -4.643428529543055, -3.255376287786187, -6.872522449662077, -6.149942123431762, 3.4199311584103764, 8.651475050015524, -6.128273729005745, 3.5193656532235558, -6.645058911979151, 3.286886962880173, -0.6299379226550244, 7.428810784186034, -7.540634240710151, -9.3369104662045, -4.730768398834888, -9.81961854453541, -7.647718527307761, 1.518576878790066, -4.141165690403232, 4.860057163692597, -5.195759923099779, 8.884222169541552, -5.135490000795276, -9.647195093284983, -6.076331547204239, 4.280318696210868, -2.2602097261696947, -2.1814812263736627, 3.0037660968751307, -9.295355126460409, -8.398545381934747, 7.275056286430729, 7.5990670159089255, -0.9513412714034111, -5.243792317970517, 4.735818551509192, -4.902495113648506, 0.0383554891776523, -3.8115887195830656, -1.4217327630638792, -1.842669403829472, 5.433455871087014, -3.414462918269243, -0.4070171937170368, 2.4756981037807435, -2.46924294036533, -5.403804363152553, -6.21294454132215, 2.207471265573428, -3.936847291888183, -2.6017215355432537, -0.7786933776940668, 8.60217364321349, -9.23873332030915, -9.658869776044682]
BIASES_LIST = [-2.4149287807783697, 5.692312390525487, -6.018465471914228, -8.733284424144374, 6.0548904686596146, 9.999719837882644, -7.4055439107135035, -3.3570780584942828, -3.6061361420859246, -9.205803733790496, -2.9057459153405034, -9.675869847397196, 6.5500286648911725, -7.198719624034144, -1.9724154634581765, 5.942136062262545, -4.116076520644145, 0.5069812882528009, 1.7939334854870186, 6.487944829670798, -2.786951693878155, 7.591437290342139, -5.038591885100486, 6.651157112698886, -4.96291840049746, 2.2789961844699853, -1.6588156262735048, -0.6357925047955977, -4.423627946433475, 7.6830851605679555, 3.37161353191577, 6.19243456240261, -2.860513981625445, -5.282677993929575, 1.6600911233731672, 7.650003896991123]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

