import random
import math

WEIGHT_LIST = [7.639016547949026, 9.59449088873172, 7.11986482747097, 6.830561870151882, -4.666840450462788, -8.766711904179335, -2.297866249474536, 5.400273887086195, 9.397045402580794, 3.1484029725343206, -0.6524397254276373, -8.997521739597314, 9.605477015135403, 8.425663133527223, -7.806225377966641, 3.9403618192590883, -2.4729429933103226, 8.26292795282717, -1.1211832893854705, -5.626364096366261, 4.122500025429863, 4.490692980723303, 3.037095429937807, -0.5491454703761249, -2.3828844229129587, -6.9731205493045945, 9.180322489024075, -9.894745933686531, -8.71409337387833, 0.6912420562232917, -1.8663587226197702, 0.19446385968459268, 3.133175089984581, -9.873142479298645, -8.179118563236585, -4.093815635304967, -2.7964043360066952, 6.60054218224677, -7.805518192651258, -1.634396914088299, -8.930204186699573, -6.025568065258879, 1.0631273692946976, 2.263283830142612, 2.4919191228430257, 7.411938265496175, -0.402058395522495, -4.931268980491037, 3.9886842845050534, -2.9767558825943663, -9.307604681507996, 3.2248255985323695, 4.529006374960662, 3.692067698628211, -1.0985732135080557, 9.364073205725923, -8.660556684093564, 9.701498514419946, -1.8516537515740712, 5.767695438507374, 9.116392856553787, 0.8721164535449528, 3.174728839291312, -1.3635570380647657, -7.182678635258171, 0.505239477143359, 5.585994474487695, -2.0436939369488023, 2.6697713049432927, -6.72758245425864, 8.706129822450734, 5.51204581699289, -3.596313734166186, -2.653253793463543, 8.04944800991304, -8.154690495413577, -7.579861920401793, -5.197161008528934, -7.405362187134994, 7.009958844819369, 0.6373648863699728, -2.512796581361081, 9.925751847532968, 8.476688349861224, 8.95072966697768, 5.348787268976466, 3.9849169863416627, -1.9376074571933586, -0.6840069146586352, -3.174900420454845, 8.40521503985697, -1.8714253756691122, 0.3609250349421149, 6.402363252961909, 8.711446352164604, -9.505573087198162, -0.17062819570316812, 2.0244135242096384, 8.966989039186245, 5.726967661796895, -0.3222503438904205, 3.968860567456039, -8.733858355540443, -6.870290175165048, 6.716623656384048, 2.781780923396317, -1.2099615632536036, -2.29377484611065, -2.7571875237924726, 0.14294519031908592, 3.0393565570409073, 0.5088626210204534, -8.796174165671902, 6.057522126378302, 7.216591968095848, 0.5522299725601414, -5.242061270821545, -1.3770678786785666, 7.920020842089851, -3.7177225554170352, 7.4504598660869945, 1.9186073182583883, -5.652993666401553, -6.31348551026504, 1.3905174782706364, 1.4551199468608864, -8.037359467609576, -8.300454374690613, -5.145330372521353, -6.2989357873669904, -1.0078234012148393, -4.074892166159305, 0.11517008590815081, -8.048863490044646, -6.802296911488501, -3.6795565074260033, -9.145041059510675, -6.339997364201874, 7.041866068792153, -3.597107229300061, -8.305959356573977, 1.7818694304429332, -5.124929268478676, -6.099967333411258, 6.254070348147916, -9.288237456412103, -3.502951748651995, 7.598615558042074, -7.204866671693866, -1.3572762421917481, -1.454531621252535, 7.829089146178639, -1.2131583922736944, 7.963091922581324, -5.269592137269338, -7.075219985923702, -0.6670453776639143, 9.360704684507127, -5.211418697735017, 1.6883466886556047, -0.6488523403438577, 2.0437557126117163, 5.882230678686092, -3.6185979814845215, 4.345814743034122, -4.7784389473123, 6.196321962232126, 4.952758759061208, -0.9735596509216222, 4.935728436235664, 7.2008001069321566, 6.354690372691238, 1.1421363497543773, 4.8966008047141365, 9.320085724193344, 8.886829746249767, -6.9202679080844565, 2.578878108201984, 6.674781082264619, 3.946605135819169, -2.278425807917812, 6.340716212735778, -3.3823950797168916, -7.412573049513775, -9.790912719780394, 4.309550587041404, -8.05231052108115, 3.120621273477127, -2.4111841545680734, 0.6362840169031294, 0.4286706455849334, -4.432028955043612, 2.856394053936471, 1.2043371407810195, -8.834499970958248, 5.636884552051038, -8.202422552847237, -5.113324830601325, 9.813168874574956, 2.9052654695154505, 9.37317419750584, 8.942312026763219, -4.41540060733762, -1.0258561485322577, 4.353723065151318, -2.6436832710813825, 6.777762456778817, -0.5571994485219722, -0.25561783098934754, 3.284320168960001, 6.166839916961916, -8.71325815085932, -6.831179572088491, 7.206337052979698, 1.5302074927010967, -8.183108717748413, 7.443969834856436, -3.3772810711645906, -7.681059736270532, 2.854373872012122, 7.718586304599334, -8.829420824445949, -6.3710290213602665, 0.10460443092538085, 7.026333413753868, 8.492954441092003, -5.125960312258, -9.290267002313584, 7.902114409088291, -0.5829754844891148, 4.443655485196858, 4.133658169276229, -1.3397189185828786, -0.3428983214489101, -2.250268579627683, -6.479831534098159, 3.7887821233608427, -3.154042730559425, -0.3650311505048336, -3.4546642009625916, 0.8267236760063703, -7.597556356342096, -4.632704223788187, -7.560787202758579, -3.249829870727014, 8.839699632603661, 2.2064727344111397, -9.768284632584143, -9.15780624621096, 8.826202805910153, -9.49577021219306, -6.907977110385241, -1.211664767482075, 5.2229940957115275, -5.658017469489245, -1.6684946048925156, 3.65368961839269, 1.339770896358882, -5.320441516351302, 7.352699337742031, 0.1296709122973656, 1.629087544472247, 0.6231580242439012, 7.129403275959881, 7.1493732552765685, 0.031274823269022534, 1.044281469640529, 0.5243405562166927, -3.369864845408115, -3.117088967762709, 7.615407749920276, -9.43497352131119, -6.052682998969667, 6.566385954017747, -0.17569611907535077, 1.4133683562608805, 3.4120867871483114, 4.9647876451179975, 3.154347461648669, 9.962228422768682, 0.4011720919862878, -8.226218844868002, 8.625097176252485, -8.277563098932621, 3.495792802759599, 8.717835952524762, 3.9057409877576816, 5.948197889249371, 9.280837287061349, -3.393929296265565, 7.854398605091511, 9.634824722745297, 9.558559282180926, 6.1895771003391395, -8.496978885011803, 3.8681151497067834, -2.242850107626218, -0.3669441487594671, -5.194034366542319, -1.4972892179618906, -0.5189600548009743, 0.39484544515276276, 1.2498475571359933, -4.246559436676947, -8.455549972608994, 8.877492599326821, -9.676652560866877, 1.6948042457801904, 6.331015082195151, -4.602275005315781, -2.7043826092153704, -1.2040535632841234, -1.6962078849853839, -1.1701426908834627, -5.554909193885315, 8.379890333679043, 9.782305502080483, -2.60001432526511, -1.5090818934148036, -6.294419860359735, -6.285211403344251, -8.716290700405569, -0.36101371837864704, -9.267464027418022, 0.5352873368819129, 9.482590958138715, -7.804202732295808, -2.1839801005150257, 6.203264503315928, -0.38629252153629956, 2.7569748594364025, -8.99107325205252, -6.622178056188073, 5.792830022244722, 2.7649262995599244, -0.5414048015542594, 9.718044263632649, -6.996718617542024, -9.337884652435928, 0.6191906323503353, -8.925393535711653, 5.672582557168537, -9.68869302780824, 3.7158705967683723, 8.198377496432254, -0.5851010610129492, 1.2223602742644495, -9.967422582811631, 0.8150379307763984, -8.334886190177173, -0.8162975197387468, -3.1149973855302022, 5.096877596549378, 7.879117893093909, 0.7238975948708504, 3.1292043633957345, 3.3455030676534747, 8.920369043154256, -1.6260305104241901, 1.7947595508097933, -7.090874815820065, 2.707008069004498, 3.94008773387341, -2.7391831174994525, -1.2833100591221385, 9.79730532993046, -2.9132009566970147, 4.785842482381888, -9.907686905409616, 2.459818088973817, -0.7668339200211545, 7.496286891517151, -9.549829933631752, -9.86509154961566, 2.7518328831277277, 2.5383157390768716, -1.799293565683243, -5.4039217913915145, 7.024743584374672, -8.12799407213123, -8.729217620874884, 2.7782226824507994, 7.721866882105118, -6.03372570512283, 2.400808762847017, -7.720810674245879, 3.268731632636028, 6.628472001843967, 3.6521009724636357, 4.212835794353914, -0.3460552436147779, 0.7616443084051099, -3.6123310907946715, 5.922247170377354, -0.28631670064784487, -6.125812843286842, -1.9397463015082614, 2.004801275220906, -0.15879561348574, 2.049982126593397, -8.009934668081456, 1.4592959655833653, 5.663413741639854, -3.251184110661624, 6.030530723247217, 5.733084986248311, -5.405865618422765, 1.702209063237012, -2.8861561098453574, 8.83705342416367, 3.709828952306516, 0.41968605111824253, -6.615613364761788, 1.8280465550715803, 0.6376055897192181, 1.2782826800145326, 8.272240197040162, -2.1921144334246385, 8.731640874577757, -1.1021991722077509, -6.437324730902613, -3.765988407776632, -3.364202077918039, -7.432523750141035, 1.1378048936397107, -8.641717421037615, 0.46918160984656865, -9.447534947170372, -1.4173016409968024, 6.289929999680716, -0.6561753916854087, 4.72480319535029, 0.009731242368918203, 2.1518893957258918, 6.190461079193497, -7.498992766117953, 9.72146126737271, 1.922041694209394, -1.3559624466226765, 1.0959468641219203, -6.419308502362126, 7.189590129552968, 9.813448095475664, 9.251616580341341, 8.65987564591883, -4.015117861297554, -3.9029287664868084, -4.031231092299963, 5.816334578806249, 2.849447213495722, 8.58099911951276, -6.641073211216016, 2.427857699974112, 3.417642349004936, 3.546666007857306, 5.334681493065149, -3.1545235967708063, 6.2081812305721655, -3.9022739625695113, 7.118555406645168, -3.5758805856882585, 9.36603264460944, 5.402971934212966, 3.253813093561712, 8.166266241686486, -9.315095326769832, 4.079871623836421, -8.727648902472115, 7.6034034780449815, 4.627674648167508, -9.038478591377677, -8.084275550675375, 5.965765930169686, 5.493582532064522, 6.9471909077104215, -6.667572931812639, -8.395226879206598, 2.4523577668859797, 4.878740599359313, 3.6938285397559323, 3.0497677730283144, 8.71921675712667, 2.9651232890185604, -3.2385028671994647, 8.56583185409631, 9.273794970043419, 1.1583828334448594, -1.426460147071234, 0.6543617193917317, -8.72632072601502, -6.783477478330749, -8.479230752204236, 5.3802012841120685, 6.146640224027671, -1.9681366883173812, -5.283970742091766, -1.0233992011570692, -3.718353511287205, 4.435694586115668, 8.092979686806142, 3.718759016064679, 8.89699247411393, -7.154802994129035, -9.866013905121081, 4.475382923379069, 4.949332585886035, 5.216710279012307, -3.6313449269983256, -2.6186122276299724, 1.632129962667129, 6.361512523293047, 5.0618355243316095, 2.5123751496649263, 4.587931804225814, 6.447601221840728, -4.854851143525045, -6.21755506265854, -6.988159562532415, 1.4054763976822304, 4.192146731275582, -4.103582270510193, -4.627017436477685, 2.278329821649823, -5.986883505804432, 6.6309397329247695, -5.723788343667926, 9.79319954857494, -0.362862039089185, -9.31410737890009, 6.1875231553006955, 3.4661987257385913, 8.57525990595932, 5.825848972740459, 9.542694303108167, -4.840573688457037, -6.057249719002879, 9.471221249012824, 2.160662378847311, -1.1694271437233272, -7.46780103137821, -6.841513719529155, 4.294852022595645, -6.2920196766173975, 0.4867317766814807, 0.9396536321563609, -7.971540356057954, -6.32015613307712, -0.5947895847691314, 1.8459894125425986, 1.7957935739167539, -1.8323702153741408, 1.0795417853061196, 6.526386506668395, 3.5154180356594438, 4.4880178915499584, 2.7122846198769537, -4.101350213383914, -0.9417799012808992, -0.45437362412461724, -0.9042374528022084, -7.666879716791608, 4.824970637881169, -8.922865794093585, 8.992392459457093, 3.546005624256331, -0.4100583556780091, -5.848840649045939, -5.194995578915562, -0.31348888978339495, 7.786318637164783, 7.133020115444008, 1.193014096504136, 4.683887449671545, 0.5212082791917965, -8.060305312427264, 9.499966785763078, -5.647198157083628, 5.0860891672633315, -6.103003983873833, -1.6144239390892938, 2.5095403441172905, -4.397044082155086, 4.882352865333747, 1.927870076098074, 5.2401116751389925, -1.759345971874005, 0.5099167208539761, -7.996119010304992, -1.4481793802363754, -0.342679447857666, -9.91862237124103, 3.553572768844184, 1.603781122489071, 8.78558479749055, -2.790815675068032, -2.4324027931526633, 4.64349203446144, -7.6106837122571775, 6.735307798192668, -3.105508214396197, 2.5602951575374338, 0.17668099955546168, 7.577923448102698, -7.062689636639783, 3.388604008308942, -1.8610645040739264, -0.39899421382187583, 3.1011960603232644, -0.3852929314409099, -3.0271166261876914, -7.7815311365039985, -8.114304594179142, -9.04152954162435, -0.008693305894995618, 7.050485976645874, 5.231432336435455, -9.591601753823507, -2.535598880544965, -2.7975099968226242, -3.8134287252380012, 0.6080349080422174, 4.713555322099738, 6.852085215158144, -1.5677225936771872, -9.046431538799766, -7.953890771649221, -9.290993442097037, 7.569079822197629, 0.009797841118446726, -8.87583968536884, 0.32679613542573094, 3.894535702619198, 2.6574206149110697, -5.98188471863897, -9.106437490979062, -6.751579008649378, -8.736686425984013, 1.7299489715658272, 6.475175128120856, 9.436863809091449, -7.384650654615237, -6.197623447179352, 1.4676059248782565, 2.447773523246635, 7.748285427536828, 8.326012763637006, -8.674795140413396, -9.255896591501234, -4.931073013910829, 7.6409341777784014, 0.2995506353677584, -4.7510279717046, -5.837535480957672, 3.9439922560359353, 2.9486845586987442, -3.193755359416233, -9.063557875060662, 8.458662681050736, 4.382698427951329, 1.3353213994988415, 7.558429529407103, 2.213094821713339, 8.645151005757295, 3.291525388864965, 3.537977293711691, 4.406447098726563, 9.795912984981722, -3.83918189385279, 4.2347019422864935, -6.4434843680887965, 8.010404929661078, 5.564559749388362, -6.750344440090346, 6.844160603359093, -0.6799516496081299, -1.561525125102758, 4.232806819805912, 4.3736885215690755, -3.989553126829235, 5.461842805568617, 4.799290729974036, -1.6022108720642354, -7.398562116080054, -6.119638882567613, -6.26999506183849, -4.813766795299362, 8.4503933407731, 2.097192127355953, 4.2805344650381905, -0.01410238289225596, -1.2732268329370804, -1.7723044170133733, -9.281076923021118, 3.9079695651080204, 3.583728943819324, 1.3846578637608395, 3.309581682566094, -0.6326556908956924, 0.3956470406339623, -9.585268246932854, -6.538060295418799, 6.2103532701169755, 0.7448080331225437, 4.4613848899520185, 5.077124973623825, 4.371496616536422, -5.747898364553469, -8.856620248869284, 9.260490625802817, -9.813459647376277, 8.846686907982964, -0.9178908926681366, 6.194648129601308, -4.660056950130906, 1.3240403582554485, -4.788821683630948, -5.209485677112102, 5.538292838495069, -8.701610372101944, -6.001784970542534, -6.133111265462777, 8.468159899810377, -6.682466395340175, 8.353777719369518, -0.8246993021718101, 4.779841474150558, 7.834949903723661, -9.203545620662506, -0.8107470336439171, -9.992981719547327, 4.161617699823415, 3.0618065201938194, -8.305708688166833, -2.593950176462707, -6.152238004211769, -4.4334653425970405, 4.5756234714309905, 5.2165889494622775, -3.8886875133706305, -1.5009219124833901, -0.027479509300631477, 9.71912427702199, -3.9935555511302745, -1.4569949447075086, -9.880275199770205, -5.3161607005804274, 1.7670432973431822, 2.872038667640453, 6.505282004557252, -0.22185035885175886, 4.9740740657778755, -8.497081657320784]
BIASES_LIST = [-5.216542859188513, 2.9387327898733133, 9.299477243666423, 2.045561003017502, 9.064561528958713, 9.79549114779606, -3.892470682520086, -5.981834756947785, -4.8780841106349415, -5.2639556350779575, 9.186567486404499, 0.48129682800427886, -1.3573279066609611, 9.826082700950632, -5.755956883660421, -9.777987952451374, -1.6682789899438752, 5.738915569868446, 2.381502346356788, 4.251883774245723, -4.071707126801945, 7.189508056740948, 3.6032969137908566, -1.917743230406309, -2.5913834346417497, -6.207794653937042, -1.8960891254915992, -7.519220436818412, -3.2354228209264146, -0.3211383745397338, -7.2774627085202015, 0.5572463378693282, 7.62373291415685, -8.324519711277533, -2.4509390950861087, -7.093130282783706]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

