import random
import math

WEIGHT_LIST = [-9.731607528298225, -8.147528629909644, -0.597925650428488, 0.8529148127367598, -0.7767175374074355, -3.999473532713047, 2.333802610401696, 5.514647443171221, -7.334554429156643, -7.42471310094047, -7.663374573896158, 8.413385644593113, -4.353070887565183, 6.700419591348734, -7.806694288032457, -0.7636140896359773, 9.855744255869702, -8.851402543752664, 5.429867530087405, -6.70310729435567, 4.407414599637345, 2.4542846002988767, 5.196940853207362, 5.102177071530365, -7.846926673118231, -6.571007808975553, -7.144075957771752, -2.141410973765227, -7.002300370613659, -4.065684733534633, -2.655117570496481, -1.4228570406394798, 6.330682521525318, -5.169389511576876, -6.87079763829741, 5.6218784441929355, -2.840416581622131, 2.1862353772931264, 6.296522008326704, -0.46505697230615795, -0.3836326250095432, -5.543928233016262, 0.8541275181378243, 7.87895319971339, 2.0690510301194553, 5.8029831445924085, -5.534282221253434, 9.389905254973637, 3.3490496609044325, -7.183192247605048, -9.70132605513798, -4.8455465219232625, -6.297929370704494, 3.9835269389752774, 0.3647819427967942, -1.3202072725730911, -1.1547783497058965, 6.362741365120634, -7.654601840126503, -0.5922411331218225, -6.840982491951431, -3.6286841540361037, 7.585325269941407, -4.471301890401338, -9.390762632617095, -5.310622749618192, -9.619539781015922, 4.691177670444837, -8.25379481028624, 3.8700370204150953, 5.097378638967831, 5.952214864302352, -1.6269157994252303, 6.657512929307892, -7.4334867208149795, -0.5204562080499677, -5.136788145034048, -2.0577366208548327, 8.049079643836293, 3.86927880517743, 4.48839636564138, 8.755129693867964, 0.4614798098086048, -5.473674321839839, -8.013800079223646, -8.66628940777364, -5.096104978705731, 3.867939305771042, 6.15903712953876, -4.4566822147128216, -7.2802041266093775, -3.4533747198742315, -6.308625375919088, 2.19089482920433, -9.574501443859194, 8.598839059521268, 8.624103585373575, 8.44862481748278, 8.253191929360327, 0.2311470449282922, 1.0564074438095155, -2.9123805969707073, 7.53082321003356, -6.402844555099268, -2.4329657934346365, -0.5372657485785695, -0.012597956740927785, 6.897190346572021, 7.630008523401173, -4.399733838940358, -9.552839864574693, -0.6497514529234749, -1.932485029889353, 5.248923239489072, 6.29475850014375, 1.3835111658718429, 9.449482944191242, -8.670632962780589, 9.936272836425385, -3.7589896504919214, 5.129860296986919, 7.839375835756197, -7.0285666692446895, 1.9727109455794984, -2.3984934883775555, -1.336227523960014, 8.049682007571889, -5.041716576399857, -6.133987520977923, -0.6211178576958076, -5.125864255844528, 9.975223144140365, 1.0099983882244423, -5.307131910690545, 5.8993822392200315, 9.286457959935532, -4.470349302709648, 6.402271119649431, -6.562618829334204, 5.174291256352056, -0.8696691283092619, -5.227406097069139, 3.362681461211361, 1.0630353193680193, 5.697124445965452, 5.7273643610433655, 9.66878961604198, -6.619101133402383, -5.250540825416234, -5.308799271213498, -0.2256516464739189, 5.339977027598671, -5.321827024538304, 9.57583013779492, 6.169791943136907, 3.4396923361959786, 4.264271748978562, -8.537816318660242, -7.669030521336195, -6.057547244701893, -1.8055868378580886, 9.320226998297578, 6.148747127304947, 4.623485865645797, -3.6519282306010803, 0.07792767869183237, -8.429956310575976, -6.833632667463769, -6.814222958691061, 9.393247443052921, 1.7405062359710612, 4.913150081433672, 6.982661685004551, -7.211706479262521, -1.9270460745903861, 3.7866204286255005, -3.492986328122054, 1.8595171672511306, -3.376733133560535, 9.059983555480922, -0.9324927523587228, -5.030767597881196, 8.06771264607043, 5.028903697294165, 0.659741159144918, -4.9256315354626, 0.9626158427133014, 5.7818262597644505, -8.501432500688622, -8.33199060691877, -3.1502274810295017, -2.6819154239221143, -8.636246092720544, -9.730841893104733, -2.977705179134551, -9.721492201529074, 6.602197594400433, -4.970703267512109, 3.802308163933226, -3.0793407245792697, 6.224002623799759, 6.549947471744979, 6.018309994273096, -2.1509908202423578, -0.44765711721573886, 1.1835413895016078, 0.22121266977807252, 8.567279115201373, 0.8811536603776808, -3.138467267415825, -7.43998747697453, -4.477759433329355, 5.36889966777704, -5.902755521142322, 1.0156839333910135, 8.801314452838906, -5.698593492196622, 5.138643979603923, -3.794154101447904, 2.065521767045082, 5.273857183703651, 6.589197989320262, -5.516896645611427, -5.273886131461191, -1.6585816962294366, -5.92885319000594, -7.872441037890638, 9.908803917723969, 9.905819472051721, 5.052414277708904, 6.78094073715193, 3.872933057406307, 6.537889951795286, 3.751661707297952, 1.4478345368710972, -5.5290811056959965, 5.005238570813615, -1.961715418590341, -0.46195619164005386, 4.726148431470554, 5.864922335833064, 6.627706404104067, -0.5435526955269143, 4.4413671025856765, 5.236719337234179, 5.452949997605925, -7.322983145994235, 4.579173366538027, 9.28959969825289, 5.235380569120171, 4.596723387691409, 6.571568272183612, 3.740182631016438, -1.112743141938303, -0.6053622090737338, 9.833001055341658, 9.39377549255656, -2.1608552068685993, -1.8762705885444753, 9.471499082676115, -4.0906929947361075, 0.964581900125614, -8.019977556995109, -1.6520828201106852, 9.75293294776776, -2.777726119856105, -2.5103609858521985, -9.90073104877031, 3.0515088830976786, -3.644558681853722, -6.8261277457479, 2.2509155227230533, -6.675563856537905, 2.328651326902623, -8.972993888267965, 0.8467186314540172, 8.530928845068942, 5.792820720042117, 6.2694377199317515, -8.160607491911485, -0.6139975933480208, 2.3718295059644756, -6.3597777367054515, 7.60754239982343, 6.242259552945338, 9.796837704927867, -5.915691494840698, -4.4953934073743795, 2.136530237828575, 7.030752590500441, -9.897161486206238, -5.273199624744292, 9.098122110733385, 0.9914378615574915, 0.35823217961872267, 2.3045477315500644, -2.6080280297224157, -8.293279070330135, -4.913150055697608, 7.979327245810474, -6.963089462457008, -1.7960402567649698, -1.23283879787855, 2.752457795437671, -4.228316661311434, 5.764069214147263, 4.607806076758203, -6.238394680427857, -2.9547148326856405, 7.752575484116221, -8.885681799854249, -8.530688710674488, 3.0136525739195683, -6.715610944200154, 4.67238920597384, -8.785766782636665, -9.61544752375234, 5.41652598740326, -6.0226977212028405, -4.846468947342773, 0.7921894664406253, -6.605576032293758, 0.9641354877776571, -8.305040014481264, -5.842807991304344, -7.263317842171599, 0.8109214049031266, -2.993693586461874, 0.9479405925318609, 8.144884208696269, -0.9279854483952867, 5.377188151530511, -1.2663782247171245, 1.4895172899438318, -1.3505602661098237, -9.853874782344175, 6.954233536373259, -6.843974345846289, 5.166611310011103, -8.256062069996329, 2.8734403324600866, 6.586693328955118, 9.759400908312536, 2.2734418220776593, 9.902953796198986, 7.955446399457948, -8.932889928581888, -4.206126424422701, 5.92113714524929, -9.558900269586099, 3.018226839880139, -2.423231965131711, 4.562310406981853, -2.249112600724585, 2.822091342033822, -0.8632672676964255, -9.787455798178698, -6.98432744032189, -4.760594284166122, 5.058304219187539, 7.315123076682713, 0.8371666521729786, -7.817564362002647, -6.958357413325134, 0.9757060344832489, 3.7647684667116206, -2.1876147214015145, -1.8570455512216633, -6.148980061727183, 0.1795016547423689, 5.576034840139091, 6.775626984858455, 3.642342646386858, -5.807017831803616, 2.0924198721030685, -2.48597097521273, 7.0403146724351515, 5.775631609601463, -5.516108057497375, 5.646184501790543, 4.472758323990655, 0.07015367554035024, 1.4411615051553284, -0.08168359947919868, 3.4931659818722576, -1.510415354819406, -8.461895130524862, 3.3076353675878103, 3.3670319685617898, -3.225286013986601, 9.154312618847285, -5.1074037911530805, 2.7444494412100227, 5.724996338299032, 0.5505731195775692, 3.060044341056802, 4.150460210377691, -5.482097624528352, 7.9952772436161474, 8.794779108048019, 3.630429157215856, 2.935065891374082, 8.913746297332402, -4.187227879710469, 5.5514456548244375, -3.329180158020371, -3.9595234126639722, 9.356082818462212, -3.6547329434573754, 6.847105291827628, -7.747236453363254, -3.1672664306329423, -4.989768425155008, 1.360902640544321, -9.531882244328937, -2.0254798501947153, -9.414884160635035, -4.314146834028061, -6.225894858805228, -7.175464044156161, -4.811597571066626, 7.054057307926232, -2.93982194546804, 9.201636409223276, 6.913882727754192, -5.3152311545994095, 3.9007779100857256, 5.738219356491374, 2.7141055538583796, 7.812936191320709, 9.749835678697355, 8.629172633066002, 6.996914232938192, 0.7903363009150066, 6.810634400302845, 7.990234103726074, -7.453800286627315, 2.6416503010279673, 4.940182038399243, -5.709058412573613, -2.9032967654778696, -0.7287765845302481, -4.638578294899391, -1.2772608837495092, -5.34379934752002, 4.510639690308267, -4.527289587933612, 0.8799856475467287, -5.779859547150032, 3.5193743137245637, -1.5007910999475271, -3.342511684764773, -3.2002141995444777, 2.909137871414895, 5.894783019995662, -7.8167236451633215, 0.06993634896063128, -9.219270178563423, 0.5947863970471658, -9.950453677734286, 9.15553021679479, 6.42440867992476, 3.157909221366914, 5.310685052142755, 6.364340659743771, -5.471239846030889, 0.4228147788506238, -4.848258792497813, 6.543544926931901, -9.733258830417375, -6.9377914193817585, 9.494775611455402, -8.087671737261257, 3.6185870927661234, 1.6103032348102992, -5.718170133218159, 7.931489889322901, -9.666220895001027, 1.0676457825138357, -0.31170297176809214, -1.508167845990318, -4.710788322199173, -0.21427653229526555, -3.7485981784278444, -7.7874746664524075, 4.852726499457482, 5.938253661149332, -0.03265811414023112, 9.206197656699125, -4.197957348332406, 6.183182184056406, -0.5295477000107969, -6.801931773265295, 3.6578476040235497, 8.3237881903155, 8.10626522015474, 9.90635370389262, 9.460427861595019, 5.632305907315551, -6.303492738513803, -5.24665983061449, 6.115342507006851, -9.725857117263999, -1.52002529874569, 3.5910839831986063, 1.1519940011502285, 3.9989611853177482, 8.777477947404854, -4.376226411781008, -8.771669948943902, -1.4284815161790743, 7.389378529583855, 2.2365343501614614, -3.2786913676883085, 2.7536383379057465, 4.03510020110078, -7.703000043534331, -0.19058040673696475, -2.9920001318802703, 0.44735956124340603, 3.4048137440200055, 9.163852352206543, 7.4381390641835665, -3.3193078886385585, 8.708417815959315, -2.742714327509253, 5.5644368967111895, -3.810344025461019, -4.439079074047854, -9.874055679532463, 5.823482463053807, -8.14042789486453, 4.729694230029725, -0.5250476290919632, -3.153403399219858, 1.98982316849985, -7.88888160632286, 5.032922109094255, 0.13566740245672548, 7.174496530713938, 3.3007783801304598, -5.953147093667557, 2.797952313862087, 9.664056285311155, -2.7494012735449065, 6.372884077183656, -7.902548593436127, -2.9302123942795033, -9.884635114391694, 5.167855728327728, -7.959092653806903, 2.1825117856806227, -7.784977325426592, -7.44030988418918, 5.914472522932705, 7.142836947674031, -1.3113246797485942, -8.30622167876193, 1.1142213040753788, -8.50365254574391, 5.327321607195227, 8.697086651053745, -5.413000100722085, -2.9936186446352213, -1.0044851222981457, -8.908487446653762, 8.560221292087153, 8.330451734853291, 6.731978452345629, 1.7021544705737224, -8.441939106728679, -0.08868399870858923, -2.904869808519801, 8.511961171194368, 4.683666407155725, 7.552361464924559, 0.27015161505802077, 6.882474834756028, -3.102999600715872, -6.593655168234765, 8.904968700822359, 8.098326164069, -0.7888246315418073, 2.418683245126596, -4.449915095102752, -7.148654386882924, 5.803288707789768, 3.425041354900525, 3.6679277472048, -5.879669042555169, -3.6333960431866608, -6.184860825923957, -4.657642352701821, -2.788782476273224, 8.260266496838192, 0.2734147119919399, -3.7685042741178076, -8.468544465640447, -3.823687127591522, -6.459124951521984, -8.848835381725044, -3.2928139847008957, -8.46041490512645, -9.48593247914134, 3.323034281108473, -3.838683783439862, -2.123532658480176, 9.360148350989007, 2.41443272396036, 9.775246947921918, -4.812945931098276, 6.017051259613364]
BIASES_LIST = [-6.217365211209936, -8.119318231520378, 4.348623488682664, 9.098723442373696, -8.46673025082177, 1.3787115127671594, -4.730488912924873, -7.551815309230776, -3.7951853614127877, -6.9823819379429946, -3.0825559834557925, -8.977411489608045, 4.173045691964148, -0.12027623266557086, -0.4491452774514837, -4.9452336246689255, -1.2429488601889709, 4.777791792101835, 5.734681690333996, -3.0341830848008673, 7.733136949414188, -4.450342108485912, -1.4338381617216793, -6.606818337630676, 8.772711522619343, 3.455941328520977, 5.150015552516793, -0.38701345917426977]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

