import random
import math

WEIGHT_LIST = [1.2572740508672298, 2.737498622805802, -0.44316917178958615, -4.268883324783776, -2.1181653465234227, -6.500393932234552, 3.2048111197810467, 1.8901372030935795, 2.22126979947749, 1.1606062530212302, 1.8023027279015897, 2.3759302727269205, -1.578542861811719, -1.1340767592312166, -0.43251497081742485, 3.6076153321509707, 3.055386471894523, -3.1377443446363626, 3.087714584907789, -0.6830206671461314, -0.7814205157058554, 6.185847385833045, 5.497005333081542, 3.2281889623128563, -1.6407186568245855, 1.063328745709644, -1.9592589091304198, -4.551984730455503, -3.5226703120695833, 0.13332359918118764, 0.6509281395325881, -0.9734829683795275, -4.662513299275579, 2.1949671412851197, -0.3939007601447393, -2.8081152635399658, 3.6295210724663187, -3.0433440286153752, -3.4647880289046773, -0.8711264566255328, 4.775549509582129, -4.0770461394006245, -1.1934899699295392, 1.2224973675329531, -4.945512348558831, 6.495655369409029, -7.030531274202363, 2.4607419876252434, -1.7529909109252975, 0.6008567261722622, -2.9739117115578675, -0.7365350453937375, -3.6440917990790727, 1.280221800544754, -3.742950384225005, 0.32093007809330487, -1.0570509729530493, -2.482877243972902, 7.217992901888344, 7.209908148000466, -2.439210136942405, -4.465939046133544, -3.973201701371928, -2.1858479532436648, 2.3202394586846955, -0.07277679790125768, 6.681376060427983, -1.4107135164679583, 1.5520599085175588, -0.3111837591515231, -1.249308313925129, -6.417270804457235, 3.4898395983850135, -4.48263837738649, -3.1363949665076856, -2.958078182467045, 3.3510586112003633, -8.679495251430339, 1.0569894443839405, 0.7421618499446709, -0.2761589203537236, -1.1414292755676463, -0.597002808108273, -2.49045220801929, 1.347987865774857, 4.068657742243101, -1.0352013421645017, 3.8371824285669067, 3.3534922063160284, -0.5806499051778308, 2.704233472264105, 2.476644167239904, -4.146562272616529, -3.6791259076781655, 0.0024382131087650194, -1.711437641884968, -0.9509098424449205, 3.8728126254168096, -1.7512738206764167, -4.530138554207813, 6.831500309199115, -3.3308104989087854, -1.0589779848585346, -3.174700832375721, 5.299948444917448, 1.2478854950721665, 0.9117228911301583, 3.849683933823089, 3.1006896331392015, 0.24477102891370972, 5.124932779023054, -0.7819493119269143, -1.1484131144429335, -3.352169507395317, 3.4065471184013028, -4.758152904985198, 4.371060213344229, -0.5894792021606181, 4.905712701480841, -0.5318288900854369, 0.28169718461911586, -1.4753599117541019, 1.786714164300259, 1.0561139339146308, 5.554304696401981, 5.314680761257795, -5.4413456727237355, -7.211594346253006, 5.263818271243234, -2.2651495618451625, 2.0687673281250127, 2.433922695327814, 5.2867730197352625, -3.7947495556460034, -4.42782360776644, -5.798033193801978, 1.0432632523148593, 1.1769175146596953, 1.721716920013181, 2.8670928595404774, 2.1147563625666574, 2.6503668640995293, -5.664016347601244, -0.7958308426854889, -4.81558339377409, 2.5120358057270704, -1.1117330225642295, 4.02170159105912, -0.5965265318777483, -5.9380289141497755, -0.5097071696156603, -4.145419268761877, -2.6245603819562726, -0.025429310765068713, -5.149928780536106, -5.805962713699168, 3.882820658181414, -0.35656594278945475, 4.300729491999341, 4.0670557686769495, -2.173251765393523, 1.5999610203344266, -7.179520318869827, 4.898165660713104, -2.923107906882264, 1.3860277222642305, 1.4300610244473724, -2.7591485575597883, 2.305947266715496, -4.040512685730144, -2.426499117748328, -2.6881815063619126, -0.8399186139681606, -1.1826086374841585, 3.056315819873231, 3.234150516055382, 6.303877693173972, 2.6917070204480082, 0.11626843210548365, -7.8400093341004276, -3.2291844232293725, -3.291671648724216, 2.393134786307042, 3.5903636122648033, 0.8924949132250648, -0.09762383236727068, -1.6292678989746197, -5.567746289374326, -1.3367569628480007, -0.4392910838194972, 2.306124442786669, -3.3474639565194426, 4.845281563886231, 4.457114001416413, 1.5356019640748544, -0.30727555814992, 2.605641141258559, 1.3941143615666602, 2.272413976021884, 1.1047037315903485, -0.8371137963540075, 0.3664768612881544, 2.1927040142027403, 0.4720067816801532, -0.1685870415546522, 2.3374041714574236, -0.4024174552480466, 7.4782548546013246, 1.8376242925398234, -2.3400707498102316, -0.42157029583519434, -1.0594828532772527, -1.2232182319646292, -0.9531769223118454, -0.18183846824006067, -0.7903884778491608, -0.910636531807419, -1.0746335820304347, 2.034022928149289, 0.7502488739283297, -3.991316937087954, 0.9242568435620486, -0.9183427420498992, 2.426825575124721, 3.9191461627863164, -2.8103149920579273, -1.3861481997222282, -2.759352561453084, -0.7954008995269788, -0.7355634066358059, -6.871894194656249, 0.16068388807099798, -3.7468436593849805, -2.6391662397795193, 2.532783445322681, -0.43590686824466984, 6.549877678299817, 0.6521455371628819, -2.496964636161446, -4.942071926161738, -3.1390474293423742, -5.859763799178075, -5.630081820118937, 4.023887290496049, -0.7704523108975989, 3.6647005826227055, 1.4962551611632646, -1.1175386797149358, 2.832956524348955, 8.049424020087823, 0.5671277925378302, -3.194039820607939, -3.2643837447315214, -4.835606743932344, -2.8567593550457344, 3.0026649405953876, 0.06065824815798471, -0.07386743889655778, -4.210897092238471, -3.0555602350813813, -2.1006849882395136, -0.4675730909790041, -4.359704734601578, -3.7919935260967366, -4.188032094091238, 0.7077813271322049, -0.5076489437119531, -0.06325324916789798, -6.175307816853705, -0.7161687777188772, -1.804643586064643, 1.7462980316015955, -3.313118923670923, -2.957451538478483, 2.8717483984152725, 1.049233181857709, -3.636602095630848, 3.3114369745288137, -1.1161310030896028, 0.7300849169576527, 2.246139940402266, -0.7081473647526725, -4.326382105722702, 3.819620719359989, 5.740187698128104, 0.770661624444507, -3.5719131386700282, -1.5530522491200895, 3.0078796315606704, 2.345108415855565, -4.636153783987663, -1.978011901515563, 5.098525075726895, -1.9308764370362073, -0.8123121975871317, -0.45165888394678366, 8.75285844548257, 8.107853728736618, -1.800586619215927, 2.353460390037463, 3.2097863505791473, -0.3045910967189649, -3.5815607843229182, -0.7264860443879873, -4.891360176660104, -5.306374403418062, -3.7358144096773342, 0.7594861754555695, 4.304232481754922, -0.8976199000572742, 0.7899186603892179, -2.1315398719136254, -2.0706941165596633, 3.6001838604830807, -0.8095473788922014, -1.3807728279561733, -3.0442166422236103, -3.2609478634370106, 1.2494978110237858, -3.6726812817388748, -4.108186344642613, 2.2899449179104625, -7.15102320507839, 6.313226315101569, 4.784546571761738, 3.567734092235761, -0.8875203247483244, 0.13757353884455736, -0.37734178977071564, -2.2328105234723132, 2.4941576743128895, -0.2141926214392691, -7.263250189675045, 0.92623100142213, -4.602658759988322, -0.5156080666236262, -2.0627951804945184, -1.929676758497563, 6.174208985518145, -5.22130201767843, -1.2654887934479904, 4.686838173439313, 1.210505179117919, 3.315632294762983, -4.341950299369326, -2.5624519768411593, 1.7531470698306024, 1.914923199789265, -1.9942545000638514, 1.5311077897515366, 2.022062417698419, -3.6845739501914063, -0.8201777567175161, 2.005165736247293, 1.1645882526549007, -2.3086919917278452, -1.5208030711311546, 0.10651136911911352, 3.0336433511474032, 2.6484686610467207, -0.3444796369026739, -3.9879466705624553, 4.05740322011114, 2.867395091352873, 6.222508593517514, 0.22088938713848605, -4.772709253959266, 3.029749742814711, 2.029613610317501, 0.834801156097845, -5.294042698631089, -1.557096166326509, -2.643816595062137, -0.48197812180655686, -2.610911766113851, 1.951257952990423, 1.2127315788059798, 1.4509280731170056, -1.4566618542666203, -3.750782449763169, 1.8920966978368021, 2.8966399361306188, -0.6665726210930412, 5.475134031915259, 0.6081055726756532, -0.35599804372167354, -4.784235806160839, -5.047403357457634, -7.051972796674061, 1.4762769835197092, 0.8770497572199785, -1.4176860368052397, 3.5003956467132795, -0.5475982750949463, 2.1818228625253693, -4.614162428839331, 1.1711544607245088, 4.78896250811167, 2.5653822287860724, -0.6648559397758067, 1.9891688414422544, 4.452447240670714, 3.3105943844507317, -1.6487037302817984, -1.273323100571831, 3.1221700267681776, 2.7553040748693496, -2.2349927116009325, 2.34259266918041, -3.28696109143428, 0.7116852776517024, -2.713432832200869, 3.7124280333746222, -2.4961347358446746, 0.5246022217875654, -4.406580983063314, 2.3960772666206114, -2.5186920886410435, -3.0853207016150597, -0.8740206284844699, -6.161392108844619, -2.15338816912916, 0.6679986237215954, 4.841851958933135, -1.652433313402978, -0.5067449785824762, 3.1721092966585642, -2.9888390679738444, 0.14335377155972084, -2.3301711061233648, 4.141563741499142, 0.829713657740792, 6.061498891872796, -3.373874190889568, 6.0787404145376325, 4.405596987178521, -0.7945582217591328, 0.21322291781855007, -0.09073822336170423, -4.904332253802966, -0.2867494671543178, -0.4532341973076377, 1.7818954286864899, -1.0767782873465652, -0.5907020509072128, -3.652453583540874, 1.4660128066041027, 6.496019161069141, 2.214547247817827, 3.2034194520061474, 2.081102021414866, 4.062793585677346, 3.900377902808728, -5.3047760082316495, 4.955701809741301, -0.3390317571015131, 2.7597726435953547, 3.744766766885511, -2.6935679670733634, 0.17553975919670095, 0.20220747801873507, -3.551227545279245, 11.426785611096754, 2.447804190815341, -0.24533346269954492, -1.6412831341614937, 2.6627435674037203, 2.6957601951925136, 2.5165290540837173, 1.9024297903140517, 4.807254868827054, 0.8350514657628749, -1.3105837815013284, -0.2855230908012836, 0.16549732493256575, -0.3421055434736523, 4.734872905306958, 3.384694154513144, -6.494443761390059, -0.9807835468988819, -3.3573911141257744, -4.511697551911686, -0.527073990159636, -4.976722668780316, 3.330635894303505, -0.5250668966030033, -6.801711730006483, 0.6307276949188938, -0.9841746461574392, 5.12778690801634, 1.3799173192907634, -3.7800180624377058, -0.6531195854426939, 0.7106350456324293, -2.3833800157843132, -0.4089823667799968, 4.590022401470404, -0.13568986619901868, 0.9735645555546801, 1.4900559034730456, 0.59921624608048, -0.9621423238911921, 0.16454899607647278, -2.129167501864136, -0.9691456282388125, 5.731717256206694, 2.7421455139269337, -2.4860772465870946, 3.1683000815316813, -2.2742452197416445, 2.4136988222161206, 2.204763923118472, -2.8529890514311935, -1.9622582194043352, -4.981458055422908, -1.7612367023201858, -4.76393203478769, -3.0163218048014584, -3.439102924284647, 2.666915166607363, -3.908892974595563, 4.593938193087377, 0.28581673817344977, 0.4055921072142159, -2.8700621050396267, 4.928957387593016, -3.5924592411411784, -1.7645775455579435, 0.49217663067692685, 4.4578967503053, -4.441637491366242, -6.580992074209955, 1.292702589458576, 2.732484810444731, -3.8591363531280667, 7.5085471874858545, 0.576393266074938, -4.596256603178829, -2.1685921408486895, -5.051285498062148, 2.2325275488514054, 1.038944985147296, 2.201857955732864, 5.382510428860068, 1.4523768762732683, 0.2615826636316343, -3.9661488567875383, 1.3036543397345053, 2.7754435985373576, 0.06865887497900092, -0.13031808996319716, 3.5350589020147156, 0.5695930820845889, -1.558092696671134, 6.936678470434199, -4.600288314912323, 4.729020758578551, -4.451770877578509, 2.8039604839326673, -0.991015467748219, 6.791979265811792, -0.2462488064772318, -3.2133983490445424, -3.09096957292837, 0.9484527356388259, 0.4398891480576612, -2.4222719926808907, -3.958117110991699, 2.230150904361116, -0.4389268106129849, 2.4116682712394892, 3.2489024392392363, 3.371313333438815, 0.18018516260584105, 0.7766494440850411, 0.11127599287847656, 2.5810840348502015, 6.685502742899063, 0.39512559865998464, -0.9637310475892891, 8.50644645719114, -0.8770332822795455, 1.2850089385895775, -1.994921994876475, -3.140400025976643, 6.237104269191465, -3.2078441224444596, -5.489275159860198, -0.6614911142787223, -5.913806193123701, 3.838364473463084, 1.9440637950813486, 4.947911656577914, 4.941882327888647, -3.0947624327016205, 1.4981237044013733, 0.4271204378625144, 2.912970614111191, 6.794299578840218, -0.04902898903597075, 2.111464602610017, -6.455278523707753, -0.8190687320749263, -6.684510436677417, 1.7846193839309592, 1.669005804073144, 0.6343669913044327, -3.640111386575264, -5.6405796144313936, -1.104123723953336, 2.205090780896054, 1.803416480761955, -4.28129271377541, -1.581456091305445, 4.719175805673781, 1.019396245730924, 1.1226529015993716, 3.238867609753255, -2.120617815257206, -0.5116767808934726, 2.0298462853910615, -9.966966118021006, 0.8609368506032193, 1.8966728511615836, 0.7213020829590446, -1.0798557112927851, -2.16424155837257, 0.7182331606463292, 0.3121372279824768, 4.032388136418799, 4.591982512317931, 0.05614220405227277, 2.9898101021759445, -2.943320305786733, -2.919350271435041, -5.18239831693615, 0.8493374171634862, 0.48593670444798565, 4.631784500313104, 3.5547348370752188, 3.87950875533427, 1.8264412228691222, -2.248096980794501, 0.29815375212603423, -1.6263652371911854, -2.3980228812823494, -1.567697192297399, 4.499624974610883, -2.2679095427873976, 4.641335936820889, -0.6498169760116199, -4.648280799739501, 0.1342065144113067, 4.524775553881706, -1.014601976227396, 2.896563142638785, 1.3622429714317863, 1.3603797513609428, -1.2900954712000352, -1.6341324136671793, -3.47766998524798, -2.0983813024363895, -3.5095870997206933, 4.088273995532668, -4.887099534535077, -2.2724856206903548, 0.6145186931829569, -1.8907216595871885, -4.324635594288057, -4.44783078487374, 3.389916357047567, 4.4468016217502715, -1.0398983618148265, -2.129880534449829, -2.169930474528257, -5.928042733105041, 3.485105151878928, -5.170702357680503, 3.032904382337554, -3.2193700829752983, -4.856900487371933, 7.150342213461862, -1.7486113591056078, -1.9672809565647573, -5.417567285784037, 3.1358481509605074, 1.9151360093575596, -2.911361100731936, -1.299679930206933, -2.9922296684298963, -3.614727859695588, 1.1908072095179723, -1.3603257250710634, 2.6291100714051514, 2.0548780100527506, 2.986338703347756, -4.187234110395948, 4.975667876520935, 1.001436572199231, -0.6282486952592643, -3.2032571100052283, -6.522897735127994, -2.9133450767198887, 0.6666983550586525, 0.047067559641418066, 2.445489711709622, -4.258890108999832, 2.0336697355425306, -2.8240886942088856, 5.200077922731149, 1.3224456185449363, -0.28540829038512705, 2.9764175810187954, 3.0144502781761453, 1.2048660786210124, -4.750331837568304, 8.788542286616057, -0.7136935636296742, -3.162144059619747, 0.4029799951976538, 0.3511948892001353, 0.8592542247387447, 2.7992562240751515, -3.5077214572597324, -3.157894239879306, -1.156342763425037, 0.38972458722657866, -0.9535425035340375, 3.8988872984888925, -0.07030969889591732, -0.813723056058884, 0.22283846352978798, -2.64448172584828, 2.1068316490187025, -1.6702447592719207, 3.5563545944610633, -1.5568540226334355, 1.6853813346470536, 4.486777244804253, 7.56426349464701, 1.0821003405072478, -3.0120353058164024, -6.608075953046385, -5.153676913268523, 3.753743390019064, 3.269496196556137, -7.357802915359272, -1.9226258420802578, 0.5577219474084085, 4.6260222139396046, 4.3855417456717865, 3.6905765198697633]
BIASES_LIST = [-3.0947590160612872, 2.8519481603397168, -3.544734162815587, 4.829661671751605, 6.86847822273109, 2.5937064419673437, 2.19387114252769, 0.5767845640308402, -2.7359869651250124, 1.0837419221977806, 2.247576327963671, -0.47339559966166544, -0.13225403980762462, -2.087068577145783, -4.264495336221, 4.585880872313828, 4.766215055075561, 2.5977432121448354, -6.948961537796834, -0.43682546332434136, -3.8629825965119426, -0.7740684181122729, -3.68845335734303, -4.896075412534075, 3.508069905935125, 1.5753530223566141, -3.4587417769984, -0.1198515940591085, 2.9511199582753105, 1.662869510575315, -2.463153888884582, 0.5373610880223678, 4.111201498732756, -1.9717229465587387, -0.28677292827301126, 1.904680127048164]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

