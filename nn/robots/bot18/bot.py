import random
import math

WEIGHT_LIST = [-8.177413431534275, -2.4969977917350867, 7.2742161766931845, -0.8192549481587017, 4.097286207497103, 2.068955935505716, 0.39247039130731615, -7.106022093991099, -8.99943377837274, -1.0532664900641775, 0.2544052853817312, -1.901945954759473, 0.1374073330927223, 1.9778843213386286, 1.5374452487256258, 4.233782992243207, 5.5514758878848545, -4.534931700607523, -0.8604868327116137, -0.44732004828641025, 4.227625802992441, -1.2525467762196816, -3.5736652562610844, 5.475483392444632, 1.4670218992019763, 4.695250945105598, 0.6372466690866092, 1.3326095173115768, 1.0896780053077304, 4.386817977889036, 4.237983134263662, 5.623744029686656, 0.6036397118271744, 5.87291858760533, -2.54299330308456, -7.0793161865629886, -4.375972916870191, -4.793896845468251, -3.6894454987694276, -1.3240430340067304, 1.952211236790819, 4.731669163525354, 4.2032349947057295, -1.963024298132633, -1.2650569659492148, 8.995995093031123, -0.5805362348869263, 1.5143253009925934, 3.1662393164687694, 0.17631389931983105, -0.9061886777213022, -6.2601982290197205, 0.589814566234484, -5.148802495708127, 0.5181745465230232, -5.644630460998953, 7.813548730707615, 0.5838626893780012, 3.9974388763032827, -0.6602184697958104, 4.991417513369086, 2.178981684715137, -5.158070247290228, -3.515725984307049, 1.2024702560148395, 3.860397008282255, -0.9698946262164687, -1.9376099024771445, -1.2187298434311413, 5.942749349306723, -3.3102039998651684, -2.512864382800662, -2.841844326886226, 4.481454375140358, -1.7689258943765542, -2.49677306728622, -1.1670145693194196, -0.17058190200158713, -4.898319913562908, 5.943994032674652, -2.985434799592596, 4.533329042267138, 5.916139839483423, 4.006168440413706, -7.334067356018687, -2.337863206609839, -5.62410491863, -1.4326800928443837, -0.3481357528198455, 7.771958529759183, 7.638348904859973, 3.404032106998823, 0.5941558510604317, -2.218936990204162, 2.922416402913736, -2.0870606552022197, 2.6910845854303336, 1.554721883942051, 6.129211898925396, 2.3984765544266833, -1.3558760997251431, -6.859056785908402, 6.284821307642605, 4.87522983858476, 4.986921985114824, 2.174078084977877, 2.512548616333635, 5.169980200459144, -5.250645463573209, 4.1018973899831765, -7.174590649060371, -2.6467157761971016, 3.114076222689611, -2.824158465408749, 5.60383616281882, -2.171200277312652, -10.2798733751522, -1.8865163084307748, -4.839276419700438, -2.859380431270962, 3.528642061716809, 0.6273976552392388, 7.538393027214175, 0.987910226725266, 2.000654416975752, -0.2832191747795693, -2.4800557742207867, -2.821284797347513, 0.7388673517228042, 1.8505867209475335, -5.009149338290498, -9.431239902125254, 1.6044267774189718, 6.385511352020328, -4.843378190805861, -1.830975280805021, 3.4224577856996197, -1.6678177109623378, -3.449379958898753, -0.5688208724065502, 2.080475821070704, -2.587655724538876, -6.914202908248661, 7.427255684068002, 7.556944492947076, -1.0277837842993554, -2.377543690771102, 7.847064544855113, -2.4598973905808643, 2.4818633331050832, 1.9339373962861357, -4.21626603115352, -7.02281776698612, 0.9532375085556315, 1.4965550750885352, 0.6162575718564878, -3.7123575688884145, -7.47646503789252, -5.819618717606296, -1.2992181804483043, -5.491450904586707, -4.352010994838945, -2.8457759987445255, -6.409954894579546, -4.723792387746166, 6.975633385338174, 2.5976254766056956, -0.386792637573143, 0.3979764826927436, 0.8697656387508066, 3.286841003715023, -0.13739954103826776, 1.712229175210369, -3.4336402956442877, -4.303493010858401, 1.477289510937905, 1.0089977981176426, -6.708293402754685, -5.0859795493133175, 1.3779333826926843, -7.9868743814309475, 9.065868687874232, 4.040387843890446, -5.886727146928451, -4.0645113799569135, -0.6506339672974466, 6.062788941565791, -5.636516822907559, -4.852653641803625, 7.005650425320739, -5.0773727217641484, -4.674552991851645, 4.748584923709501, 2.0398913975277218, -5.525194770083249, -5.757405396601163, 6.77753996898808, 4.0633234402915575, -0.5781616335032039, 7.041939742747896, -5.52771109544633, -4.5725568854957706, 6.5561284643094915, 0.9583660918395378, -0.5288106075892479, 2.5771898132602984, 2.7085923359994246, -1.0633577860513368, -7.286643687830307, 6.927076014571013, -7.357425539960105, -1.994028198242032, 1.397618709982838, 6.945141082673316, 6.252497909027288, 5.8583998497248135, -0.5649998399545495, -1.581308475842616, -3.012593686910204, 0.5551484977268426, -2.2602816362312965, -2.377274512294021, 0.10024887618876072, -2.107795130902989, -4.957801138682057, 6.7461922722483765, -1.592064739160018, -1.5108772577800367, -3.6747543559996423, 2.946336054416493, 2.0201783456304567, 0.6352368604205503, 6.273008355415274, 3.6208059320728356, 3.89155679178647, 0.6011447415085556, 5.200183370501489, -6.6370063393173915, -3.1388768944064696, -5.577768686040162, -6.612921302854203, 7.386232669364395, -7.163314355855189, 1.3931821363523882, 0.16977124018160344, -2.9115812076832577, 0.06776716274857902, 4.368446639398374, -4.8958918696686595, -7.146025785263762, 2.0722610631961613, 1.4805901832766062, -5.267580309610885, 6.131643067471808, -1.5505381468265846, 1.9662054624580603, -0.8408087815128256, -4.156419588553708, 6.3455288867961865, -3.536905973570875, 5.977275334223312, -3.9908423556498507, 3.1095601042865093, -1.472331538438097, -5.061661462951752, 4.500831638265644, -2.597960417226132, 0.5704783931491155, -8.331887080212468, 7.237547038456116, 3.1050170327243, -10.099850020900236, 1.670713988832144, -6.865033232986773, -0.7272124077525013, 0.6119757321981623, 5.776057693158333, -4.2434204131556825, -1.0039312870225212, 3.236067443109413, -0.9741372547091847, 4.020556846174876, -5.845426272921462, 2.760563472441664, 3.1928738296627928, 1.950165862889507, 2.6437927322430137, -6.700201750230149, 9.923592880592837, 8.720648214375531, 0.9117745473643635, -3.619317350191773, 6.036075755003669, -1.4253069270585617, -0.4303041152310422, -5.9657863906351265, -1.214289267914763, 0.15893600651290357, 4.823620705653753, 2.2130338041868955, -1.3312343716648591, 0.08463383367577298, 5.281769450735491, 0.30593054051706686, -1.4616375781871884, -7.139991220400436, 2.232313867042945, -4.3077609560035475, 0.8009998411067134, 4.171094961646193, -2.1233528473383707, -2.280015467863587, -7.661421273350146, -2.885748669593134, 8.087451567135016, 5.216849520366472, -3.2695019913664347, 4.263351658422876, 1.0458441686516584, 3.429762230153985, -3.1727119787072366, 2.745250608384906, -3.483533119456198, 5.734625579818247, 1.2925697826829867, -0.2848252778803154, 0.43470584707716337, 2.9359390119865822, -7.384683194306198, -0.4002682668361873, -3.6489626133097777, -6.612621214208584, -0.4116111072853433, -4.181873957952078, 2.6514331846034183, 5.08632405823546, -1.8966014755515754, -6.319894786622635, 5.3187208954477905, 2.849428369942575, -2.104708620569127, -5.846570089861097, -4.266226411545762, -3.0957840152096114, -1.9506253226023873, 6.727506446067168, -3.935227800561969, -7.783297559929003, 1.9417576701080437, 8.885847658722197, 8.622540840214722, -8.983149267520993, -6.938801231178238, 2.6294023432104883, 8.06480252653993, -2.5114046101962963, 2.412421946568167, 7.833952626652709, 6.537967486865342, -1.838124621668333, 7.637369319705169, -4.210220204894721, -1.6458384910187516, 1.775032611635135, -0.9250350366449467, 2.442793823985239, -5.325738203565734, -5.698772565339623, -2.3458445954911036, 2.549767553428993, 7.278748923595499, 4.655852567100927, 0.36135473965134496, 3.9020940557712147, 0.03621739686993236, -2.3717316360012424, -5.2155394807479, -1.0683980154603723, -1.7593752273624839, 5.20542897956111, 1.3092172128428163, 2.9840034080126774, 3.9219997223672896, 3.53550235044386, -3.0004935199262546, 2.087462211882388, 6.32124485847002, 3.2291598381602737, 0.7036010783094784, 2.1587344199348792, 0.3479494766308843, -3.59387720975265, -1.307136995875336, -3.8185399549845087, 0.9442656755441292, 1.5285861772255456, -0.08880888679342414, 1.7888414635589327, 2.721363616994344, -3.1204267685976106, -6.391964397492547, 3.4246087267831156, -5.568270234953131, 5.879633899652303, -0.17414308983630095, 1.59476079670043, -2.9015766852211926, 0.7189703729443087, 2.45488970925205, 2.3442890841075936, 2.8108715079447752, 2.7752835573807815, 3.4706442570016107, 0.0558331783728091, -2.304607656124562, -2.0291699882220144, -2.7191666861390966, -0.03713927352873339, 1.145227578018643, -1.0768551231920471, 0.638501272474969, 3.283455367246633, 4.2519899238296475, 2.694335904166696, 1.3358764783302093, -4.110612711118645, 9.185230716172434, -3.802773961981234, 4.850305939413272, 3.9945466286404048, -0.198900928138455, 4.554075956488487, 0.1735421861916232, 3.0552874837630086, 1.2042159664386742, 3.374418786545703, -1.716240838925173, -1.8362517063840214, -6.275483676000416, -8.165942584454058, 1.4305567164899728, -3.557130019204686, 1.2205663862761584, 1.4996638926882817, 0.7055734081027958, 6.6960435879911575, 7.134696209032268, 2.9976088436232198, -5.3920137392974405, 1.4008145938283438, 5.1223926010332965, -3.7692451592100067, 3.1435501313392478, 2.544845805583378, 5.199201268963653, -0.7801635539592475, -4.1545558777325775, 6.654828372447728, 0.028827612216517307, 3.8403893940131044, -3.4181549895693832, -3.5173766579517487, 0.1782805168169978, 0.6341017615311111, 3.353193944030506, -4.234228255544968, 5.205038736201423, 5.3831953411182125, -3.513455641448744, -7.859967294346242, 5.544714770038791, -1.399538528268522, 7.564670963750129, 0.015691333881656444, 1.5232413612799185, -9.668195861977177, -4.054263054716392, -0.804602677312571, -1.9810530023041595, -0.9784671095680375, -7.075508664514224, -1.0277498051296734, 7.679164762305851, 7.668448724039613, 0.6556747902887987, -1.2902390954942222, -2.0531574677678335, 5.381853615181484, -4.4384994094755035, -2.057262405672668, 4.748991069768952, 0.6443321503372772, -3.4585211755302505, 4.734319270853191, 1.773377905251846, -1.3109551710988692, -1.368111869220258, 2.08674272773224, 3.0487450134433174, 3.524443686473752, -2.9244700261921617, -0.7134795442280901, -2.4861425822737666, 7.528510910547933, 3.1947645022565987, -2.6953219431005073, 5.211856186310253, -1.1503239918037398, 0.00636863102746088, -1.8876349489869018, 2.3786142743166456, 0.5492684719575922, 3.5814718685913944, -6.605831281086908, -1.5707573469920373, 0.12437904005538253, -3.315720268775007, -1.9844497755062451, 0.6182736985173116, 2.388888910700762, 3.7340871935854696, 5.8243019749395035, 2.4476761120919543, -4.668557480646961, -2.922939136885087, -8.05914731575992, -0.22215385003213356, -4.289700617935188, -1.3240072951443742, -2.8847810658332715, 4.1574209667979956, -4.147168638937959, -6.441372600288281, -3.0380316080312246, -4.086092157848511, -0.05863594966670693, 1.5032662521374989, -1.927147582888184, 2.1092468216219684, 1.0469004889555311, 6.806765587167937, -1.119533530874198, 4.640861404700167, -3.7975887072301875, -0.015550638836455022, 1.7606397649269765, -8.088322251252405, -8.3780569886524, -8.125415951867621, 6.273244988353193, 3.9985079368601597, 1.932987510864585, -0.4332937796359455, 0.9403662907979191, -0.07233155904919147, 1.2457774622391664, -2.8468604902847514, 3.8542433857152942, 3.890023964098097, 3.4285430070247136, -4.739485959044804, 0.4111885693287692, -7.053001177481096, -0.5781325084683189, -0.8747588393187244, -3.20525696817566, -8.401123865888655, -1.2609036624078611, -3.3503402964712192, 1.8973409115249114, -5.398073483521, -0.7084418948196047, 0.7919022020365167, 1.4582003748534496, -7.153736425859528, 3.5760257898799654, 3.58899054755013, 6.644223636359826, -5.796432316896959, 2.229628263237245, -2.2253931447491406, -5.216741105042854, 1.1711039457148997, 3.7376386806139292, -1.9326976075720537, -0.2948634905309921, 3.7910407647292232, -0.5927809786921943, -1.7254154364515402, 3.6337089595907286, -4.965719065157208, 1.3263589569187602, -0.8496728487513643, 1.1388661961630206, -5.4285834540185265, -2.9188343385361324, 2.297623132425849, -0.35081721645195424, 1.267100010619192, 9.278293890402066, -3.550419655512741, -9.90050120357925, 0.5204623502286951, -1.2668177240134264, -1.244087505580801, 5.863351509614873, -4.48364416497301, -3.3518972753434517, -1.1427397448925969, 2.0383096379185774, -3.9314186242811022, -3.1541653513472823]
BIASES_LIST = [3.8866950094489776, 2.2860509992256897, 7.253534420259507, 1.8077220990636835, 1.1494924718382498, -3.822525848420988, -6.459072751668388, 2.7117038900452797, 5.272828976725469, -1.1741799359251823, 6.000256367858234, -6.885540909428663, -1.8818201663894452, -2.871936303415296, -0.5027831297079701, -1.1369676316628856, -3.3711764491259237, -1.0136387287044368, 0.6985899215176352, -3.817420967237629, 5.663771965123506, 3.1833285596673147, -3.8351280943888417, 0.8203824418736363, 5.256594205009242, -7.978801336858579, -1.4411342592439667, -5.948704599059992]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

