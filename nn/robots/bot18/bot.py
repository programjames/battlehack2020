import random
import math

WEIGHT_LIST = [0.35694495585771024, 5.037413616743091, 0.9854239288329838, -4.058582102518913, -1.3366076329179213, -5.9621131866068735, 3.6451520769066637, 2.6274182593037434, 4.037694389866012, 0.6889061332184352, 1.9181741289267986, 0.3724626239257487, -0.9600552217561361, -1.9704644338145918, -0.15271140269040806, 3.473254345456673, 3.3187144837755564, -3.5481844408398495, 4.047771035453401, 1.7069809278587993, -1.3547869579662457, 5.39184045200534, 4.153873016242137, 3.4933674219663544, -1.3228426449739557, 3.198102017355268, -2.2256601173329527, -5.17400185039537, -3.73850252133998, -1.2865480188238279, 1.7610076587639245, -0.604688694040116, -5.221715445011297, 0.9399072896700706, 1.0500137047796927, -2.449830645471489, 3.929089794079019, -1.811848670612012, -3.9960937200337323, -2.0994137213637876, 4.367475254199412, -2.603556326098525, -1.2015750223738246, 1.2104224366991936, -4.403298214296665, 6.05899385207082, -6.85122484228606, 2.3160652274979974, -2.933804874543161, 0.09787708346541457, -4.036217324400333, 1.068604931898209, -4.275598227520268, 0.46302560705458884, -2.0929301700610567, -0.1266634931886953, -0.8260856846389172, -3.603552855737998, 5.184905452111902, 7.352976463761706, -0.607321026978189, -4.099196095741816, -4.6832087087150995, -2.7167269820610565, 0.6381237970003779, 0.44253400914036534, 7.015233006996738, -0.6340735693024054, 2.379501837011464, 1.5769072162398414, -2.1023503747605674, -6.374895094623498, 1.8718417186730338, -5.472039778542868, -1.4293397314904885, -2.021257458073853, 1.9985424764077129, -7.97662812713073, -0.28034644712798185, -0.8629680850353542, -0.3918166731222329, -1.0295683083702312, -2.6772913103242066, -0.9742331363468555, 0.5991768209405417, 2.8618797485362077, -0.9769997124906381, 3.8862830873749825, 2.4362417271191767, -0.16010335992399083, 3.960096834883334, 3.056745376040613, -2.2361421870519553, -1.5778787076640992, -1.2591238513917453, -0.5617314839477745, -0.43668759722026906, 2.3161184688127774, 0.6371093737008651, -3.771375501725906, 6.766969221146098, -3.3680758903611485, -0.7939196270523381, -2.8939182274311563, 4.743372067218241, 0.07352999029830798, 1.6059543429932077, 3.9454638290274824, 2.4697611596475966, -0.5958212354008022, 6.030675483582576, -0.9688583294276574, -0.6794980599761384, -4.2503822633431465, 2.3240410043371558, -6.300118060155158, 2.5848345738348515, 0.49863164519971304, 4.540665825532016, -1.1133307995432227, 0.3750446587713685, -2.6966566507277996, 2.0307167094856577, 1.0754322088921442, 6.761674689156901, 4.98613821977252, -5.841101254363865, -6.255762650279873, 3.571561812012222, -1.4459828850292564, 3.8588203402144154, 4.632215120671961, 5.469716182930502, -3.452504216007406, -4.295083051185463, -5.687245338917954, 0.7419354832043639, 2.957944796607904, 3.125751645449661, 3.228487406121693, 0.8222575352841448, 4.560098805101683, -5.259954515653966, -0.4538015107817901, -4.788275191582139, 3.376075400921211, -2.1422968728873992, 3.1388889699007825, -0.7983537695257797, -5.419658787196583, -1.3785282423607585, -3.837839552109407, -2.498963094342229, 0.30244124005687123, -4.830383710881106, -5.175075644456578, 3.2200389586915747, 0.208956465639343, 3.0869025042504967, 3.713438653605868, -1.97887023177352, 0.9961401931607166, -5.3499727405377495, 4.554928441550943, -2.938304124732057, -0.2603322664914316, 0.5590497986620284, -1.452509419677709, 0.2734917722193422, -2.757241152507355, -0.868101583260037, -1.2384239512025281, 0.240966104556128, -1.490585124194525, 2.4444701252445906, 2.0649943037138128, 7.653396966455128, 1.56092990646437, -0.3105248770230017, -8.054620051393442, -4.073762234473783, -2.2364502515518003, 0.6552947841508594, 1.8226547438352867, 3.474107163641075, 1.0436875740439078, -3.764385759852778, -5.925573025918788, -0.25826341038613054, -0.671319963863499, 2.5896475520488345, -3.810401841517458, 5.442222502348973, 3.531218937593973, 1.0045564094114177, -0.8052050585642405, 1.593009860602555, 2.566374595625387, 2.7792975560247415, -0.3734828366305438, -1.7117312501598878, 0.6119965527293991, 3.991955896420599, 0.6242206819416125, -0.7801882719713333, 0.8405677399884677, 1.1692890830254399, 8.02227705263805, 1.9112957953669651, -2.884279087348734, 0.7313399354847334, -0.5361099426919148, -0.9189306109971032, -1.9150134247788135, 0.28594293346191013, -0.9757314316486463, -0.4641996998136254, -1.6530669861067027, 0.9438998749487573, -0.9880770170138569, -3.298401143990242, -0.36861120364532696, -1.5362270383747283, 0.7962231072705894, 4.417834719822777, -4.3613121124842245, -3.235433211415285, -1.4282520179982572, -0.8416406796370903, 1.3489985226600183, -6.032566379165219, -1.9182426616286432, -4.003889547820309, -1.9578057231004775, 3.3162707382255583, 0.7456123699774615, 4.623366530229014, -0.4489351230149833, -2.5104363081468835, -6.1015389892222345, -3.5292675963222795, -5.64234376637013, -4.693159834374187, 4.811080092224816, -0.683328069030535, 2.7561850634918033, 3.2759842216259756, -1.1407895421796137, 2.71996184006397, 7.911749384134831, 1.2015929883421936, -2.584773562310023, -3.877507091012121, -4.796158240941745, -3.6593819105407714, 2.853916189385121, -0.09656139868011593, 0.832568857652173, -3.6035169925669512, -2.710238537486391, -3.319814514906706, -2.3177687008870533, -4.083981267081531, -3.33885984824845, -3.1403875307016462, 0.17688053601545706, -1.043205899535699, -0.5562938723912413, -4.331581697574791, 0.7430104914853901, -2.3919829393121153, 0.7040490581679013, -3.147071194440846, -2.3787696664611064, 2.174055296663708, 0.9990771737748143, -2.806296944250113, 2.571495177424643, -2.4462711985826235, -0.5901994565224049, 2.2802608673795515, -1.8581470485876386, -2.27366377344676, 3.015437270671944, 6.772237145692822, 0.7455161529355563, -3.57384249811333, -1.2476724986004075, 3.5077514142439483, 1.9681404710750257, -5.083429301100249, -2.0370147609575997, 3.308769810079861, -2.4856250798853683, -0.7870269736036317, 0.33364490103985367, 9.77271092487061, 6.656297818370292, -2.904475181588791, 2.868658140808997, 2.150054006463408, 0.6833144117645213, -3.802987524602875, -0.4689304711163368, -5.152336831663983, -3.5774247647818083, -2.5896841447793415, 0.7565493173842588, 3.9738152781604343, -2.1508321031769952, -0.2475342665660598, -1.5385318463158042, -3.442507576578687, 3.3616654419049663, 1.2069805823577782, -0.2015601482642656, -3.0214523104326543, -3.560517696394415, 2.987987929235352, -5.98264585643148, -2.84520393336563, 2.4575872844690956, -6.2446685865767035, 6.079657529738976, 4.40314133817171, 3.1367796336457747, -0.1472312217361491, 1.5964127090679043, -2.165574463572675, -4.0940480135958435, 3.9050863125805035, 1.7148213664445051, -8.070485622803401, 1.542968201819309, -3.318332769118039, -0.04010478144659413, -2.3754231062729594, -1.875959014331113, 7.08004298533238, -4.912642381249575, -0.5243165807607937, 3.1230573162082917, -0.6169196342237788, 3.6940553614314853, -5.032903939157055, -2.106716852623144, 3.661793294555353, 1.3011784218316524, -2.155393837825108, 1.694316000046975, 2.1375459444803346, -4.8444096088352895, -1.9914279361181944, 2.1372099760282373, 0.4985539405475796, -3.30101497037656, 0.5807985086120941, 0.7368555905885734, 3.074827137140744, 1.8204900165872018, -1.1365817180999955, -4.677912670170961, 2.5447194831784357, 4.2964134802239355, 6.643275648460556, 0.38157053871822133, -6.041236517421833, 3.78228634430514, 2.451416169254206, 1.7674450047101296, -4.48419140134977, -1.514623095322962, -3.257226764989312, 0.12929885480718784, -1.8884461570616025, 2.034773288119691, 1.096432080863166, 1.529825703107237, -1.3838617148236967, -4.825554269048081, 1.6847780810005641, 2.1443088104609345, -1.0976183521457539, 3.4876365304874533, 0.31318568470169916, -0.3020492837908324, -4.966037099112512, -6.4516766681074325, -6.068533277538726, 0.3368630249885367, 0.29016471409867695, -0.37321497189563657, 2.9579738906963557, -1.3451287481181542, 2.1825093452131528, -4.191220040703884, -0.05753637780780052, 5.2764267650836665, 2.2749306967182523, -1.2098049183590405, 1.6459610411927503, 3.6345054529702434, 4.8315134411507366, -1.0423507512590742, -1.7467821983649714, 4.373866538715221, 1.77453146282422, -2.5491798476408833, 2.1016538421013813, -2.4484276451328197, -0.29219657913749564, -0.910969934944482, 2.518974715673031, -4.112159924223423, 2.0835459495435042, -6.080423169833688, 2.162568259334208, -3.8652403923433827, -2.2590996615977965, 0.2076836026872495, -8.069056764557628, -1.9718659049288183, -0.6356146102278273, 4.138164935794417, -2.655734815634621, -2.333597347166684, 4.231125593254124, -3.695348879406325, 0.8497669577499323, -2.1470476755484933, 4.858309333734238, -0.10682937156781602, 6.560261972492171, -4.533479563800622, 4.822070512071003, 5.902177830003472, -0.4273811261394562, 0.014795027205109612, 0.6393596282656868, -5.5648046188157485, -1.468096083023811, 0.29498125720490886, 2.0170458851190967, -1.738705097583485, 0.5494752815296349, -3.523848815506622, 1.0192487501240022, 6.155748799961067, 1.7650648650728202, 3.251629659524972, 1.4216830986528444, 3.654002088902609, 4.310001758407871, -4.60198403762988, 2.98588047259065, 0.04950314221695007, 3.0192085948204834, 4.27274289057409, -2.658277222731517, 2.1186832500731807, 1.0574209028040542, -3.2719382382789046, 10.26594348118524, 4.083477731916985, -0.6396740722862443, -0.826911106859642, 2.5488716423863975, 3.293615595615665, 2.1436045998950326, 2.640769838301809, 4.157672927776957, 0.3961468513902575, -2.3048195154476048, -1.2872794435989046, 0.52563677782997, 0.8910517585562001, 4.749275921890912, 3.8233861027086773, -6.18396233389538, -3.3541204836098997, -2.07799970795922, -4.381084050516337, 0.045957224029658406, -5.591988170870919, 3.347877713335402, -2.3155077224070384, -5.543800310015312, 1.3715506889256845, -0.8292446499147883, 5.318517986541764, 1.6675148639126522, -3.317459696319429, -0.1361613347556041, -0.7779901720904862, -3.58590511601385, -0.7898809643244948, 3.704141896177596, 0.9922419064805896, 1.0016234977711083, 0.38766637282040173, 0.21039444364101856, -0.9095795483592919, 0.866444611231324, -3.0282825216690092, -1.2296037031970717, 4.344007223118563, 3.355648204827604, -1.636839956304863, 3.327531012242445, -2.0855514141641462, 3.2296014196212273, 1.1709436407119767, -3.4572059210305177, -3.6258766175639963, -5.840069875181271, -2.0820712169050104, -4.218297099092158, -1.0840823696037414, -4.39576558614769, 2.0066923008096675, -4.004802332849916, 5.382685240022289, 0.8058976048886255, 1.4508565505884556, -2.9916047959243213, 5.509999902959639, -2.649977602159282, -2.635676209288542, 1.014090871240545, 4.897248165254184, -5.96929429469952, -7.036927494272185, 2.220911854427104, 3.2361531248190643, -3.842394429769328, 6.864896703959223, 0.6152097642917838, -4.237417291431473, -2.4061819314056794, -4.748745797618415, 1.6718687016866531, 2.041395131089532, 0.4178712761408536, 6.129165157816356, 1.932063252759991, -0.5089218283834063, -3.813364788409059, 0.748138404141286, 2.1993759388407934, 0.2674715869560911, 1.334292912030223, 2.9047937442833707, 1.1912998291972094, -3.7495648933589374, 4.643156770791425, -4.491842390376677, 4.312465963803569, -4.989699847493091, 3.537760038701662, 0.1831413675543363, 6.084264901017807, 0.8613693295769034, -1.9775526175750495, -3.1193146061499695, 1.21809182702395, -0.07386144127190897, -1.6731264173216323, -4.22339588024007, 1.923139335502475, -0.37967992512248694, 2.9385692340113425, 3.0916794545402295, 1.4437794102032449, -1.618448426964199, 1.8211346888345838, 1.6985590710202048, 3.879517572469452, 6.78820361425145, -1.4003469060477731, -0.7614735938240014, 8.369002159475631, -0.8681363171495529, -0.07442830324384597, -1.059856830595418, -2.7682166087193627, 6.288918354948892, -2.9890888240412457, -5.340029754934077, -1.1539935378736093, -6.758764273285316, 3.176465462618375, 1.7456242257421493, 5.188556948553208, 5.967877463207039, -3.5074378976583764, -0.061836261905299006, 2.0673809913423042, 1.6338482524423612, 7.655685854449596, 0.06242134229246421, 1.2498366732039008, -5.621876607676606, -0.15866993624698333, -4.9811816248559735, 2.678867225295019, 1.392548182330768, -0.013507796449567566, -4.311119247439895, -5.037540140008521, -0.23195696153678858, 2.9745934361550708, 1.227493939034825, -4.444558124592165, -2.5101632870355433, 3.969675790221576, 0.3891055588039083, -0.7354736712446059, 3.2244489987129725, -2.280674950795949, 0.0930888827878742, 1.6943698884873735, -11.184645436402459, 0.28037720825417534, 1.5916105529372615, 0.7545476101373725, -1.700283424070807, -1.6326027044738074, 0.7310054438830813, 1.2705939355134208, 3.5164475645543636, 2.0606471588180515, -0.7030278059881161, 2.4017012142517844, -2.196456370941869, -3.2853519663018336, -6.365051999178935, 1.783302064032406, 2.0069836132227077, 4.556403854626973, 2.741834863260652, 3.966905559349388, 1.9136854448103655, -2.2634721962976503, 0.4417526110698229, 0.04354839409949496, -2.1143320139236526, -1.9231897053788967, 5.751778123240087, -3.9471851937713422, 4.68940680149609, -1.9470796776822348, -4.656071042767698, 1.7117538199973144, 4.634991196923101, -1.947996693831613, 3.2937119638366505, 1.9841344168229185, -0.42543677007655045, -0.4406043212967854, 0.37555468530935854, -4.991228281486439, -1.9495345828250363, -5.90428194591309, 3.319395438595591, -4.6471671361676865, -1.7495023406112575, -0.6758989606729087, -1.3677732317715772, -2.5210220527371137, -2.688586335924872, 2.935199547784181, 5.160203162960998, -0.33298562895037753, -1.5621082303676135, -2.369295719769129, -7.140370169523601, 3.6774853340166525, -5.323952158171933, 4.8892314690528424, -2.122373524036811, -5.0098633467827, 6.922744275129681, -1.1542119050266841, -3.540268507611782, -4.183029230672146, 2.14683295612385, 2.746142633527514, -2.1192584626014503, -2.5772143966742638, -4.141657545726537, -4.444628688216861, 2.3577316993688218, -0.9164367876017481, 2.4669799887647565, 1.714987985023435, 2.0476290210736714, -4.242524297705612, 5.70231488861301, 0.27146489890622805, -0.43287832560907713, -1.559154968277692, -4.628578374591785, -3.4943585400325285, -2.0408900916955943, 2.4198075564545443, 1.6712944753887347, -3.4394889901624204, 3.6134599468429185, -2.68533435173546, 2.127144377504977, 1.425021169023419, 1.3187203400366672, 3.6542326488380352, 3.5248230962461093, 0.7531952921287635, -3.3650660683046785, 8.260837162660364, -2.537082592070041, -0.7266129028819506, -0.0502918139498022, -0.7905007256830068, 0.2590056431852008, 2.7492967063968328, -4.068706022106343, -1.9043045211018723, 0.5077677559344331, 1.766439931293322, -3.022348439688596, 4.28312465609841, -2.1117267041227477, -0.6101383546604697, 1.0595878533029635, -1.638006607625614, 1.1213581362924998, -1.8570422539422522, 4.604777177732852, -3.650494758957689, 1.6688492843647706, 5.0048036189040195, 8.470732768151581, 0.6216714951250419, -2.069753785012099, -6.877947041565392, -5.3594108142898325, 1.61388412909354, 2.47130844797605, -6.309760727267905, -1.7628183836440314, 1.0341797199626237, 5.558783819770002, 4.535896148625694, 4.599646107614824]
BIASES_LIST = [-2.893685513465127, 3.71767154584059, -2.5786629856941845, 4.9104427840697396, 7.0684725759418345, 1.61153765199971, 3.907866053298072, 0.290106815512013, -1.9045643309281033, 0.27176394608227206, 2.6267122099453952, 0.5052155168693355, 0.41244958459491343, -3.483744097467241, -3.5553483205081964, 4.98267724618917, 2.867977131728348, 3.0835179851345327, -6.156786388767559, 0.5438253051907298, -2.20254075447375, -0.7743561448098142, -3.7792058107859896, -4.739702102674056, 5.275322056512585, 1.814378262633669, -2.6817346861064886, 0.5389946513863653, 2.089401429672681, 2.521234775892867, -2.3541456272636854, 0.04589788410138684, 5.356167215093114, -0.7554982964050347, -0.8780988717421692, 2.7842831994021235]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

