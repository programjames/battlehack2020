import random
import math

WEIGHT_LIST = [0.5710961634074379, 4.89320888926544, -2.3225113013950085, -3.5609892950162587, -2.3334960951499717, -5.294882928061999, 2.8687621843361137, 1.8255266332429527, 0.8102304226393202, -1.1115632135844566, 2.598363836126205, -0.01872087413115256, -0.9096520975559487, -0.7575524605578138, 0.23781246296329564, 4.936550201804184, 4.687761593656414, -2.964106985160612, 2.8379707997445522, 1.8263829902006858, -0.36907506476882646, 4.345750475455359, 4.925530642544583, 5.414518999274404, -2.1177403683264138, 1.603405274057498, -2.185822221344254, -4.356700038057599, -4.907508406085868, 1.4000708685062824, 1.3638015851214742, -1.1118654684014904, -3.4004576737006182, 5.249273777086061, 0.9877243781597284, -2.4818449404993896, 4.13790050600385, -3.2885462841250876, -3.7627350298834052, -1.019642647122191, 3.8365785182838033, -1.8659773922169687, 0.4236219124452703, 0.16398708371517046, -3.272099902590311, 5.721692565391676, -7.871396532811311, -1.0362980164535576, -4.611908569711039, 0.8839787970959971, -3.8359590016406138, 0.674001336512587, -3.5829593118425325, 1.8836769238088773, -2.2460898929632176, -1.6056936002171895, -0.4137142032200073, -1.9838088833839718, 4.894159401368778, 9.872718642212734, -2.1911559875476843, -4.495350631182687, -4.312260745383592, -3.521828823995873, 0.7346940757200782, 0.1997081363388453, 5.346664267386389, -2.2084110345981447, 1.2264526944210274, -0.6811648771071549, 0.449071800302038, -10.340711833537625, 0.4843010328148105, -3.70098676369128, 0.038379249967105455, -0.9632111943136151, 3.391714613374906, -9.797848204367574, -0.0665922670171638, -0.5591877800730828, -2.41277237830021, -1.1082044970746499, -3.2467995736821305, -1.215487764839177, 1.0244185474297909, 4.796715832513893, -1.8314217883045203, 3.9961671539069137, 1.360242904579429, -0.6787826100783043, 1.002781140198756, 3.791783523999251, -1.2393205757946617, -1.0709062540804177, -1.5839331538486543, 0.5366794623850407, -1.7529038695454604, -1.1314199427010505, -0.6365997528195994, -3.685566292599875, 4.1269430729083325, -4.814308653137917, -2.3414586958029004, -3.6101481438982947, 4.943847661422356, 0.749771085611336, 2.6959020689030955, 2.6780943555204972, 4.959210368855784, 1.8785013006696245, 4.399533244229458, 0.6122038276425755, -0.5241573112396282, -4.322061745002574, 4.459894398705432, -1.7144203180802446, 2.5445371050414463, -2.7710268605309536, 4.5651911741939735, 0.5697344996552592, 0.6221996859160246, -0.1701317324910847, 3.6075212944681274, 2.6083760075142095, 7.014445821676586, 2.4483860044832713, -5.38430972219977, -5.629966547822375, 2.5622928993975047, 0.05338660974827251, 3.6161278259259864, 3.8521141616399506, 6.511743277137299, -5.739691554568245, -5.190728199968745, -5.148921864461402, 5.250695805357368, 3.4973335546041597, 3.57115030144766, 4.552115389552928, 2.0732778895251616, 3.4751236522933575, -5.230387541535877, -1.0465439376180283, -3.6802192693310207, 2.51762834803886, -3.9409342834081103, 2.480694558602193, 0.4660273397417855, -2.4842373077878137, -0.421132509649384, -5.104694735889867, -2.410926299960392, -0.012170728084479793, -4.144735848845304, -8.678041098906908, -0.21675898829566306, -1.814817776724874, 5.452838461805115, 3.8041595038192737, -0.9489959564462888, 3.8421940585675243, -4.553152913823123, 4.475048067356638, -1.1254088777990776, 0.3687927899879756, 2.103159900563395, -1.69614636330569, 3.373915841522766, -2.613130659979049, -3.4635071546762712, -2.4235201154994073, 2.066449756981904, -3.2848238433350443, 1.8388088656006176, 0.19891690067081896, 7.309526675435256, 0.14121310892599406, -1.2421273673485744, -5.373649113287552, -3.221769465793236, -1.8897903684215653, 2.1532560721239515, 3.6499070420514013, 5.107528321848797, 1.125081655873895, -2.635929820158336, -6.095323200976167, -2.506695994712966, -2.1287533519915622, 0.0798793445481841, -4.284052831044558, 4.573555637808805, 3.2486294093655355, 1.9130720117339817, -0.42189073281675193, 0.7517953787887385, -0.5315746252016755, 1.681998094079982, 1.7594893825042388, 0.11986115466713332, 0.7180171341865507, 3.0350203283346544, 2.430057706124561, 2.2510663399844115, -1.3334490721489622, 1.036231535530915, 10.568406016219118, 0.5899807361817173, -1.1268810922527739, 0.6161886847924871, 0.7645540744853094, -2.948094847708434, 1.3008236642336857, -0.6645957714098654, -1.75974828670069, -1.610976995500849, 0.33622354924070874, 1.3013736683902288, -0.7460951909769064, -3.9257766638666993, 4.076961711815606, -1.5737263926480094, -0.9398356814558994, 4.257766789235729, -3.530011476503556, -5.023431066208057, -3.315303831424551, 0.14873540551168485, 1.7559653539199545, -5.339515222587699, -1.6924599655471313, -4.685823060006088, -1.6418323923792801, 5.26601038855328, 2.394126023701435, 4.274315331482998, -1.1675133684496117, -3.6341611016268183, -5.943694149879442, -2.572726531701387, -2.5992265235054033, -3.5899966118858044, 4.843867053756833, -2.605422769974586, 1.216073945407827, 2.593476289814917, 0.21716956246009486, -0.08741911030019135, 7.130783074100701, -1.5422688693905044, -2.1125633172875946, -2.288861607265632, -4.266774454839284, -4.861323103219615, 1.0106222084352237, -0.42837165717755593, -0.35958278019574796, -5.808124947002457, -2.506060855076062, -2.727932741105872, -4.581699506244278, -1.8324608870068546, -5.894803346634297, -3.07059959894221, 2.6870276616260385, -2.368194555707721, 0.6026704823568131, -3.763547564806275, -0.546641597436442, -1.6588023287780655, 0.1721913794872083, -2.8901574080537586, -5.614753581683068, 1.5103178507401043, 2.0349374018420274, 0.20001494904040795, 0.9934813845397689, -0.7762938092299297, 0.37268284300096227, 3.9538749413996923, -1.0322622387016058, -3.9088830353587607, 3.7389788150958774, 6.166540080002334, -0.07847137664920602, -3.383631413251025, -1.819646521227064, 2.637680515746793, 1.6962979508874647, -2.983479466454155, -2.695987897566523, 2.5525998272352464, -3.566039770056028, -2.268540917026102, 2.3724908165117014, 8.832340296768304, 5.941037902041196, 1.8090904454160521, 2.049342539323568, 4.567476532888967, -1.8686917217083727, -5.847966602978963, -1.7785368175245868, -2.373424940476976, -6.869258239569486, -2.877740864497681, 2.2999867619345595, 5.062635161944756, -1.4264316488604363, 0.6755439849039755, -3.9105539290140556, -3.598823873236484, 3.27006337813612, 1.8444505926246553, -1.7763246067661351, -5.654776217031382, -2.4097592290252825, 1.2898868867016178, -5.597646792431693, -5.318027569236232, 1.2705612731374907, -6.799024335321489, 6.395462838843504, 3.4396124552673584, 4.601340726661304, 1.9923424871642201, 0.27959561088763796, -1.2760384166520768, -5.5582873245975195, 3.9477963761934753, -0.33980835342111715, -7.434446954052438, -0.10173055356750767, -5.032798132770324, -0.5055969900312703, -1.6725736225165528, -3.4602044649908037, 6.50540527861955, -6.78562096794752, -3.2321071247450632, 2.6674755152923084, 1.479638829798006, 4.190182566811882, -5.689610425779255, -4.638034988802664, 1.7073674749377838, 4.794584784441299, -4.850514156206389, 4.660347149904956, 3.2519496811636612, -4.021765515209801, -3.399464935598094, 2.312078512846784, 2.348632350688765, -3.395232709231722, 0.035983701438101895, -0.009326343182238461, 2.8093492273414107, 3.249050523895911, -2.2486448673707438, -2.816080244341482, 4.915251191420963, 6.03989042090791, 5.288223933594572, 0.11210542452516503, -5.837834995603548, 4.272207596735779, 2.6073034914569573, 0.8546058137376432, -3.217699535898299, -4.706295148436724, -3.665277848781647, -0.8894972605241425, 0.3346084085295416, 2.075079250046182, 3.9160773492729546, 0.6671376950990787, -5.651233731576211, -5.246426729453841, 0.42122062835522484, 3.416360001177821, -0.8775954682796722, 3.1540279875275274, 0.13172311668776462, -2.867724730564883, -7.237786225787259, -7.873962619770669, -4.607111591260968, 2.4598417927722074, 5.598798744484809, -1.7095720449172436, 4.699917832375671, 0.5104918863387554, 1.4311827492216402, -1.3025534384769144, 0.34866269255629523, 1.186489191508405, 2.2613594000034207, -1.495397892194914, 4.28728329362727, 5.542114859382472, 2.7187273007715356, -3.4488595334129966, -1.7250303649341059, 4.5505147166352655, 0.710049679104957, -2.145801978418377, 3.8663695899692163, -5.551326756317847, -0.28653679404789945, 0.7796102725062131, 0.9121381868589628, -3.2899106887090843, 0.971568427310243, -5.68126097280078, 4.1373892746389735, -1.5779036595654148, -0.7081744525298614, -0.9906940649013987, -7.395318653954132, -1.8446837092322845, 0.7669823138840459, 5.21870248134324, -4.336942087657403, -1.1430948844698943, 4.089147450765296, -2.7473096564080732, 0.9133718400236072, -1.9258777110808145, 4.394438757374774, 2.785451412466884, 2.9898520147601553, -5.906772980272683, 4.9475397156976655, 6.193856927000825, -0.7382480568135471, 0.7970462447730489, 1.5755863293716688, -4.766642375823893, -1.6079215803205396, 0.6609657715022749, 2.0233230090161, -1.8235527439881323, -0.37573384936994464, -4.316218840554989, 0.7121492545806715, 7.994756083335774, 1.8147264874313278, 2.9254479459317952, 2.413425416323807, 4.518927801191979, 4.936238828863373, -4.353133473330135, 4.686970343752618, -0.0005705344296420035, 3.627795107115558, 2.559188835892981, -0.38510416757303495, 2.512687275364982, -0.41738101803734606, -5.923031468879809, 7.7017168147788295, 3.6869116558272323, -2.038319226618506, 2.070944295340736, 1.4889400218852766, 3.19337373234001, 1.372838460849572, 3.047084941027649, 5.181136890310617, 1.6706582186793835, -2.3198485392201276, -0.10602574301434786, 2.489930422308727, 1.34242997607467, 1.5796620254909703, 6.8452105980228986, -4.266751862524333, -2.458154684983769, -1.2032062313066034, -5.0938335732164, 0.5655746415669544, -4.343496173060579, 2.701887244150505, 0.3924746959360828, -4.41034418886035, -0.8228963875579067, 0.4874148120470507, 6.258635353643157, -3.269419569028394, -2.8650315836184106, -0.6919544637705031, -0.22808286036483272, -4.865338781221854, 1.364794397246067, 2.6130378134575842, 1.824763847897857, -0.37352012568118326, 2.721782811111739, -0.2890951701426953, 0.11495275069305277, 1.5417485104372077, -4.74335355014471, -1.6517787802440964, 3.610172430891857, 2.87169318012314, 0.49505710118253093, 4.254356091193256, -3.05747584225599, 1.8093686310917776, 1.0447755716763205, -3.7720132080347684, -1.7841089771765135, -4.913331287614149, -0.9721454420485255, -3.9854438434725425, -1.0078462635431302, -5.9727981162474055, 0.28898971469120144, -0.04138797078508112, 7.023749531674332, -1.191726997335456, 1.1136129982845964, -4.014305539514841, 6.959037314034155, -4.071876055835319, -4.122229456237913, 2.0485428090772304, 5.1031768215042925, -5.508466658095289, -6.398142125500687, 0.9035558389332735, 4.219354557984429, -0.9048830353811869, 8.07951928404562, 2.521043237620688, -2.2966879196406036, -3.3346123694544003, -1.9763601431887858, 1.4569312277602844, 1.06785797684577, 1.4408057702979726, 9.017234984194953, 3.8094292078653997, 0.5605942601263406, -1.2658193860731721, 1.7968261058799766, 1.5120856837618784, -0.5497794915309148, -0.274199374417677, 5.972532961880251, -0.11782105074109203, -2.789553603398554, 5.415463535582854, -7.764108463944685, 5.257866643234199, -3.889582831966766, 3.4083910377794457, -0.9987751722927678, 7.810219383638675, 1.8944719709373379, -2.243168213984015, -2.172391842425996, 0.03920920625116393, -0.11202057615461106, -2.453848686783137, -4.414994812585505, 2.218440759876857, 3.9602122477190647, 6.051269608632419, 4.874434358545752, 2.2576217038993844, -2.162865314631116, 0.036367143617765316, 1.8472790556803407, 3.702660254791935, 8.941526497583943, 0.40334571831268223, 0.23676503860603115, 9.609206898701514, -0.6107289030025064, 0.5302419778161003, -3.1877184149110818, -2.5488376353814153, 5.754918305048683, -2.3430626790045213, -5.453782472730197, -0.228515918582022, -7.3640150453039, 2.4163282159783486, 3.0895955216532514, 6.116694650915803, 4.953756641554884, -0.9521637718203059, 3.8039691252293655, 2.919897016911907, 4.111922617458357, 6.793268500564531, 1.397456019824428, 2.2998989028686028, -4.254322085774523, 2.0224036232797267, -7.7351126894908955, 2.1459002683963417, 1.2617848785544439, 1.2285629404038678, -5.140677299393984, -4.549063503328702, 2.374656084323486, 3.0241109036643565, 4.2778035164948065, -9.145950395466352, -2.425986159981814, 7.44357726617592, -1.357262402685359, 1.4473999058210665, 5.8292993295149484, -3.4528955802486623, 3.1631617830251666, -2.0085870830382424, -9.989463863903293, -1.0534802596583255, 1.480910670402465, 2.9007074469585143, -0.9184902605252592, -0.6989545880585706, -0.8165213113032974, 2.277327448452041, 2.4899690754008086, 3.2315767610229433, 0.28031173753163074, -1.403113072957874, -4.280057042762718, -3.228525987576621, -3.4101503366817307, -0.7084897123047553, 0.8740666734262968, 4.217987849872288, 1.953834764859896, 3.185775987669415, 3.111966337063173, -1.4397314605726423, 0.16146756253112124, 0.9627759446502686, -3.0908685607068307, -1.6331248344872509, 3.4810726998305572, -4.011886735514698, 3.356800893756852, 0.5716783591811566, -3.6924799439763647, 3.447992463092758, 5.926160183347117, -0.4343569119017015, 3.2183938511109136, 0.38532806461992725, 1.8500919468062216, -0.9092189470115749, -0.2107771433584648, -5.2682176189554655, -3.35722465185807, -3.7089250434613703, 2.3465959973418684, -3.90059434980805, -1.543060414919419, -1.1352320551790684, -2.059813201952857, -4.910208990756603, -3.8634765395264483, 1.9861324781783392, 5.684852855509325, -0.204716630706829, -1.824969247337529, -1.356788404547287, -4.269671257117521, 2.356788061117917, -1.5528521957306898, 6.687959684737231, -2.6813903386190714, -4.750800614531538, 7.878803448171279, -2.0308532976522398, -3.2902626074879886, -5.167793047243752, 3.0066793892065085, 1.521953288656964, -3.562848461680703, -1.3643526397272547, -1.6018183223496025, -4.803137448157083, 3.334029459767889, -1.3027925986087499, 4.388622306411449, 4.634276004184065, 4.278501885435199, -4.918552678788445, 3.652268736211679, 0.2385351893054553, -3.412161996144571, -0.36641657591944204, -4.739206496787821, -3.5430887782553993, -2.069838235690284, 2.523522354454913, -3.4051496937910533, -4.6807083835660865, 1.4345987515068555, -2.7560323058176466, 2.0101071734987195, 0.4749037523874063, 1.6656377662981205, 3.963688239578605, 2.9362044321096348, 2.7767470961890437, -5.8607030050279825, 6.992308714912234, -1.3599643308362575, -3.478170580101945, -2.853134667023475, 0.144300363919157, 1.481114826168154, 3.038944078044346, -3.586203935035888, -1.0589655156301438, -2.751494293447445, 0.5919247482299012, 2.1822856214638424, 6.122863911778306, -2.766576434879814, 0.08859787550527276, 1.4725148668760362, -1.2468398285906923, 0.7356143408663756, -5.726642267969974, -0.8394624575450687, -2.3839384456583543, 2.3589362215162404, 3.7720799178539606, 6.918983821076604, -0.8750501911477693, -2.2334296295496663, -7.987100591662715, -4.313395048006206, 2.995860869575008, 4.223240424714016, -4.40952660405848, -1.7677837751894283, 0.9695075893388979, 7.589220973437914, 3.7506509524214957, 4.879678844128469]
BIASES_LIST = [-1.385120753764428, 3.706619324378979, -3.593886223252855, 4.792023085750648, 6.335116657453556, 2.7671692571478625, 1.101542425802686, -0.07785548913196985, -1.1086186304701986, 2.6528453420953078, 2.123841313869745, -1.3761913662957233, -0.008745429478154508, -2.6304657829951053, -5.506394989854038, 5.2715597113357395, 4.811210805630299, 1.4735381916945558, -6.579324301799474, 0.011320181777852852, -5.0792314476713285, -2.8102223754280877, -4.076704805409907, -6.080590855596838, 3.915347534231755, 2.647143215123835, -4.0333619925061575, 2.9092710680665377, -1.0907917218126044, 2.294365871687943, -0.3373294252813789, -2.2896329927654326, 7.127395468746134, 1.8466015172021837, -1.6906089167935123, 0.4489361416310721]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

