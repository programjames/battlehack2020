import random
import math

WEIGHT_LIST = [0.5706267506591258, 4.898306577193664, -2.324781826728925, -3.5547607962379644, -2.3202216698796803, -5.291851447705614, 2.87145231362402, 1.832957664507473, 0.8103516573330622, -1.1075468799936081, 2.599184816999404, -0.013995475997757797, -0.9101346553834038, -0.7709256019778025, 0.23802787624981223, 4.933993594472388, 4.6815005765756155, -2.964907292896892, 2.841966819488363, 1.8371076359757272, -0.3725553445187589, 4.346708265347072, 4.936414634009999, 5.427182712468561, -2.115308993595344, 1.6130114237645403, -2.1833587962555923, -4.366023592349782, -4.904417816163309, 1.3854216994980624, 1.3644527947992027, -1.1213769227748729, -3.396642102605199, 5.247263542019354, 0.9871281664998044, -2.486775269062068, 4.1472991588131505, -3.291334886729071, -3.760084012662112, -1.0222615987353985, 3.827155684195233, -1.867187560162027, 0.4256356415609047, 0.1771265924279272, -3.2799471272230964, 5.717248658643027, -7.871958318786408, -1.043440350062573, -4.604648749750204, 0.8727500871046266, -3.843168266979962, 0.6751028533102288, -3.5926640160788943, 1.8842179132804076, -2.249682734193156, -1.5956563493720226, -0.40785959645591124, -1.9810703533800236, 4.886920738035769, 9.868001803691463, -2.1978836918217306, -4.497438771664266, -4.319366939493373, -3.525063456414336, 0.7379517126678764, 0.19246132126020823, 5.3504419116907185, -2.20178553818636, 1.2311119685132657, -0.6805232370780363, 0.4425002560221865, -10.347023503074645, 0.47991891218487426, -3.6951667818167113, 0.03755119922065776, -0.9752181575233931, 3.3819877608599773, -9.801405631336381, -0.06757347322781707, -0.5646531068058466, -2.4098916155986134, -1.1056271653149814, -3.246503356369053, -1.2129666454663295, 1.0203989118888934, 4.790273321423369, -1.8298422585301848, 3.9922633480773384, 1.3679760469473297, -0.6738803943421837, 0.9934544488598643, 3.7860976019201407, -1.2392726051048681, -1.068368446300981, -1.577388492109974, 0.5341644987375505, -1.7543697810912071, -1.1343012354502409, -0.6363341666841814, -3.694115750918976, 4.1161404563846435, -4.813392800105282, -2.3431058055862994, -3.603977827495015, 4.9483021635006335, 0.7395654770926425, 2.696111461709434, 2.6835735859481913, 4.953741288452718, 1.8842479303076667, 4.3862050558242025, 0.6095760593962666, -0.5302855088509537, -4.31809611932901, 4.455443918285243, -1.7113521795199866, 2.5549128845677838, -2.769810231928029, 4.558196770968481, 0.5689429804610525, 0.6222734087802675, -0.1614931813913676, 3.5976521825595764, 2.617450696339098, 7.003304044810299, 2.437726278434105, -5.366964499857749, -5.644022834795016, 2.5588154354130905, 0.05632258552216919, 3.6153026955937064, 3.850399952624202, 6.510237625252538, -5.733941269844919, -5.187459442526381, -5.15592084232305, 5.244634258471891, 3.5013897111746535, 3.5711892547054997, 4.557767939124971, 2.0737556856791968, 3.4910864691713055, -5.2190314790370165, -1.0463377041591335, -3.6806419927249903, 2.510149261419038, -3.9471656260634105, 2.482929557353808, 0.4732377806142699, -2.4839878497147483, -0.4309310260058613, -5.115027511099366, -2.417935219262713, -0.002346764355074509, -4.142849726487319, -8.678520084143035, -0.22074457106369172, -1.8185796048175027, 5.4535938979974095, 3.7966661111166395, -0.954964118430577, 3.833146054105427, -4.551943002690899, 4.477959585960455, -1.1263857863492228, 0.3652634934565332, 2.101713711404882, -1.6903326381716013, 3.3645499250939372, -2.6086571414054522, -3.458357243469513, -2.4176865976951216, 2.058720378946392, -3.28804818403456, 1.83632017703449, 0.20419113044413342, 7.314728240264236, 0.14181056603453152, -1.243473464141685, -5.378718571708917, -3.2122302732622643, -1.8842581077028624, 2.1514920235169748, 3.641485993701739, 5.105396278113403, 1.1246276447219223, -2.6295119183789852, -6.101425489179255, -2.5135747408398346, -2.1329340602789837, 0.07990801102744008, -4.286639060692453, 4.578976755715133, 3.248935850746154, 1.9031755462376212, -0.4231165795593625, 0.7559638579134902, -0.5273221556104546, 1.687585336713561, 1.7674890481089116, 0.12101373522925626, 0.7127417022011362, 3.0387389538205047, 2.4260954724805934, 2.2471557695141318, -1.3351959245315432, 1.0446283945923993, 10.575240502545963, 0.5839222667807279, -1.132467366108149, 0.611877858222944, 0.7611551202390556, -2.945492949911532, 1.3066180004003607, -0.6681206940629367, -1.7533262132970269, -1.6042076420082003, 0.33480933762470394, 1.2927011680211866, -0.7461177317408915, -3.924751816760522, 4.075190859722082, -1.5702264167418036, -0.9467045420570293, 4.2492899029438, -3.531186122854323, -5.032024576412777, -3.319707083351639, 0.16203587823140012, 1.7544835461041675, -5.336934007895674, -1.6976352619582091, -4.683574334167724, -1.6427557390025394, 5.269276173027136, 2.3980392983000027, 4.266315248356831, -1.1701008777548099, -3.6319730555161325, -5.940219781234041, -2.57065761048275, -2.6006594753059176, -3.5886412583848353, 4.857912339928014, -2.609916707758024, 1.2145049400252916, 2.594650013285747, 0.21270513987272577, -0.09520307359592875, 7.13316737637189, -1.5308924660042043, -2.1116002939120593, -2.2921109563552675, -4.265869449865284, -4.8621595384689265, 1.014960027100562, -0.43033615764100464, -0.3493529584340781, -5.820082744225558, -2.5068371584295823, -2.7248299220106627, -4.564500002304744, -1.8316874094812843, -5.89759114676862, -3.0673157801423514, 2.6917348044666234, -2.372287408677846, 0.605799125932901, -3.758493904330713, -0.5451173349634226, -1.664711191727908, 0.17155339277601567, -2.895907938344519, -5.620287940638467, 1.513827379830161, 2.0254630229309005, 0.1963466087546682, 0.9952489347547746, -0.7773380742276025, 0.36462835373096897, 3.961829468054417, -1.0264909089320993, -3.8970283464362536, 3.7397478894801996, 6.157716604328152, -0.08026102039140307, -3.375018010238202, -1.8163007483790419, 2.6340344147755084, 1.7063780851812713, -2.988081244043472, -2.6922659652341125, 2.552540786061425, -3.571838930358792, -2.264579267581345, 2.371297046058151, 8.836678549312062, 5.939417711264194, 1.8079427188952066, 2.049647877503682, 4.5696444261071605, -1.876287547509576, -5.841067809789059, -1.7796559119250486, -2.369019378269337, -6.871248416312973, -2.883292179302523, 2.2954824576691153, 5.058102633017397, -1.4156923225731126, 0.6723798364116211, -3.923784824048577, -3.598742318954584, 3.270715847888007, 1.8464703155053321, -1.7871440075213734, -5.661393737768846, -2.4077856253518255, 1.3004562267535353, -5.6012425519620885, -5.312220915112296, 1.2713610274575962, -6.7950646168432804, 6.405822957449252, 3.442713578225404, 4.598949136529667, 1.9852695672878864, 0.2868016736312566, -1.2757936907381935, -5.557206173932165, 3.946132177598072, -0.34909726780112693, -7.427234444643397, -0.1041120281468904, -5.027288405698028, -0.5084082013615797, -1.6776682029553902, -3.4599461649695864, 6.505819986086617, -6.7740561107228245, -3.229886369274497, 2.666700166838792, 1.4820855236839088, 4.190515920139537, -5.697408719167992, -4.625144183923688, 1.702522054259323, 4.802174264989047, -4.840845077749717, 4.654617079211762, 3.2555107310193825, -4.021849272934713, -3.3999813883589396, 2.3148979772362024, 2.345739925103739, -3.394052921719441, 0.03596787303851283, -0.0056824787688697885, 2.809413207859725, 3.2504111278038867, -2.2599411416981647, -2.8193931615667247, 4.920575751747173, 6.047646180608867, 5.279294571182201, 0.10633387826437754, -5.844919547167651, 4.260305601221126, 2.6063856220215893, 0.851547662436383, -3.222783283751241, -4.705516737870358, -3.6577122535622313, -0.8837520227233892, 0.33602377603609107, 2.079169485986569, 3.920141719861368, 0.6809049019766524, -5.648725887173374, -5.250769341442958, 0.42941327033731896, 3.425961698673737, -0.8756328936186316, 3.1497244909095254, 0.14178077489848553, -2.8699607630171, -7.235165114800595, -7.874770719226299, -4.6040965089645125, 2.465981630771687, 5.601118986098226, -1.7052610617729718, 4.711191670817634, 0.49917745274066966, 1.4408841825327239, -1.2968460607889998, 0.3472059308784289, 1.1816441376343934, 2.2569827330679617, -1.4964016041874533, 4.282715645336447, 5.54665145817324, 2.7252593426869614, -3.454113340137727, -1.724051319228102, 4.559387716697469, 0.71162181012433, -2.146692996286615, 3.8684973935871185, -5.558187091684304, -0.3036094120144063, 0.7867074327104172, 0.9033769848215665, -3.2857291600717273, 0.9706243213432926, -5.686739599411725, 4.132378869451354, -1.5723385465756305, -0.7108437304653527, -0.9953831200593507, -7.402554042664461, -1.8380742561786523, 0.7607792127907612, 5.213743400764082, -4.3372522156963536, -1.1401362256443461, 4.081807907638903, -2.7425803103089517, 0.9211652602796799, -1.9272565624893285, 4.391993296497094, 2.7846322703397486, 2.990880582669255, -5.912186940217595, 4.943040521644138, 6.18259339264861, -0.7390501241077875, 0.7926548940631473, 1.5809398012033409, -4.759115516391408, -1.614689603727518, 0.6596951228344342, 2.0237631052459446, -1.8268214395220472, -0.37512785465238296, -4.317195318133687, 0.7106552502331616, 7.9816982360883815, 1.8080633535662727, 2.930401344521039, 2.4059763275818966, 4.511533414805609, 4.93877321175325, -4.358634926085775, 4.6869526898585345, -0.005174511544873697, 3.6377689877449892, 2.563741550336898, -0.37775662099925733, 2.514952676697453, -0.421031074753034, -5.9150097221346325, 7.696626863728932, 3.684077689443464, -2.045432712130237, 2.074047956906239, 1.4896141404730174, 3.195054521262012, 1.37703845586961, 3.0479278065769293, 5.180656427972935, 1.6619824954751115, -2.3282148818258968, -0.11494542710722587, 2.483538012515356, 1.3446477904315526, 1.585393837562204, 6.851923884389478, -4.2587823176552355, -2.467102691763456, -1.1932115897028577, -5.0931858121886275, 0.5608399816466989, -4.351175106218424, 2.69407272932736, 0.4013014780147113, -4.402377602753895, -0.8131155839360925, 0.47861448570187265, 6.264754334566664, -3.284373771944645, -2.867850622597016, -0.6857795800628808, -0.23012103014495575, -4.864173132335736, 1.3592955826142925, 2.605902197214006, 1.830415959160775, -0.36634421173116566, 2.7224094133545154, -0.2917396031082785, 0.11204094224565427, 1.5464758556689047, -4.7447602228732535, -1.648569414256984, 3.61481045671386, 2.866388454858021, 0.49347699039972653, 4.250320453178308, -3.0573868543799527, 1.8138696014826285, 1.0458997220029458, -3.7640548907957996, -1.7859484345948335, -4.909875780240934, -0.9740862938551319, -3.9947467983955818, -1.0013033345532405, -5.96602920129304, 0.300974406070955, -0.0438938009646183, 7.018163378647148, -1.1961222628888646, 1.0924792366361968, -4.021766156036643, 6.95224932954799, -4.075699351546081, -4.1308650745545705, 2.0439448792559305, 5.109890525342516, -5.498490837570276, -6.399184135328988, 0.9081885492972949, 4.221716447507266, -0.9077351455265161, 8.087424914690251, 2.5261436191329425, -2.2963714315294306, -3.3374552620649482, -1.9849251909412886, 1.4640315962256691, 1.0693101935660185, 1.43733507366994, 9.024690373595366, 3.8085253660950795, 0.5705414334481497, -1.272905206552382, 1.8024075383046418, 1.511197172732141, -0.5465400007532412, -0.29190023269078924, 5.9698167318113144, -0.12358128143022504, -2.7926066495949233, 5.415675716307127, -7.758357314276141, 5.250237446263444, -3.8800878565750403, 3.4109259302983155, -1.0046555059552993, 7.806541652562112, 1.8971998131927328, -2.260827751745725, -2.1800179871319756, 0.04301867985086172, -0.11395665357047775, -2.454977257780686, -4.407836701987244, 2.2045482246592014, 3.965669263587309, 6.041559711234267, 4.87785758089843, 2.248790871891274, -2.1618756455979318, 0.031130094346336283, 1.8487807160419962, 3.7099913619520577, 8.943364060555188, 0.40213875429333673, 0.2357522114680666, 9.609468191039326, -0.6123849383896781, 0.5344107067806637, -3.1882621849525656, -2.5475898770437913, 5.767794255948726, -2.346225089190959, -5.4600333669982035, -0.24038673916599093, -7.367282636895167, 2.422459883901353, 3.092968759238972, 6.110480118559147, 4.952835292232794, -0.946580073193914, 3.8005668120149414, 2.9184325124386543, 4.11432855653554, 6.790638515748321, 1.3924341012736654, 2.30022131984247, -4.245925383243378, 2.0260314380139635, -7.727585907363084, 2.14610466037636, 1.2675832461185663, 1.2311915241116997, -5.137911043225775, -4.552504265400823, 2.361440489651089, 3.034562679035195, 4.277166147034882, -9.14090031408502, -2.4141901164584763, 7.440120417743621, -1.3640161254307304, 1.4395588617918167, 5.816323375773793, -3.4515408248400408, 3.177450348352592, -2.007663133411262, -9.991703263635724, -1.0552272471863653, 1.4803402892206177, 2.9089431242046917, -0.915367349914128, -0.703043842750442, -0.8138952852432159, 2.2760295560774724, 2.4950041729071377, 3.226811998896834, 0.2766123841644779, -1.4146207180325365, -4.292175255108921, -3.2255204717225787, -3.418599374882713, -0.7178495151318902, 0.863918607259068, 4.213254293853232, 1.9522682894337215, 3.176838071196127, 3.119416331764283, -1.4551170033573224, 0.16192887420746105, 0.9666744281575024, -3.078700719908443, -1.635405701086419, 3.477422673755632, -4.010984770420584, 3.361890819662097, 0.5691859037203097, -3.6966502220627664, 3.43399644597332, 5.911092652947003, -0.4362067633029745, 3.2258482125709205, 0.3791470061869341, 1.8590893384789269, -0.9032246738054323, -0.20456355879696714, -5.264536080742589, -3.356327594451222, -3.7123977533033075, 2.3514048215930563, -3.8977201446901946, -1.5321864562928074, -1.143122408249415, -2.067772418941932, -4.916801042456992, -3.864095206168095, 1.9792077950311318, 5.680257612423795, -0.19212350678640525, -1.8232365683159086, -1.358171131898945, -4.266077443185029, 2.3527775911466784, -1.5554395990179253, 6.695907763536769, -2.68584241143856, -4.739736551899749, 7.882810636018084, -2.027920507301309, -3.2894944647710678, -5.15564975903634, 2.9948599665278186, 1.5309665017974605, -3.560118719595518, -1.360233966707243, -1.5954251226339382, -4.797460366317195, 3.3407065309287707, -1.3011127360980002, 4.38288734173565, 4.630847799719433, 4.290324900349799, -4.902348582852727, 3.6436198369374173, 0.25054449000813644, -3.4086204481998954, -0.3649977614638872, -4.733997644260554, -3.5269753085029754, -2.0720716745465877, 2.5175576035945406, -3.4169274435266033, -4.676933580903429, 1.4254891393969877, -2.7534627408785375, 2.0131539566394023, 0.4621654724169893, 1.665630744698003, 3.9607983429869007, 2.9295953921615467, 2.775286391768606, -5.873245354925227, 6.998038472934791, -1.3686202966773973, -3.464621957717833, -2.86263934042197, 0.1473500115291268, 1.482270876018678, 3.0337328973501068, -3.5939358705217908, -1.0507382282075186, -2.7513613620945385, 0.5937340840938161, 2.19429278491852, 6.122302953382478, -2.763949664413916, 0.08940785501336514, 1.465031639317807, -1.244270574711246, 0.7332228205839327, -5.72193874359823, -0.8421718085817629, -2.3808521756394283, 2.356338853260327, 3.7724209377196547, 6.921052923054572, -0.8737855223735186, -2.2393100393649235, -7.987433818711983, -4.31278965115997, 3.0081136188422897, 4.224741988530957, -4.411305013907197, -1.774284079573841, 0.9740264326519066, 7.592278440293691, 3.7457682816670355, 4.864531233211193]
BIASES_LIST = [-1.3811874094788357, 3.7064576972640206, -3.6111933375366485, 4.798700616542093, 6.349104460195702, 2.7665352756721684, 1.1030280424697927, -0.08249439784880681, -1.115039569806944, 2.6534007686606356, 2.123886844404692, -1.3657846201408999, -0.0011397322370648114, -2.6218025720465583, -5.510463964788707, 5.272099593154108, 4.825440373586405, 1.4743318884722905, -6.569979695541003, 0.022999677592232592, -5.076370115695288, -2.80095865836983, -4.06390214726486, -6.094062633277106, 3.922255703938717, 2.6509002938541713, -4.026519163513969, 2.9064577607128674, -1.0868058559887883, 2.284724120868978, -0.33883224000697515, -2.295887157863419, 7.121346792320986, 1.8509172127653215, -1.6945491201485117, 0.4438619785292058]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

