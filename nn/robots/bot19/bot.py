import random
import math

WEIGHT_LIST = [0.9364094007501356, 3.3564812214922695, 1.6655225200065296, -3.891210310966089, -1.1473351793297613, -5.210981950329677, 3.940033437218223, 1.5182559634277393, 3.89628176430595, 0.8432124255783171, 3.0699655275127666, 0.8523023414354478, -0.7246821753774656, -1.5213303029780818, 1.1102617779843174, 2.68505471746202, 3.3357233058062654, -1.6949616511093915, 3.7434264041587415, 1.5892754703067435, -2.1030580525122504, 6.057528506747769, 4.874353297824179, 2.822103965426948, -0.8853662039929919, 2.945917226603691, -1.4686255287420305, -3.50924293981799, -3.429212613526398, 0.3269923128494743, 0.22844125763552658, -0.6959730298890158, -3.9193928526946213, 1.1633342822403412, 0.9967844701577999, -1.8612493740827656, 3.849918210091727, -2.1963856403348387, -3.0405305832044265, -1.1613771130906658, 3.377671716733807, -3.0456977618164114, -0.8773309679150807, 0.8745339477301819, -3.643579250989999, 5.089808324952901, -6.3539325753377796, 1.5657726073779612, -2.0293358173572753, 1.6070625407219716, -4.392063617716262, 2.214558839978384, -4.043421112831256, 0.9784234425714429, -2.2050947391934437, -0.023392822510979516, 0.47645638993602857, -3.336778426673648, 6.304033720656411, 8.076261277500226, -0.9620311308918159, -3.364149150822609, -4.244952154659995, -2.6857030014546917, 1.7105901337160683, 0.8329686468316222, 6.761337989321458, -0.048615745740753336, 3.8905403491489547, 0.3772082314452374, -1.545994331177846, -7.739622054809973, 2.4286723246630766, -4.787033607192165, -1.1551224062231555, -1.4728190028678878, 3.071706948639476, -7.413648816636211, 1.42447648414438, -0.6405933347460481, -1.1683465543998452, -1.4613495781543504, -2.4041608692173817, -1.3725917285916944, 0.4700855505356365, 2.6962933007985264, 0.5122026925966652, 2.961902950198036, 3.047140360871335, -1.3408677268688765, 3.4819016913391243, 3.1584457321368244, -2.242758425888371, -2.59795231726722, -0.2700184583385542, -2.007734741965238, -0.9699010337678384, 2.532048725548012, 0.8195944421469645, -4.829529831310818, 7.2422125410039975, -3.6102383321325755, -2.2818188005874562, -3.0907916701827647, 4.077150700767331, -0.703314705794702, 0.9546222385658929, 3.4301582690425505, 3.926100596262817, 0.8379345678842633, 6.090562042762428, -1.30263383950847, -0.21534362701895593, -3.8353608296065094, 3.0919264968519427, -6.631524085398531, 3.117809127226545, -0.36450292156804687, 3.593876087027417, -0.08313445463580071, 0.79209889528514, -1.9301609641216562, 1.8562957823805557, 0.8937506777520936, 5.875092604401565, 4.043345049840994, -5.257816779275471, -7.699189870821393, 4.820779559093263, -1.4200242564287178, 3.0310870114676325, 4.5031593409494315, 5.760144506067647, -4.982645128246193, -6.06525375307291, -4.911812587433792, 1.9010947548137662, 1.3133841258809427, 2.9973468952505153, 3.239633540354399, 0.3785805992342519, 4.329182632891231, -5.733973959700113, -1.2977583730259203, -4.468175530590322, 4.047520520551296, -2.3677376750461514, 2.488147779501487, -1.1122643970089348, -6.313960691482711, -0.5624357365309796, -4.032986404306827, -2.668980076452887, -0.7439340767988156, -6.343428544905889, -5.53461933157148, 2.1455096342396796, 0.2574383210086819, 2.5708923380974515, 4.4006437131133636, -1.9970124790689674, 2.08341371726976, -6.120033014851402, 3.4919275010699184, -3.7741500952874505, 0.6291259699860363, 0.44806249821927047, -1.016012161306426, 1.5501535438012977, -3.290723937951193, -0.9997104153913341, -0.37185587823977717, 0.5731802144090581, -0.573980056007042, 1.7360888612824086, 3.2914187127148526, 7.132059081167711, 1.5268015065426672, 0.33245061639708196, -8.862171836153816, -3.1643662092773504, -2.564574322369947, 1.339653828100416, 2.7134983134009243, 2.8048441928233245, 0.6499382695826763, -2.7590753265225985, -4.683608901978005, -0.3979764534371233, -0.20883157145593767, 2.8945996375620564, -4.302935448660268, 5.278135358859895, 3.750595552686141, 1.3195949528515962, 0.4005335754247896, 2.5502878198260865, 2.1231448966237183, 3.0857254196347306, 0.03507228974465271, -1.3652110424731125, -0.9762965918526458, 4.023251033978443, 1.4017600600292042, -0.2531179469641889, 0.9372905831625424, 0.35697755050134927, 8.000234798796965, 1.1970951717318195, -2.0289698875100965, 0.7376606457734729, -1.5946963506106813, -1.797721552296291, -1.563230256345396, 0.6383028981264058, -2.0822870577639354, -0.8030378694104817, -1.9741412486805627, 1.3738847132548866, 0.4107904861875793, -3.9609606512020714, -0.723707558287238, -0.6957134194265964, 1.190123157833796, 4.416308525525435, -4.125448174489104, -1.8043678122009794, -2.1760823462237653, 0.11742418197114413, 1.3746080241513972, -5.771022313506658, -0.566940327515105, -4.4818447216436, -1.546324973532441, 3.6024448376471545, 0.16966994456196138, 6.219962102119825, 0.0020288742409433347, -2.8913491673277845, -5.924898906509444, -2.9074888551945572, -6.161572459638661, -5.395192917961595, 4.073944717414154, -0.55715765912281, 2.238969806090107, 3.6853306191187922, -1.1504707580624214, 3.491365877662208, 8.749392536412701, 1.4944400721555162, -1.961121258928649, -4.215203919044773, -3.544841857563359, -3.1736885699233865, 3.2010936563464627, 0.8099251673523982, -0.114109142716326, -4.454208313700455, -3.511843577551703, -3.199201656338479, -2.3830796644845678, -5.055320362784119, -4.953270443825012, -2.7060123823720383, -0.023197174506353946, -0.8469426417561932, 0.4488995757003469, -4.245571240939811, 1.2982841591381522, -1.4496624225951495, 0.44694158288674535, -3.130528061012586, -3.728296902268302, 2.1918236879241375, 1.244583178733662, -3.1420123818476546, 1.6778464315978678, -2.080730851474317, -1.0149630978131536, 1.1882760975720812, -0.9412873746928971, -3.1956314171432973, 3.327208809653974, 6.114220959318748, 0.8459286769840453, -3.562292595304741, -0.21045222582474277, 3.4947343854452857, 1.630545946901515, -4.225982288873162, -1.278733877345977, 4.75464457168256, -3.052085789839415, -0.49100601304044833, 0.013905121771919493, 8.308798621403248, 6.737238754229315, -1.6892006855649189, 3.6889573051491924, 2.4618726296830302, 1.6262258735334236, -3.424598967360791, -0.3004047784152778, -5.2832637259172035, -3.873187825249821, -2.949979892604542, -0.04151290634245175, 3.6618729458461408, -3.401825500116201, -0.5206189954431235, -0.8225027370323466, -2.284706063947401, 2.4361990460797633, 0.18790814653364674, -1.0693400184657382, -4.40600775405177, -2.1030561239551018, 2.7909107986088353, -5.397665866741352, -4.279291995754466, 3.0978097140761562, -7.268910310493144, 5.827676720769571, 4.109384177839929, 3.4417225726717406, -0.46610411569306565, 0.7757189825271338, -0.6691035171941946, -2.455910073532177, 2.618193433607167, 0.7161424366864195, -8.114680340604163, 0.7886876233349993, -3.711631900525172, 0.9086110902721773, -2.965949329290738, -1.4312439270059407, 6.960158666925189, -6.00518817528182, -1.2038949452867156, 3.986077322431127, 0.07776334128397289, 3.731779371911311, -5.295834080841473, -2.527970194835283, 2.8137842838173306, 2.292537636128342, -1.909381857211918, 1.264318850011266, 2.239508028464778, -5.477067766257102, -2.7125486769465548, 3.012182249497684, 0.2622736651309523, -3.6679097701213945, -0.5775808030967287, -0.7857337935060498, 3.5538704950536406, 1.7635496554464556, -1.6192671046461133, -4.050987577743005, 2.2977140645351275, 2.6915266422711115, 7.132622915102452, 0.4679995064564979, -5.511136519193021, 3.91785789964589, 2.720373510773119, 1.7880603162959643, -4.831638913404287, -0.9882730424226469, -3.036288359984588, -0.6878211121122766, -2.6519205397217505, 1.8709758932652503, 1.5597728943089937, 1.8647193945401042, -1.9685435681493237, -4.196381735983641, 2.0250598594389895, 3.022778921470028, -0.43376369231220324, 3.510252092111859, 0.7494318143981449, -0.9575263754110017, -4.20376454954231, -5.517604442779199, -5.80879697501054, 0.7466173064472374, 1.1624180831316542, -0.3668044791740963, 2.993945863382587, -0.3511805668942962, 1.1653487980565043, -5.654369756383908, 0.2993131618410363, 5.887467565502137, 2.616592098858406, -2.079602895066375, 0.8416251279362881, 3.004251842449391, 4.875406394066637, -1.6412970815955694, -0.8633155784614821, 4.3511435770622775, 1.9008126989716545, -3.529721448834189, 2.507006278239391, -3.9965984618229866, 1.3329953632909088, -2.6114154031776735, 3.8507561923152425, -4.24980737263196, 2.398196996708095, -6.076015814563814, 1.2565040784725383, -4.345051727918817, -2.7988946982956575, -1.5214678285523924, -7.584376827615927, -2.577294607678541, 0.6251853561509786, 3.8346929942538077, -2.3531900537661308, -1.2125324073425308, 4.8981741062069375, -3.5433104774025885, 0.5386645269013663, -1.7469192505922715, 5.358941569501589, -0.030672852432710562, 5.346935146443992, -3.893951777994625, 5.370417529928175, 5.609188812815971, -1.27864421555925, -0.9776520970446124, 1.5426585457298159, -4.259117095640804, -1.3332720202105817, 1.2989896801025864, 2.5738502484250065, -1.166258163069032, 1.592836236018198, -4.699398404296257, 1.157802118115221, 5.841416380065332, 2.859674271739947, 3.487715738428097, 0.11896980289012316, 2.855454702600561, 4.328666913551216, -4.918606330490059, 4.079132668062442, -0.6622350406729518, 4.011145554627871, 5.008235716805263, -1.8672330791019518, 1.8340595293800268, 1.5020278854199725, -4.071306176492698, 10.79485742669728, 3.20623198031946, 0.19441940945373837, -0.4829373124694707, 1.3480382725129374, 3.3461056465344896, 2.047045838415263, 3.2900055391757137, 3.9808437709738493, 1.6850522168886548, -0.7393240250165181, -0.8133317238236413, 1.08923971331456, 0.16675087940054656, 4.430519853730691, 2.9871639094159823, -6.151605077022065, -2.8639749411869833, -3.1246093311472247, -5.214902086383553, 0.9814842438879117, -3.933188655645374, 4.6617882616576285, -1.9189063437094607, -6.3113101393207245, 1.1813204016285472, -0.741921219667431, 4.5685470238150945, 1.0640657948209382, -3.5877404728053066, 0.3037199188736748, 0.5292327346502002, -4.552351862134371, -0.1997647663303801, 4.470785298125259, 0.3270437017937997, 1.9484623388531492, -0.07938569993713429, 0.9021283081555314, -2.147471385063381, 1.3092980327114372, -2.4643140512464328, -2.4026411297816272, 3.8146562583566617, 2.34175127501193, -1.689478874955707, 3.82754499470897, -2.9297089332209754, 1.7365013010003474, 0.8328991306047901, -3.896325547611446, -2.2371794318059464, -4.349127896024264, -1.7770990597574345, -5.1152292714330585, -1.8544452854378632, -3.331802642192331, 0.909481273598779, -3.6593305333658837, 5.81329829738946, 1.4555826156433396, 0.8859056244530144, -1.185949826166108, 5.285111221458841, -2.3841274614573247, -2.8956850280702158, 0.7752098950010584, 3.9084461585092347, -5.290112731729512, -7.277564784248247, 3.264216800011548, 2.635409935062743, -3.216229060336331, 7.3234570363938865, -0.26474758117425234, -2.4322875341959347, -3.2615280881937045, -4.082038528681122, 1.431090031653257, 2.0116931580192663, 1.1427983727964457, 6.827892438223056, 0.7147929513669533, -1.0156085121096459, -3.4102283794185766, 0.7350349934542855, 2.722593024759994, 0.11313599072281044, 1.1548366418426577, 4.280958902764745, 2.091023196136514, -3.496456848435175, 4.790894022544125, -5.687011122106294, 5.152123330000274, -3.137781276290677, 2.68115797288468, -0.4573649698874094, 5.40967964372882, -0.0993157691924128, -3.5233623915182446, -3.291171790481169, 1.4678495546720418, -0.008390601239443018, -2.1428092115197437, -3.338775966451579, 3.0063073400011717, 0.00595628529554415, 4.222523829278884, 4.91219632237225, 1.6455973255650251, -2.009965061389586, 1.567618065490346, 2.5352415425762596, 3.3583607403051827, 7.828114038226479, 0.38067923268842696, -0.15778904451201137, 8.960596257675654, -1.3347459096278698, 0.8967512829286359, -1.1275896658993398, -1.8864179258195393, 6.684495374738384, -3.0803821834802023, -6.1916239601131, -2.0487060824342294, -6.426734481098131, 4.183033060932875, 2.4237038914071656, 6.301546672942096, 6.027000175739233, -2.4429303410534504, -0.30076971364917426, 2.022728983978033, 2.390031051412859, 7.128987532593857, 1.948747024840829, 1.6020832991901042, -5.280564070010454, 0.5903242279935159, -5.646986019781496, 2.171495270960973, 1.1976835506743848, 0.5617944621554263, -3.2248825594334396, -5.341544903102346, -0.3995174731484178, 2.3581661001062257, 1.2133805693461497, -4.174808781657079, -1.661284283390205, 5.61286853400574, 0.815647523650453, -0.9911899592135685, 3.429617680878027, -3.3260747028233526, 0.5784284837586904, 2.3878866949164133, -9.74712407880334, 0.6980295720590299, 0.7149204353311396, 0.809408594822403, -2.10985174598747, -2.176034323625779, 1.0641624865180996, 1.0596854889607075, 3.4658786145189975, 3.55950408094915, -0.9846682023350453, 3.1510822432748986, -0.7619339379596592, -1.9000329270158558, -5.59660375462509, 0.4707894595908002, 1.5144738464937975, 5.0680797035084435, 2.018602534977929, 3.9943926620695196, 1.8737942262524672, -1.7532697340178878, 1.5369028248061674, -1.2208141179807748, -3.274934839018056, -1.7337653866973393, 4.591985944267095, -3.669935636017851, 3.565966720631062, -1.4660737685493597, -5.043551465763936, 2.516970290766263, 3.84138841475158, -1.0455179703522792, 3.2293373061210557, 1.646789162850772, 1.0952401091293296, -0.6675671822148144, 0.0658326591789209, -4.280729182289643, -3.1845876846007144, -4.198542651472656, 4.860176705637709, -3.4815577089927436, -1.8386926172350306, -0.30638528118795616, -1.3239193183002755, -4.120504202589839, -4.393172782471329, 2.870308185533555, 5.614362108020606, -0.8624038671959334, -2.2403853598568353, -1.7153552370512763, -7.02958674119012, 2.975385350869277, -5.005247244535079, 3.4311220154602697, -2.7019991675816115, -4.095531713885776, 6.397041265720448, -2.3388005849646953, -2.9733346633400872, -6.002812729011396, 3.4976216286820545, 2.6487140370811977, -1.324689064938865, -2.4942181518700317, -3.8876327333924117, -3.549685007820016, 1.7509738833433506, -1.271421867662078, 2.172710866480863, 2.039321693405233, 2.188015740678596, -4.318997024941718, 6.326185543808293, -0.07445004573956726, -0.1799334297196724, -3.3178155039983452, -5.046725003209889, -2.694450037668881, -1.8305183905842652, 3.440717176255344, 0.8385770674065349, -3.4109852408732433, 2.8953133905324098, -3.0835197584107794, 3.3748383266359037, 0.6167293796684477, 0.8752764095402166, 4.686558913988411, 4.589211559674379, 1.9258379218899382, -4.944691782199779, 9.020992338320706, -1.3521282146703155, -0.6272102455763742, -0.3393844385664667, 0.1434033022467971, 1.7284831471523923, 3.373179242278134, -4.047890671772519, -2.23562874393422, 0.362273430713129, 0.7118606597949027, -2.0224053929763275, 3.971828596710571, -0.5423770998236779, -0.6298037065206648, -0.005924152474982569, -2.778574503685415, 1.5353169511685532, -2.620771213173843, 2.9424257229902127, -3.4419829392731884, 2.9093175355427476, 5.06609159090174, 7.770960940155984, 1.5823424052651633, -2.062199889627785, -5.786529031236093, -4.9117942897717235, 2.369999880034897, 2.626377687599171, -5.770466243244336, -2.3741485972812386, 0.26589369674619934, 6.405704256238563, 5.6254793292027365, 4.2513260875906465]
BIASES_LIST = [-2.8753563419726107, 3.517907073527393, -3.0782329955429297, 3.825183790221896, 7.705231433549294, 2.2952001379126066, 4.197871247395657, 0.007170925387431026, -1.8426647940996181, 0.3944905848295972, 4.094353588227433, -1.3388986891487806, 0.47702670377443557, -2.507902871694191, -3.3144998503574703, 4.285164177893508, 3.151088458639342, 3.1861106146006177, -6.2547983863831815, 1.053123092110675, -2.9343362500503076, -1.9951324376403974, -3.445747164810154, -5.325860547606506, 4.34060873651678, 3.5597500628203758, -1.8861893855278469, 1.2037743782484864, 1.2594147321310505, 3.4331620453960454, -1.8118340915108087, -1.354121521418139, 3.747535931237139, -0.867250574157546, -0.6934310080838444, 3.697756582978597]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

