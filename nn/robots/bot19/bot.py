import random
import math

WEIGHT_LIST = [-3.226457376014403, -1.884543334555533, 2.4395252030962764, -7.155821704096024, -1.0627143765717497, -4.681979014751596, 1.2686974833894595, 0.4849282070859082, 3.370434796502715, -3.3663165305353187, 3.8377457076595576, -2.8613687641358903, -2.5384238701146273, -2.997113511063828, -2.4492471609224555, 5.1446597664204825, 4.920811894337941, -4.545780645729117, 3.936443607213887, -3.5666517184967885, -5.775148482770716, 2.23336419279443, 1.5229602846684247, -1.2898068715593278, -6.5139343021450875, 5.2487542942315475, 1.0039365038439971, -7.764584040352507, -4.089967883187292, -3.277646835505788, -1.4456970583613622, -1.0868123116719395, 0.4615880969220334, 0.08111517923438849, -3.59190106864481, -1.180726758039547, 4.623612667012915, -0.529567541815577, 2.6288033005819207, 4.2580983914217585, -0.06623620417355092, -2.918876095798578, 3.690279340847325, 1.2411840086058543, -4.645976438727837, -1.2281895592767487, -3.558590078059529, 0.34332104262215113, -3.2024693421213355, 5.383496400179797, 0.8110600319490711, -1.9595918913570136, -3.938299494032584, 0.08741159338211135, 0.5823721787075173, 2.5993619465114213, -1.1770168339118188, -5.527200496059724, -2.0289750188385716, 6.386888918091358, -2.9098212923182905, -0.66092090342684, 2.3863195259029824, -2.684920396347912, 3.681792152766361, 1.1174038721843695, 4.79171886571301, -0.8840397159970554, -0.4496076059023544, -1.0816262622509254, 3.3244187233979297, -3.9859608204817207, -1.5259630729336016, -1.5471903627533012, 3.2042333658388698, 1.9917671573751168, 1.5797332590660513, -6.425339825519902, -3.7742676553153696, 1.457709431287848, -1.698361664319319, -4.6266242175128856, -3.4637000853443762, -4.266281979834207, 1.529341929451176, -3.333351692747068, 3.389268679494604, 4.514937573189242, 0.17127508011509351, 2.2451602448416708, 4.416998260344173, 3.4115607525784863, -5.5551979466128705, 1.938998662197264, 0.895005312093947, 2.886091691909421, 0.6271039441437245, 2.873684505325358, 0.33856893946026223, -6.3040640539579105, -0.3964006645648692, -5.418258483967146, -2.207070518649571, -2.8370732951793944, 6.361522599400118, 1.6665671452350495, 1.112720367089672, 1.0151600540887493, 3.687639281552512, -0.9638249138097885, 3.130428692823031, 1.1289086382762639, -2.373367328388513, -4.02921129217352, 3.3416550279894928, -1.177039510253938, -1.8924315148819164, 0.8419301966274237, 4.011125905474604, 1.819504737454361, 2.7116023433134497, 3.8205301635649347, -2.794651548244608, 3.7273002286601304, 3.2238650872664207, 1.1166848898852542, -3.3724922081073885, -0.40958236372032575, 2.0475149341655827, 1.4783129142087326, 3.9918806851473203, 1.2539404157949683, -3.242454882889931, 0.30569070567328827, -1.707001752303584, -3.189090689615365, 4.442014822401914, 2.174167603410247, 1.4049068352396237, 0.7005715294449424, 0.908821112022347, -2.459074415654186, -2.9445381693417954, -2.635831638040651, -6.745011756147301, -2.82536498779403, -0.5485578546592957, 1.6307951023005849, 3.1288978005146584, -2.66106451445523, 3.95919181726794, 0.42851781183854, 3.3949578531199682, 1.4725970956425223, -1.190530267011055, 0.3072456158612038, -2.2936933528581767, -2.0561691626366505, -0.4261165893503196, 5.980046048068901, 0.3768447099048382, -2.2017636947730503, 0.33293558898670983, 0.2071880882893884, -1.7814789456529017, -1.2230804660727705, -0.9741147582092071, 0.39418557391386977, 3.256416052188311, -1.5690867110595335, -1.388884961842729, -3.805659079565455, -0.08002829456743732, -2.608026822725062, 1.9195429685113208, 5.639690531062292, 4.080741394899244, 6.1734473042585805, 2.4193043417061704, -2.050158822056404, 1.2238648100426532, -0.2045394135165466, -0.9382447167193846, 5.07324158711617, 5.29266962938282, -0.42090118503175766, -3.3032416645232052, -0.05289122572977645, -3.0073289703626935, -1.3180755206797614, 0.5359115845950464, 0.6389901996403693, 4.46362876565302, 0.4910647904437717, 2.1740740409200496, -2.021864234331213, -0.1199457159431494, -2.215583680645525, 4.158939109656325, 1.7472233125925833, -6.25797853469918, -4.75714976665758, -2.4024274679540927, -2.767739456370556, -5.361748198312979, -0.09789325144902461, 0.42318542283963234, 6.020176105799389, -2.263929886548756, 2.3722990376455906, -4.122323988048091, -4.220371696754652, -3.645610359808244, 0.46818039916054754, 3.061736305151216, 3.5266303228334888, 2.5861864320070946, 3.4709461310978904, -0.8768679890536482, -1.6399320839129017, -3.199246730663482, 3.57216183959238, 2.5873766852837807, 0.03294815019071495, 0.847001929192041, -2.937395715723683, -0.3428678265630507, -0.20344688583335802, -0.8312492500677178, -0.44128331016906186, 0.7088635491917319, -4.967879772793461, 2.72601167268881, 1.6351470775606716, 4.4560665828639, -3.6922460759545057, 2.0794508762641097, -3.5739318042039327, -1.4199144716869492, -4.419070453656262, -4.455219415806656, -6.525382789303232, -7.644288395974554, 6.682370170240448, 1.7448395768701346, 2.2152632006096344, 5.335242942422313, -4.433570703944383, -1.2585756168446685, 7.635264338473185, -2.332118846923403, -1.5266487950420962, 1.191700183186739, -6.866435350349645, -2.561138255209101, 0.6337594377638172, 2.905111212810417, -2.080805811714138, -7.495764769578976, 0.2240553467650357, 1.2378982988280427, 4.30192343245268, 1.2457837258267292, 1.2914979799670365, -6.240271712769748, -1.8394694565326812, -4.834923379865934, -4.1842939876531995, -5.427077859685336, -3.1383684767293185, 4.064795283385248, 1.7653054980354361, -0.785941984274968, -6.968914761545479, 5.035435870011246, -3.630411555072835, -6.252068837094283, 4.454872895009954, 1.2436357395468969, 1.6282676463555852, 4.272357203417955, 1.3539533494608085, 3.169059563002076, 3.688773256668177, 5.725846599279212, 4.020642573891103, 3.08575437620624, -3.7666627157312185, 1.679824848370282, 2.755228310193976, -0.7819464227920871, -3.1169259567888004, -2.585582449543936, -1.0289165053505125, -2.6631050186686203, -4.89745335558975, 3.271259786750938, 8.03408654135578, -1.3499821312274296, 6.438637639198399, -1.1772387247528688, -3.9537712837456573, -1.224586770705392, 2.91446488635621, -1.7089841103972128, -1.4299859320604806, 0.6456798766185448, 3.4522604174787253, 7.105164380597149, -3.05583386021443, 2.418716717310347, -3.4644540446231966, 1.6506172156030594, -2.0415983089123744, -1.1370932996386105, 2.3125107260067765, -2.7934359585878155, -2.229532849117401, 2.63821977271293, -0.07286113008040673, -4.31311578745057, 2.127296161132616, 2.494477245261918, 4.985214474517977, -1.5978514078339776, 1.311869904327418, 3.112341935450967, 3.8300783039263333, -0.8241523133277351, -5.525700219501964, -0.867053152574627, 4.812718924972911, -2.867890302775251, 2.9836292083612, -4.539849283386421, -0.17011830111706305, 0.959355815964553, 1.0727328364436342, -1.8256014623290897, 1.3417026576435251, -0.9916103267294639, -0.7518882119828603, 4.132918696210229, -0.9548064420240365, 2.5612899380186143, 3.99170961980049, 3.069396666018556, -0.510954638585513, 1.797051966192868, 0.9560137550233461, -2.80889544827323, -1.9657981051268032, -0.42536047371401553, -2.884351882185443, 2.3771327554609156, -5.420877053690614, 0.6627497878083162, -0.4930735923592312, 2.028563124732462, 3.1118082989225844, 0.25555783064238513, -0.6741130370953134, 4.326698731386466, 1.0073156636618275, 8.953810165893117, 6.126454667478686, 1.393589276811329, 1.2120246366080045, -3.1099867057933532, 4.9242544492445495, -0.23707836076184052, -3.6377455540658614, -4.0645406086643705, -3.99869794052372, -0.7939069997372326, 0.6166737746506779, 0.8605774532085917, 0.8328640973927381, -2.6415011427400126, -5.157212907132379, 2.27854943767945, -1.0454256906701924, 2.304221358734309, 2.1275208220875115, 2.7922019692202946, 0.9886207616549991, 0.4879144677536702, -5.387475443515269, -4.029047744465471, -0.13749528638787067, -2.213499405130815, -2.714628263611367, 3.180466583035612, -2.3319462985687114, -3.02253654492769, 0.17691996572266966, -1.4375877261412835, -1.7512989694921015, -3.8710309060889916, 1.0754085848402442, -2.2812788428463646, -1.9111425450190986, 2.2914581239517076, -4.283552693670375, 3.291754765606674, 1.5053999193057805, 2.058326932107166, -7.368015873208533, 5.545039113046547, 1.5267877797803773, 3.578534525964934, -6.717677286940567, -1.5597061697682812, -3.12787124146285, -3.391621599979163, -4.354292187190394, 2.2495445408166335, 0.5116418075589471, -3.481432506753993, 1.4590614283916152, -2.0387046566395925, -5.866072148552198, -5.472460455270421, -1.5526900944990296, -2.1969921560556633, 0.3743482989105704, -3.4174159722225745, -3.3304869693475796, 1.8273433334787543, 3.808565932223476, -1.6799422513235394, 2.1492224478778432, 1.183950500224399, -6.607973459199849, -2.092162617252689, 3.6406274909901306, 0.35696653984834703, 1.3936519765706397, -0.49080578634861993, -4.087897038661185, 2.5929049628963687, -2.110041018175068, 3.265653477243289, -0.6628398101285922, -0.942659080931213, -1.9678117826654893, -1.3446159841963254, -2.3390342489830918, 5.313004365890195, -3.1557793959932274, 0.41163995685812815, 2.3227940068478796, 5.7983091406575635, -3.866636170798724, 4.989317919067308, -0.6306318356405678, 6.386255814584315, -0.5308035701261657, -3.9753151731050766, -0.7093640522934715, -1.4912697288663386, -1.1850967544365243, 6.378900382669732, -3.0444365942538956, -0.7860921162788549, 0.8010559284052579, 2.395312145309438, 4.504328828710133, 4.1436077830597, -0.8332616927922538, 3.4756106321513682, -0.799016336946822, 1.8860068928455815, 1.656586164764816, -3.6138456248217254, -0.1314019043142416, 4.06034548475057, 4.857300214542388, -0.837723885360887, -2.0226998457764425, -2.2914531331811694, -0.5355108719103658, -0.7191570060733649, -4.784741009300791, 1.08617662417348, -0.8694055885472605, -6.371078284092193, -0.22584705265024152, 0.25945138188294337, 3.5406374431167826, 4.045788851235291, 0.6148076098192456, -2.747861270987184, -5.359648731920052, -2.505486523329734, -0.21091005620419312, -3.223152872783822, 2.1638642234799157, 5.510008217630262, -4.2926514250414325, 1.807903880858813, -0.10511165045540793, 5.628999419579823, -3.342201908841276, 0.8809827442233986, 6.30055350147394, 3.6088898241301663, -0.7347354736502413, 0.6145272331095968, -3.7501959587924087, -4.1072542432891, -4.607621584835427, 1.6437409294954417, -0.39908317914599367, -4.70513572807235, -5.302852776163304, -0.29997694847283696, -0.4694943625402912, 0.9643727279403103, 0.11858090004549582, 0.4787266814900022, 0.6973965037624177, 5.339798656787503, -2.1284974460497583, 1.3625844509334453, -1.0746762392954645, -0.17233189210262823, -0.21118534447922277, 3.5723517602975203, -2.3086706217442194, -2.1000717557856787, -5.300287992867488, -4.1802652214789795, 1.8807654853019953, -0.4413674979892397, 4.698869165180231, 0.22272916299373602, -0.9337526164715266, -2.539053349912302, 3.8666232854340468, 0.7088783092883539, -3.3773105237331706, 0.12849410707045772, -2.2271815140497253, 2.9780812947622604, 2.6636000511851248, -5.494459929709667, 2.565799259874213, -3.846684701333518, -0.8967416615827524, -3.7534287581208643, 0.4626440035632955, -2.4048387905986015, -5.555868466351344, -0.80298722276438, -1.713174796786123, 4.84714148124585, -6.235872957743197, 0.02807911439952271, 2.6077264197154135, -0.26315295284571016, -1.364991248774915, -3.0158984068949763, -5.666622589031447, 3.455273795107793, 2.5298940114508515, 1.4891926562135174, -3.7206470913764265, 2.424513862612433, 5.475820604521706, -0.1676558777822379, 0.9617382138458055, 3.714051873184151, 3.6967421276272256, 5.057350734248236, -5.357090737718043, 4.780000511843089, 4.119514647240026, -2.5865970367022157, -3.151077732406547, 6.303297821109497, 0.45876315752385466, -1.127196903248514, -2.838192835787229, 2.433578024217237, 1.7508079715502984, -5.2359988153003405, -4.595520444106549, 0.04604325714315305, -4.450057210123019, 5.7949914468704575, -2.4551089199085867, 6.431559438757487, 0.1572499611053617, 0.6084672901443227, -0.4004367141822245, -2.8387165178894254, -3.6948799810876434, 5.088912509955277, -4.262200632492459, 4.645813616872363, -0.08847935738785107, 4.066607290003377, -3.648032635389015, 1.5015367993811424, -1.5678045287617735, -2.732223676118651, -2.940081080602515, 0.9300491194199021, -1.1542081655775087, -2.5977283403013063, -1.89252844299848, -5.462832831415023, -2.9901098735315967, 0.5607676121149816, -3.446040932404337, -2.0544527863393154, 3.7132247268834977, -0.0999608861902117, 0.20312588992978098, -2.4248253296973696, -9.261392560594501, 3.096918166020963, -3.0687929090821573, -2.544451976396231, 4.602378503826902, -2.425055704000157, -5.2583768477050095, 3.044477658133437, 3.516547152769661, 4.39355056251488, -2.6570665545965495, -3.747352696358848, 4.639564974593889, -2.4860767029706534, 0.2890631357907534, 2.014645554123903, 5.241499890646689, 2.327658116556738, 6.845717657571236, 0.901374309649368, -1.7202547240780732, -4.472090630476243, -3.2802437661329567, 0.06756788798235203, -2.4481347579525066, -1.8119674155283674, 1.9717379476893218, -1.6614159368653554, 2.6386729579381267, 3.9698971364001947, 1.8398168163732578, 1.868253935053434, 1.776229902500753, 1.5244248562660871, -0.3123328175944804, -2.701923438973438, -4.814338332422672, -3.2448034509463453, 0.051466055028474234, 0.07736748230414614, -6.37057164048635, -5.707220120919161, 2.337910997918779, 0.41285770266986566, 3.124041019224544, -3.536653315742444, 2.986709629260691, -3.7300067083855364, 0.8825877690061859, 4.613907833904704, -1.6174085015819788, -1.7708387705534514, 0.6074744303720596, -1.2756021059295626, -7.208701732539297, -2.0560703749495604, 2.6412537592734466, 4.883846099308238, 1.37372424985874, -1.7353713415216374, 2.3539209527261136, 4.055570018915944, 4.966033383939823, -9.376651034897352, 5.1273835473519265, 6.004640087311667, 0.611778513014142, 4.241464349027375, -3.968333545592006, 1.1778076018512929, 2.4170188024940775, -1.592322873619251, -1.804354170741987, 0.46704106224646846, 3.008031684744955, -1.8219535266064795, -1.4300916708013622, -1.0582788477231249, -4.051773639529117, -1.5728726108025863, 1.8632956646799776, -7.587486212487279, -2.4757968151888416, -1.7206959604286607, -3.7599643235102995, -5.365787474317428, 5.363330794950003, 2.895396558668932, 1.9399411891697715, 4.256157519112289, -0.1669254391414029, 4.751512767997958, -0.19280678176444788, 3.857624037647515, -3.9303354677809166, 2.5567012054531126, 0.5642710029735225, 3.3739276295431875, 6.095109582335209, 2.051239853117258, -2.4558507074798213, -2.551303814885383, 2.0269149249352463, 1.6124657688470831, 2.634476784552402, -3.6732948461934884, -1.0481044983940346, 2.2480449130217472, -3.269154649158621, 3.2929349014620852, -5.124064008723064, -2.9059764392358036, 1.7582691205061969, -1.2603493099776615, 0.963075575366793, 1.7479713967272281, 4.710485845000235, 4.121995911509393, 5.878935383061586, 1.0345269338260668, -2.94329319625107, 2.638749500381522, -5.1392592559310275, 3.192159456709236, 2.676328226698502, -0.5793425282276254, -5.132943254989298, -1.1337016820783614, -0.38899693287767745, 2.2303380023544475, -2.0795025094284063]
BIASES_LIST = [0.16175097971169072, 4.708965989321672, 0.16954650336011734, -1.30105039920965, 7.7665129220484665, -0.3672434955380677, 3.9933095017643225, -1.0927104663708764, 1.827182236976883, -3.5951958289864723, 0.06298642817582123, 1.4853522053120454, 1.3554729378412715, 0.26091020895428585, -1.3481436153681177, 5.103790347373026, 5.656385539122493, 0.3211820259646583, -6.53215705532557, -3.7459749942320713, -1.1156140668051628, -0.7156508914996382, 0.7691743551416219, -4.3631624055423375, 2.5178057537391174, -1.8940794519456727, 3.4268419987662853, -5.149477772437043, 4.044243920314036, 1.6754733282034526, -4.262873272934108, -2.229090958232772, 6.840225641550664, 1.106299597103864, -2.7794599706207554, 4.8619987240054305]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

