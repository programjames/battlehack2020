import random
import math

WEIGHT_LIST = [-2.5191759016874835, -2.1426593392902715, 2.008362915812709, -7.2891575028948505, 0.12582300043229266, -7.404354130412183, 1.979600715915768, -0.539168100826688, 3.49175938135126, -3.0208943044702257, 5.421422763887059, -2.5970428742821676, -2.7616311470207435, -3.701063782704381, -2.8902897410867654, 5.704985285082373, 4.829306528921228, -4.465617216187711, 5.471064409722094, -3.9323716713484664, -4.810020829799798, 1.7922802105740798, 0.2811030998566535, -0.469624650129022, -5.937620672000261, 4.180333898763418, 0.4011915850379266, -4.4240228099240815, -5.853337731032236, -3.525678151827435, -1.823440720061818, -2.827204462103472, 0.5196470611744715, 1.513734248339055, -3.447766851403144, -2.191604693007906, 6.192022318900888, -1.5783626805071806, 2.6434679138624535, 3.1072755246136374, 0.9928241571918925, -3.067486081431575, 3.4265328645033826, 1.607700309671559, -4.075426542207911, -1.2334509736334782, -3.9379430279905527, -0.4279954051834505, -2.152940616839226, 3.3198200461297827, 0.6170319677449052, -1.5964350901932804, -5.354707241460407, 1.3677690617695237, 1.6128605627089998, 3.216518857204587, -1.2786106623437172, -5.1597039202007435, -1.056595149971889, 6.877874371891885, -5.611333384313745, -1.6008256561354666, 2.6044672885553837, -2.2966867863155973, 2.7373750115502915, 0.5421125798686011, 4.601510893138878, -1.9542308877993795, 1.5234501295044134, -1.4290645143376195, 3.0449305078210616, -4.192334718190873, -1.7701412523461997, -0.9045397594188318, 2.023606793776298, 1.7735079207035112, 1.6020605644542334, -5.7876233612591275, -4.854732312605643, 0.09036879658685004, -1.1204083910789344, -4.107134368161066, -4.879364372457674, -3.2924183592033627, 2.026773760698674, -3.129873628255236, 5.212828256635863, 4.103951632630688, 0.3305215635561283, 2.524332329986896, 3.984144064075565, 2.2869486738658082, -5.9984022589876, 1.5913808178295472, 1.208621502346336, 3.679568040466262, 1.7256013294319228, 3.175294107410675, -1.921356068463739, -7.458033824150658, -0.29195411535820837, -5.078260540059787, -2.0343104626163298, -0.8600894219773769, 5.423751641457758, 1.3810579213847842, -0.5006461735265627, 1.4376868837508558, 4.081050134536743, 0.011212233943099337, 4.168153288268977, 1.5357499883317485, -2.4105109314078956, -4.706495037816083, 3.527311060194502, -1.2636610295744028, -0.3435858437645789, -0.8467660322101952, 4.515562835419228, 1.9124486158708387, 2.606252904186313, 4.185906670587256, -4.000971815742524, 5.704958480704079, 3.032580000686706, 0.5515437529238449, -2.6918091668595716, 0.6601659501978636, 2.8082567835356116, 1.4226699880028497, 3.6206009807368247, 1.4472960025509258, -2.276209937471652, -1.0310873445275468, -2.352383854934823, -2.898730103033187, 5.436413217975, 1.8252688014934124, 3.104960437005909, 0.8672290301041978, 1.5914549410789771, -2.367236424227609, -2.3020290292710133, -2.6063029609413073, -6.47365593660696, -3.0811592568524215, -1.3696090717093048, 2.6772688001718814, 5.564862044309516, -2.4717604819165464, 2.1583182124001294, 0.6889255476795793, 3.0958680255124715, 2.090349388823949, 0.5651686571318155, 0.3466921808644716, -2.7020767166487145, -2.113181748960086, -0.9676229484767098, 5.716542013166043, 1.0815959580800976, -1.7237611895593519, 0.26887750123706744, 1.381676488243036, -1.0683366012045103, -1.6684822320358292, -1.1000491121110092, 1.103565652400019, 3.1546256549804133, -1.4622532274784736, -1.50441972992089, -2.971110990264827, 1.3785999950152874, -2.522295248572755, 1.8762763903539188, 5.506628291274197, 4.68746204314119, 5.9843682266841505, 3.722298418909519, -1.3394997971696208, 2.475458651748629, 0.9095352358687419, -0.1975512233793313, 3.286245796055395, 5.243200288616189, -0.1305829429319565, -4.158099489148841, -0.08751090952224061, -2.119013619486579, -2.824606256478235, 0.8617012427643, 1.2116691590547393, 5.082506498969089, 0.3818583092887995, 0.37922609980735533, -3.2800678729188344, 1.582331603813126, -2.6250032098619105, 3.5282242316839447, 2.3098654173295863, -5.4937491622713726, -4.490584350770685, -2.3336387932862186, -2.716446751838891, -4.308518853624648, 1.944352188232572, -0.6664195538957776, 7.402085894515746, -3.8916299750303205, 0.8866000351256793, -4.4008250052887945, -5.682844317724086, -3.174459322356439, 1.2617282014237796, 2.7608389551085235, 4.88956846500282, 2.0787290765495, 3.0020146942744255, -0.9433195556643672, -0.9945898869076029, -1.5259503306243223, 3.7288911166568237, 1.463721616920676, 0.5148117893913036, -1.3137600164893917, -3.6075458260156976, 0.5242238571629696, -0.4737430574653496, -2.065413808452507, -0.5745780844505949, 0.4161036781884695, -3.598551840271779, 3.005747420423134, 1.016390194105071, 4.205902624454524, -4.814735664304348, 1.8155200884540696, -4.1591073077001885, 0.19180605888891122, -4.2751819595120795, -4.35505666735507, -7.948914271625684, -6.904022288547451, 6.252918038377485, 1.765234911346219, 3.3655534119792385, 4.014792204717831, -4.919693141510059, -0.6914895118533009, 8.448518065382887, -1.7930275922260819, -0.4507409386609005, 0.15987865569808357, -5.455971376919556, -3.5164095349810793, 1.224253770543068, 3.0462583484134242, -1.8036623870934148, -6.562604933597979, 0.8100440611734363, 1.7672125702977413, 2.2309238930260973, -0.6679885994489883, 0.6788082177718626, -5.841374456376153, -2.9301764937868446, -3.849363049379978, -3.45364842471321, -4.165049359050824, -2.3542940626539495, 3.302979924010751, 3.8396406434445254, -0.10852428904048916, -6.836783580349032, 2.8961256809420224, -4.105235128838648, -4.88578988839416, 5.008892739459075, 0.15989822944028642, -0.03250671120318693, 3.4466753863138164, 0.9598946157279993, 2.9573492345107995, 4.5810796190384115, 6.213977853669531, 3.309294980609222, 2.2037776753592797, -2.377361067078203, 1.4301732426968412, 3.2027107565367423, -1.768215370143722, -3.903775963167634, -1.957373451938932, -0.7104328389204555, -2.1395807833997296, -4.049575913624423, 3.446713942891405, 7.102354355518422, -1.7431346497368125, 4.424618108885515, -2.318127306903827, -2.113612602735787, -2.9680367795797524, 2.76892120446497, -1.364011502918868, -1.7275942663356427, 1.6654603175912985, 2.7051761322935457, 6.684145635814439, -2.767741844336491, 2.8440006452540327, -2.1236305690805084, 1.7342322807451085, -3.722038483740219, -2.3451935757342204, 2.851400855716923, -3.1581681001727433, -4.288566163248991, 1.8752981597682052, 0.4924249197440873, -4.190517766626372, 2.5066572145828556, 0.25266756677112223, 6.903993154600783, -1.8795561253645605, 0.574709016839035, 3.282026942243185, 5.280472311336598, -0.7341711260761763, -5.548539828601859, 0.37858654161451955, 4.072762315375571, -2.8115119271737745, 5.052955332014095, -4.417126115853161, -1.4412382434426823, -0.4208302965716286, -1.420196553735194, -0.5550988053044821, 2.500975620358571, -2.2354092951914866, -1.885469835548033, 3.4782528531598906, -1.1164190671439604, 0.662045167787348, 3.1441820771988347, 4.137320595973531, -1.0888733712163758, 1.3171035338193584, 0.8368930715960061, -2.0368158482280845, -1.889788649801348, -2.955153595380758, -3.111295188140783, 2.039996353428652, -5.851501963592804, 0.6009081151834237, -0.6968805788551107, 4.293206690161113, 4.118502385273681, 1.3862630836432004, -0.02780693473662188, 4.634082541200507, 3.36189700011321, 6.694130835297761, 4.849251215391883, 1.3005766876435412, 0.9703861105525295, -1.925663165635942, 3.380679481099053, -0.28400086975271654, -6.167447026382307, -5.136304135282087, -2.163976029267949, -0.5630127343751747, 0.2770653066695503, 0.5613711314358252, 1.0755772611262628, -4.384735501191084, -6.23600769321157, 2.0469730510235737, 0.3022937203741227, 2.6026131442037443, 2.809973220418187, 1.7476721969753441, 0.4882696840189289, -0.06647935000438832, -6.277726193727821, -4.056659629209631, -0.0016142860450019114, -2.4480652056445624, -3.9004309545575495, 3.1190048178279604, -1.2901911039015115, -1.8393843687205857, 1.0314298535430941, -1.2004811950271628, -1.6676479377776932, -2.9714362799479055, 0.2988009640221121, -3.317691619119059, 1.1101585082019927, 1.6312315183229167, -4.468964874789366, 3.6922297985221197, 1.359250164973549, 1.4788073628761627, -6.193983886026104, 6.929780222870293, 2.116061130740229, 3.0838446936397403, -5.985811905568478, -2.5166843470516205, -4.293909596203235, -2.6946574371543432, -5.206982569787985, 3.4834844531874216, -0.6306988761388668, -4.24536790771731, 2.9003854483320923, -3.028972135536375, -4.689023345917325, -3.6699354007303535, -1.2859692021828462, -4.4527597235276275, 0.17491299102190272, -2.752664931369649, -3.2617732608464367, 4.462553528443989, 3.5486562580004506, -0.8030323310085388, 4.125588904943278, 0.8134546840021766, -6.163815630493336, -1.1078609433076252, 2.7213538472042336, 0.8364624118994097, 2.903671302054529, -1.3462723256458884, -2.795848963847691, 3.9493095811965304, -1.3538682572743517, 3.6198366187712416, -2.6884428042619612, -0.49760015529197443, -2.138704629357642, -0.4253337283189007, -0.899399637690723, 4.10754064579667, -3.976639845954831, -1.944238989745142, 2.3247891965579885, 5.380192467928465, -4.276841747753888, 4.845952086688856, 0.33626153204276266, 6.923016954415703, 0.7132271513079986, -2.2281662468557206, -0.7008169010019832, -1.8347023184989393, 0.22343365227632095, 5.3684561429091415, -2.0109962346160963, -0.3889983504041259, 1.6019306936100906, 3.3323986493219415, 3.4080379392078157, 4.208651578913498, 2.4957941427743, 3.788315847807029, -1.565897913400327, 0.5332696842692501, 1.7756207239283044, -2.732527515122052, -2.1308477951240654, 4.452279472753542, 3.557500248082656, -1.9556363624582938, -3.2748177559842446, -1.8691738785737555, 0.3112663742589936, 0.5549756787918421, -5.681128526999837, 2.311783433555185, -1.641343903385177, -8.163460844816024, -0.6288479449708997, -0.635301502109603, 5.081231735065158, 4.758644461355479, -0.1760765488687408, -3.124897221623555, -3.60171139876791, -2.7748488648640963, 0.48399972604838615, -2.8295781792465977, 3.5528644326899688, 4.444543134940398, -4.916357526847511, 2.2797282078829237, -0.08232340342970557, 5.338789911722369, -5.383323576979025, 2.0521907829470027, 6.5142936574240915, 4.345612669910906, -1.8104704993610352, 1.8526368866094955, -4.223327808784738, -3.129261942281593, -3.965425522079527, 0.8410080192275686, 0.8530502314401196, -5.321292737455515, -6.069234099253186, -1.0305443571855648, -0.5864283003069275, 1.2820705257585772, -1.0356618452559245, 1.680822412428463, 0.476560309656497, 4.784797753414704, -2.039996416399121, 2.1140780775048835, -1.1990396717451481, -1.0206489196354263, -1.4245183639036503, 1.5366280124536997, -0.4581688091940488, -1.494431809703164, -5.31098739633802, -4.7301009914244645, 0.32343597897445386, 0.5888728373474306, 4.435292503177451, -0.2110085898361196, -2.7862519762713425, -3.976997000434987, 3.7659943862776295, 2.395782415963331, -2.2709260557865316, -0.015589243931058316, 1.105315711845913, 3.291440972084419, 1.3587996543595908, -4.311012436471807, 3.1688475253048374, -1.8995864912448372, -2.3913565458844586, -5.095069222041567, 0.11089844476016819, -2.5894584688171287, -5.81677597744422, -2.0395142519468914, -3.1052901515972433, 5.697355144862851, -5.430975767892102, -0.5138822674300452, 3.6408491581385842, -0.17803821309817303, -1.9483802051967511, -1.9698534594043426, -5.043037580602798, 3.1166733649238267, 2.8522611493414063, 0.047991496218488194, -3.6787465324111563, 3.0856979309057744, 3.6194976194128525, -0.09165773110527842, 1.523067737521214, 3.137994784190562, 4.4798564205579305, 5.426178649209315, -3.9144382433020013, 4.004855287189616, 5.00175256741299, -2.983161137330984, -2.4592554644183484, 3.515067389089877, 0.5181436918580924, 0.09880106509805531, -3.391268606260458, 2.854366865607198, 2.6509787171700223, -6.38971954527877, -5.29330343859152, -1.7316491636751477, -3.860214242846758, 6.177395216300259, -3.7874863484167394, 6.949227831047718, -0.33017950925392436, 0.6655160051805715, 1.7819433859401084, -0.8340077756577202, -2.4570943456270333, 4.722683379090736, -3.894012095627775, 4.4346613536725785, 0.8905516358304644, 3.092591054820108, -3.064229252092354, 3.1774803271114385, -0.5450077070955288, -0.24981069126433275, -3.3316772792189138, 1.081486563559019, 0.8298627430402832, -3.915143036286497, -2.5515055367489685, -4.992397901396189, -3.1028824555602084, 1.212000076772278, -2.241972360674821, -2.271625148426792, 1.699314554805671, 0.9978833385563517, -0.6887432363629364, -0.33815056435855917, -8.392585596086478, 3.190092940541212, -1.026037844681725, -3.3260283502953403, 4.136511012705574, -4.65208142395074, -3.5860840558664524, 1.2748088240330682, 4.21213057225064, 3.087657385215307, -2.7797660600631744, -1.506984522893085, 1.817652631287566, -2.16048462010298, -0.4980048654512963, 2.467450454246137, 4.518662198918475, 2.8649347145391904, 5.508460083219636, 1.2732142894267477, -1.0244390454957037, -4.193402004028702, -3.3212196015558906, -0.645604235944049, -1.8785116000427184, -1.8044832185281805, 1.0619264203026102, -1.7063937208948017, 4.2089039836102735, 3.2205706413512383, 2.5738854979587877, 1.987895205715477, 3.086809368403493, 1.5681564438306328, -1.7548895347784514, -2.9771009076680794, -3.5849865223951984, -2.5654542039070303, 0.7871300388918485, -0.6400632051787021, -7.241172608982563, -6.309846259692697, 1.0375313767708967, -0.8211246767128637, 3.2342455960765637, -1.1678908370053773, 1.6135635546353573, -4.387602899933499, -0.7975162483823892, 4.025686212150988, -0.6950423463554389, -1.7606386254149118, 0.34361765415559264, -0.33874851620443147, -6.651101254582081, -3.235661901956439, 2.4339607672363215, 3.750636741966068, 1.2571063406216494, -1.182135943035003, 0.8824557322052935, 4.251196129260433, 2.4531251301131345, -8.300703885333643, 5.793355191802834, 5.338607974531475, 1.5216407946294952, 2.673370956685285, -3.5951315583337617, 0.4011425502374091, 0.8025994689394595, -1.9739789460027315, -2.0061323523101287, 0.6661256143800474, 1.5769864894322962, -2.955424756298936, -1.7082731240951434, -0.6327595016243357, -3.386441944049286, -3.477254863729745, 1.219807414003336, -6.804901541583311, -3.8255523688785438, -1.167281862403155, -3.7077193817792313, -4.728305127907474, 6.646139664601016, 0.8113205928818701, 0.9554908040967192, 3.6900693369083966, -0.03624904381079774, 4.837024054088432, 2.364268418201375, 3.1276852495598035, -4.975695576532573, 3.1981669244385635, -0.44401106988234107, 2.801475414361903, 5.042521060292165, 0.8105800019684126, -1.3559855012649662, -1.4926865156541476, 2.2716909819333404, -0.23563921002216026, 4.097984116755679, -2.825809925741163, -2.943404656622161, 3.284422615919418, -3.3758253629229045, 1.9363314585185618, -3.7013952459409065, -2.08514015674713, 1.7288807072568813, -2.4763965149887106, 2.755151834463289, 1.577257757938658, 6.0725141455089044, 4.381920025145329, 7.41678052281911, -1.063835960297749, -3.9129716206841736, 2.014604388998807, -5.99882487329718, 2.3482740177356587, 0.48156762383153273, -1.4692909226042414, -5.3105544670589655, -1.5728611601831688, 1.414803983762405, 2.004262953922769, -1.7482308020811816]
BIASES_LIST = [-0.36889801938623856, 5.410171318002509, -0.531808516968693, -2.023629741590187, 6.5429292085329, 0.44864811692095663, 4.167949768245288, -1.243496645797896, -0.09137249243908863, -2.944092258869308, -1.2260445909810676, -1.01749998321821, 2.2265727250211427, 2.515867453265529, -2.3830349040543135, 4.447105206493136, 4.886576297545139, 0.440873678634381, -5.9814047083136765, -4.7843227279811895, -2.2357846084924122, 0.8128098242101622, 1.3347570293299027, -5.677814798700138, 2.7950717853008697, -2.115154462662915, 1.4092880455047592, -4.106133446867639, 2.835115148142379, 1.7392649131012305, -6.897279783131742, -3.4540767447433405, 7.965467091103692, 0.42916349066614234, -2.051693161962426, 3.327338731194926]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

