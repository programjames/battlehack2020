import random
import math

WEIGHT_LIST = [0.5589473471554762, 4.901708703439444, -2.323006438470928, -3.549794893688006, -2.3322416984059178, -5.301597209350698, 2.8732096318424363, 1.8332866188613919, 0.8150474394506312, -1.10047068243545, 2.6006054880203693, -0.016828510334810205, -0.9119363111827862, -0.7610904675092803, 0.24025757077836987, 4.937311135086553, 4.6816176284373405, -2.9639331114765035, 2.8421087037327335, 1.8401953501645691, -0.3762814965764398, 4.353237927102691, 4.933305721129912, 5.414041965886188, -2.114752254604769, 1.6108338005107365, -2.1976786835623434, -4.363603979615444, -4.913393683919844, 1.3892390859307708, 1.3659843196459898, -1.119090146705053, -3.3944918883568267, 5.249035492801773, 0.9886037470848837, -2.494370590714178, 4.155259016923389, -3.283688208869895, -3.7502288139118702, -1.0255758300534237, 3.8324084563731486, -1.867219934990958, 0.42447596530691456, 0.1676973478858502, -3.2740778148130953, 5.7171058966539015, -7.867271360551823, -1.0319646858239964, -4.606555438361283, 0.8784805393902926, -3.8424131621172206, 0.6704231188742605, -3.588254101072781, 1.8845208757926126, -2.2398663138354067, -1.6035294714663197, -0.40333245414819896, -1.9790659605071697, 4.898333231478469, 9.865608344953197, -2.1838282124233634, -4.4970315436358845, -4.302896455739016, -3.525854791303238, 0.7261838186244701, 0.18956955339035353, 5.357705665089669, -2.205487561921321, 1.2300358775949027, -0.6810603545849102, 0.45390811653905533, -10.34922331148236, 0.48112507587804026, -3.7012776278126225, 0.037443938305955646, -0.9713364026063194, 3.392560410356329, -9.786131788734721, -0.06846869626242892, -0.5661853798580366, -2.405177823229447, -1.109296122823222, -3.2554454101407617, -1.2087601369731529, 1.0098035570194746, 4.791029815417388, -1.8413394587047003, 3.9923152100842025, 1.3742664081946925, -0.6793616917923679, 0.9963695915893023, 3.7778629397903702, -1.2401134085063046, -1.0653923118199016, -1.5773378599344132, 0.5328053716670836, -1.7547500697243261, -1.1304942741295008, -0.6309543633175566, -3.701890097241878, 4.1284113198735275, -4.810937647445304, -2.3379701397412105, -3.609067467647962, 4.941922861990758, 0.7479163666766679, 2.7088614182420163, 2.6796168623326104, 4.960428753491826, 1.871554803397698, 4.394351166103406, 0.6162260430536459, -0.5353379357474474, -4.32746956472777, 4.456076510127956, -1.7094053146502648, 2.550843693746323, -2.772982680605215, 4.563702276463186, 0.5721814299579999, 0.6183938328544205, -0.16236933669137027, 3.60182015769281, 2.610910525870984, 7.015768332785724, 2.442413274706705, -5.376079789178152, -5.6254075798494405, 2.557201722152444, 0.05802497912118222, 3.615562702525384, 3.8466601082279466, 6.509430626839852, -5.737250280244906, -5.1922931418546625, -5.150799109561725, 5.255887261472428, 3.5016566105397784, 3.562871324095987, 4.557743419881799, 2.071395103824224, 3.474444105225486, -5.228293032437144, -1.040952652850021, -3.681647626989655, 2.523151812573473, -3.9421945326303445, 2.4821666339480926, 0.4575007535531289, -2.4845097134686025, -0.42079127694832286, -5.108960997125659, -2.412010219134614, -0.008382542210329837, -4.141682088737581, -8.678378234672175, -0.2188880651212116, -1.8194541872938894, 5.4536573025044754, 3.803228276741698, -0.9493909374654923, 3.8322320338707967, -4.55842584227577, 4.484500836287734, -1.129894291216725, 0.3607859227545372, 2.105794054366637, -1.693304092633724, 3.3619689235980355, -2.611510813172493, -3.4508933126241006, -2.4184533492087263, 2.0699626724265054, -3.2833537341491836, 1.837629934791035, 0.1842698691289366, 7.305650821310748, 0.13514698916252726, -1.2353012793791793, -5.375781235801625, -3.221578231181094, -1.8895171707106946, 2.149901413555014, 3.645829114776214, 5.112283233771174, 1.137134124194039, -2.6277618414654134, -6.0956906480370625, -2.5061365915782137, -2.1380189201888, 0.07831182103092608, -4.290946994567025, 4.570109109960435, 3.248860911884828, 1.9119284544609136, -0.43265125684534117, 0.7584519080616748, -0.5244681670773699, 1.681810225241854, 1.7688629403906129, 0.1166626039176201, 0.7230538552182914, 3.033995288799968, 2.4263628419697008, 2.243586744005088, -1.3373597366897534, 1.0404018919456384, 10.571783272727416, 0.5934394748152144, -1.1218824298899963, 0.6139435348319602, 0.7567650046414455, -2.949797685123046, 1.2982510756414671, -0.6694595196695365, -1.7520972951816984, -1.6051639922872378, 0.3353675739526684, 1.293173661711294, -0.754881312438162, -3.921326953041162, 4.077818256419378, -1.5752124796473699, -0.954164938988255, 4.2495615870980386, -3.5258573583707338, -5.030253252971848, -3.327858925580375, 0.14956754427661814, 1.751640950526334, -5.340813129753977, -1.6905660783785452, -4.681908080225275, -1.6431568432979347, 5.264718349160792, 2.40411758492776, 4.263900323691881, -1.1670216443867438, -3.6244337372108433, -5.937236527037642, -2.573248414355788, -2.602796357372725, -3.596858584689191, 4.856373788011717, -2.6066964752088935, 1.220369794244235, 2.589672861079393, 0.21487102309502867, -0.08962715614060969, 7.128022955792202, -1.5347779675248043, -2.1188999027612687, -2.2878479489871166, -4.277242202754949, -4.857154059426633, 1.011034343540101, -0.4158452655450143, -0.3574416591654656, -5.8092007634479845, -2.5112885935650904, -2.7325235858102497, -4.571756538619884, -1.8350832465115563, -5.896568620630688, -3.059345593916225, 2.690666719227977, -2.371825370533724, 0.595235734614933, -3.7581733280583953, -0.5443366816058245, -1.65929581462895, 0.1672286568591415, -2.897134633424163, -5.627236899550673, 1.5152819653454515, 2.0298340112625635, 0.20547120519938014, 1.0038996408971241, -0.7837328040175245, 0.367494848415094, 3.9509171093658693, -1.033663846581548, -3.9104323566945314, 3.741821485428742, 6.164727616889173, -0.08411031128621531, -3.385376123621643, -1.8243106870218817, 2.6361863840372695, 1.6995243643593279, -2.978576821557829, -2.690998333195507, 2.5532204871471382, -3.5729241796169817, -2.2602669846691454, 2.3579124884077785, 8.829474609277415, 5.948832649161454, 1.8063291608402547, 2.047774942287401, 4.5609442565638565, -1.8691864592287832, -5.853031582957397, -1.7776003802287585, -2.371587180129204, -6.867125122480723, -2.881780220121348, 2.2946048979599856, 5.067792014508736, -1.414291577860225, 0.67395223474899, -3.9180165738263, -3.594815107723472, 3.2675335736892044, 1.8506440850851231, -1.7843923128133035, -5.652426138371031, -2.409195229720646, 1.2895026408482713, -5.594561801511066, -5.309408186964258, 1.266846850995997, -6.79384077369159, 6.398901066040304, 3.446772374105475, 4.611401030972638, 1.983161990216321, 0.2803235780476909, -1.2697116857507202, -5.552111962159479, 3.948766542089414, -0.3488725047323588, -7.429148470083985, -0.11167229859159103, -5.038885862290776, -0.5079573361262654, -1.672867780703032, -3.463549808612281, 6.508568104737848, -6.7796681780617964, -3.2361260573187747, 2.676046849302484, 1.4777897774444038, 4.185399283181268, -5.704533965510777, -4.637538106660249, 1.6998245524090487, 4.796888531780079, -4.8373061100275185, 4.657907094516524, 3.2629004629000873, -4.022235437741199, -3.401070660851442, 2.3221083674748657, 2.3440349380006906, -3.398048705134603, 0.03821335715379091, -0.011741432533886192, 2.809302113869961, 3.257026316860497, -2.253942997234526, -2.8061710124120536, 4.926479921430419, 6.043604630742316, 5.296068245511033, 0.1180210965758355, -5.840633125259871, 4.260364068393432, 2.604612907670129, 0.8591014414973094, -3.2114540293196754, -4.713392449238613, -3.6588047959693304, -0.894297485711968, 0.33270763634313893, 2.0777607780895853, 3.921459021386131, 0.6715295885460127, -5.646057995880369, -5.256159077960764, 0.41470492616802573, 3.4126946745949387, -0.8771131586937686, 3.1468191362086766, 0.12636366824091305, -2.8685765624056763, -7.246099008046797, -7.875512679601466, -4.599524400674605, 2.461468947440998, 5.6001414151486735, -1.7101465875553339, 4.705790649191783, 0.5120944025806118, 1.438023843952641, -1.2913091137732502, 0.3441442020236517, 1.183472303106414, 2.254682800010244, -1.5046610163300598, 4.288512710112109, 5.543662049068176, 2.7198809704233797, -3.4556639191974097, -1.7222160233868717, 4.560387024544088, 0.7089132852085276, -2.151029560266867, 3.8593658554094086, -5.551896639446398, -0.29607041150369784, 0.7880374940410898, 0.9063397872770994, -3.2927682305652826, 0.9740536900154743, -5.674046721942881, 4.146953629083054, -1.5781707341742905, -0.7076182952917273, -0.990442894124195, -7.398265557333521, -1.8418623675123416, 0.7628475148035176, 5.232049729558537, -4.332152566567734, -1.1394234178386435, 4.076027224556548, -2.7494736640935535, 0.9102269756627996, -1.931183769428662, 4.388673673670813, 2.784427247425745, 2.998978540896461, -5.901817944859598, 4.937011252515859, 6.187835363503258, -0.7296506094699475, 0.793666544935921, 1.5790417984556868, -4.764229836677185, -1.602866645693947, 0.6582780840422562, 2.028987325515976, -1.8230718138210538, -0.37610709175876, -4.316727652729446, 0.7169660983456597, 7.988232562562068, 1.812369553177932, 2.9336544240716163, 2.40753726609758, 4.520838842584978, 4.935753377808611, -4.353168975047633, 4.687868272798995, 0.0003827615352639561, 3.637867874598006, 2.5608494718265216, -0.3865597939236802, 2.5157805347907574, -0.4246382579015166, -5.923347224156803, 7.705247343886724, 3.687996440517993, -2.0373719236744647, 2.0718965425349127, 1.490569588779332, 3.196440594374076, 1.3662532263244076, 3.0485360195470372, 5.17615066429415, 1.6613971209476317, -2.3217058675206452, -0.10775063999466844, 2.489609150286044, 1.3383421664955522, 1.576508402256071, 6.86023995851811, -4.2682242134312665, -2.4634383663517556, -1.1940112488740753, -5.090173352711983, 0.5642319681150842, -4.348537349541566, 2.7014096945023174, 0.4018123335410368, -4.409475643747431, -0.8235691518133095, 0.49023696199555694, 6.265518771789977, -3.276878632068687, -2.8653927218212916, -0.6873614049549692, -0.22790150902106515, -4.869038120125747, 1.3689299090385565, 2.6090204155768877, 1.8335999953426714, -0.3680496301366898, 2.720192467957981, -0.2844800012324134, 0.1234434118018698, 1.5443278284341817, -4.753299035733472, -1.6483596560826743, 3.617888745360075, 2.8690417383604903, 0.49395824213297773, 4.251752497732688, -3.047882532970951, 1.8136249479145714, 1.0447265236712309, -3.7723159423200654, -1.7844634305796958, -4.921212264546728, -0.977007504676941, -3.9890747166623752, -1.0047773555204544, -5.967065355263673, 0.2969554926028742, -0.04452908875181359, 7.018156844939216, -1.188243084031738, 1.115504695482783, -4.026669014275843, 6.95319505643989, -4.071130765048323, -4.126568260029925, 2.0469341523955906, 5.114462510014828, -5.508064975693646, -6.408737868700503, 0.913841336283424, 4.21922949137568, -0.9079762531768791, 8.078807025061504, 2.5158070748177908, -2.303135031891117, -3.3368176130185407, -1.9888163465636346, 1.4608657848097277, 1.0707506520913137, 1.4443074676448038, 9.01982910542145, 3.8025700595350433, 0.5580139519962735, -1.2671427965294682, 1.7995437409834525, 1.5082558374425752, -0.5454336855317596, -0.2829406146987497, 5.969490040903695, -0.11719272053194035, -2.785879736692684, 5.4025081108923425, -7.755399466925504, 5.2611040020665465, -3.8931694275429596, 3.4052389111153833, -1.0041879487549905, 7.807711861622813, 1.8956185295483456, -2.244144335875655, -2.1723411550928695, 0.04628291394200158, -0.11805059488795652, -2.454942876409506, -4.413641077859782, 2.2166127218896525, 3.9615547092237717, 6.057739800676951, 4.881662874119232, 2.256783984093466, -2.1549381714868834, 0.020095673055804883, 1.8335170059695391, 3.705920474854038, 8.942941666477122, 0.39939896263125785, 0.23113614397710605, 9.608618683314088, -0.6085421561332506, 0.5339052526764575, -3.1845902009350873, -2.557480390513775, 5.757552540571793, -2.349153754648132, -5.450013315443498, -0.2346308409336251, -7.366925967384616, 2.4260016994781575, 3.089125082214554, 6.121660508533871, 4.94880212682474, -0.942814939177493, 3.78903423028202, 2.9240077813178353, 4.114645630991223, 6.797146382711474, 1.3827889925475274, 2.3002598142560315, -4.251057358220622, 2.02742792507366, -7.725001152609838, 2.1521629811509957, 1.2677174494177865, 1.2284106650632585, -5.133950831036192, -4.546175761674755, 2.3667015240065865, 3.028857922876797, 4.271072623667936, -9.158468228892888, -2.4284685642265544, 7.433823690278084, -1.35537329787101, 1.451398237061471, 5.827255551332518, -3.4584663215794507, 3.1747864136133574, -2.0171029790820896, -9.99512669589117, -1.0566267219480856, 1.4860981773774684, 2.8943327266689445, -0.9142180952076632, -0.7048396372689216, -0.8116797962276453, 2.2734008702145605, 2.4884299604711977, 3.225276309301194, 0.2759603096936075, -1.415113262467014, -4.2886124289961085, -3.223548366624966, -3.4062542441675334, -0.715220135593722, 0.8656246770517071, 4.2155022640243995, 1.9498498166057219, 3.174709710330494, 3.1090064043029164, -1.446994065815018, 0.1574884924677296, 0.9655720474892987, -3.0926768056305938, -1.6374230453309127, 3.4744053120792646, -4.010649868221811, 3.35605414129294, 0.5735777180255625, -3.684098184890271, 3.446584983448426, 5.923002190415493, -0.43757267908774317, 3.229102090780672, 0.37934845165717507, 1.8464864674405486, -0.9185207611758821, -0.21178480161926325, -5.276396494962388, -3.3504772571199934, -3.7126381134606055, 2.3410408019303524, -3.896145287846617, -1.5329371634466311, -1.140212761508877, -2.058970846887356, -4.907201354785666, -3.873744735356483, 1.9835260225065334, 5.68407678213938, -0.19994129031028407, -1.8201015941290635, -1.3652789072086213, -4.268529098903653, 2.3494399833476716, -1.5483587024786087, 6.68817342939655, -2.685002051856791, -4.742351261652232, 7.887239205408388, -2.034498259215806, -3.290552027007, -5.161629632647994, 2.9944402478892784, 1.5212342960106509, -3.55830656339775, -1.368237179993686, -1.596458389482059, -4.809677303368131, 3.3500412017034416, -1.2922551177662684, 4.379294072236565, 4.630123947191566, 4.284249548203161, -4.908904891892416, 3.6520686955979547, 0.23568817293473823, -3.4115591920076143, -0.36304603232683463, -4.746920096391067, -3.5326308819914916, -2.069536166956876, 2.513841373376575, -3.4088366324123074, -4.682261675224024, 1.440177130260043, -2.757837109818846, 2.005636214571659, 0.46672174899098823, 1.6569964294166721, 3.9724676837664403, 2.930568153511811, 2.7766716224792622, -5.864124373229571, 6.988304269469622, -1.357891395151323, -3.475260580056597, -2.8469482145205953, 0.14455234142843706, 1.4833051104515083, 3.029654410223156, -3.5963422685910986, -1.0698165083984597, -2.753158254275944, 0.5873104871882958, 2.1873827316992265, 6.119657218869127, -2.7566170472119778, 0.08510034041960347, 1.4703927833364137, -1.2431056690457762, 0.7373436812950136, -5.727490325513572, -0.8402970127604054, -2.3843779765224378, 2.365248266572599, 3.772707417364456, 6.919472684807723, -0.8725747253782024, -2.2268003463757036, -7.982713995878316, -4.317749790992077, 2.9942808891200396, 4.214583205254458, -4.419994699554687, -1.7649544336067438, 0.9613939614588184, 7.5925388615753695, 3.7374213537869556, 4.871522099655816]
BIASES_LIST = [-1.3892794858538222, 3.7064268831577634, -3.5970707060108036, 4.792782236863126, 6.340562315167233, 2.7646465692711746, 1.1048133667965307, -0.08044937707284047, -1.1134242011248727, 2.6640002845120034, 2.1200966920877713, -1.3665009652645699, -0.009253526012331715, -2.6220667400628948, -5.49882354633601, 5.2679157193427155, 4.816459798168769, 1.4704911038966422, -6.583141741493167, 0.010375089208962735, -5.073671370063834, -2.8103974899688424, -4.078494219567983, -6.082961658863858, 3.9173208097471934, 2.648883421618631, -4.020802491892799, 2.9067612990686165, -1.0791773326922502, 2.2990241608957955, -0.34082981443523036, -2.2963038573275174, 7.134296307508735, 1.8471234402437111, -1.6836025836015691, 0.44502170906982674]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

