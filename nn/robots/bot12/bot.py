import random
import math

WEIGHT_LIST = [-8.049267158594473, -2.509630548804497, 7.303806063093409, -0.7092046474229248, 4.254632840187469, 1.9928874222043453, 0.24895985703699558, -6.933745340944536, -9.240459530746211, -1.3768555560175333, -0.04790182091500317, -1.6859677889998594, -0.044517422452222205, 1.7133150543849172, 1.25078282458193, 4.195317702460862, 5.2149524056227, -5.07052516820223, -0.6714919902134915, -0.32009465723353286, 4.091733156107423, -1.3015959136597666, -3.4887406291793313, 5.230094550797398, 2.147080918430138, 4.178839360518273, 0.3260793943373463, 1.1153714996891442, 0.7217659669176841, 4.111319788741199, 4.30451839562076, 5.6887899516236535, 0.9699707683879408, 5.954212420263161, -2.380311096932731, -6.999401204588392, -4.070973364203394, -4.796077574081877, -3.718400064903979, -1.5538979822814458, 2.0593659148697125, 5.002693267554494, 4.420462553499311, -1.9598250079858532, -1.2772997252984475, 8.88126588284322, -0.5354855099491955, 1.0100093773969345, 2.9849116533799456, -0.3811629990683466, -0.9011838319956436, -6.1141698370307225, 1.203729337404549, -4.316843146968878, 0.5003355803053451, -5.28965706211138, 7.846392754171254, 0.6689490464904975, 4.176546128569431, -0.5406193013672044, 4.880928380207008, 2.1438424924683175, -5.211649083763045, -2.887730935330842, 0.6492915795288534, 3.4124941248029317, -0.9430267362300353, -2.1945142488825766, -1.565249951314958, 6.0771932752263265, -3.4088877982617447, -2.651229982560932, -2.7734585466397252, 4.615815520009198, -1.7631651943374327, -2.4047410673226994, -1.0816854404747402, -0.12537106918450874, -4.83410537105008, 5.747346515429047, -2.7357385032120516, 4.804588246135229, 6.303201160826298, 4.333150520924397, -7.2121227803663555, -2.1703860866048323, -5.461489125358616, -1.6684814551961424, -0.3569459919198481, 7.433156526260393, 7.822037879922433, 3.472269168919437, 1.1633041797945864, -2.187733615865389, 2.477612753047955, -2.049624216289127, 2.6846685073128542, 1.182426248523881, 5.862661721461145, 2.561734509895109, -1.4178250198187077, -6.508704067287265, 6.01773680103991, 5.169379903618495, 4.708725975295097, 2.227896344950774, 2.622444928253536, 5.446272242802432, -5.483302613875517, 3.6886563737562943, -7.008709254995658, -2.60309629931166, 3.6071526575526813, -2.7314445489214645, 5.652345310226407, -1.9588566397941438, -9.851357110788081, -2.0545426556502284, -4.972776960750201, -2.22650203997037, 3.5492911472556985, 0.3869443006890409, 7.409269532601857, 0.46530433963166956, 2.2231085060731397, -0.2047570890448314, -2.8425815433336887, -2.7377887447210765, 1.0550196361280078, 1.5093877962391158, -4.5459044487349685, -9.54722355835608, 2.075104646188185, 5.92165974783695, -4.527273571146442, -2.0230010004757126, 3.6471842547962123, -1.4877234686737792, -4.181487732018891, -0.054499917403292825, 1.7846916570195992, -2.6927090322732496, -6.7821160838447305, 6.964140702444761, 7.819116746477962, -1.3358412592187159, -2.3575459424121936, 8.272994306596322, -2.221208970245342, 2.1466088830657597, 1.7361467689801249, -4.294110969140141, -7.130037404225138, 1.6045101261188761, 1.295317552711571, 1.0540852260144102, -4.064813387447834, -7.551742430396467, -6.0134304401540275, -1.133767093592223, -5.239649741847155, -3.9424788394669235, -2.968282716969482, -5.967069228927978, -4.823337842892703, 7.0472332294098905, 2.770115714828581, -0.7807664655234734, 0.41472241959347916, 0.9409474842737371, 3.160594453542014, 0.1652068410289121, 2.2549581489842008, -3.4796197365428476, -4.5124233942428225, 2.4967260326914897, 0.8853734089784862, -6.560699442754935, -4.8924986455221715, 1.963549238196086, -8.173567002982796, 9.090459578617331, 3.4659991668570007, -5.124175477040641, -3.9781475230510983, -0.370719874396203, 5.342735624996735, -5.641490256466007, -5.50044936169181, 6.668951064844731, -5.608982767371, -5.305218665378201, 4.689524262398091, 2.4691746853159975, -5.352847816177635, -5.152484735962373, 7.180654446307517, 4.271291707853092, -0.09880299824939648, 6.8355058718675155, -5.5380055441056735, -4.714535534008775, 6.524349685806912, 0.41475830765487537, -0.7881132727638276, 2.081798480663527, 3.3785530831328496, -0.7856069199554605, -7.580756399020736, 7.37878308387373, -7.115264337264288, -1.8403128811295857, 1.2276667452366103, 7.092307716060975, 6.242679422858401, 6.159420300654007, -0.21468357312477182, -1.7991275492543144, -2.4427457914671353, 0.9791119416641239, -2.294999550233764, -2.133667695870772, 0.11475548450154888, -2.253069843364781, -4.421810705601228, 6.213493297605646, -1.5495748376016996, -1.5336280006400966, -3.813445367395943, 2.7202332315014184, 2.2684695021315715, 0.6654430334752455, 6.4947038450529035, 3.484659283832587, 4.519763002014637, 0.7195672924553069, 5.077749802001662, -6.0461078426518275, -2.871851247008619, -5.224910904620747, -6.372778971542546, 6.913453939805534, -7.332705052225534, 1.2497713571571267, -0.03782463416639356, -3.1637186776139523, 0.03449190352338816, 3.9302782490206414, -4.526021468819421, -6.870406611137121, 2.0867928218956777, 1.742075159201626, -4.872424339186567, 6.331312772664622, -1.7612954575933077, 2.187330659549883, -0.7609034242385861, -4.349533197223936, 6.754168133991853, -3.677779254571952, 5.61072107534301, -4.271243380565607, 3.522888563131153, -1.033016183695747, -5.607990053808221, 4.339016520978939, -2.8053415192122735, 0.41791861184514295, -7.920697458122444, 6.512328351983732, 3.3633826274194547, -9.784203239854936, 2.334440563427471, -7.0115136567516965, -0.4799930165759113, 0.30810001584785524, 5.747115318634985, -4.771930941556197, -1.0914998887959044, 3.318928375152991, -1.1683125927573577, 3.719299291139772, -5.504910106883965, 3.170332830308457, 2.7923538557816077, 1.4063382425713487, 2.7126160846426672, -6.016979870765359, 10.130248820784779, 8.842152148758455, 0.39885086925050667, -3.5714650988803593, 6.137620261489453, -1.6243726679292765, -0.8507020116892947, -5.956396591229207, -0.9683921253209724, 0.22793026600640615, 5.190406392436205, 2.5467890467319876, -1.6845276506581748, 0.07340864747677628, 4.85207082196262, 0.20658756815292761, -2.0652844013917115, -6.8378713085439875, 2.6921281994072905, -4.410451759131128, 1.456652169497915, 3.405104494762162, -2.006073213859374, -2.1111276208925567, -7.6296954875193, -3.3865230551227636, 7.500989108586094, 5.7219274308940795, -3.302271940003109, 4.511034962751163, 1.440800330555029, 2.9640811310083985, -3.1264390894933314, 2.851606620431033, -3.837670666634978, 6.155196199796581, 1.4429393112362603, -0.2711054556702888, 0.9354313692979535, 3.318974703002785, -7.69917653201875, -0.7029207147097698, -3.497415600850335, -6.5966113831250786, -0.4879936406402378, -3.716563595052984, 2.6519477130005202, 5.035082414788592, -2.018292132876201, -6.845378530106641, 5.703393629381803, 3.1401784259260803, -2.1956051976021413, -5.934362946972047, -4.821362354961145, -3.9618822180750306, -1.5339695453129154, 7.103891295943634, -3.680556804606112, -8.342982971356225, 2.3775908937198587, 8.462504272534282, 9.294898945497387, -9.34552310499826, -6.735240593036367, 2.759824150865222, 8.332039116883648, -2.540403277149052, 2.4531810474092577, 7.411294157304049, 6.201507975514332, -1.426237605006072, 7.528247600098984, -4.292476338054536, -1.2761174010470322, 1.5830175921280554, -0.6596725458521396, 2.784342440693748, -5.445501130472765, -5.799144777144642, -1.8723400654908533, 2.347970472824469, 7.796473550196887, 4.079336226774312, 0.40730123526592615, 4.06850764755858, 0.15741841646860089, -2.1425742966022137, -4.915037660313349, -1.1016829148764173, -1.8617017174756287, 5.777672086045126, 1.4206565632439259, 2.7042129408058004, 4.455982384121069, 3.8262089889890194, -3.470941230857985, 2.23191249803094, 6.340390002375638, 3.2342590499612163, 0.6882363118989485, 2.088475875971409, 0.35244152127422107, -3.1810077498648917, -1.44900864972006, -3.6113207838768373, 1.1850852354817232, 1.7379089154649923, -7.33245229554702e-05, 1.518304127859432, 3.332401881377567, -2.4650644314304375, -5.946057280348327, 3.490524329385684, -5.406279676646898, 5.829296507968722, 0.13308923665754824, 1.555241427177591, -3.3095488175162915, 0.27193519175092035, 2.2347346970965876, 2.439177266790954, 3.4599889745614756, 2.7074749983890603, 3.426253054716093, 0.18404972124193386, -1.874461084085401, -2.562960717227897, -2.557872526380876, 0.17383915046258486, 1.5432542664487168, -1.1362415186339534, 0.575178275039208, 3.2786434084654155, 3.8878434133417152, 1.7243624453834938, 1.3463404480125176, -4.356694570366499, 9.219058914878408, -3.911237294829399, 5.288863393676116, 3.7394493977486385, -0.6246470415332992, 4.824551373086248, 0.6517553742825017, 3.720820650224723, 0.24442208046420227, 3.4643488368536737, -1.3700452659334519, -1.6616726386815788, -6.172110017546266, -7.706187923090535, 1.1635123443347204, -3.108751647101055, 1.2633445580991678, 1.4027889192094456, 0.7519577986268691, 6.713040999576857, 7.344906828878751, 3.0107077082404126, -5.695724470343554, 1.5307100997662633, 5.230345652617417, -3.3847201672294216, 3.2489669933324277, 2.1686438562453008, 5.694635951641147, -0.5134935456716188, -4.192720737569793, 6.242665066105639, 0.6558342682301714, 3.9449386602245773, -2.738813065902724, -4.1068254216543645, 0.69330756240144, 0.7182037573931066, 2.895405685268352, -3.9900073008295216, 5.59690756451427, 4.851241354776703, -3.5630850553431683, -7.670694588236215, 5.518662746972813, -1.9090216675419038, 7.146399333217337, 0.28244432612535714, 1.6865118446345901, -9.015607194001845, -3.9670409444096713, -1.028421100945379, -1.5477932229749096, -1.0900497955604391, -7.091549743007556, -1.2320748840313207, 7.760827220050722, 7.90274799672352, 0.5529109746456253, -1.1653575501283404, -1.70432752138154, 5.97855968415907, -4.3523492570792115, -1.92560603997436, 4.83488047939639, 0.8105969525822592, -3.6272859071022725, 4.598826954230195, 1.4925070043571615, -0.962096167943995, -1.020960209493916, 2.2003756398632, 2.6269339776497107, 3.5844639460738663, -3.042246105570008, -0.8862505753986498, -2.2493359742048904, 7.879056161283388, 3.199305302397917, -3.086049397330741, 4.817201278617168, -1.3920270092854525, 0.32755439088176225, -1.8904956024396933, 2.651146967810636, -0.04669975855723235, 2.8388359939579266, -7.261073653646072, -1.7164247773647294, -0.12363162360976372, -3.1632116823569114, -1.5382962782234302, 0.9844430203056576, 2.4982694684821984, 3.854298625569949, 6.563047767463261, 1.9610019066039164, -5.040142824235336, -2.85328257532021, -7.528055285348149, -0.0016303676366135056, -4.30248315624543, -1.6137348451514206, -2.928493608163303, 3.623486804393402, -3.722950916594033, -6.5101864191495, -3.046772567342829, -4.2608952602445305, -0.1306505156307718, 1.9785092577153152, -1.6410633187096746, 2.443315524154598, 1.2585232149859524, 6.7237348946062285, -1.3350793265988539, 4.047922280664403, -3.8375762734159227, -0.39919477472133114, 1.3084765273499543, -7.8574704652149325, -8.724890595157087, -8.099520608403603, 6.098785457916001, 4.581945991266872, 1.8586883355060437, -0.5149826469333774, 1.11131719120793, -0.003315953324945581, 0.6844930230212147, -2.6661599188390994, 3.36131711503405, 4.062551924366294, 3.0376666392829574, -5.692175287858895, -0.20709085364036656, -6.593396006679605, -0.08251804609857366, -0.6681538766946529, -3.324651354651326, -8.25182312064428, -0.7309773775263602, -3.5023149949737844, 2.266097296741703, -5.302961759632808, -0.6365558403835319, 0.8397152879021748, 0.9356368526346026, -7.435274546795114, 3.7109301693310557, 4.061867883863053, 6.723556048326408, -5.9554827816160545, 2.394727216332732, -2.2355085279405533, -5.251821603928349, 1.2012427505961545, 3.447563843023742, -1.929091715475196, -0.26332999019940906, 3.49286154686756, -0.591231185861484, -1.3077163045892293, 4.2408601605641, -4.586045392831115, 1.3072442579151233, -0.7966912367150043, 0.9719282546503027, -5.288398221970352, -2.755628059185199, 2.601065797652916, -0.8092428986246065, 1.4656149303841288, 9.263557602615245, -3.718101051321319, -10.304700197366444, 0.07352248921326637, -1.6761677685650005, -1.206677571171207, 5.375748276020074, -4.254000419929971, -2.7509155164230887, -1.803879868214766, 1.6963349961161698, -3.8198700329990247, -2.749675311894278]
BIASES_LIST = [3.8416573744474776, 1.983733244057984, 7.476577267240685, 1.9748438716672712, 1.2177159140417377, -3.844191217710606, -6.302938449006158, 2.443132681974543, 5.356581883355515, -1.333084630508585, 6.069513003397539, -7.082154742095362, -1.3834785862336398, -2.7603476694768614, -0.8489819563409524, -1.592378449542585, -2.817379290877071, -1.5740128485573317, 0.16599264275661257, -3.7240796475575033, 6.238281315799212, 3.6220882002406007, -3.7229476759551434, 0.6426854197116678, 5.435543384995251, -7.979721124720645, -0.9727884467341434, -5.990369087767924]
SHAPE = [27, 16, 10, 2]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 10, 2]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 10, 2]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    if board[3][1] == -1:
        capture(row + forward, col - 1)
        return
    if board[3][3] == -1:
        capture(row + forward, col + 1)
        return
    return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

