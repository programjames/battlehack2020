import random
import math

WEIGHT_LIST = [-0.4286290886322214, 2.451913669456034, -0.6239589222962229, -4.132301103012225, -3.506871071422215, -4.603552866927292, 2.800060725309259, 2.7743912462646723, 3.5624538581062843, 0.013232267004797738, 3.419295586633142, 0.3127511461505814, -0.9948237915854912, -0.16296854094484825, -0.15777318655086336, 3.4429374001367083, 4.847757699861608, -2.069412074242547, 4.092976265148194, 1.0496624488416764, -1.5188657305926725, 4.813588691291086, 6.2296737030955, 3.222532618704294, -0.2522827121673581, 1.2412877918860712, -3.2629584731376564, -3.984967101537822, -3.1610120228229093, 0.030549582204969727, 1.5291212703818884, -1.8686395186836082, -5.210803471592145, 0.8732358419421167, 1.8434263405512579, -3.3725462454580923, 2.3321009805973896, -2.8126360921324576, -2.4938599868863687, -0.5399099430621344, 4.339302830178366, -2.1172217148293733, -0.9848494475570855, -0.501677988632526, -6.276440051607166, 6.998428759078703, -6.410864250977438, 1.2144409796427755, -2.679909323122434, 1.4599515864815595, -2.8028213267967574, 1.9870490889577779, -3.5194405131756903, 0.7767394960390452, -1.946099524581149, -0.4260359417969972, -0.6742280010645526, -3.111329600026216, 6.3952718253633485, 8.182640075816586, -1.2841165770344762, -4.047066998043694, -4.955852531303019, -1.6623889634637172, 2.248191353682948, -0.10784579151825202, 5.1507597705190395, -1.4554776185529288, 3.0986102452891284, -0.3987073384919536, -0.6228357806867737, -6.962210005913035, 0.6438233238498796, -4.057631043395129, -0.022818690260246743, -1.0374006356701135, 3.561463023702614, -7.346143121463027, 0.16308204194588205, 0.9507418285547391, -1.6901414627270446, -1.5371681935487058, -2.4618795462374696, -0.3152397214367342, -0.8039179187184258, 3.0976129852510743, -0.3733857599745216, 3.959045603769516, 1.3294641871058817, -0.9859816337319448, 4.392731384790045, 2.377633778983445, -2.6437991096665403, -3.110748790271775, -1.511921483527032, -0.8892392556002116, -2.116095663598768, 3.5071508694874893, -1.4996748445255201, -4.851467752789973, 7.396706531433512, -4.113919958686583, -1.2563712949342658, -3.285849800099615, 5.923630067313608, -0.4845177813670639, 0.6052137350934599, 4.636009295575065, 3.529641393837469, 0.3694384143601652, 6.281073721852269, -1.917061104348304, 0.4061108480256639, -4.168625798727298, 3.6302435086421134, -2.9387191724171586, 4.625737646673815, 0.016664998180284663, 4.199019013692935, -0.9599941122979047, 0.7164494480384178, -1.4195627196513687, 3.2204763598070265, 0.9460598836736989, 7.71766853994254, 5.996731842971677, -5.974742482814289, -7.122050382798497, 4.203296954602865, -0.9465038710770897, 2.180223380168896, 3.04508942027011, 3.2523786842450946, -3.4109006986303534, -4.673567795162124, -5.726994948326613, 0.7567019228139302, 3.512173815546368, 2.4762905540143794, 4.52157409120557, 1.189771645735954, 2.383496330470873, -6.049911485613983, -0.8337429832317371, -2.492876541725642, 3.5224854425945633, -3.3503077783528594, 4.349738438271968, -1.2814183814260593, -4.428647967423751, -0.9225560521314261, -3.536633905475223, -2.178257073733601, -0.701428631758633, -5.14302122921738, -7.004527220431613, 1.723411304664459, 0.8915752064509752, 4.029904308600045, 2.4429728724573936, -1.0559814470067521, 2.2675631618521668, -7.37943762885472, 4.474188184878041, -3.1390753272329013, -0.05542016450842324, 1.2167029868612431, -3.702966344611377, 2.4467992097620828, -3.7718412030214394, -1.9660343626062005, 0.289012455145198, 0.12861494392324024, -2.1027738360069455, 1.4003532650240231, 2.9799159548105596, 6.416255801068458, 0.44364273384289654, 0.4319290074442699, -7.855870951283264, -4.491022543712796, -2.1308283464955498, 1.8111287393435047, 3.281832795762977, 2.3282993642459795, 0.5803039212980425, -0.9373266113805745, -6.078756708399508, -2.262756230726993, -0.883029288912256, 0.41091522426457394, -4.102427879563955, 3.846840069011134, 4.047714983777788, 0.4278731724839333, 0.17423065389696246, 2.1776429985310424, 3.1249607146060825, 3.455649710292268, 0.5160856037878985, -3.189699825374186, -0.7328765176968564, 3.196599793990214, -0.190849382404235, -0.06758831946921695, 0.35648052131709407, 1.5710165211052818, 5.743947652596541, 1.4149344536772634, -2.8327807485442644, -0.4418219329750227, -1.22211383046528, -2.386298042171142, -1.140620795978471, 1.0593197380857209, -1.4305452399304905, -2.693693570383865, -2.376411361163104, 2.4603877452079117, -1.0457178998054897, -4.043999254808511, 2.3348659109774275, -1.1002692409704946, 2.4316496995578154, 5.432110431192668, -2.4718926269206487, -2.3282862746526343, -2.415441210367643, 1.2532540765783815, -0.4332096981856848, -5.869957656946596, -2.036831719088319, -4.7788267975631635, -1.2597762195202957, 3.7700130246512744, -0.656425876266618, 4.161036569998257, 1.4745411969804163, -2.3561414013809063, -6.243373200263969, -1.6436597657980987, -4.81556615156875, -4.217723690454012, 4.516953515099911, -1.1421481581015778, 2.055344286115848, 2.1048019456757783, -0.6320764891732473, 2.2185078674407803, 7.943951624788252, 0.783194814908807, -2.2190348513628737, -3.5800815411858182, -3.925715685973037, -3.6352714569074553, 1.7091750174368041, 1.8208604470630538, -0.2966256002761922, -2.9514023404785448, -4.259710757703906, -3.236869551744892, -1.9472354701534749, -3.8607060928798536, -5.273867464745669, -4.184579485057893, 0.9804587003179803, -2.1856986192050742, -1.5724722274794234, -5.221062160597473, 0.11355700135422842, -2.7976835168946046, 1.2918818276126114, -3.055661856836239, -3.68564207723064, 0.9135484653754098, 0.9724696464145013, -1.7214777076627759, 0.8378687550479342, -2.2352757892506823, -0.5822185599799272, 2.970757653468059, -1.7130565931218364, -3.9121681260555925, 4.928443169414645, 5.97895926358421, -0.7562782255800251, -3.1647125554422884, -0.48618983565687623, 3.187975143459335, 2.6661652688544755, -4.548824553156457, -1.558847555011489, 3.7051985525887448, -2.094310080593567, -1.1653918214540195, -0.7739817188982357, 8.382317115519035, 7.440995486115741, -1.3979187620249458, 4.268526976848448, 2.321175142605175, -0.5512123077908663, -3.067581633379776, -2.2900302023427757, -3.0013012569269426, -4.7400417514144415, -4.033129757820349, -0.18078116946422396, 6.012790894971162, -0.2343413157741604, 0.7827692786367617, -2.837720846418012, -3.096133991814623, 2.0013365906818836, 0.4942914684292954, -1.1364106992027052, -3.3936497135420653, -3.267359067911223, 1.2624932923977572, -3.9236176540845076, -3.7975095979820264, 2.0315302005023526, -7.746666406594746, 5.876756501168282, 5.709520616822424, 3.829189379403333, 0.0008886116938264799, 0.2552155403578469, -1.50300774311665, -3.189569393943593, 2.435390004013083, 0.2772492425535189, -6.8434110197952505, 0.5112525056920125, -4.1328424617028645, 0.7041952410945029, -1.6713828363213272, -0.7975313141334539, 6.683094231212073, -5.368715969405973, -1.2046306918914156, 3.9425976009645076, 2.222401464438946, 1.8066570147333163, -5.8836767273648665, -2.235163332863704, 3.3824833779271284, 3.141385578522824, -2.425212068932195, 3.1349352269580963, 2.2343219870464184, -3.685098685424588, -1.595651260994726, 2.744100818572319, 0.7203221357107048, -3.05247328717744, 0.5564764693608906, 0.4456597670318616, 2.797622852587133, 2.762320724465802, -2.0016031788090105, -1.6161632613634531, 3.874663373431666, 3.495660371002721, 9.046502723974925, 1.4593346016496391, -3.885608581048407, 3.035415089728957, 2.4660899832168077, 0.37913813576659194, -4.335365760252063, -2.440857720729685, -3.7184019182434134, -1.465811563066172, -1.4357610603834479, 2.6396144696033264, 3.094214681882021, 0.893040542302177, -2.1748284451329374, -4.529822281292099, 2.4119933940489258, 4.5248288404416, -0.4305538497032535, 4.946909573818745, -0.013777877140944472, 0.10276103795923142, -4.3889037231542805, -4.9105833040055735, -7.688564064725644, 1.2685024188985734, 1.973837960406641, -0.8298087976790726, 3.942959739681516, 0.30919378719560653, 0.7300984684547966, -2.8078228735409105, 1.8022179965428822, 4.32066879655706, 0.23651879850826507, -0.40330898912141633, 2.0383206867183463, 5.634264614091254, 4.677429596454864, -1.1885004942377093, -1.114876595923015, 4.058206331948036, 1.8826365489288541, -2.6867339090758042, 2.8971198711006085, -5.080891719384235, 0.6013199382244812, -0.7146834410230694, 3.572695482595008, -2.236809449410116, 0.29817730483209437, -4.195702597785438, 1.7126812285476034, -2.760290374444002, -2.2042736459279384, -1.8439706156378517, -8.0373816924638, -2.2489271617314053, -0.39231962689540345, 5.855614537821279, -2.1778144273690576, -2.768835245858588, 3.7423648458657706, -4.1675922969356645, 1.2054547516115917, -1.0501263870341588, 3.720395573960083, 1.2488011131186445, 6.007349801717732, -6.379837378020967, 4.698741970861306, 6.06309495488874, 0.07185498621280617, 0.8226892595125641, 2.217314791582534, -5.434977647873291, 0.23572311339799512, -0.40199965687827544, 2.2858063794466914, -1.9843188097845348, -0.3246244890828047, -4.04323959030152, 1.0952400544295942, 6.800786150092896, 1.701054480954018, 2.45730819538753, 1.0377060004439755, 3.682418453479962, 3.442402897244495, -3.8350637129323673, 4.066546210345114, -0.6513326114660317, 5.0478853619186435, 4.501891188383841, -1.919626990880047, 2.0514876777217763, -1.112614004024851, -4.200911852078911, 9.53896223034162, 3.2892389980904504, -0.3265623177657482, -2.6902754486954974, 2.033799214909192, 5.2136046908489355, 1.985412641104555, 2.0187496622170844, 4.053124299860035, 1.6193030934444952, -2.6386193614691225, -0.7813950725838896, 0.504999193322144, -0.5774878436730011, 4.489843586663308, 4.188426509985501, -5.917890688296783, -1.656649933192695, -2.960529807656676, -3.7607498786791984, 1.3101965953973398, -3.310268921092748, 2.8904217258552833, -1.555260923519925, -5.3041535312079855, 0.9109953428586188, 1.2977589959124822, 5.028780655780616, 0.23041472174761912, -1.403184786401565, -0.22757318896703327, -0.30568903605886544, -2.5761703038937176, 0.1830672208662414, 3.4059899410892402, 0.7028348250800032, -0.26068941769520315, 3.127750261290415, -0.3800950977015285, -0.3324078140121599, 0.07266269975635087, -4.361465769562223, -2.496940906054815, 4.066470716112262, 2.1419937422842033, -0.38270820537356764, 2.5525255252758328, -2.683214944369932, 3.1404686321152475, 1.3107578081108562, -3.5882597481205707, -1.8324063363668008, -5.5963026578259, -2.7595351430855612, -4.932134841643941, -0.558209619329425, -4.863060940176181, 0.5938731111623561, -3.3759794842000947, 5.193916227104508, 0.9954965389531889, 1.040061798219, -3.641808709721614, 6.182593650222158, -3.4917466941853634, -1.944503422734843, -0.7403026888600068, 3.565813077789807, -6.139999228819624, -5.901356465393276, 2.2210383164908416, 3.094947298135697, -2.256104508346451, 6.995862633791504, 0.9198908843839995, -3.3954276599222695, -1.1718376593240696, -3.2921315698940905, 2.846777939534854, 1.880506318209695, 3.1569638393146997, 6.6591104379459445, 1.5272537865712144, 0.0587712235260085, -3.7651539530662275, 3.099984870433299, 3.0210523449079787, -2.0451406720985457, -0.03567130218084802, 2.54127505057179, 0.5379302585725934, -3.1153594415920427, 6.765462655983897, -5.083723068793238, 5.035946809464151, -3.0679462140045115, 2.7590945312926323, -2.0143354739548567, 5.642910350459877, -0.20260314416348035, -2.3557392545960836, -4.066261630242036, 1.2299419111717986, 1.273857864521362, -2.493353656919811, -2.9758754402155807, 2.687210196600301, -0.33514052416510454, 4.419183822114231, 2.8678154122503563, 2.4740236780266978, -1.7565906404782767, 2.298941647844069, 1.2871377459089417, 3.6438549412128776, 5.927902416297226, -1.4322510888686726, 0.23587005745746148, 9.606270691854444, -0.3743852975866293, 0.20806710698299824, -3.0073011733320443, -2.7042596675560855, 5.447752098824768, -3.2496233715533807, -5.169237610282261, -1.3274041848424556, -7.523507608352566, 4.198429461506915, 2.0857607716128417, 5.09335360162298, 6.960878772928397, -3.4226776376380283, 1.7596034659645001, 1.897323298344478, 1.4344099624003084, 7.204040350317243, 0.9528871568875581, 1.67003606864332, -6.993863095197772, 0.7013480931128224, -4.168829303139863, 2.868189645376899, 2.2384918128690026, 1.1688165107934334, -5.269216630689538, -4.765835404398297, 0.8043529961129927, 2.555380153288403, 2.428591928634602, -4.88814571385038, -2.3829615403330955, 5.422224361948838, 1.3940941364455872, 0.35165345600565745, 4.012494986634227, -2.5839406219536762, 0.9806665932349985, 0.8793840216545596, -9.498733270573549, -0.320141652159991, 2.1746012485171047, 2.1902141222930167, -1.3745715728714274, -0.5767124082633922, 0.8981364135189347, 0.9739685343970623, 1.6118065652316194, 3.3371512127570746, 1.063833687968211, 0.802981516697032, -1.5018763847138983, -3.9171745974863112, -5.787637651835943, 0.7791217150255847, 1.0813935720725456, 5.178385598896189, 1.258250014893064, 3.27878357179985, 2.835830440396087, -0.3796277429841265, 0.4159324467546959, -1.6936570478525568, -2.6808000009984756, -1.3487345572574678, 4.8302051277894495, -4.078400447145674, 3.9958172882199374, -0.37522540431381723, -4.717786994921292, 1.4996585890020606, 3.582281443614945, -1.1617999320349148, 2.9851581510053986, 0.939116302526017, 0.9759603872655529, -0.12500746303448618, -0.1631836803145843, -4.703216617824401, -2.2787453489438976, -4.852592927401325, 3.9165581397909754, -6.285692088803169, -1.6835750340714206, 0.2903115555829463, -0.41914948331765667, -5.007513161914798, -4.225141741908198, 4.128163169343762, 5.285369938834011, -1.4185355156940072, -1.84972892977111, -2.8599456948734274, -4.750644920894149, 2.013907180231929, -3.4523175237764, 4.147387003330737, -0.8431755692014908, -5.030449685731285, 6.799115184965213, -3.4671808819215206, -3.1155490295563943, -7.7072677445098865, 2.52676164215219, 3.6969752752397005, -3.4562908515016635, -1.3546305349020915, -2.935520357117144, -2.887680097053029, 1.486813827275915, -1.633445649738665, 2.14034687677699, 3.191127746771853, 3.2767782472682594, -3.810667962173195, 6.048535035576855, 0.3921229710010159, -2.319361806106363, -1.5570454242490788, -5.0682814891441295, -3.6282808283216053, -0.5580128092494595, 1.6048531623029625, -0.7599950384532806, -5.3482240376098575, 0.5270617339830803, -2.09050825826623, 3.7768257085156405, 0.16320750977791132, 0.7471538165571192, 4.052996223949487, 4.073532532442312, 1.7877513018104296, -2.9893220906427045, 7.75486837816376, -1.0659041653337185, -1.8990839889710371, 1.0504433266834403, 2.130108610066748, 0.5987900066891172, 2.884866511553284, -3.0924850671439508, -1.386007057892629, -1.2020300834355604, 0.3287225883582239, 0.3061114326626735, 5.20729411629305, -1.949165953164801, -0.42885303744550307, 2.159154903149574, -1.9496836629563403, 1.716066138434611, -2.966432767552188, 1.6287302219168502, -2.1293219308459705, 2.7730822183027994, 5.245669079134755, 7.103557073098369, 0.09032435981303033, -1.5552306831379283, -6.592497295839772, -5.036726383064035, 1.8004385425588367, 4.943349568511859, -6.513720145751159, -1.3988771800467952, 1.0988232576355328, 6.2722502935466755, 4.981873517637892, 4.223925881337278]
BIASES_LIST = [-2.4610105599086523, 2.2245185492085393, -4.335698872081023, 4.999661641209796, 6.33918863578539, 0.4336321462330244, 3.7691123650810514, -0.14395401247847284, -3.992264379175367, 2.610511840169399, 1.4628948239803536, -1.472783455690411, 0.5959561182410185, -1.7628693327307479, -5.130152753186019, 4.375547647337531, 5.075964174418576, 3.054240416525417, -5.795306561756045, -0.05457552073328087, -2.9984262526202556, -0.949629605959881, -4.0242552069476485, -4.194169648777964, 2.4375219513250626, 3.520936691333211, -2.4514998517607403, 1.0762663128534937, 1.5457149381812414, 1.751989783256609, 0.43845382482135253, 0.9886294795417303, 3.9736266527576767, -0.2565211542240595, -1.5553247991558101, 2.3346508418856793]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

