import random
import math

WEIGHT_LIST = [1.9984769260489763, 4.654466065085014, 4.503589720812888, 5.148422126428731, -2.1617347169749372, -8.08606540756717, 3.8804999234701736, -7.682275613174077, 1.489313881908405, -0.6914712934273695, -2.9123191500966854, -9.926703265623145, -3.9769150755700817, 5.035927645467069, 5.824931970619815, -2.3786215424137964, -6.567513518741861, 6.378371470313297, 7.034140584845353, -4.5208576359762676, 5.937771003602979, 4.9745794586542225, 4.372353421858424, 2.6869674124497767, -9.145314276706404, 8.365157681251084, 7.248336217675103, 1.5023906873022739, 6.8760339144509, -8.441343604989829, 0.8479393666847699, 6.7963348119372, -6.443136200943846, 3.4157815285289157, -6.645268490580887, 9.281472496704431, 8.651939796020358, 2.394758752461062, 1.6522574160232573, 5.85025136127104, -2.3104594834167873, -0.5757340659472092, 0.44004310536691094, 8.411746580086056, -5.949007624974991, -4.756991307170657, -7.848476157483175, -4.850579566602498, 3.889499698302192, -0.9289967562366215, 0.9337052186059474, 8.02055942860093, 1.6109807345679332, -7.013659896304604, -7.197873788836531, 6.968801450840761, -8.185112482576688, -3.991891388440269, 8.789074072630342, -2.3996762992794114, -3.869287209075676, 4.9063502797717895, 6.565196030602976, -8.37473129828667, 7.054204709103665, 8.788627783290895, 5.743364876704678, 9.294770905864635, -3.4686571552124974, 3.916038487013818, -1.4230312075630422, 9.491247737018433, -2.2956632891721584, -0.8943527228389847, 1.3504129151488105, -0.8120395994917473, -6.494601883531878, 5.480225558382283, -0.48597914179847557, 5.846694771928213, -9.197231408511339, 6.428715287710013, 2.272781774524743, -2.623299469015117, 1.8566183997215635, 8.608031381766704, -0.39357254070568715, -1.1631251534146863, 1.243938984724286, 5.413649874792615, 0.40403429920326595, 9.629612494863217, 1.6430555482252434, 2.768181037740213, 8.627839907067752, -2.1273539060896525, -7.986027066297847, -9.81062098061541, -4.822988407458819, -9.849138201116268, -8.749142467818976, 5.633964338321896, 1.4922605674376292, -2.296295177368477, 3.2124657995602632, -3.25776690529813, -6.80108520013853, 5.242837204373661, 9.509490048907846, 5.988988936533042, -4.946081886332847, -0.8713271640315075, -2.731486518633819, 4.599321185308076, -6.659870361419924, 9.61382045485804, -7.456878488714505, 1.4388896723256135, 4.823161557253677, -9.515591099123125, 1.7818455765447627, -0.29891584251407544, 1.1191851605321261, -4.3613895750828435, -0.31134760345686985, -6.890313744218856, 3.4521964380160206, -1.4815476693507073, 9.385931106597969, -4.354931318394087, 6.735509534442635, -3.4835775403221074, 1.575212814882498, 6.348134468327835, -7.745104576733843, 7.057060982698317, -1.3207221721318234, 2.522422959726738, -3.5620854385550977, -3.8235967353134654, 2.4213012145940205, 2.5282462573600633, -3.0487016909448688, -6.168499824198679, -0.5974115564675344, 4.403246801759632, -5.841263196240778, -8.569258900500396, -8.336854307066579, 2.6971708279973647, -9.04250325273862, -5.990862289859377, 1.7378847109377134, -2.1319618726190743, 2.8948829303857124, -0.20290599600597048, -9.52101341362483, 1.7000819502519242, 8.551774718746053, 4.5440790933222335, -4.960302066431921, 4.545684880631907, -4.58026778728054, 2.605686657225501, 8.927717867554875, 1.3461604893215728, 8.062556976075712, 2.2831524741213514, -0.12378726214419089, -4.663528784826569, 5.986420310046391, -7.98314264897952, 3.654099268356134, -6.414040615701748, 5.542502858579233, -8.798845838224507, 0.4801609621644971, 6.068378285364091, -1.2375045527292823, 2.907427457009719, 3.890874400660522, 2.1648765357493325, -7.256609551790514, 7.773043134207423, -4.083464404922803, 5.9006826342481915, 0.8946207801962487, 6.234562089005848, -3.2907137375221573, 3.9475825774633932, -6.70710442060058, 1.9520952075439126, -4.506376720991499, -6.56279342093743, -7.545802938097356, 2.2307058517578344, 3.681444299466216, 0.906627238063189, 9.441135237508867, 7.643517670028068, 0.5716264835234153, 2.7582091474536803, -7.401494599616882, -7.368523554451096, -8.978505078024629, -8.966835463390957, -4.241627834550654, -7.118113688780929, 7.766801117677172, 8.578799685697895, 7.059492794359702, -8.927571644607903, 9.411992290531618, 3.031918100671815, -1.5816132296402543, 8.750809372491474, 2.4624090374927654, -9.623482972339465, 1.5856675985156183, 5.774142467077819, 2.8426960692692287, 3.3086387203776866, 3.380825100116944, 8.728125655644213, 3.4560530297822254, 1.9695871528571, 5.918308875048968, 2.992896186714587, -9.855626287126785, -0.18893811311787445, -4.58873361277905, 9.092817720536264, -5.724728866518099, -2.7550562217340158, -4.333198316630458, -4.487170382116091, -6.841952366225477, 4.373826231354759, -2.364037583769596, 6.150334824279831, 9.296063479219587, 7.488764923357969, -0.17519956738691, 6.422713521736455, -2.570343846185663, -7.021484977182501, 4.481647739789743, 7.606402832498162, -4.360143160378909, -0.12803806249253924, -0.8091625706319086, -6.902470331740469, 5.434943173922965, 9.258054171513486, -9.402342937753815, 5.574958119559657, 7.730979321817845, 7.071876900456097, 0.04461938076604888, 5.357078141363802, -0.29159141278721634, -4.897597166934147, -5.865829661480568, 6.692134578815299, -8.050970712969722, -0.806445937456381, 7.407128887204884, -7.292849191533963, 1.2365026082277897, -3.3245873136328363, -4.304799334184577, -1.025820136886244, -9.354260502213227, 0.40982760700743803, -8.842274162640953, 8.433840959955916, -7.802599455612922, -1.5028289496576974, -3.814941938463021, 8.42782066571873, -3.1691066750562724, 9.554937813671177, -5.5336765353611455, -4.863238096131697, 3.8391753348984903, -1.7363396640998658, 4.714592545085328, 9.783349425761838, -5.612147583892611, -6.39244382402315, -6.915084012050457, 0.8028378392847024, -3.8990294424413108, 1.5034445264901173, 9.992494045744522, 5.426182066317276, -8.473345093677832, 1.5626193809528193, 5.662505417588406, -8.412695293905658, 0.6207939677062981, 7.552873179113359, -4.86830653782649, 2.82752730771157, -6.411719025037044, -2.0385014890336723, -3.835408647608764, 1.7041715505263433, -0.8218449187201102, 7.25643920787002, 9.896607889702679, 1.6046882710712325, 6.599155985375141, 4.590288164446116, 6.040051608750524, -6.3131224835996775, 5.4786665841283835, 6.156653910526451, -3.1186353932608597, 9.808716325367904, -7.23680495229863, 2.040829318203329, -8.363044218355311, 3.149188463829617, 8.694536419286521, -8.255266743456364, 6.745674371052935, 6.689774919912743, -5.765935083853289, 5.240640464645903, 6.724810581706308, 1.6991499192778612, 4.851326961531905, 4.338617319022802, -7.674133859949393, -1.138352130578772, 0.5624478366167871, -1.3410078287292375, 9.272874245474743, 0.8296844171602498, 6.5496906636511625, 3.9742496499913607, -3.5592613850060895, 1.310441118543972, -6.667104664093976, -6.4866871142810485, 1.2152385926081628, 8.840748156402327, -6.980061993308125, 4.108715356866286, 1.5110130299834186, -7.788195847442793, -7.291120068270304, -3.7544824436580466, 4.9341470457151715, -3.0975634711422595, -6.694721125342788, -7.662963297957859, -6.33611660602853, -7.920158568878753, 3.5798353414734247, 5.820652863912201, -4.364948755898855, 4.179682831562264, 0.407660152275664, 1.7910676998019959, 3.4111567913276293, 5.6920085187966425, 6.859502399222141, -1.628008880601655, -0.7972614006095231, -4.144943591574679, 9.773741163505402, 0.7406096678846055, 8.473342587696738, 3.017120527715276, 7.530298475747152, -2.3310389941796856, 2.191440726752047, 5.341187173251459, 6.381736657366261, -9.884643612101511, 1.4993168646652144, 5.462426082783171, -8.508341292191897, 2.1000000262149694, -3.2221850890540082, 3.5175211610964503, 2.271778995899055, -6.60049228276923, 6.020226401917196, 8.606746877967069, 1.6641697386697167, 3.2787965729057174, 0.2633815948848177, -3.9596893687842165, -0.07309434555971173, -5.15288836531967, 2.1206021032562266, -7.351856549946378, -0.549992635954391, -7.759089382362713, 9.418897844702492, -5.993974946672889, 0.7194151898212748, -2.9230194969254564, 8.050840598792217, 4.507477347883228, 9.88957331816431, 7.520795757024491, -2.5549874644334842, 1.760611832767605, 4.3108921030727565, -4.453422343195237, -2.379128618807897, -1.960130162975517, -6.384227323675054, -1.1491188573649591, -2.4352561596084543, -9.02375387973606, -7.958785455864494, -8.317152430549807, 3.615007624069843, -8.298121657721104, -8.09789996836496, 2.144142743190443, 4.242625914829857, -6.738661738700857, -2.312631486412002, 2.399329151153564, 1.3903879520160025, -4.835639097618339, 4.9082139918307455, 1.5223079983241643, -1.6428760710132462, -9.51567516490578, 1.3199594202858052, -1.708545325178072, 9.211235220854515, 5.170289761764282, -0.15370375285055005, 7.494074423180418, 4.454320489640917, -8.859385318950093, 7.913689976943786, -8.593972402550847, -4.117952968900143, 6.65227796666678, 7.678560364368124, 5.192468646430221, 4.498254439914032, 0.29603812829862974, -0.9493542348314179, 3.843651986734166, -1.425538816799989, 9.039323034325683, -9.310259343144228, 6.017082243153048, 6.685201431606686, 6.203013563901607, 6.368394026921006, 6.9632638762305525, 4.182453326715823, 3.285065148239033, 5.56180741160424, -6.037168883384181, -7.8959334734253055, -2.5308085341136906, -7.15458211293938, 6.5700409387042455, 4.026808686020134, 1.523615989670617, 2.5800331427684426, 7.00341920695039, -5.343087996459519, -9.54780157640913, 0.07564497425869732, 2.334116395584232, 3.012251261096262, 6.150975177202632, 3.922987440145498, -4.253722114886056, 4.424945750533858, 9.877368465008626, 5.973225888400325, -0.4412661791616834, 6.137959346442539, -9.706171819662995, 7.580107912391124, 5.422698893670752, -7.178759380843882, -5.981510369243206, -8.118720209310501, 6.881933069265141, -2.8469467365247585, -0.02803739019553575, -4.546049528554111, -4.142739363699805, -6.562032918104572, -3.3875496267748435, 9.226461760651159, 8.49645483650946, -3.0317616539791388, -7.490017871316514, 2.5049925891098486, -8.353129419265265, 0.3523528239447149, -6.068375468528993, 9.34156402351472, -0.1655592917340094, 3.1374212137248296, 1.4608854261600808, -8.675612655456337, 4.483354585535045, 9.602577745285199, -6.069236451815341, 9.557831048069595, 5.599699886132024, 3.6214543520450064, 8.10599344021297, 0.5986099176241808, 2.664328457369198, 0.22207308319517516, 0.740557890937545, -3.140109504203183, -5.607075362325622, 3.736910577243904, -1.1680124697927816, 7.576209096112208, -4.0593477803727644, -2.8159104222838387, 4.091280568748017, -7.731830374088078, 1.4052300407272593, 1.1639572769878512, -9.71274989488582, 6.754956753236552, -9.753134572030994, 0.914213813754003, 8.736183304256713, -4.710902014730076, -5.367471554800716, -6.672564035825859, -9.46190344363526, -8.92157689953234, 3.6681304884380914, 4.3877452294263275, -7.966300615059345, 7.811980524373251, -8.324100651135913, 6.280123062021264, 8.559068194535875, 9.515026309612963, 6.394556110884487, -2.9077357607947585, 6.748993821048323, 0.0849453140458607, -1.3101156263523173, 6.703490563474276, 0.37231590308717877, 8.127370578772837, -1.7507864649889644, 5.371928966032511, -1.1047053570476173, 0.06048467416381342, -2.1584009319832154, -7.771731734940104, -2.8779826425607453, -3.046089071504645, 8.614283704572706, 5.2609531009070505, -4.870961152272408, -7.040745281400769, 3.5473364199066424, 1.0740207252585456, 9.854075369831467, 0.3016698561905429, -4.195955475227682, 7.091923644837156, 4.417663568124796, 2.6869836189610723, 9.21585586094556, -8.527561969320747, -1.0613840498688916, -9.428466208513939, 9.281832079634846, 7.8062363675164335, -1.713217807946961, -7.810202383614115, 3.0561347759322395, -5.5280414538183535, 4.111563537954979, -5.167343378164945, -0.0720311849432349, -3.8615086263081437, -1.521001366773298, -2.019049462008022, 0.4298310910367835, 9.934280154747533, -6.790860368913787, 3.3561414870115733, 3.401948294769765, 7.731634698448371, -9.966800526420695, -3.4595243800142184, 3.521218870298277, 0.9911334697222323, 1.8123480799509135, -6.654311906023544, 8.071525224058224, 3.21654609316143, 0.8472297391071937, 1.3445256060783315, 2.812514516259615, -8.589541073341362, 6.562823944409395, -1.8149269389607792, -0.16296299822044347, 9.066789939583508, -4.306726648216202, -3.0972610495279067, -2.237926603126219, 7.487152492672539, 6.930909256225878, 8.680980837824364, 1.7222902062128025, 9.094471443601243, -5.812211832544795, -9.247362323104573, -7.450786848374027, -4.9371296345982945, 9.046704048684582, -2.69233522656444, 8.08761747912083, -0.3353479351766886, 9.741269346487972, 4.135673363590282, 2.434063163046593, -9.04992163817096, -9.502436283721767, -8.422275516537784, 9.221648969445543, -6.505955126829212, 4.042193899770556, 4.941748721436918, -3.550578213751052, -1.4349091444870137, -7.573990050402044, -0.3082458872785292, -7.412394966237268, 9.027363635844104, -7.378004409832979, 6.283032497551851, 4.7339666685514175, -1.7803889687450063, 9.069153000408832, -8.606322364583738, -0.8220524004865215, 9.86978696540184, 8.597591162726793, 5.687641054544546, 5.234874753247475, 8.266213999896681, 6.835827665124491, 6.632265443145208, -3.5325833488276004, 8.836668708748157, 1.8684892576752414, 5.398746194567462, -4.227793795298249, -7.949468370900917, 4.502133783146554, -7.379933327995496, 0.5439932842771427, 0.19166124986053035, 1.9314209816614003, 7.29324590034566, -9.670481722435662, -6.866854987084192, -6.591521938860678, -5.546865464210855, -0.19909511759769138, -8.69055490087894, 9.54622750257646, -5.808661237998612, 2.7022944858866804, -5.765221487547876, 2.417752117337745, -6.179687745136217, 7.496396010303513, 4.832179100405602, -6.851832704264926, 7.726293240520292, -9.918561856245843, -0.2720716339337059, 8.19613496602615, -7.075702647507973, 9.995827626678825, 1.3363928191940957, -6.401382283691013, -0.36666860647916977, -5.498007409080734, -8.749899263958188, 4.447399888990077, -1.8132359036702361, 1.5748660560967505, 3.3359413940171034, -4.711220684909958, -5.460167339288661, -7.940179245279088, 3.9983655656952237, -8.1302665445687, -5.033169316003272, 4.771691084048488, 5.485064508365403, -3.2199251120781813, -6.3168932667405, 3.455023075243597, 2.317714237295263, -3.3782046049087944, 2.5241225033608945, 1.6104095231273252, -5.1951762768181435, -5.345189879065623, 6.883584281142792, 4.584768879245244, -9.149022142575342, 1.0543462745883971, -3.954421331989135, 6.803128404955395, -4.507198702148923, -4.742497908917837, 3.5259107335627853, 0.8398101382164569, -1.0340774034368483, 2.4647168016483096, -4.58797330105138, -7.438691402822981, -4.616621542902804, 0.4038903692452518, -1.8142438530402885, 1.8016934144442267, 1.2866727897503782, 5.8951427134640415, 0.7327070815542953, -8.201759367064312, -8.34528994549354, -1.1828373942935855, 9.420793437028937, 7.118680530706914, -7.454221276810524, -2.152613449627488]
BIASES_LIST = [2.5104951322924585, 5.501673301999151, 6.661841697725599, -2.9676108270426234, -9.069325533456048, -8.163082512787401, 8.528045199360626, 2.8351396303215566, 6.0522201355754675, -8.349824907847392, 4.073037693142133, -2.632576273501668, -7.187927402652212, 7.88329465032475, 8.216386274459701, 7.503557945628952, -2.3724495358080073, -5.378318273366944, 6.857480938644663, -8.110979543454746, -3.916012023222919, 1.423848315947616, -1.3682496926818963, 3.0650124152398757, 3.237399602322702, -0.4249593260759372, 4.132615887977099, 7.103321187407513, -5.733872040206826, -3.211292370646472, -3.4676687253211007, -1.3962788968162627, 2.444899751694063, 4.221185399018241, 9.485491344881332, 6.892024837478292]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

