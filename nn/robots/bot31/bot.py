import random
import math

WEIGHT_LIST = [-3.027106251444895, 7.093999723723531, -9.05573563137547, -7.131437762196393, 8.992207004637105, 6.72872681249364, 4.167639776978426, 5.6856653663194745, 5.367015593014177, 8.182529920330857, 4.457664323517914, -1.9719395556174852, -6.8982125220797075, -3.2719917521116804, 3.6260010171829897, 5.7159074718665455, -2.340151688198957, 0.9753045646868674, 9.863547341037638, 9.057085738328581, -0.39688554208780324, 8.950128834415349, 2.4230291790714844, 7.148919530086875, -8.742863193068652, -0.537553013353925, 1.806138751917981, 1.3908944944527573, 2.344331193693602, -0.4091226492682907, -7.338382498043668, -1.116926153016422, 9.065289604091483, 4.164833924208084, 6.276723551244821, -7.898798710494834, -7.903282317154449, 0.14000490291370227, -8.919232741430019, 1.4429322406554377, 3.8634692283776992, -3.6751328100141523, -9.507492421468818, -2.014106100558976, 6.529779147892253, -6.5433975686484285, 9.071673546445478, -7.737269515728606, -6.339966502843691, 8.599691147351404, 5.287893124107747, -2.9257756032197424, -9.416065794955042, -4.071893679439736, -2.86623525242889, 4.462325484128403, 1.6920048002360595, -0.7232711658801865, -6.148295037897786, -3.795408974281571, -2.063791089125302, -6.674332701640786, 6.295112351206086, -0.1514848317930415, -0.9451597934951455, -1.1691232103546412, 8.854126629166576, -9.77952394300014, -4.860169045890395, -4.728085108520235, -0.4586777087495779, 3.7460575512862153, -5.728076653697178, 2.7097822008552814, -7.962414607959831, 6.740165872815222, 8.303965248814922, -6.4686873870226265, 2.4084170269481895, 5.375871841238645, -9.991470982520676, 8.11986887332938, 8.862372595057817, -3.571096118292038, -6.407858825008159, 0.18194554902190774, -6.41975126451928, 4.728648199139695, -5.718082118137562, -9.086898587818219, 8.611740075708415, 9.73916654334997, 8.359722708915797, -0.49567354349398407, -8.889931178793688, 6.712089765435785, -6.58750614324346, 3.544674855862235, -0.03115414602725508, 6.525930787210331, 4.587144615039868, 4.596608098110178, -7.59943813160416, -4.750993822348222, -2.9158662136579867, 8.141044969970086, 7.503195280064556, -5.635459874381339, 4.804291002223058, 0.3460328906088854, 9.179275093342337, 6.19798393536059, -9.248897912853241, 0.7346721195729966, 0.31952977826910356, 7.778518343290319, 6.523777935723814, 4.132330636705731, -2.0115141006583137, -9.90046257020003, 0.02176848534983833, 6.895654680003535, 2.8488497810360087, -5.2693928480703995, 4.354826302730267, -4.530207292524564, -3.6735224776394793, 1.86616443300165, 9.203890669041517, -5.93497780311826, 5.845964558726294, 3.2062202665810613, 9.600630387998123, -5.356385247439388, -9.891384618685972, -5.195200716139738, -8.084387089144634, 2.5724224480280107, -0.4516590402801324, 8.178350489400803, 7.013167514793256, -5.786759697144566, -4.252354575022612, 4.123514839455973, -4.760745462281697, -6.463687140527121, -2.6190841552231987, -9.32180838106342, 7.835247669291984, -3.0421787655782424, 4.622940245748378, 0.14358468392696544, -5.796719059247126, 6.875748995450181, -8.439739690677417, -7.730613646991236, -3.174281619877048, -0.11576700377093019, -1.6877395100553656, -3.456448865967725, -1.7968400912349303, -9.592643296127093, 9.819126394184718, 7.833759069148783, -5.230034798102949, -4.66241319045515, 3.5974588892905963, 6.246598525383405, -1.7079689556435511, 7.655132314142779, -3.8638717816795616, 1.435820361175658, -6.5993170081741575, 1.4017548712253518, 0.7466522091045071, 7.26387905869035, 6.6467946660032595, -1.2348438244462319, -8.292570561696076, 0.16640117656931785, -4.20435628988333, 9.612314977171227, -8.621567781577266, 2.2134488903437664, 3.5535766263092032, -1.5121498213670073, -3.5556334153593223, 3.625554316997775, -9.175334659957013, 0.3045722613534849, -7.112637201049625, 7.7022881893103445, 8.988165863129264, 2.694132409460547, -5.848975230795624, 2.681996929010605, -4.690589597211083, 1.635906400844556, 3.2902770802491794, -3.855254946543769, 0.3686517146102464, 0.6764017865279293, -4.625856576088198, -0.9147993641800518, -9.359744268075767, -8.355566954767307, -9.435093172550275, -1.8142532563454168, 7.718775769808058, 4.815763534095428, 6.179160323490571, 7.971786683337427, -0.3152355419362429, 2.532012519659901, -2.4507165050259827, -1.2657683393020047, -7.208572064315863, 9.360797812654866, 0.5207215547156689, 1.6558983800125482, -0.8714362526797252, -9.647953564147546, 0.5092254395615115, -6.494092246908703, -8.12023042663945, -1.8036635420519183, 8.746832433690333, -1.862565415684056, 1.5165037732252014, 4.022622586685401, -7.637217334794686, 6.172832278458181, 5.807780704635261, -7.447647833039479, 1.5926832036178613, -9.659346243340698, 2.6502494003709014, -4.357594169013543, -2.175333172381473, 7.83424558013256, -2.3338666756026356, -6.101085760777581, -1.4960127179541498, -9.152758588557832, 8.223978537417228, -0.8217789064228036, -7.699837843658523, -4.607518580119166, -4.656710917460973, -3.300885278583352, 9.235628804969068, -7.448875742688507, -7.614236930202029, -5.874495549042562, 1.3392857945912358, -9.806572063802648, 9.917687073623178, 3.6332068344248203, -2.210028659894137, 9.568865215600443, 5.940200717072194, -2.3253620266720976, 1.4546297759557447, 6.451750971600461, -7.772142896663741, -6.201887770047296, 3.2052514006370476, -2.08782091268934, 9.581165217495414, 7.97793322460107, 4.413963023301404, -7.756981347742338, -7.114081228020437, -2.3412671820295987, -3.575880367824757, -1.380608497309515, -8.641821571964297, -3.900790076570793, -7.404180361427841, 2.9961286683717443, -5.127904633859579, 4.923588520423742, 6.1463157260182975, 7.125371594135672, -8.886105818265746, 9.495548412844666, 9.685934968882307, 5.787755234881116, 9.968721284158335, -1.9728487512305488, -1.7642672051966706, -4.105085938749582, -9.929365645150916, 0.7918143778140454, -1.7858801370549493, -0.5266510773690065, -4.359186284900753, 1.140541069782671, -0.31247723469349964, 9.582436273716475, -1.4608570604126925, 4.192885381958504, -1.883509270713681, 8.599809019268406, 8.776306746182097, 0.05929846348021428, 4.801857517349431, -5.611803014501033, -0.3783176569383784, -3.98539054971155, -7.645925100164693, 7.56198300724823, 9.371317565694572, 9.634022358598994, -6.57314293187262, -5.147226621383297, -7.835804491422138, -4.51060258952257, 1.3556848800877734, 0.4952550823103934, 0.0939741906810081, -5.682504749808885, -8.796313792157548, -8.19555480107335, -2.272143722374505, 3.645533463178447, -5.231858113747656, -3.5056978231331692, 1.1584484707983655, -9.90820523579407, -2.0636443247520546, -9.240821885195876, -5.957386101570186, 4.118120353577652, -3.8736212925696183, -6.040211573594638, 2.999846101090963, 9.185213011517178, 9.1617676842932, 7.085949003245627, 4.878421190056324, -4.860665051186201, 6.535596927659132, -7.8300170966360145, -7.543067738834692, -0.6736352175144749, -3.0710677859778297, 3.69421699248419, -8.339093463589402, 4.202073835938085, -9.124027130197891, 4.911946892134209, 0.930079135108933, -4.2108372576460145, -5.41809966257418, -6.28671109901056, 4.512863202045924, -6.733935501683101, 1.3199370666494872, 5.388527803651835, -7.986059177177632, -9.875927332414582, -2.195796043789837, -8.461027808737038, 4.55799448942113, 1.0197528342994815, -5.687600726692357, 6.811725345230077, 2.245964620943946, 8.636125267075975, -5.093470727407807, -4.120979716237423, -7.394523172915979, -9.234720527238418, 0.7123573843123321, 8.760251509220247, 7.942042996738515, 2.4522065659453762, -6.337988003682775, -7.170341082758407, 6.559035533662396, -9.632069135668024, -5.2548243768049545, 1.0332644345217208, -3.689461655527464, -9.478181604909533, -3.4335105210622574, 3.8373373204951484, -2.463334057141118, 8.783696514956038, -0.797155777646541, 7.664637577336055, -3.369265503875047, -8.667744252393149, -8.074297835840127, 7.7407597147333895, 8.796544188679398, 8.081984068461662, 6.599545078671632, -0.8633548776090585, -7.344799943899636, 8.416640119130953, 5.048017541830379, 5.1334853765666715, 7.427784944524266, 7.560432409270334, -9.40512075715118, -4.707803919669549, 3.364814937257572, -7.699009489068269, -0.13326392185765457, 4.653884475424006, 9.683975402557504, 4.512725845054144, 4.734072407913414, 4.231770962420484, -7.989076528911139, -1.5436092162849917, -5.5076906161724075, 8.10119248017783, 8.318395509120457, -0.16065202479805407, -5.200858606719294, -4.536138981385502, -1.184592050986307, -7.46624368727308, 8.088212223550265, -1.3851815256685, 0.6483198647752548, -1.4673490496741959, -0.5877516656354196, -7.801313317864116, 1.1972636037258972, 4.260913967789289, -2.306108139662893, 7.16693339737693, 8.630450698014794, -3.091655950216488, -8.066714998005256, -2.201654647689109, 9.07356336336376, -9.899200058462041, 5.58407689077341, -4.2216246522448735, -5.253329407910925, -7.219275076794361, 4.509185566307055, -3.446190642406483, -7.450321300254494, -4.469724791331046, 7.039288305848551, 6.348000976605423, 9.366564844673459, -6.146192740826377, 8.143285272622148, -4.813968965671565, -3.8312908053758647, -7.15609515233095, -4.256948356783907, 3.701877382949835, 5.292970237412275, -8.339426901224794, 3.5782725301849627, 4.00388815089595, 5.999823779728462, -2.1389307260285566, 9.764462908812611, -7.715448244881324, 9.31728971771006, 6.3674795437772715, -4.47469167669116, -3.066836633418946, 1.3434906011101528, -7.844787883611066, -9.13613033857372, -0.9600180732135435, 0.5124500430600083, -1.1674552419965032, -7.642557441696518, 7.889146129976133, 2.5393509763343545, 0.8441724313570518, -8.083882198422556, 1.5581918639222216, -5.682667140385059, 6.2287234874304325, 1.713996065788237, 4.9910623788861805, -5.420200747923934, 8.880300519258984, -3.804201408200953, -0.53151900329315, 2.446391697549071, -2.965935968143083, -6.247789148078171, 8.265788882593558, -0.41662631818376816, -9.516270017129116, 5.158219762358275, -6.036896927867819, -7.893569770543161, 2.4914751955960988, 9.924583096065557, -4.8842707650621335, 6.313079862039807, 0.5105546346711911, 4.322280383067458, 4.13146199415452, 1.6602416238484992, -2.204494802830115, -0.0892774065291917, 1.2498480132706842, -9.395765769715767, 1.6323496616113093, 8.168780531491166, 4.65231402831437, 9.66107390193682, -9.445408450884536, -3.105682132016656, 1.1868859956365796, -9.139113463198987, 2.0620571864607093, 3.9248206322012607, -3.191599941484844, -0.6076669941368689, -2.6964868102407102, -4.819839801522923, -5.153944568009452, -2.896818781163388, 4.9569922073827914, 6.924185978411302, -5.96960117987678, -3.0960652255632155, 3.019786523475915, 4.391989375419081, 3.047384150430581, -2.144885788339592, 7.816543985431618, 1.7398272834266404, -3.306170412706124, 3.469448548863337, -8.470320715942737, -5.450956065282552, 4.4295537469656825, -7.081236423199768, -0.85035973511199, 5.921338094867458, -6.2619142625241135, -9.642925991367338, 2.4496227344842563, -9.5491195912794, 7.38936741614236, -3.7401816935138648, -0.3685840492729575, 4.638903808181604, 7.366295259003866, 7.023158487524697, -4.074386660306004, 9.811146410540768, -6.510286434921053, 7.953924842836919, -9.451082709922593, 2.5693357084774764, -6.239117825740301, -8.71933737575131, -2.8481084171675697, -4.586468225214531, -8.312211438853026, 4.873818512265945, 7.776605658666625, -7.968013472255375, -9.482004513258023, -1.0273756079585858, -5.535894322727577, -7.03309163168556, -3.5275855359571366, -3.2395867553659174, 8.535064499626273, 0.4591350287634466, 1.0275520968039054, 1.9834477806740107, 7.496738261204367, -6.120766316192732, -6.897114570785101, -7.977966130041738, 6.724617765833383, -1.8124255951281363, 0.4908278306736058, -5.2440685031606415, -3.1683296968360297, 6.211497578201083, 5.785199441735738, 2.8471744972878614, -6.287046649297039, 1.8034533130910635, 2.6055861659371935, 9.119420010476762, 8.752174933440951, -6.2921172031818955, -2.2466727977703744, -8.56095470334673, -3.256161297606363, -2.325647962302342, 5.061301859061118, -2.035403267516247, -6.231144366556627, 3.468546116311291, -0.44076219986284215, -9.758773877849457, 7.831456253602212, 0.3059276317890607, 6.2028104460741, -0.09930221020377772, 1.4047113471738086, 5.420827964897704, -3.1327737637624598, 2.6426113667854327, 2.3511002661314073, -5.049632512754181, 6.722214070265984, 4.453527654972735, -0.38478961315912485, -4.211368276461229, 3.826432396633507, -8.605034490391255, 2.925239029107802, -8.415196548169314, 2.6113486899579215, -5.580372657484807, 4.880131942010399, -0.19165523151141173, -5.797575723668389, -4.6504665490673265, 7.854790359187451, -8.852409799795169, -5.009459888439844, -1.8186538938765935, 1.5730514134296687, -3.8295671138261707, 4.660509967131304, 2.7221472607733936, -3.20525681354302, -7.377158495665173, -1.5607659868227621, -7.32570955156056, 6.528592540458167, -2.791250365111857, 0.45042813745682686, -9.354505077768575, 8.332405499306482, -9.677492118328386, -9.406851257148535, -7.827893009760318, 0.5460698510945772, 0.36238512291784986, -4.606362319719901, -7.355187102988346, -9.7128358942742, -9.63335064008088, -5.848566920796829, 4.347098835990881, -2.6427353781956286, 3.13316390190813, -3.8528901601591192, 8.073271733128859, -3.26718426061249, -1.5842059355888356, -3.2113398033877294, 8.50037866093881, -7.270803960085908, -0.6435627783550952, 7.998138999059044, -9.878096457689246, 3.78919624971358, -3.298438469029099, 8.356545399822185, 4.56814195796132, 5.111451455467764, -7.632637598842072, 7.478421194138647, 4.337737437975493, -3.9127213995142256, 9.968105730043078, 7.731577296098045, -2.9844409905247655, 8.469174534364523, -9.005853566526376, 0.03607869298879862, -8.255514186093167, -5.608252645038368, -6.805705118148387, 8.92270403371301, -7.051881030509675, -2.092582058728052, -9.736752613071822, 5.505567002306282, 7.081346786344721, -6.8055972057889, -3.8232409217918484, 9.40226602461339, 9.561787420894781, 6.0060687684591265, -4.864936792261103, 2.734614802668327, 3.7019433932247097, -2.047849690779233, 7.0337572945521245, 1.3443102141328005, 4.88661270964322, 3.4553151272897793, -4.123339549961131, -2.9365739930656742, 0.10791120815024513, 9.10541372862071, 1.7122299429275412, 8.875009581353854, -7.79848342694595, -0.1836003846497043, 3.4569960944595692, -9.766388264319536, 1.9190522301755735, 6.333278822156178, -0.22142724170328876, 6.547593667290098, -0.020729781604673647, 7.485925287309772, 4.760290703433828, -8.841086587323394, -9.74148192137835, 5.481827496459337, 6.997370929137645, 5.396061381504655, 9.65752955269761, 2.9106211993565534, -3.0202705269120607, -0.03268550301327622, -6.6334252546470545, 2.213169291608313, 8.003753163075057, 9.227982138072587, -5.01946127418587, -3.5708218551168898, -8.92387324559932, -4.8540307734324495, 0.9984864546334009, -8.886472891386116, -1.055506459939771, 8.14993867772699, 4.535597381238892, 3.3510328669476124, 9.358791793548711, -9.711726958626459]
BIASES_LIST = [0.6148688746160538, -6.606045871078097, -5.906118118686248, 6.615618938024916, 4.274936937460545, 9.101291065781613, -7.963297409524612, 9.713489886365924, -0.7763500296798824, -9.562195944176215, -2.432743306349952, -3.8619092185665753, 8.37140087947111, -9.833049536376537, 0.939351001942029, -1.6186662735598905, -3.7101515441649173, 2.205972332176758, 3.6191056840946896, 8.803688029975259, -6.560487953561262, 0.28346343542747476, -4.281726864531996, 2.2738560134158767, 3.232099272625339, -8.9399552772156, 5.507964952773207, -4.536179668633342, -5.079705383847299, 7.4882409001411006, -7.249762070584234, -3.248743136233994, 1.6058540195406827, -7.200587335326139, 3.445225893331738, 9.275630514842447]
SHAPE = [27, 16, 16, 4]

IN_TRAINING = True

## NEURAL NET FUNCTIONS ##
if IN_TRAINING:
    import numpy as np
    def sigmoid_list(x):
        return 1/(1+np.exp(-x))
    def dot(x, y):
        return np.dot(x,y)
    def vector_sum(x, y):
        return x+y
    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = dot(weight, v)
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v
else:
    def sigmoid(x):
        return 1/(1+math.exp(-x))
    def sigmoid_list(x):
        return [1/(1+math.exp(-v)) for v in x]

    def dot(x, y):
        return sum(a*b for a,b in zip(x,y))

    def vector_sum(x, y):
        return [a+b for a,b in zip(x,y)]

    class NeuralNet():
        def __init__(self, weights, biases):
            self.weights = weights
            self.biases = biases
        def compute(self, inputs):
            v = inputs[:]
            for weight, b in zip(weights, biases):
                v = [dot(v, w) for w in weight]
                v = vector_sum(v, b)
                v = sigmoid_list(v)
            return v

def list_to_weights(lis, shape=[27, 16, 16, 4]):
    weights = []
    index = 0
    for i in range(len(shape) - 1):
        row = []
        dx = shape[i]
        for j in range(shape[i+1]):
            row.append(lis[index:index + dx])
            index += dx
        weights.append(row)
    return weights

def list_to_biases(lis, shape=[27, 16, 16, 4]):
    biases = []
    index = 0
    for i in shape[1:]:
        biases.append(lis[index: index + i])
        index += i
    return biases

weights = list_to_weights(WEIGHT_LIST, SHAPE)
biases = list_to_biases(BIASES_LIST, SHAPE)
if IN_TRAINING:
    weights = np.array(weights)
    biases = np.array(biases)

nn = NeuralNet(weights, biases)

def check_space_wrapper(r, c, board_size, team=Team.WHITE, opp_team=Team.BLACK):
    # check space, except doesn't hit you with game errors
    if r < 0 or c < 0 or c >= board_size or r >= board_size:
        return 0
    try:
        team_there = check_space(r, c)
        if team_there is team:
            return 1
        elif team_there is opp_team:
            return -1
        return 0
    except:
        return 0

def flatten(board):
    lis = []
    for row in board:
        lis += row
    return lis

def copy(board):
    return [row.copy() for row in board]

def pawn_turn():
    board_size = get_board_size()
    team = get_team()
    opp_team = Team.WHITE if team == Team.BLACK else team.BLACK
    row, col = get_location()
    
    if team == Team.WHITE and row == board_size - 1:
        return
    if team == Team.BLACK and row == 0:
        return
    
    board = [[check_space_wrapper(row+y, col+x, board_size, team, opp_team) for x in range(-2, 3)] for y in range(-2, 3)]

    if team == Team.WHITE:
        forward = 1
    else:
        forward = -1
        board = board[::-1]

    inputs = flatten(board) + [row/board_size, col/board_size]
    results = nn.compute(inputs)
    best_move = 0
    val = 0
    for i, v in enumerate(results):
        if v >= val:
            val = v
            best_move = i

    if best_move == 0:
        return
    elif best_move == 1:
        if board[3][2] == 0:
            move_forward()
        return
    elif best_move == 2:
        if board[3][1] == -1:
            capture(row + forward, col - 1)
        return
    elif best_move == 3:
        if board[3][3] == -1:
            capture(row + forward, col + 1)
        return

def overlord_turn():
    board_size = get_board_size()
    team = get_team()
    board = get_board()
    board = [[0 if not x else 1 if x == team else -1 for x in row] for row in board]
    cols = [0 for i in range(board_size)]
    for row in board:
        for i,x in enumerate(row):
            cols[i] = cols[i] + x
            if i > 0:
                cols[i-1] = cols[i-1] + x/2
            if i < board_size - 1:
                cols[i+1] = cols[i+1] + x/2
    m = 10000
    index = [0]
    spawn_row = 0 if team == Team.WHITE else board_size - 1
    found = False
    for i in range(board_size):
        if not check_space(spawn_row, i):
            if cols[i] < m:
                found = True
                m = cols[i]
                index = [i]
            elif cols[i] == m:
                index.append(i)
    if found:
        spawn(spawn_row, random.choice(index))

def turn():
    """
    MUST be defined for robot to run
    This function will be called at the beginning of every turn and should contain the bulk of your robot commands
    """
    
    robottype = get_type()
    if robottype == RobotType.PAWN:
        pawn_turn()
    else:
        overlord_turn()
    bytecode = get_bytecode()

